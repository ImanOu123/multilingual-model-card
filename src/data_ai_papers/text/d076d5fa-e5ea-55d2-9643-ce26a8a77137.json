{"title": "Neural Ordinary Differential Equations", "authors": "Ricky T Q Chen; Yulia Rubanova; Jesse Bettencourt; David Duvenaud", "pub_date": "2019-12-14", "abstract": "We introduce a new family of deep neural network models. Instead of specifying a discrete sequence of hidden layers, we parameterize the derivative of the hidden state using a neural network. The output of the network is computed using a blackbox differential equation solver. These continuous-depth models have constant memory cost, adapt their evaluation strategy to each input, and can explicitly trade numerical precision for speed. We demonstrate these properties in continuous-depth residual networks and continuous-time latent variable models. We also construct continuous normalizing flows, a generative model that can train by maximum likelihood, without partitioning or ordering the data dimensions. For training, we show how to scalably backpropagate through any ODE solver, without access to its internal operations. This allows end-to-end training of ODEs within larger models.", "sections": [{"heading": "", "text": "Models such as residual networks, recurrent neural network decoders, and normalizing flows build complicated transformations by composing a sequence of transformations to a hidden state:\nh t+1 = h t + f (h t , \u03b8 t )(1)\nwhere t \u2208 {0 . . . T } and h t \u2208 R D . These iterative updates can be seen as an Euler discretization of a continuous transformation Ruthotto and Haber, 2018).\nWhat happens as we add more layers and take smaller steps? In the limit, we parameterize the continuous dynamics of hidden units using an ordinary differential equation (ODE) specified by a neural network:\ndh(t) dt = f (h(t), t, \u03b8)(2)\nStarting from the input layer h(0), we can define the output layer h(T ) to be the solution to this ODE initial value problem at some time T . This value can be computed by a black-box differential equation solver, which evaluates the hidden unit dynamics f wherever necessary to determine the solution with the desired accuracy. Figure 1 contrasts these two approaches.\nDefining and evaluating models using ODE solvers has several benefits:\nMemory efficiency In Section 2, we show how to compute gradients of a scalar-valued loss with respect to all inputs of any ODE solver, without backpropagating through the operations of the solver. Not storing any intermediate quantities of the forward pass allows us to train our models with constant memory cost as a function of depth, a major bottleneck of training deep models.\nFigure 2: Reverse-mode differentiation of an ODE solution. The adjoint sensitivity method solves an augmented ODE backwards in time. The augmented system contains both the original state and the sensitivity of the loss with respect to the state.\nIf the loss depends directly on the state at multiple observation times, the adjoint state must be updated in the direction of the partial derivative of the loss with respect to each observation.\nTo optimize L, we require gradients with respect to \u03b8. The first step is to determining how the gradient of the loss depends on the hidden state z(t) at each instant. This quantity is called the adjoint a(t) = \u2202L /\u2202z(t). Its dynamics are given by another ODE, which can be thought of as the instantaneous analog of the chain rule:\nda(t) dt = \u2212a(t) T \u2202f (z(t), t, \u03b8) \u2202z (4\n)\nWe can compute \u2202L /\u2202z(t0) by another call to an ODE solver. This solver must run backwards, starting from the initial value of \u2202L /\u2202z(t1). One complication is that solving this ODE requires the knowing value of z(t) along its entire trajectory. However, we can simply recompute z(t) backwards in time together with the adjoint, starting from its final value z(t 1 ).\nComputing the gradients with respect to the parameters \u03b8 requires evaluating a third integral, which depends on both z(t) and a(t):\ndL d\u03b8 = \u2212 t0 t1 a(t) T \u2202f (z(t), t, \u03b8) \u2202\u03b8 dt (5)\nThe vector-Jacobian products a(t) T \u2202f \u2202z and a(t) T \u2202f \u2202\u03b8 in ( 4) and ( 5) can be efficiently evaluated by automatic differentiation, at a time cost similar to that of evaluating f . All integrals for solving z, a and \u2202L \u2202\u03b8 can be computed in a single call to an ODE solver, which concatenates the original state, the adjoint, and the other partial derivatives into a single vector. Algorithm 1 shows how to construct the necessary dynamics, and call an ODE solver to compute all gradients at once. Algorithm 1 Reverse-mode derivative of an ODE initial value problem Input: dynamics parameters \u03b8, start time t 0 , stop time t 1 , final state z(t 1 ), loss gradient \u2202L /\u2202z(t1)\ns 0 = [z(t 1 ), \u2202L \u2202z(t1) , 0 |\u03b8| ] Define initial augmented state def aug_dynamics([z(t), a(t), \u2022], t, \u03b8): Define dynamics on augmented state return [f (z(t), t, \u03b8), \u2212a(t) T \u2202f \u2202z , \u2212a(t) T \u2202f \u2202\u03b8 ] Compute vector-Jacobian products [z(t 0 ), \u2202L \u2202z(t0) , \u2202L \u2202\u03b8 ] = ODESolve(s 0 , aug_dynamics, t 1 , t 0 , \u03b8) Solve reverse-time ODE return \u2202L \u2202z(t0) , \u2202L \u2202\u03b8", "publication_ref": ["b49"], "figure_ref": ["fig_0"], "table_ref": []}, {"heading": "Return gradients", "text": "Most ODE solvers have the option to output the state z(t) at multiple times. When the loss depends on these intermediate states, the reverse-mode derivative must be broken into a sequence of separate solves, one between each consecutive pair of output times (Figure 2). At each observation, the adjoint must be adjusted in the direction of the corresponding partial derivative \u2202L /\u2202z(ti).\nThe results above extend those of Stapor et al. (2018, section 2.4.2). An extended version of Algorithm 1 including derivatives w.r.t. t 0 and t 1 can be found in Appendix C. Detailed derivations are provided in Appendix B. Appendix D provides Python code which computes all derivatives for scipy.integrate.odeint by extending the autograd automatic differentiation package. This code also supports all higher-order derivatives. We have since released a PyTorch (Paszke et al., 2017) implementation, including GPU-based implementations of several standard ODE solvers at github.com/rtqichen/torchdiffeq.", "publication_ref": ["b40"], "figure_ref": [], "table_ref": []}, {"heading": "Replacing residual networks with ODEs for supervised learning", "text": "In this section, we experimentally investigate the training of neural ODEs for supervised learning.\nSoftware To solve ODE initial value problems numerically, we use the implicit Adams method implemented in LSODE and VODE and interfaced through the scipy.integrate package. Being an implicit method, it has better guarantees than explicit methods such as Runge-Kutta but requires solving a nonlinear optimization problem at every step. This setup makes direct backpropagation through the integrator difficult. We implement the adjoint sensitivity method in Python's autograd framework (Maclaurin et al., 2015). For the experiments in this section, we evaluated the hidden state dynamics and their derivatives on the GPU using Tensorflow, which were then called from the Fortran ODE solvers, which were called from Python autograd code.  1 shows test error, number of parameters, and memory cost. L denotes the number of layers in the ResNet, andL is the number of function evaluations that the ODE solver requests in a single forward pass, which can be interpreted as an implicit number of layers. We find that ODE-Nets and RK-Nets can achieve around the same performance as the ResNet.\nError Control in ODE-Nets ODE solvers can approximately ensure that the output is within a given tolerance of the true solution. Changing this tolerance changes the behavior of the network. We first verify that error can indeed be controlled in Figure 3a. The time spent by the forward call is proportional to the number of function evaluations (Figure 3b), so tuning the tolerance gives us a trade-off between accuracy and computational cost. One could train with high accuracy, but switch to a lower accuracy at test time. Figure 3c) shows a surprising result: the number of evaluations in the backward pass is roughly half of the forward pass. This suggests that the adjoint sensitivity method is not only more memory efficient, but also more computationally efficient than directly backpropagating through the integrator, because the latter approach will need to backprop through each function evaluation in the forward pass.\nNetwork Depth It's not clear how to define the 'depth' of an ODE solution. A related quantity is the number of evaluations of the hidden state dynamics required, a detail delegated to the ODE solver and dependent on the initial state or input. Figure 3d shows that he number of function evaluations increases throughout training, presumably adapting to increasing complexity of the model.", "publication_ref": ["b36"], "figure_ref": ["fig_1", "fig_1", "fig_1", "fig_1"], "table_ref": ["tab_0"]}, {"heading": "Continuous Normalizing Flows", "text": "The discretized equation (1) also appears in normalizing flows (Rezende and Mohamed, 2015) and the NICE framework (Dinh et al., 2014). These methods use the change of variables theorem to compute exact changes in probability if samples are transformed through a bijective function f :\nz 1 = f (z 0 ) =\u21d2 log p(z 1 ) = log p(z 0 ) \u2212 log det \u2202f \u2202z 0 (6)\nAn example is the planar normalizing flow (Rezende and Mohamed, 2015):\nz(t + 1) = z(t) + uh(w T z(t) + b), log p(z(t + 1)) = log p(z(t)) \u2212 log 1 + u T \u2202h \u2202z (7)\nGenerally, the main bottleneck to using the change of variables formula is computing of the determinant of the Jacobian \u2202f /\u2202z, which has a cubic cost in either the dimension of z, or the number of hidden units. Recent work explores the tradeoff between the expressiveness of normalizing flow layers and computational cost (Kingma et al., 2016;Tomczak and Welling, 2016;Berg et al., 2018). Surprisingly, moving from a discrete set of layers to a continuous transformation simplifies the computation of the change in normalizing constant: Theorem 1 (Instantaneous Change of Variables). Let z(t) be a finite continuous random variable with probability p(z(t)) dependent on time. Let dz dt = f (z(t), t) be a differential equation describing a continuous-in-time transformation of z(t). Assuming that f is uniformly Lipschitz continuous in z and continuous in t, then the change in log probability also follows a differential equation,\n\u2202 log p(z(t)) \u2202t = \u2212tr df dz(t)(8)\nProof in Appendix A. Instead of the log determinant in (6), we now only require a trace operation. Also unlike standard finite flows, the differential equation f does not need to be bijective, since if uniqueness is satisfied, then the entire transformation is automatically bijective.\nAs an example application of the instantaneous change of variables, we can examine the continuous analog of the planar flow, and its change in normalization constant:\ndz(t) dt = uh(w T z(t) + b), \u2202 log p(z(t)) \u2202t = \u2212u T \u2202h \u2202z(t)(9)\nGiven an initial distribution p(z(0)), we can sample from p(z(t)) and evaluate its density by solving this combined ODE.\nUsing multiple hidden units with linear cost While det is not a linear function, the trace function is, which implies tr( n J n ) = n tr(J n ). Thus if our dynamics is given by a sum of functions then the differential equation for the log density is also a sum:\ndz(t) dt = M n=1 f n (z(t)), d log p(z(t)) dt = M n=1 tr \u2202f n \u2202z (10)\nThis means we can cheaply evaluate flow models having many hidden units, with a cost only linear in the number of hidden units M . Evaluating such 'wide' flow layers using standard normalizing flows costs O(M 3 ), meaning that standard NF architectures use many layers of only a single hidden unit.\nTime-dependent dynamics We can specify the parameters of a flow as a function of t, making the differential equation f (z(t), t) change with t. This is parameterization is a kind of hypernetwork (Ha et al., 2016). We also introduce a gating mechanism for each hidden unit, dz dt = n \u03c3 n (t)f n (z) where \u03c3 n (t) \u2208 (0, 1) is a neural network that learns when the dynamic f n (z) should be applied. We call these models continuous normalizing flows (CNF).", "publication_ref": ["b47", "b12", "b47", "b28", "b57", "b5", "b19"], "figure_ref": [], "table_ref": []}, {"heading": "Experiments with Continuous Normalizing Flows", "text": "We first compare continuous and discrete planar flows at learning to sample from a known distribution. We show that a planar CNF with M hidden units can be at least as expressive as a planar NF with K = M layers, and sometimes much more expressive.\nDensity matching We configure the CNF as described above, and train for 10,000 iterations using Adam (Kingma and Ba, 2014). In contrast, the NF is trained for 500,000 iterations using RMSprop (Hinton et al., 2012), as suggested by Rezende and Mohamed (2015). For this task, we minimize KL (q(x) p(x)) as the loss function where q is the flow model and the target density p(\u2022) can be evaluated. Figure 4 shows that CNF generally achieves lower loss.\nMaximum Likelihood Training A useful property of continuous-time normalizing flows is that we can compute the reverse transformation for about the same cost as the forward pass, which cannot be said for normalizing flows. This lets us train the flow on a density estimation task by performing maximum likelihood estimation, which maximizes E p(x) [log q(x)] where q(\u2022) is computed using the appropriate change of variables theorem, then afterwards reverse the CNF to generate random samples from q(x).\nFor this task, we use 64 hidden units for CNF, and 64 stacked one-hidden-unit layers for NF. Figure 5 shows the learned dynamics.  transformed distribution after a small amount of time which shows the locations of the initial planar flows. Interestingly, to fit the Two Circles distribution, the CNF rotates the planar flows so that the particles can be evenly spread into circles. While the CNF transformations are smooth and interpretable, we find that NF transformations are very unintuitive and this model has difficulty fitting the two moons dataset in Figure 5b.", "publication_ref": ["b26", "b24", "b47"], "figure_ref": ["fig_2", "fig_2"], "table_ref": []}, {"heading": "A generative latent function time-series model", "text": "Applying neural networks to irregularly-sampled data such as medical records, network traffic, or neural spiking data is difficult. Typically, observations are put into bins of fixed duration, and the latent dynamics are discretized in the same way. This leads to difficulties with missing data and illdefined latent variables. Missing data can be addressed using generative time-series models (\u00c1lvarez and Lawrence, 2011;Futoma et al., 2017;Mei and Eisner, 2017;Soleimani et al., 2017a) or data imputation (Che et al., 2018). Another approach concatenates time-stamp information to the input of an RNN (Choi et al., 2016;Lipton et al., 2016;Du et al., 2016;Li, 2017).\nWe present a continuous-time, generative approach to modeling time series. Our model represents each time series by a latent trajectory. Each trajectory is determined from a local initial state, z t0 , and a global set of latent dynamics shared across all time series. Given observation times t 0 , t 1 , . . . , t N and an initial state z t0 , an ODE solver produces z t1 , . . . , z t N , which describe the latent state at each observation.We define this generative model formally through a sampling procedure:\nz t0 \u223c p(z t0 ) (11) z t1 , z t2 , . . . , z t N = ODESolve(z t0 , f, \u03b8 f , t 0 , . . . , t N ) (12) each x ti \u223c p(x|z ti , \u03b8 x ) (13\n)\nFunction f is a time-invariant function that takes the value z at the current time step and outputs the gradient: \u2202z(t) /\u2202t = f (z(t), \u03b8 f ). We parametrize this function using a neural net. Because f is time- Poisson Process likelihoods The fact that an observation occurred often tells us something about the latent state. For example, a patient may be more likely to take a medical test if they are sick. The rate of events can be parameterized by a function of the latent state: p(event at time t| z(t)) = \u03bb(z(t)).\n\u00b5 z t 0 z t 1 RNN encoder Latent space Data spaceq (z t0 |x t0 ...x tN ) h t 0 h t 1 h t N ODE Solve(z t0 , f, \u2713 f , t 0 , ..., t M ) z t M \u2026 z t N z t N +1 Observed Unobserved x(t) t 0 t 1 t N Time t N +1 t M Prediction Extrapolation t 0 t 1 t N t N +1 t M x(t)\nGiven this rate function, the likelihood of a set of independent observation times in the interval [t start , t end ] is given by an inhomogeneous Poisson process (Palm, 1943):\nlog p(t 1 . . . t N | t start , t end ) = N i=1 log \u03bb(z(t i )) \u2212 tend tstart \u03bb(z(t))dt\nWe can parameterize \u03bb(\u2022) using another neural network. Conveniently, we can evaluate both the latent trajectory and the Poisson process likelihood together in a single call to an ODE solver. Figure 7 shows the event rate learned by such a model on a toy dataset. A Poisson process likelihood on observation times can be combined with a data likelihood to jointly model all observations and the times at which they were made.", "publication_ref": ["b0", "b16", "b37", "b53", "b9", "b10", "b33", "b13", "b32", "b39"], "figure_ref": [], "table_ref": []}, {"heading": "Time-series Latent ODE Experiments", "text": "We investigate the ability of the latent ODE model to fit and extrapolate time series. The recognition network is an RNN with 25 hidden units. We use a 4-dimensional latent space. We parameterize the dynamics function f with a one-hidden-layer network with 20 hidden units. The decoder computing p(x ti |z ti ) is another neural network with one hidden layer with 20 hidden units. Our baseline was a recurrent neural net with 25 hidden units trained to minimize negative Gaussian log-likelihood. We trained a second version of this RNN whose inputs were concatenated with the time difference to the next observation to aid RNN with irregular observations.\nBi-directional spiral dataset We generated a dataset of 1000 2-dimensional spirals, each starting at a different point, sampled at 100 equally-spaced timesteps. The dataset contains two types of spirals: half are clockwise while the other half counter-clockwise. To make the task more realistic, we add gaussian noise to the observations.\nFigure 9: Data-space trajectories decoded from varying one dimension of z t0 . Color indicates progression through time, starting at purple and ending at red. Note that the trajectories on the left are counter-clockwise, while the trajectories on the right are clockwise.\nTime series with irregular time points To generate irregular timestamps, we randomly sample points from each trajectory without replacement (n = {30, 50, 100}). We report predictive rootmean-squared error (RMSE) on 100 time points extending beyond those that were used for training.\nTable 2 shows that the latent ODE has substantially lower predictive RMSE. Latent space interpolation Figure 8c shows latent trajectories projected onto the first two dimensions of the latent space. The trajectories form two separate clusters of trajectories, one decoding to clockwise spirals, the other to counter-clockwise. Figure 9 shows that the latent trajectories change smoothly as a function of the initial point z(t 0 ), switching from a clockwise to a counter-clockwise spiral.", "publication_ref": [], "figure_ref": [], "table_ref": ["tab_3"]}, {"heading": "Scope and Limitations", "text": "Minibatching The use of mini-batches is less straightforward than for standard neural networks. One can still batch together evaluations through the ODE solver by concatenating the states of each batch element together, creating a combined ODE with dimension D \u00d7 K. In some cases, controlling error on all batch elements together might require evaluating the combined system K times more often than if each system was solved individually. However, in practice the number of evaluations did not increase substantially when using minibatches.\nUniqueness When do continuous dynamics have a unique solution? Picard's existence theorem (Coddington and Levinson, 1955) states that the solution to an initial value problem exists and is unique if the differential equation is uniformly Lipschitz continuous in z and continuous in t. This theorem holds for our model if the neural network has finite weights and uses Lipshitz nonlinearities, such as tanh or relu.\nSetting tolerances Our framework allows the user to trade off speed for precision, but requires the user to choose an error tolerance on both the forward and reverse passes during training. For sequence modeling, the default value of 1.5e-8 was used. In the classification and density estimation experiments, we were able to reduce the tolerance to 1e-3 and 1e-5, respectively, without degrading performance.\nReconstructing forward trajectories Reconstructing the state trajectory by running the dynamics backwards can introduce extra numerical error if the reconstructed trajectory diverges from the original. This problem can be addressed by checkpointing: storing intermediate values of z on the forward pass, and reconstructing the exact forward trajectory by re-integrating from those points. We did not find this to be a practical problem, and we informally checked that reversing many layers of continuous normalizing flows with default tolerances recovered the initial states.", "publication_ref": ["b11"], "figure_ref": [], "table_ref": []}, {"heading": "Related Work", "text": "The use of the adjoint method for training continuous-time neural networks was previously proposed (LeCun et al., 1988;Pearlmutter, 1995), though was not demonstrated practically. The interpretation of residual networks He et al. (2016a) as approximate ODE solvers spurred research into exploiting reversibility and approximate computation in ResNets (Chang et al., 2017;. We demonstrate these same properties in more generality by directly using an ODE solver.\nAdaptive computation One can adapt computation time by training secondary neural networks to choose the number of evaluations of recurrent or residual networks (Graves, 2016;Jernite et al., 2016;Figurnov et al., 2017;Chang et al., 2018). However, this introduces overhead both at training and test time, and extra parameters that need to be fit. In contrast, ODE solvers offer well-studied, computationally cheap, and generalizable rules for adapting the amount of computation.\nConstant memory backprop through reversibility Recent work developed reversible versions of residual networks (Gomez et al., 2017;Chang et al., 2017), which gives the same constant memory advantage as our approach. However, these methods require restricted architectures, which partition the hidden units. Our approach does not have these restrictions.\nLearning differential equations Much recent work has proposed learning differential equations from data. One can train feed-forward or recurrent neural networks to approximate a differential equation (Raissi and Karniadakis, 2018;Raissi et al., 2018a;Long et al., 2017), with applications such as fluid simulation (Wiewel et al., 2018). There is also significant work on connecting Gaussian Processes (GPs) and ODE solvers (Schober et al., 2014). GPs have been adapted to fit differential equations (Raissi et al., 2018b) and can naturally model continuous-time effects and interventions (Soleimani et al., 2017b;Schulam and Saria, 2017). Ryder et al. (2018) use stochastic variational inference to recover the solution of a given stochastic differential equation.\nDifferentiating through ODE solvers The dolfin library (Farrell et al., 2013) implements adjoint computation for general ODE and PDE solutions, but only by backpropagating through the individual operations of the forward solver. The Stan library (Carpenter et al., 2015) implements gradient estimation through ODE solutions using forward sensitivity analysis. However, forward sensitivity analysis is quadratic-time in the number of variables, whereas the adjoint sensitivity analysis is linear (Carpenter et al., 2015;Zhang and Sandu, 2014). Melicher et al. (2017) used the adjoint method to train bespoke latent dynamic models.\nIn contrast, by providing a generic vector-Jacobian product, we allow an ODE solver to be trained end-to-end with any other differentiable model components. While use of vector-Jacobian products for solving the adjoint method has been explored in optimal control (Andersson, 2013;Andersson et al., In Press, 2018), we highlight the potential of a general integration of black-box ODE solvers into automatic differentiation (Baydin et al., 2018) for deep learning and generative modeling.", "publication_ref": ["b30", "b41", "b22", "b7", "b18", "b25", "b15", "b8", "b17", "b7", "b43", "b44", "b34", "b58", "b51", "b45", "b54", "b52", "b50", "b14", "b6", "b6", "b59", "b38", "b2", "b4"], "figure_ref": [], "table_ref": []}, {"heading": "Conclusion", "text": "We investigated the use of black-box ODE solvers as a model component, developing new models for time-series modeling, supervised learning, and density estimation. These models are evaluated adaptively, and allow explicit control of the tradeoff between computation speed and accuracy. Finally, we derived an instantaneous version of the change of variables formula, and developed continuous-time normalizing flows, which can scale to large layer sizes.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Acknowledgements", "text": "We can write the differential equation \u2202 log p(z(t)) \u2202t using the discrete change of variables formula, and the definition of the derivative: \n\u2202 log p(z(t)) \u2202t = lim \u03b5\u21920 + log p(z(t)) \u2212 log det \u2202 \u2202z T\u03b5(z(t)) \u2212 log p(z(t)) \u03b5(\nThe derivative of the determinant can be expressed using Jacobi's formula, which gives\n\u2202 log p(z(t)) \u2202t = \u2212 lim \u03b5\u21920 + tr adj \u2202 \u2202z T\u03b5(z(t)) \u2202 \u2202\u03b5 \u2202 \u2202z T\u03b5(z(t)) (21) = \u2212tr \uf8eb \uf8ec \uf8ec \uf8ec \uf8ed lim \u03b5\u21920 + adj \u2202 \u2202z T\u03b5(z(t)) =I lim \u03b5\u21920 + \u2202 \u2202\u03b5 \u2202 \u2202z T\u03b5(z(t)) \uf8f6 \uf8f7 \uf8f7 \uf8f7 \uf8f8 (22) = \u2212tr lim \u03b5\u21920 + \u2202 \u2202\u03b5 \u2202 \u2202z T\u03b5(z(t))(23)\nSubstituting T\u03b5 with its Taylor series expansion and taking the limit, we complete the proof.\n\u2202 log p(z(t)) \u2202t = \u2212tr lim \u03b5\u21920 + \u2202 \u2202\u03b5 \u2202 \u2202z z + \u03b5f (z(t), t) + O(\u03b5 2 ) + O(\u03b5 3 ) + . . .(24)\n= \u2212tr lim Hamiltonian CNF. The continuous analog of NICE (Dinh et al., 2014) is a Hamiltonian flow, which splits the data into two equal partitions and is a volume-preserving transformation, implying that \u2202 log p(z) \u2202t = 0. We can verify this. Let\ndz 1:d dt dz d+1:D dt = f (z d+1:D ) g(z 1:d ) (29)\nThen because the Jacobian is all zeros on its diagonal, the trace is zero. This is a volume-preserving flow.", "publication_ref": ["b12"], "figure_ref": [], "table_ref": []}, {"heading": "A.2 Connection to Fokker-Planck and Liouville PDEs", "text": "The Fokker-Planck equation is a well-known partial differential equation (PDE) that describes the probability density function of a stochastic differential equation as it changes with time. We relate the instantaneous change of variables to the special case of Fokker-Planck with zero diffusion, the Liouville equation.\nAs with the instantaneous change of variables, let z(t) \u2208 R D evolve through time following dz(t) dt = f (z(t), t). Then Liouville equation describes the change in density of z-a fixed point in space-as a PDE,\n\u2202p(z, t) \u2202t = \u2212 D i=1 \u2202 \u2202zi [fi(z, t)p(z, t)](30)\nHowever, ( 30) cannot be easily used as it requires the partial derivatives of p(z,t) \u2202z , which is typically approximated using finite difference. This type of PDE has its own literature on efficient and accurate simulation (Stam, 1999).\nInstead of evaluating p(\u2022, t) at a fixed point, if we follow the trajectory of a particle z(t), we obtain \n= D i=1 \u2202p(z(t), t) \u2202zi(t) \u2202zi(t) \u2202t \u2212 D i=1 \u2202fi(z(t), t) \u2202zi p(z(t), t) \u2212 D i=1 fi(z(t), t) \u2202p(z(t), t) \u2202zi(t) = \u2212 D i=1 \u2202fi(z(t), t) \u2202zi p(z(t), t)(31)\nWe arrive at the instantaneous change of variables by taking the log,\n\u2202 log p(z(t), t) \u2202t = 1 p(z(t), t) \u2202p(z(t), t) \u2202t = \u2212 D i=1 \u2202fi(z(t), t) \u2202zi (32)\nWhile still a PDE, (32) can be combined with z(t) to form an ODE of size D + 1,\nd dt z(t) log p(z(t), t) = f (z(t), t) \u2212 D i=1 \u2202f i (z(t),t) \u2202t(33)\nCompared to the Fokker-Planck and Liouville equations, the instantaneous change of variables is of more practical impact as it can be numerically solved much more easily, requiring an extra state of D for following the trajectory of z(t). Whereas an approach based on finite difference approximation of the Liouville equation would require a grid size that is exponential in D.", "publication_ref": ["b55"], "figure_ref": [], "table_ref": []}, {"heading": "Appendix B A Modern Proof of the Adjoint Method", "text": "We present an alternative proof to the adjoint method (Pontryagin et al., 1962) that is short and easy to follow.", "publication_ref": ["b42"], "figure_ref": [], "table_ref": []}, {"heading": "B.1 Continuous Backpropagation", "text": "Let z(t) follow the differential equation dz(t) dt = f (z(t), t, \u03b8), where \u03b8 are the parameters. We will prove that if we define an adjoint state\na(t) = dL dz(t)(34)\nthen it follows the differential equation\nda(t) dt = \u2212a(t) \u2202f (z(t), t, \u03b8) \u2202z(t)(35)\nFor ease of notation, we denote vectors as row vectors, whereas the main text uses column vectors.\nThe adjoint state is the gradient with respect to the hidden state at a specified time t. In standard neural networks, the gradient of a hidden layer ht depends on the gradient from the next layer ht+1 by chain rule\ndL dht = dL dht+1 dht+1 dht . (36\n)\nWith a continuous hidden state, we can write the transformation after an \u03b5 change in time as\nz(t + \u03b5) = t+\u03b5 t f (z(t), t, \u03b8)dt + z(t) = T\u03b5(z(t), t)(37)\nand chain rule can also be applied\ndL \u2202z(t) = dL dz(t + \u03b5) dz(t + \u03b5) dz(t) or a(t) = a(t + \u03b5) \u2202T\u03b5(z(t), t) \u2202z(t)(38)\nThe proof of ( 35) follows from the definition of derivative:\nda(t) dt = lim \u03b5\u21920 + a(t + \u03b5) \u2212 a(t) \u03b5 (39) = lim \u03b5\u21920 + a(t + \u03b5) \u2212 a(t + \u03b5) \u2202 \u2202z(t) T\u03b5(z(t)) \u03b5\n(by Eq 38)\n= lim\n\u03b5\u21920 + a(t + \u03b5) \u2212 a(t + \u03b5) \u2202 \u2202z(t) z(t) + \u03b5f (z(t), t, \u03b8) + O(\u03b5 2 ) \u03b5 (Taylor series around z(t))(41)\n= lim\n\u03b5\u21920 + a(t + \u03b5) \u2212 a(t + \u03b5) I + \u03b5 \u2202f (z(t),t,\u03b8) \u2202z(t) + O(\u03b5 2 ) \u03b5 (42) = lim \u03b5\u21920 + \u2212\u03b5a(t + \u03b5) \u2202f (z(t),t,\u03b8) \u2202z(t) + O(\u03b5 2 ) \u03b5 (43) = lim \u03b5\u21920 + \u2212a(t + \u03b5) \u2202f (z(t), t, \u03b8) \u2202z(t) + O(\u03b5) (44) = \u2212a(t) \u2202f (z(t), t, \u03b8) \u2202z(t)(45)\nWe pointed out the similarity between adjoint method and backpropagation (eq. 38). Similarly to backpropagation, ODE for the adjoint state needs to be solved backwards in time. We specify the constraint on the last time point, which is simply the gradient of the loss wrt the last time point, and can obtain the gradients with respect to the hidden state at any time, including the initial value. ", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "B.2 Gradients wrt. \u03b8 and t", "text": "We can generalize ( 35) to obtain gradients with respect to \u03b8-a constant wrt. t-and and the initial and end times, t0 and tN . We view \u03b8 and t as states with constant differential equations and write \u2202\u03b8(t) \u2202t = 0 dt(t) dt = 1 (47)\nWe can then combine these with z to form an augmented state 1 with corresponding differential equation and adjoint state, \n\uf8f9 \uf8fb (t)(49)\nwhere each 0 is a matrix of zeros with the appropriate dimensions. We plug this into ( 35) to obtain \nThe first element is the adjoint differential equation ( 35), as expected. The second element can be used to obtain the total gradient with respect to the parameters, by integrating over the full interval and setting a \u03b8 (tN ) = 0.\ndL d\u03b8 = a \u03b8 (t0) = \u2212 Between ( 35), ( 46), ( 51), and ( 52) we have gradients for all possible inputs to an initial value problem solver. ", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "", "text": "We thank Wenyi Wang and Geoff Roeder for help with proofs, and Daniel Duckworth, Ethan Fetaya, Hossein Soleimani, Eldad Haber, Ken Caluwaerts, Daniel Flam-Shepherd, and Harry Braviner for feedback. We thank Chris Rackauckas, Dougal Maclaurin, and Matthew James Johnson for helpful discussions. We also thank Yuval Frommer for pointing out an unsupported claim about parameter efficiency.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Appendix A Proof of the Instantaneous Change of Variables Theorem", "text": "Theorem (Instantaneous Change of Variables). Let z(t) be a finite continuous random variable with probability p(z(t)) dependent on time. Let dz dt = f (z(t), t) be a differential equation describing a continuous-in-time transformation of z(t). Assuming that f is uniformly Lipschitz continuous in z and continuous in t, then the change in log probability also follows a differential equation:\nProof. To prove this theorem, we take the infinitesimal limit of finite changes of log p(z(t)) through time. First we denote the transformation of z over an \u03b5 change in time as\nWe assume that f is Lipschitz continuous in z(t) and continuous in t, so every initial value problem has a unique solution by Picard's existence theorem. We also assume z(t) is bounded. These conditions imply that f , T\u03b5, and\n\u2202z T\u03b5 are all bounded. In the following, we use these conditions to exchange limits and products.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Appendix C Full Adjoint sensitivities algorithm", "text": "This more detailed version of Algorithm 1 includes gradients with respect to the start and end times of integration.\nAlgorithm 2 Complete reverse-mode derivative of an ODE initial value problem Input: dynamics parameters \u03b8, start time t 0 , stop time t 1 , final state z(t 1 ), loss gradient \u2202L /\u2202z(t1)", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Return all gradients", "text": "Appendix D Autograd Implementation # O r g i n a l s y s t e m a u g m e n t e d w i t h v j p _ y , v j p _ t and v j p _ a r g s . y , v j p _ y , _ , _ = u n p a c k ( a u g m e n t e d _ s t a t e ) v j p _ a l l , d y _ d t = make_vjp ( f l a t _ f u n c , argnum = ( 0 , 1 , 2 ) ) ( y , t , f l a t _ a r g s ) v j p _ y , v j p _ t , v j p _ a r g s = v j p _ a l l (\u2212 v j p _ y ) r e t u r n np . h s t a c k ( ( d y _ d t , v j p _ y , v j p _ t , v j p _ a r g s ) )\nd e f v j p _ a l l ( g , * * k w a r g s ) :\nv j p _ y = g [ \u22121 , : ] v j p _ t 0 = 0 t i m e _ v j p _ l i s t = [ ] v j p _ a r g s = np . z e r o s ( np . s i z e ( f l a t _ a r g s ) )\nf o r i i n r a n g e ( T \u2212 1 , 0 , \u22121):\n# Compute e f f e c t o f moving c u r r e n t t i m e .  [ t [ i ] , t [ i \u2212 1 ] ] ) , t u p l e ( ( f l a t _ a r g s , ) ) , * * k w a r g s ) _ , v j p _ y , v j p _ t 0 , v j p _ a r g s = u n p a c k ( a u g _ a n s [ 1 ] ) # Add g r a d i e n t from c u r r e n t o u t p u t . v j p _ y = v j p _ y + g [ i \u2212 1 , : ] t i m e _ v j p _ l i s t . a p p e n d ( v j p _ t 0 ) v j p _ t i m e s = np . h s t a c k ( t i m e _ v j p _ l i s t ) [ : : \u2212 1 ] r e t u r n None , v j p _ y , v j p _ t i m e s , u n f l a t t e n ( v j p _ a r g s ) r e t u r n v j p _ a l l", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Appendix E Algorithm for training the latent ODE model", "text": "To obtain the latent representation zt 0 , we traverse the sequence using RNN and obtain parameters of distribution q(zt 0 |{xt i , ti}i, \u03b8enc). The algorithm follows a standard VAE algorithm with an RNN variational posterior and an ODESolve model:\n1. Run an RNN encoder through the time series and infer the parameters for a posterior over zt 0 :\nwhere \u00b5z 0 , \u03c3z 0 comes from hidden state of RNN({xt i , ti}i, \u03c6)\n2. Sample zt 0 \u223c q(zt 0 |{xt i , ti}i) ", "publication_ref": [], "figure_ref": [], "table_ref": []}], "references": [{"ref_id": "b0", "title": "Computationally efficient convolved multiple output Gaussian processes", "journal": "Journal of Machine Learning Research", "year": "2011-05", "authors": "A Mauricio; Neil D \u00c1lvarez;  Lawrence"}, {"ref_id": "b1", "title": "OptNet: Differentiable optimization as a layer in neural networks", "journal": "", "year": "2017", "authors": "Brandon Amos;  Kolter"}, {"ref_id": "b2", "title": "A general-purpose software framework for dynamic optimization", "journal": "", "year": "2013", "authors": "Joel Andersson"}, {"ref_id": "b3", "title": "CasADi -A software framework for nonlinear optimization and optimal control", "journal": "Mathematical Programming Computation", "year": "2018", "authors": "Joris Joel A E Andersson; Greg Gillis;  Horn; B James; Moritz Rawlings;  Diehl"}, {"ref_id": "b4", "title": "Automatic differentiation in machine learning: a survey", "journal": "Journal of machine learning research", "year": "2018", "authors": " Atilim Gunes Baydin; A Barak; Alexey Pearlmutter; Jeffrey Mark Andreyevich Radul;  Siskind"}, {"ref_id": "b5", "title": "Sylvester normalizing flows for variational inference", "journal": "", "year": "2018", "authors": "Rianne Van Den; Leonard Berg;  Hasenclever; M Jakub; Max Tomczak;  Welling"}, {"ref_id": "b6", "title": "The Stan math library: Reverse-mode automatic differentiation in c++", "journal": "", "year": "2015", "authors": "Bob Carpenter; D Matthew; Marcus Hoffman; Daniel Brubaker; Peter Lee; Michael Li;  Betancourt"}, {"ref_id": "b7", "title": "Reversible architectures for arbitrarily deep residual neural networks", "journal": "", "year": "2017", "authors": "Bo Chang; Lili Meng; Eldad Haber; Lars Ruthotto; David Begert; Elliot Holtham"}, {"ref_id": "b8", "title": "Multi-level residual networks from dynamical systems view", "journal": "", "year": "2018", "authors": "Bo Chang; Lili Meng; Eldad Haber; Frederick Tung; David Begert"}, {"ref_id": "b9", "title": "Recurrent neural networks for multivariate time series with missing values", "journal": "Scientific Reports", "year": "2018", "authors": "Zhengping Che; Sanjay Purushotham; Kyunghyun Cho; David Sontag; Yan Liu"}, {"ref_id": "b10", "title": "Doctor AI: Predicting clinical events via recurrent neural networks", "journal": "PMLR", "year": "2016-08-19", "authors": "Edward Choi; Mohammad Taha Bahadori; Andy Schuetz; Walter F Stewart; Jimeng Sun"}, {"ref_id": "b11", "title": "Theory of ordinary differential equations. Tata McGraw-Hill Education", "journal": "", "year": "1955", "authors": "A Earl; Norman Coddington;  Levinson"}, {"ref_id": "b12", "title": "NICE: Non-linear independent components estimation", "journal": "", "year": "2014", "authors": "Laurent Dinh; David Krueger; Yoshua Bengio"}, {"ref_id": "b13", "title": "Recurrent marked temporal point processes: Embedding event history to vector", "journal": "ACM", "year": "2016", "authors": "Nan Du; Hanjun Dai; Rakshit Trivedi; Utkarsh Upadhyay; Manuel Gomez-Rodriguez; Le Song"}, {"ref_id": "b14", "title": "Automated derivation of the adjoint of high-level transient finite element programs", "journal": "SIAM Journal on Scientific Computing", "year": "2013", "authors": "Patrick Farrell; David Ham; Simon Funke; Marie Rognes"}, {"ref_id": "b15", "title": "Spatially adaptive computation time for residual networks", "journal": "", "year": "2017", "authors": "Michael Figurnov; D Maxwell; Yukun Collins; Li Zhu; Jonathan Zhang; Dmitry Huang; Ruslan Vetrov;  Salakhutdinov"}, {"ref_id": "b16", "title": "Learning to Detect Sepsis with a Multitask Gaussian Process RNN Classifier", "journal": "", "year": "2017", "authors": "J Futoma; S Hariharan; K Heller"}, {"ref_id": "b17", "title": "The reversible residual network: Backpropagation without storing activations", "journal": "", "year": "2017", "authors": "N Aidan; Mengye Gomez; Raquel Ren; Roger B Urtasun;  Grosse"}, {"ref_id": "b18", "title": "Adaptive computation time for recurrent neural networks", "journal": "", "year": "2016", "authors": "Alex Graves"}, {"ref_id": "b19", "title": "", "journal": "", "year": "2016", "authors": "David Ha; Andrew Dai; Quoc V Le;  Hypernetworks"}, {"ref_id": "b20", "title": "Stable architectures for deep neural networks. Inverse Problems", "journal": "", "year": "2017", "authors": "Eldad Haber; Lars Ruthotto"}, {"ref_id": "b21", "title": "Solving Ordinary Differential Equations I -Nonstiff Problems", "journal": "Springer", "year": "1987", "authors": "E Hairer; S P N\u00f8rsett; G Wanner"}, {"ref_id": "b22", "title": "Deep residual learning for image recognition", "journal": "", "year": "2016", "authors": "Kaiming He; Xiangyu Zhang; Shaoqing Ren; Jian Sun"}, {"ref_id": "b23", "title": "Identity mappings in deep residual networks", "journal": "Springer", "year": "2016", "authors": "Kaiming He; Xiangyu Zhang; Shaoqing Ren; Jian Sun"}, {"ref_id": "b24", "title": "Neural networks for machine learning lecture 6a overview of mini-batch gradient descent", "journal": "", "year": "2012", "authors": "Geoffrey Hinton; Nitish Srivastava; Kevin Swersky"}, {"ref_id": "b25", "title": "Variable computation in recurrent neural networks", "journal": "", "year": "2016", "authors": "Yacine Jernite; Edouard Grave; Armand Joulin; Tomas Mikolov"}, {"ref_id": "b26", "title": "Adam: A method for stochastic optimization", "journal": "", "year": "2014", "authors": "P Diederik; Jimmy Kingma;  Ba"}, {"ref_id": "b27", "title": "Auto-encoding variational Bayes. International Conference on Learning Representations", "journal": "", "year": "2014", "authors": "P Diederik; Max Kingma;  Welling"}, {"ref_id": "b28", "title": "Improved variational inference with inverse autoregressive flow", "journal": "", "year": "2016", "authors": "P Diederik; Tim Kingma; Rafal Salimans; Xi Jozefowicz; Ilya Chen; Max Sutskever;  Welling"}, {"ref_id": "b29", "title": "Beitrag zur n\u00e4herungsweisen Integration totaler Differentialgleichungen", "journal": "Zeitschrift f\u00fcr Mathematik und Physik", "year": "1901", "authors": "W Kutta"}, {"ref_id": "b30", "title": "A theoretical framework for back-propagation", "journal": "Morgan Kaufmann", "year": "1988", "authors": "Yann Lecun; G Touresky; T Hinton;  Sejnowski"}, {"ref_id": "b31", "title": "Gradient-based learning applied to document recognition", "journal": "Proceedings of the IEEE", "year": "1998", "authors": "Yann Lecun; L\u00e9on Bottou; Yoshua Bengio; Patrick Haffner"}, {"ref_id": "b32", "title": "Time-dependent representation for neural event sequence prediction", "journal": "", "year": "2017", "authors": "Yang Li"}, {"ref_id": "b33", "title": "Directly modeling missing data in sequences with RNNs: Improved classification of clinical time series", "journal": "PMLR", "year": "2016-08-19", "authors": "David Zachary C Lipton; Randall Kale;  Wetzel"}, {"ref_id": "b34", "title": "PDE-Net: Learning PDEs from Data", "journal": "", "year": "2017", "authors": "Z Long; Y Lu; X Ma; B Dong"}, {"ref_id": "b35", "title": "Beyond finite layer neural networks: Bridging deep architectures and numerical differential equations", "journal": "", "year": "2017", "authors": "Yiping Lu; Aoxiao Zhong; Quanzheng Li; Bin Dong"}, {"ref_id": "b36", "title": "Autograd: Reverse-mode differentiation of native Python", "journal": "", "year": "2015", "authors": "Dougal Maclaurin; David Duvenaud; Ryan P Adams"}, {"ref_id": "b37", "title": "The neural Hawkes process: A neurally self-modulating multivariate point process", "journal": "", "year": "2017", "authors": "Hongyuan Mei; Jason M Eisner"}, {"ref_id": "b38", "title": "Fast derivatives of likelihood functionals for ODE based models using adjoint-state method", "journal": "Computational Statistics", "year": "2017", "authors": "Valdemar Melicher; Tom Haber; Wim Vanroose"}, {"ref_id": "b39", "title": "Intensit\u00e4tsschwankungen im fernsprechverker. Ericsson Technics", "journal": "", "year": "1943", "authors": "Conny Palm"}, {"ref_id": "b40", "title": "Automatic differentiation in pytorch", "journal": "", "year": "2017", "authors": "Adam Paszke; Sam Gross; Soumith Chintala; Gregory Chanan; Edward Yang; Zachary Devito; Zeming Lin; Alban Desmaison; Luca Antiga; Adam Lerer"}, {"ref_id": "b41", "title": "Gradient calculations for dynamic recurrent neural networks: A survey", "journal": "IEEE Transactions on Neural networks", "year": "1995", "authors": "A Barak;  Pearlmutter"}, {"ref_id": "b42", "title": "The mathematical theory of optimal processes", "journal": "", "year": "1962", "authors": "Lev Semenovich Pontryagin;  Mishchenko; R V Vg Boltyanskii;  Gamkrelidze"}, {"ref_id": "b43", "title": "Hidden physics models: Machine learning of nonlinear partial differential equations", "journal": "Journal of Computational Physics", "year": "2018", "authors": "M Raissi; G E Karniadakis"}, {"ref_id": "b44", "title": "Multistep neural networks for datadriven discovery of nonlinear dynamical systems", "journal": "", "year": "2018", "authors": "Maziar Raissi; Paris Perdikaris; George Em Karniadakis"}, {"ref_id": "b45", "title": "Numerical Gaussian processes for time-dependent and nonlinear partial differential equations", "journal": "SIAM Journal on Scientific Computing", "year": "2018", "authors": "Maziar Raissi; Paris Perdikaris; George Em Karniadakis"}, {"ref_id": "b46", "title": "Stochastic backpropagation and approximate inference in deep generative models", "journal": "", "year": "2014", "authors": "Shakir Danilo J Rezende; Daan Mohamed;  Wierstra"}, {"ref_id": "b47", "title": "Variational inference with normalizing flows", "journal": "", "year": "2015", "authors": "Danilo Jimenez Rezende; Shakir Mohamed"}, {"ref_id": "b48", "title": "\u00dcber die numerische Aufl\u00f6sung von Differentialgleichungen. Mathematische Annalen", "journal": "", "year": "1895", "authors": "C Runge"}, {"ref_id": "b49", "title": "Deep neural networks motivated by partial differential equations", "journal": "", "year": "2018", "authors": "Lars Ruthotto; Eldad Haber"}, {"ref_id": "b50", "title": "Black-box Variational Inference for Stochastic Differential Equations", "journal": "", "year": "2018", "authors": "T Ryder; A Golightly; A S Mcgough; D Prangle"}, {"ref_id": "b51", "title": "Probabilistic ODE solvers with Runge-Kutta means", "journal": "", "year": "2014", "authors": "Michael Schober; David Duvenaud; Philipp Hennig"}, {"ref_id": "b52", "title": "What-if reasoning with counterfactual Gaussian processes", "journal": "", "year": "2017", "authors": "Peter Schulam; Suchi Saria"}, {"ref_id": "b53", "title": "Scalable joint models for reliable uncertaintyaware event prediction", "journal": "", "year": "2017", "authors": "Hossein Soleimani; James Hensman; Suchi Saria"}, {"ref_id": "b54", "title": "Treatment-response models for counterfactual reasoning with continuous-time", "journal": "", "year": "2017", "authors": "Hossein Soleimani; Adarsh Subbaswamy; Suchi Saria"}, {"ref_id": "b55", "title": "Stable fluids", "journal": "ACM Press/Addison-Wesley Publishing Co", "year": "1999", "authors": "Jos Stam"}, {"ref_id": "b56", "title": "Optimization and uncertainty analysis of ODE models using second order adjoint sensitivity analysis", "journal": "bioRxiv", "year": "2018", "authors": "Paul Stapor; Fabian Froehlich; Jan Hasenauer"}, {"ref_id": "b57", "title": "Improving variational auto-encoders using Householder flow", "journal": "", "year": "2016", "authors": "M Jakub; Max Tomczak;  Welling"}, {"ref_id": "b58", "title": "Moritz Becher, and Nils Thuerey. Latent-space physics: Towards learning the temporal evolution of fluid flow", "journal": "", "year": "2018", "authors": "Steffen Wiewel"}, {"ref_id": "b59", "title": "Fatode: a library for forward, adjoint, and tangent linear integration of ODEs", "journal": "SIAM Journal on Scientific Computing", "year": "2014", "authors": "Hong Zhang; Adrian Sandu"}], "figures": [{"figure_label": "1", "figure_type": "figure", "figure_id": "fig_0", "figure_caption": "Figure 1 :1Figure 1: Left: A Residual network defines a discrete sequence of finite transformations. Right: A ODE network defines a vector field, which continuously transforms the state. Both: Circles represent evaluation locations.", "figure_data": ""}, {"figure_label": "3", "figure_type": "figure", "figure_id": "fig_1", "figure_caption": "Figure 3 :3Figure 3: Statistics of a trained ODE-Net. (NFE = number of function evaluations.)", "figure_data": ""}, {"figure_label": "5", "figure_type": "figure", "figure_id": "fig_2", "figure_caption": "Figure 5 :5Figure 4: Comparison of normalizing flows versus continuous normalizing flows. The model capacity of normalizing flows is determined by their depth (K), while continuous normalizing flows can also increase capacity by increasing width (M), making them easier to train.", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_3", "figure_caption": "Figure 8: (a): Reconstruction and extrapolation of spirals with irregular time points by a recurrent neural network. (b): Reconstructions and extrapolations by a latent neural ODE. Blue curve shows model prediction. Red shows extrapolation. (c) A projection of inferred 4-dimensional latent ODE trajectories onto their first two dimensions. Color indicates the direction of the corresponding trajectory. The model has learned latent dynamics which distinguishes the two directions.", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_4", "figure_caption": "t), t) + O(\u03b5 2 ) + O(\u03b5 3 ) + . . . (25) = \u2212tr lim \u03b5\u21920 + \u2202 \u2202z f (z(t), t) + O(\u03b5) + O(\u03b5 2 ) + . . . (26) = \u2212tr \u2202 \u2202z f (z(t), t)(27)A.1 Special Cases Planar CNF. Let f (z) = uh(w z + b), then \u2202f \u2202z = u \u2202h \u2202z T . Since the trace of an outer product is the inner productparameterization we use in all of our experiments.", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_5", "figure_caption": "the augmented ODE as an autonomous (time-invariant) ODE, but the derivations in the previous section still hold as this is a special case of a time-variant ODE. The Jacobian of f has the form \u2202faug", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_6", "figure_caption": "d e f g r a d _ a r g n u m s _ w r a p p e r ( a l l _ v j p _ b u i l d e r ) : # A g e n e r i c a u t o g r a d h e l p e r f u n c t i o n . T a k e s a f u n c t i o n t h a t # b u i l d s v j p s f o r a l l a r g u m e n t s , and w r a p s i t t o r e t u r n o n l y r e q u i r e d v j p s . d e f b u i l d _ s e l e c t e d _ v j p s ( argnums , ans , c o m b i n e d _ a r g s , k w a r g s ) : v j p _ f u n c = a l l _ v j p _ b u i l d e r ( ans , * c o m b i n e d _ a r g s , * * k w a r g s ) d e f c h o s e n _ v j p s ( g ) : # R e t u r n w h i c h e v e r v j p s were a s k e d f o r . a l l _ v j p s = v j p _ f u n c ( g ) r e t u r n [ a l l _ v j p s [ argnum ] f o r argnum i n argnums ] r e t u r n c h o s e n _ v j p s r e t u r n b u i l d _ s e l e c t e d _ v j p s d e f v j p _ a r g n u m s ( o d e i n t , g r a d _ a r g n u m s _ w r a p p e r ( g r a d _ o d e i n t _ a l l ) )", "figure_data": ""}, {"figure_label": "1", "figure_type": "table", "figure_id": "tab_0", "figure_caption": "Performance on MNIST.", "figure_data": "\u2020 From LeCun"}, {"figure_label": "", "figure_type": "table", "figure_id": "tab_1", "figure_caption": "Instead of showing the initial Gaussian distribution, we display the", "figure_data": "K=2K=8K=32M=2M=8 M=32CNF NF110 20 30CNF NF210 20 30"}, {"figure_label": "", "figure_type": "table", "figure_id": "tab_2", "figure_caption": ", given any latent state z(t), the entire latent trajectory is uniquely defined. Extrapolating this latent trajectory lets us make predictions arbitrarily far forwards or backwards in time.Training and PredictionWe can train this latent-variable model as a variational autoencoder(Kingma and Welling, 2014;Rezende et al., 2014), with sequence-valued observations. Our recognition net is an RNN, which consumes the data sequentially backwards in time, and outputs q \u03c6 (z 0 |x 1 , x 2 , . . . , x N ). A detailed algorithm can be found in Appendix E. Using ODEs as a generative model allows us to make predictions for arbitrary time points t 1 ...t M on a continuous timeline.", "figure_data": "\u03bb(t)"}, {"figure_label": "2", "figure_type": "table", "figure_id": "tab_3", "figure_caption": "", "figure_data": "Figure 8 shows examples of spiral reconstruc-: Predictive RMSE on test settions with 30 sub-sampled points. Reconstruc-tions from the latent ODE were obtained by sam-# Observations 30/100 50/100 100/100pling from the posterior over latent trajectoriesRNN0.3937 0.3202 0.1813and decoding it to data-space. Examples withLatent ODE0.1642 0.1502 0.1346varying number of time points are shown in Ap-pendix F. We observed that reconstructions and extrapolations are consistent with the ground truthregardless of number of observed points and despite the noise."}, {"figure_label": "", "figure_type": "table", "figure_id": "tab_6", "figure_caption": "Here we assumed that loss function L depends only on the last time point tN . If function L depends also on intermediate time points t1, t2, . . . , tN\u22121, etc., we can repeat the adjoint step for each of the intervals [tN\u22121, tN ], [tN\u22122, tN\u22121] in the backward order and sum up the obtained gradients.", "figure_data": "a(tN ) =dL dz(tN )a(t0) = a(tN ) +t 0 t Nda(t) dtdt = a(tN ) \u2212t 0 t Na(t) T \u2202f (z(t), t, \u03b8) \u2202z(t)(46)initial condition of adjoint diffeq.gradient wrt. initial value"}, {"figure_label": "", "figure_type": "table", "figure_id": "tab_8", "figure_caption": "Finally, we also get gradients with respect to t0 and tN , the start and end of the integration interval.", "figure_data": "t 0 t Na(t)\u2202f (z(t), t, \u03b8) \u2202\u03b8dt(51)dL dtN= a(tN )f (z(tN ), tN , \u03b8)dL dt0= at(t0) = at(tN ) \u2212t 0 t Na(t)\u2202f (z(t), t, \u03b8) \u2202tdt(52)"}], "formulas": [{"formula_id": "formula_0", "formula_text": "h t+1 = h t + f (h t , \u03b8 t )(1)", "formula_coordinates": [1.0, 166.18, 459.32, 149.66, 10.71]}, {"formula_id": "formula_1", "formula_text": "dh(t) dt = f (h(t), t, \u03b8)(2)", "formula_coordinates": [1.0, 169.42, 574.31, 146.42, 23.54]}, {"formula_id": "formula_2", "formula_text": "da(t) dt = \u2212a(t) T \u2202f (z(t), t, \u03b8) \u2202z (4", "formula_coordinates": [2.0, 349.63, 508.65, 150.5, 23.78]}, {"formula_id": "formula_3", "formula_text": ")", "formula_coordinates": [2.0, 500.13, 516.37, 3.87, 8.64]}, {"formula_id": "formula_4", "formula_text": "dL d\u03b8 = \u2212 t0 t1 a(t) T \u2202f (z(t), t, \u03b8) \u2202\u03b8 dt (5)", "formula_coordinates": [2.0, 340.42, 666.7, 163.59, 27.15]}, {"formula_id": "formula_5", "formula_text": "s 0 = [z(t 1 ), \u2202L \u2202z(t1) , 0 |\u03b8| ] Define initial augmented state def aug_dynamics([z(t), a(t), \u2022], t, \u03b8): Define dynamics on augmented state return [f (z(t), t, \u03b8), \u2212a(t) T \u2202f \u2202z , \u2212a(t) T \u2202f \u2202\u03b8 ] Compute vector-Jacobian products [z(t 0 ), \u2202L \u2202z(t0) , \u2202L \u2202\u03b8 ] = ODESolve(s 0 , aug_dynamics, t 1 , t 0 , \u03b8) Solve reverse-time ODE return \u2202L \u2202z(t0) , \u2202L \u2202\u03b8", "formula_coordinates": [3.0, 108.0, 148.36, 396.0, 70.04]}, {"formula_id": "formula_6", "formula_text": "z 1 = f (z 0 ) =\u21d2 log p(z 1 ) = log p(z 0 ) \u2212 log det \u2202f \u2202z 0 (6)", "formula_coordinates": [4.0, 191.19, 404.05, 312.81, 24.28]}, {"formula_id": "formula_7", "formula_text": "z(t + 1) = z(t) + uh(w T z(t) + b), log p(z(t + 1)) = log p(z(t)) \u2212 log 1 + u T \u2202h \u2202z (7)", "formula_coordinates": [4.0, 132.4, 445.75, 371.6, 23.78]}, {"formula_id": "formula_8", "formula_text": "\u2202 log p(z(t)) \u2202t = \u2212tr df dz(t)(8)", "formula_coordinates": [4.0, 246.65, 600.4, 257.35, 23.78]}, {"formula_id": "formula_9", "formula_text": "dz(t) dt = uh(w T z(t) + b), \u2202 log p(z(t)) \u2202t = \u2212u T \u2202h \u2202z(t)(9)", "formula_coordinates": [4.0, 194.22, 696.46, 309.78, 23.78]}, {"formula_id": "formula_10", "formula_text": "dz(t) dt = M n=1 f n (z(t)), d log p(z(t)) dt = M n=1 tr \u2202f n \u2202z (10)", "formula_coordinates": [5.0, 193.84, 148.03, 310.16, 31.06]}, {"formula_id": "formula_11", "formula_text": "z t0 \u223c p(z t0 ) (11) z t1 , z t2 , . . . , z t N = ODESolve(z t0 , f, \u03b8 f , t 0 , . . . , t N ) (12) each x ti \u223c p(x|z ti , \u03b8 x ) (13", "formula_coordinates": [6.0, 199.52, 484.97, 304.48, 45.08]}, {"formula_id": "formula_12", "formula_text": ")", "formula_coordinates": [6.0, 499.85, 514.01, 4.15, 8.64]}, {"formula_id": "formula_13", "formula_text": "\u00b5 z t 0 z t 1 RNN encoder Latent space Data spaceq (z t0 |x t0 ...x tN ) h t 0 h t 1 h t N ODE Solve(z t0 , f, \u2713 f , t 0 , ..., t M ) z t M \u2026 z t N z t N +1 Observed Unobserved x(t) t 0 t 1 t N Time t N +1 t M Prediction Extrapolation t 0 t 1 t N t N +1 t M x(t)", "formula_coordinates": [6.0, 109.51, 580.38, 454.5, 123.07]}, {"formula_id": "formula_14", "formula_text": "log p(t 1 . . . t N | t start , t end ) = N i=1 log \u03bb(z(t i )) \u2212 tend tstart \u03bb(z(t))dt", "formula_coordinates": [7.0, 108.0, 287.67, 249.88, 31.18]}, {"formula_id": "formula_15", "formula_text": "\u2202 log p(z(t)) \u2202t = lim \u03b5\u21920 + log p(z(t)) \u2212 log det \u2202 \u2202z T\u03b5(z(t)) \u2212 log p(z(t)) \u03b5(", "formula_coordinates": [13.0, 158.79, 287.8, 334.0, 22.28]}, {"formula_id": "formula_17", "formula_text": "\u2202 log p(z(t)) \u2202t = \u2212 lim \u03b5\u21920 + tr adj \u2202 \u2202z T\u03b5(z(t)) \u2202 \u2202\u03b5 \u2202 \u2202z T\u03b5(z(t)) (21) = \u2212tr \uf8eb \uf8ec \uf8ec \uf8ec \uf8ed lim \u03b5\u21920 + adj \u2202 \u2202z T\u03b5(z(t)) =I lim \u03b5\u21920 + \u2202 \u2202\u03b5 \u2202 \u2202z T\u03b5(z(t)) \uf8f6 \uf8f7 \uf8f7 \uf8f7 \uf8f8 (22) = \u2212tr lim \u03b5\u21920 + \u2202 \u2202\u03b5 \u2202 \u2202z T\u03b5(z(t))(23)", "formula_coordinates": [13.0, 161.75, 486.82, 342.25, 97.9]}, {"formula_id": "formula_18", "formula_text": "\u2202 log p(z(t)) \u2202t = \u2212tr lim \u03b5\u21920 + \u2202 \u2202\u03b5 \u2202 \u2202z z + \u03b5f (z(t), t) + O(\u03b5 2 ) + O(\u03b5 3 ) + . . .(24)", "formula_coordinates": [13.0, 157.69, 609.51, 346.31, 19.75]}, {"formula_id": "formula_19", "formula_text": "dz 1:d dt dz d+1:D dt = f (z d+1:D ) g(z 1:d ) (29)", "formula_coordinates": [14.0, 261.44, 212.65, 242.57, 24.73]}, {"formula_id": "formula_20", "formula_text": "\u2202p(z, t) \u2202t = \u2212 D i=1 \u2202 \u2202zi [fi(z, t)p(z, t)](30)", "formula_coordinates": [14.0, 236.83, 351.08, 267.17, 26.84]}, {"formula_id": "formula_21", "formula_text": "= D i=1 \u2202p(z(t), t) \u2202zi(t) \u2202zi(t) \u2202t \u2212 D i=1 \u2202fi(z(t), t) \u2202zi p(z(t), t) \u2212 D i=1 fi(z(t), t) \u2202p(z(t), t) \u2202zi(t) = \u2212 D i=1 \u2202fi(z(t), t) \u2202zi p(z(t), t)(31)", "formula_coordinates": [14.0, 166.7, 470.83, 337.3, 58.49]}, {"formula_id": "formula_22", "formula_text": "\u2202 log p(z(t), t) \u2202t = 1 p(z(t), t) \u2202p(z(t), t) \u2202t = \u2212 D i=1 \u2202fi(z(t), t) \u2202zi (32)", "formula_coordinates": [14.0, 192.42, 553.4, 311.58, 26.84]}, {"formula_id": "formula_23", "formula_text": "d dt z(t) log p(z(t), t) = f (z(t), t) \u2212 D i=1 \u2202f i (z(t),t) \u2202t(33)", "formula_coordinates": [14.0, 226.87, 605.11, 277.13, 22.1]}, {"formula_id": "formula_24", "formula_text": "a(t) = dL dz(t)(34)", "formula_coordinates": [15.0, 280.84, 115.48, 223.16, 19.74]}, {"formula_id": "formula_25", "formula_text": "da(t) dt = \u2212a(t) \u2202f (z(t), t, \u03b8) \u2202z(t)(35)", "formula_coordinates": [15.0, 252.39, 152.65, 251.62, 19.75]}, {"formula_id": "formula_26", "formula_text": "dL dht = dL dht+1 dht+1 dht . (36", "formula_coordinates": [15.0, 265.92, 216.84, 234.35, 19.74]}, {"formula_id": "formula_27", "formula_text": ")", "formula_coordinates": [15.0, 500.27, 222.92, 3.73, 7.77]}, {"formula_id": "formula_28", "formula_text": "z(t + \u03b5) = t+\u03b5 t f (z(t), t, \u03b8)dt + z(t) = T\u03b5(z(t), t)(37)", "formula_coordinates": [15.0, 207.9, 254.83, 296.1, 23.2]}, {"formula_id": "formula_29", "formula_text": "dL \u2202z(t) = dL dz(t + \u03b5) dz(t + \u03b5) dz(t) or a(t) = a(t + \u03b5) \u2202T\u03b5(z(t), t) \u2202z(t)(38)", "formula_coordinates": [15.0, 176.93, 295.9, 327.08, 19.75]}, {"formula_id": "formula_30", "formula_text": "da(t) dt = lim \u03b5\u21920 + a(t + \u03b5) \u2212 a(t) \u03b5 (39) = lim \u03b5\u21920 + a(t + \u03b5) \u2212 a(t + \u03b5) \u2202 \u2202z(t) T\u03b5(z(t)) \u03b5", "formula_coordinates": [15.0, 115.23, 335.16, 388.77, 47.22]}, {"formula_id": "formula_32", "formula_text": "\u03b5\u21920 + a(t + \u03b5) \u2212 a(t + \u03b5) \u2202 \u2202z(t) z(t) + \u03b5f (z(t), t, \u03b8) + O(\u03b5 2 ) \u03b5 (Taylor series around z(t))(41)", "formula_coordinates": [15.0, 149.14, 386.01, 354.86, 33.43]}, {"formula_id": "formula_33", "formula_text": "\u03b5\u21920 + a(t + \u03b5) \u2212 a(t + \u03b5) I + \u03b5 \u2202f (z(t),t,\u03b8) \u2202z(t) + O(\u03b5 2 ) \u03b5 (42) = lim \u03b5\u21920 + \u2212\u03b5a(t + \u03b5) \u2202f (z(t),t,\u03b8) \u2202z(t) + O(\u03b5 2 ) \u03b5 (43) = lim \u03b5\u21920 + \u2212a(t + \u03b5) \u2202f (z(t), t, \u03b8) \u2202z(t) + O(\u03b5) (44) = \u2212a(t) \u2202f (z(t), t, \u03b8) \u2202z(t)(45)", "formula_coordinates": [15.0, 139.41, 426.4, 364.59, 102.89]}, {"formula_id": "formula_34", "formula_text": "\uf8f9 \uf8fb (t)(49)", "formula_coordinates": [16.0, 349.43, 165.05, 154.57, 21.9]}], "doi": "10.1038/s41598-018-24271-9"}