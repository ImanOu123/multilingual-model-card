{"title": "Flexibility and Decoupling in the Simple Temporal Problem", "authors": "Michel Wilson; Tomas Klos; Cees Witteveen; Bob Huisman", "pub_date": "", "abstract": "In this paper we concentrate on finding a suitable metric to determine the flexibility of a Simple Temporal Problem (STP). After reviewing some flexibility metrics that have been proposed, we conclude that these metrics fail to capture the correlation between events specified in the STP, resulting in an overestimation of the available flexibility in the system. We propose to use an intuitively more acceptable flexibility metric based upon uncorrelated time-intervals for the allowed starting times of events in an STP. This metric is shown to be computable in low-polynomial time. As a byproduct of the flexibility computation, we get a decomposition of the STN almost for free: for every possible k-partitioning of the event space, a decomposition can be computed in O(k)-time. Even more importantly, we show that contrary to popular belief, such a decomposition does not affect the flexibility of the original STP.", "sections": [{"heading": "Introduction", "text": "Scheduling problems occur in many diverse application domains such as transportation, process industry, health and education. Intuitively, a scheduling problem arises if there is a set of temporal events whose (starting) times are subject to a number of temporal constraints and we have to determine these starting times such that all constraints are satisfied. Usually, we are not satisfied with determining a single schedule, i.e., an assignment \u03c3 determining for every event t an exact starting time \u03c3(t). First, due to outside disturbances (e.g., unforeseen delays), it may not be possible to start event t at the predetermined time. Then it is essential for the scheduling agent to know how to maintain or adapt the current schedule. Since during execution there is not much time for rescheduling, the possibilities for alternative starting times should be computable in a very short time or, even better, known in advance. Therefore, instead of offering a fixed schedule as a solution, one would like to compute an interval schedule, that is, an assignment of time intervals to variables, such that for every event t one can freely choose a specific time point in its interval. Such an interval for event t indicates the flexibility we have w.r.t. starting t. The sum of such flexibilities then indicates the flexibility of the interval schedule and could be used to measure its quality in this respect.\nAnother reason to opt for scheduling with time intervals occurs when the scheduling problem is distributed among multiple actors who want to solve the overall scheduling problem. Typically, such agents want to schedule their part of the problem independently of the others, based on their own preferences. One method that has been applied to fairly general scheduling formalisms is known as temporal decoupling [Hunsberger, 2002]. Here the original scheduling problem is decomposed into a number of subproblems, such that any solution (i.e., schedule) to a subproblem can be merged with any solution of the other subproblems, to constitute a feasible schedule of the total problem. As has been pointed out by various authors [Hunsberger, 2002;Planken et al., 2010;Boerkoel and Durfee, 2011;Brambilla, 2010], when using existing flexibility metrics, applying temporal decoupling may affect the total flexibility of the system. The question then arises, how we could minimise this flexibility loss due to temporal decoupling. Hence, we would also like to (i) optimize the decoupling with respect to flexibility and, if necessary, (ii) investigate the loss of flexibility due to decoupling.\nOur approach to addressing these problems is the following. We will concentrate on Simple Temporal Planning (STP) problems [Dechter, 2003] as the main representation mechanism for (temporal) scheduling problems. After a discussion of existing metrics to characterise the flexibility of STPs, we show that these metrics are not able to capture correlated time events, and generally overestimate the flexibility of scheduling systems. Then we introduce a new flexibility metric by using a transformation from a given STP S into a new STP S such that correlations between time points are resolved in S . By using an LP-approach to finding a simple uncorrelated interval schedule for events in S , we can obtain the flexibility of the original system S. We show that in case of STPs this flexibility metric can be computed in polynomial time and offers the possibility to adapt existing schedules in O(1) time. Then we deal with the problem of finding an optimal temporal decoupling for a given STP. Surprisingly, the method we use to specify the flexibility of an STP allows us to compute a decoupling for an STP that does not induce any loss of flexibility due to decoupling and can be obtained in O(k)-time (if the flexibility of the system has already been computed), where k is the number of agents involved in the decoupling.\nThis result shows that temporal decoupling can be computed both efficiently and without loss of flexibility.", "publication_ref": ["b3", "b3", "b4", "b0", "b1"], "figure_ref": [], "table_ref": []}, {"heading": "Preliminaries", "text": "The Simple Temporal Problem [Dechter et al., 1991;Dechter, 2003], offers a convenient framework for analyzing temporal aspects of scheduling problems, distinguishing between a set of temporal variables and linear constraints between them.\nAn instance of the Simple Temporal Problem (STP) is a pair S = (T, C), where T = {t 0 , t 1 , . . . , t n } is a set of timepoint variables (events) and C is a finite set of binary constraints on T , each constraint having the form t j \u2212 t i \u2264 c ji , for some real number c ji . Given S, we want to find a schedule for the events in T , that is a function \u03c3 : T \u2192 R \u22650 , assigning a non-negative real value (time-points) to each event in T , such that all constraints in C are satisfied. If such a schedule exists, we say that the STP is consistent. Without loss of generality, in the remaining of the paper, we simply assume that an STP is consistent. 1 In order to be able to express absolute time constraints, the time-point t 0 , also denoted by z, is used. It represents a fixed reference point on the timeline, usually having the value 0.\nOften we represent an STP S = (T, C) as a directed labeled graph where the vertices represent events in T and for every constraint t j \u2212 t i \u2264 c ji in C there is a directed edge (t i , t j ) labeled by c ji . The graph associated to an STP is called a Simple Temporal Network (STN). In this paper, we will use both representations interchangeably.\nExample 1. In Figure 1 two STNs S 1 and S 2 are given, both representing an STP with three time events (including the time reference point z). From these graphs we can derive the specification of the associated STPs. For example, the STP associated to S 1 contains a constraint t 2 \u2212 t 1 \u2264 5 and a constraint t 1 \u2212 t 2 \u2264 \u22125, while the STP belonging to S 2 contains a constraint t 2 \u2212 t 1 \u2264 0 and a constraint t 1 \u2212 t 2 \u2264 5.\nThe graph representation is very helpful in finding constraints implied by the set C of constraints, interpreting the weights c ji on the arcs as lengths of the path from t i to t j . For example, if C contains the constraints t j \u2212 t i \u2264 10 and t k \u2212 t j \u2264 15, then there exists a path from t i via t j to t k having a length 10 + 15 = 25. This implies t k \u2212 t i = (t k \u2212 t j ) + (t j \u2212 t i ) \u2264 25 is an implied constraint , even though C may not have contained a constraint limiting t k \u2212t i . Using a shortest path interpretation of the STN S = (T, C), there is an efficient method to find all tightest constraints implied by C. Basically, these tightest constraints can be found by searching for all shortest paths between the time points in T by e.g. applying Floyd and Warshalls all-pairs shortest paths algorithm [Floyd, 1962]. These tightest constraints are represented as the elements of the n \u00d7 n distance matrix D S , containing for every pair of time-point variables t i and t j the length of the shortest path in the distance graph between t i and t j . If D S contains the entries D S [i, j] and D S [j, i], then \u2212D S [j, i] \u2264 t j \u2212t i \u2264 D S [i, j] are the strongest constraints implied by C w.r.t. the temporal difference between t j and t i . The first row of D S contains all entries\nD S [0, i] such that t i \u2212 z = t i \u2264 D S [0, i], so D S [0, i] is t i 's latest starting time, lst(t i ).\nAnalogously, the first column contains entries D S [j, 0] such that z \u2212 t j \u2264 D S [j, 0], i.e., t j \u2212 z = t j \u2265 \u2212D S [j, 0], so \u2212D S [j, 0] is t j 's earliest starting time, est(t j ). The distance matrix D S for a given STN S can be computed in O(n 3 ) time [Dechter, 2003]. Hence, using the STP machinery we can find earliest and latest starting times for events in O(n 3 ) time.\nThe following proposition is a summary of two relevant properties that can be proven to hold for STNs and their schedules: Proposition 1. Let S = (T, C) be an STN and D S its distance matrix. For i = 1, . . . , n, let est(t i ) = D S [0, i] and lst(t i ) = \u2212D S [i, 0]. Then, for every schedule \u03c3 for S, and every t \u2208 T , it holds that \u03c3(t) \u2208 [est(t), lst(t)]. Moreover, given any t \u2208 T and v \u2208 [est(t), lst(t)], there exists 2 a schedule \u03c3 for S such that \u03c3(t) = v.\nSince we want to solve scheduling problems using STNs, we assume that for each event t there is a finite horizon for scheduling it. That means that for each STN S = (T, C) we assume that there exists a finite constant h S such that for all t \u2208 T it holds that t \u2264 h S can be derived from C. This avoids the use of unbounded time intervals (e.g. t i \u2212 t j \u2264 \u221e).", "publication_ref": ["b0", "b1", "b2", "b1"], "figure_ref": ["fig_0"], "table_ref": []}, {"heading": "Flexibility of an STN", "text": "Intuitively, the flexibility of an STN refers to the amount of freedom we have in assigning times to events in T . We defined a fixed schedule \u03c3 for an STN S = (T, C) as an assignment \u03c3 : T \u2192 R \u22650 satisfying all the constraints in C. Such a schedule, however, is just an arbitrary fixed assignment among a large set of possible alternative assignments also satisfying the constraints. Therefore a single fixed schedule does not offer any indication of the flexibility of the STN it has been derived from.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Using Earliest and Latest Starting Times", "text": "If we want flexibility to indicate our freedom of choice, then one option for defining the flexibility for scheduling event t is to use the difference lst(t) \u2212 est(t) = flex N (t). The total flexibility f lex N (S) of S then could be defined as\nflex N (S) = \u03a3 t\u2208T flex N (t).\nObviously, flex N (S) can be computed in O(n 3 ) time. Moreover, for each individual t, flex N (t) gives an exact measure of flexibility of event t, since, by Proposition 1, for every choice of a value v \u2208 [est(t), lst(t)] there exists a schedule \u03c3 for S such that \u03c3(t) = v. However, although for every individual event, flex N (t) offers a precise measure of its flexibility, using the sum flex N (S) of these flexibilities has a serious disadvantage, due to correlations that might exist between starting times of events. To see this, consider the following example:\nExample 2. Consider the STNs S 1 and S 2 (see Figure 1) where S 1 specifies the concurrent execution of k = 3 events within 5 time units, while S 2 specifies the sequential execution of k = 3 consecutive events, i.e., t 2 should not occur before t 1 , while t 3 should not occur before t 2 and all should occur within 5 time units. Here, S 1 specifies the concurrent execution of these events in the interval [0, 5], while S 2 encodes their sequential execution t 3 \u2264 t 2 \u2264 t 1 .\nNote that both in S 1 and in S 2 , for each i \u2208 {1, 2, 3}, est(t i ) = 0 and lst(t i ) = 5. Hence, flex N (S 1 ) = 3 \u00d7 5 = 15 = flex N (S 2 ). So, according to the measure flex N , S 1 and S 2 have the same flexibility, which, of course, is counterintuitive: For each event t i in S 1 we can determine its starting time between 0 and 5 independently from the other events. So, the total flexibility, expressed as the amount of choice we have in selecting a starting time for an event equals 5 \u00d7 3 = 15. The choice for the starting time of an event t i+1 in S 2 , however, may influence the choice of the starting time of the next event t i . More precisely, if (v 3 , v 2 , v 1 ) are the latest starting times for the 3\nevents in S 2 , it is clear that 0 \u2264 v 3 \u2264 v 2 \u2264 v 1 = 5. Hence, the flexibility of t 3 is v 3 \u2212 0, the flexibility of t 2 is v 2 \u2212 v 3 and the flexibility of t 1 is 5 \u2212 v 2 . So, the total flexibility of S 2 equals flex (S 2 ) = v 3 + (v 2 \u2212 v 3 ) + (5 \u2212 v 2 ) = 5.\nTherefore, the flexibility of S 2 should come out as only 1 3 of the flexibility of S 1 . Generalising S 1 and S 2 to systems containing k concurrent and sequential events, respectively, we see that the freedom to schedule in S 1 equals flex (S 1 ) = 5 \u00d7 k, while the flexibility of S 2 is independent of k and remains flex (S 2 ) = 5. Hence, if k goes to infinity, the ratio of the real flexibilities of S 1 and S 2 goes to infinity:\nlim k\u2192\u221e flex (S 1 ) flex (S 2 ) = lim k\u2192\u221e 5 \u00d7 k 5 = \u221e.\nwhile their ratio according to flex N is exactly 1:\nlim k\u2192\u221e f lex N (S 1 ) f lex N (S 2 ) = 5 \u00d7 k 5 \u00d7 k = 1.\nWe conclude that the flex N metric seriously overestimates the flexibility of STNs similar to S 2 .\nUsing Upper and Lower Bounds for Every Pair of Events One reason f lex N fails is that it is not able to deal with correlations between timed events. To overcome this disadvantage, we have to incorporate information about the correlation between two events as has been proposed in the definition of flexibility by Hunsberger [Hunsberger, 2002] and others [Policella et al., 2007]. Hunsberger defined his flexibility metric, which we will denote by flex H (S), by taking into account not only the apparent flexibility lst(t) \u2212 est(t) of every event t, but also the flexibility between pairs of events t i and t j .\nSince the distance matrix D S contains the entries\nD S [i, j] and D S [j, i] such that \u2212D S [j, i] \u2264 t j \u2212 t i \u2264 D S [i, j]\nare the strongest constraints implied by C w.r.t. the temporal difference t j \u2212 t i , we can define the flexibility associated with this difference as the length of the corresponding interval 3 :\nflex H (t i , t j ) = D S [i, j] + D S [j, i].\nNow the flexibility of the system S can be defined by taking flex N (S) and adding to it the sum of all these flexibilities for every distinct pair of time-points, 4 i.e., flex\nH (S) = flex N (S) + \u03a3 n i=1 \u03a3 n j>i flex H (t i , t j ).\nIf there is a correlation between two events t i and t j , this will result in a lower value of D S [i, j] + D S [j, i]. Hence, correlation among time events will have an influence on flex H . Although this metric is an improvement w.r.t. the naive metric flex N , the next example shows that flex H also has its shortcomings. Example 3. Consider again the STNs S 1 and S 2 in Figure 1. According to flex H , the flexibility of S 1 equals 3 \u00d7 5 + 3 \u00d7 10 = 45, while the flexibility of S 2 equals 3 \u00d7 5 + 3 \u00d7 5 = 30. So, according to the Hunsberger metric, S 2 would have a flexibility equal to 2 3 of the flexibility of S 1 . This seems to be an improvement with respect to the previous flexibility metric flex N assigning the same flexibility to S 1 and S 2 . However, generalising S 1 and S 2 to systems containing k concurrent and sequential events, respectively, we see that\nflex H (S 1 ) = 5 \u00d7 k + k 2 \u00d7 10 = 5 \u00d7 k 2 , while flex H (S 2 ) = 5 \u00d7 k + k 2 \u00d7 5 = 5 \u00d7 k 2 \u2212 k 2 .\nThis means that for larger values of k, the ratio between flex H (S 1 ) and flex H (S 2 ) converges to 2:\nlim k\u2192\u221e flex H (S 1 ) flex H (S 2 ) = lim k\u2192\u221e 5 \u00d7 k 2 5 \u00d7 k 2 \u2212k 2 = 2,\nwhile the ratio of the real flexibilities of S 1 and S 2 (see the previous example) goes to infinity if k goes to infinity. So, this metric is also not able to capture the correlations between the flexibilities of events in a satisfactory way.", "publication_ref": ["b3"], "figure_ref": ["fig_0", "fig_0"], "table_ref": []}, {"heading": "Towards a Suitable Flexibility Metric", "text": "Analysing the failure of both metrics flex N (S) and flex H (S) to capture the real flexibility of an STN S quickly reveals the main shortcoming of both of them: they do not fully capture the correlations between the allowed schedule-time intervals for the events t, if such correlations do exist. Considering again the system S 1 (see Figure 1), it can be observed that the real flexibility can be computed by taking the sum flex (t) = f lex N (t) of each event. This latter flexibility is simply determined as the difference between the latest starting time and the earliest starting time of such an event. But, as we have seen before, as soon as the events are correlated (as in the STN S 2 ), this no longer holds, because the starting time that can be chosen for an event t is dependent upon the starting times that were chosen for other events t \u2208 T .\nSo, in order to compute the flexibility of a system S, the flexibility measure should be based upon uncorrelated starting time intervals. Definition 1. Given an STN S = (T, C), a set I S = {[l t , u t ] | t \u2208 T } of (non-empty) intervals for the variables in T is uncorrelated iff for every t \u2208 T and every v t \u2208 [l t , u t ], the assignment \u03c3, defined by \u03c3(t) = v t , is a schedule for S.\nThen, to compute the real flexibility of a system S = (T, C), we have to determine 1. a set I S of uncorrelated starting time intervals [l t , u t ], such that 2. the sum of the interval lengths \u03a3 t\u2208T (u t \u2212l t ) is maximal.\nThis bears resemblance to the concept of safe networks discussed by [Morris et al., 2001], however, instead of tightening requirement constraints to ensure they do not affect contingent constraints, all tasks are restricted to start in an uncorrelated interval, ensuring they never affect each other.\nThe idea we will now pursue is to transform an STN S to an STN S in which new variables t \u2212 i and t + i occur for every t i \u2208 T . The intuitive meaning of these variables is that they constitute the earliest and latest starting times of t i in a set I S of uncorrelated intervals.\nNext, we determine the maximum flexibility of S using an LP-formulation to find a maximal solution satisfying both requirements.\nLet's start with the first step. In order to ensure that the variables t \u2212 i and t + i correspond to their intended meaning, the following proposition shows how to obtain a set of uncorrelated intervals. Intuitively, this proposition states that if there exists a constraint on some t j \u2212 t i in C, then the intervals for these events should be constrained so that, within their respective intervals, the events can not be scheduled so far apart as to violate the constraint: Proposition 2. Let S = (T, C) be an STN.\nA set I S = {[l ti , u ti ] | t i \u2208 T } of intervals for the variables in T is uncorrelated if for every pair (t i , t j ) \u2208 T 2 , it holds that t j \u2212 t i \u2264 c ji \u2208 C implies u tj \u2212 l ti \u2264 c ji .\nProof. Suppose the implication holds for every pair of variables. We have to show that I S is uncorrelated. So, for every t \u2208 T , choose an arbitrary value v t \u2208 [l t , u t ] and let \u03c3 be defined by \u03c3(t) = v t , for all t \u2208 T . We now prove that \u03c3 is a schedule for S. Suppose \u03c3 is not a schedule, meaning that \u03c3 violates some constraint in C. Then there exists a constraint t j \u2212 t i \u2264 c ji \u2208 C while \u03c3(t j ) \u2212 \u03c3(t i ) > c ji . But this implies that c ji < v tj \u2212 v ti < u tj \u2212 l ti , hence u tj \u2212 l ti > c ji , contradicting the fact that u tj \u2212 l tj \u2264 c ji (as we have assumed to be implied by t j \u2212 t i \u2264 c ji \u2208 C).\nWe will now show how to construct an STN in which the interval-endpoints are variables and the required constraints are imposed, so that, if we solve this derived STN, we are guaranteed suitable interval-endpoints: Proposition 3. Let S = (T, C) be an STN. Consider the STN S = (T , C ) derived from S as follows:\n1.\nT = {t + , t \u2212 | t \u2208 T \u2212 {z}} \u222a {z}; 2. C = {t + \u2212 t \u2212 \u2264 c | \u2200(t \u2212 t \u2264 c) \u2208 C} \u222a {z \u2212 t \u2212 \u2264 c | z \u2212 t \u2264 c \u2208 C} \u222a {t + \u2212 z \u2264 c | t \u2212 z \u2264 c \u2208 C}.\nThen, for every solution \u03c3 of S , the set {[\u03c3(t \u2212 ), \u03c3(t + )] | t \u2208 T } is an uncorrelated set of solution intervals for S.\nProof. If C contains a constraint of the form t j \u2212 t i \u2264 c ji , then by the specification of the first group of constraints in C , any assignment \u03c3 : T \u2192 R \u22650 that satisfies these constraints, also satisfies\n\u03c3(t + j ) \u2212 \u03c3(t \u2212 i ) \u2264 c ji , as required in Proposition 2. Example 4. Consider the STN S 2 presented in Example 1. Let STN S 2 = (T , C ) be the transformed STN where 1. T = {z, t \u2212 1 , t \u2212 2 , t \u2212 3 , t + 1 , t + 2 , t + 3 } and 2. C = {t + i \u2212 t \u2212 j \u2264 5 | 1 \u2264 i < j \u2264 3} \u222a {t + i \u2212 t \u2212 j \u2264 0 | 1 \u2264 j < i \u2264 3} \u222a {z \u2212 t \u2212 i \u2264 0 | i = 1, 2, 3} \u222a {t + i \u2212 z \u2264 5 | i = 1, 2, 3}\nOne possible solution is \u03c3(t + 1 ) = 4, \u03c3(t + 2 ) = 3 and \u03c3(t + 3 ) = 1, while \u03c3(t \u2212 1 ) = 3, \u03c3(t \u2212 2 ) = 1 and \u03c3(t \u2212 3 ) = 0. This results in the following set of uncorrelated solution intervals:\n\u03c3 I (t 3 ) = [0, 1], \u03c3 I (t 2 ) = [1, 3], \u03c3 I (t 1 ) = [3, 4].\nAlthough our transformation of S into S now provides an uncorrelated set of intervals, it is still insufficient to determine the flexibility of S, since the sum of the sizes of these intervals does not need to be maximal. To obtain the flexibility measure, we have to select those solutions \u03c3 for S that maximise the sum of the sizes of the intervals. It is easy to see that the following LP formulation will solve this problem: Theorem 1. Let S = (T, C) be an STN. Then flex (S) can be computed by solving the following Linear Program:\nmax t\u2208T (t + \u2212 t \u2212 ) subject to: t \u2212 \u2264 t + \u2200 t (1) t + \u2212 t \u2212 \u2264 c \u2200 (t \u2212 t \u2264 c) \u2208 C\nAs an easy consequence of these results we have the following corollary. Corollary 1. Given an STN S = (T, C), the flexibility metric flex determines an assignment flex (t) = [t \u2212 , t + ], such that for every t \u2208 T and every v t \u2208 [t \u2212 , t + ], the assignment \u03c3(t) = v t is a fixed-time schedule for S, satisfying all constraints in C.\nExample 5. Applying the flexibility metric flex to the STNs S 1 and S 2 results in the following flex functions:\n1. For S 1 , we have flex (t i ) = [0, 5] for i = 1, 2, 3 and flex (S 1 ) = 3 \u00d7 5 = 15.\n2. For S 2 , we have flex (S 2 ) = 5; one possible flex function is flex (t 1 ) = [0, 5], flex (t 2 ) = flex (t 3 ) = [5,5].\nSo as intended, this flexibility function will assign 3 \u00d7 5 flexibility units to S 1 , while assigning 5 units to S 2 .", "publication_ref": ["b4"], "figure_ref": ["fig_0"], "table_ref": []}, {"heading": "Decoupling Without Loss of Flexibility", "text": "STNs might also be used in a distributive scheduling context (see [Hunsberger, 2002;Boerkoel and Durfee, 2011;2012;Brambilla, 2010]. Suppose that the events in T are distributed over k agents A 1 , . . . , A k such that each agent is responsible for scheduling a disjoint subset T k \u2286 T \u2212 {z} of events. These agents act as distributed autonomous schedulers, so each agent A i wants to determine its own schedule\n\u03c3 i : T i \u2192 R \u22650 for the STP S i = (T i \u222a {z}, C i ),\nwhere T i is the subset of tasks (time-points) assigned to A i and C i = T i 2 \u2229 C is a set of constraints restricted to the events in T i . In allowing agents to schedule autonomously, we have to ensure that no matter what choices the individual agents make in composing their individual schedule, all constraints in C are satisfied. That is, the merge \u03c3 = k i=1 \u03c3 i of these individual schedules should always constitute a valid total schedule to the original problem. This problem is known as the so-called Temporal Decoupling Problem [Hunsberger, 2002].\nDefinition 2. Let S = (T, C) be a consistent STN. Sup- pose that T \\{z} = {T i } k\ni=1 is partitioned in k subsets T i . Then the temporal decoupling problem is to find k STPs S i = (T i \u222a {z}, C i ) such that, whenever \u03c3 1 , . . . , \u03c3 k are independently constructed schedules for the individual STPs S 1 , . . . , S k , respectively, their merge \u03c3 = k i=1 \u03c3 i is a schedule for the original STP S.\nTo achieve an arbitrary decoupling of an STN S = (T, C) where T is partitioned into blocks T i , we have to pay attention to constraints involving events t i and t j that belong to different agents A m and A n . The problem is that agents A m and A n may choose schedules \u03c3 m and \u03c3 n , respectively, that violate inter-agent constraint t i \u2212 t j \u2264 c ij , by setting \u03c3 m (t i ) \u2212 \u03c3 n (t j ) > c ij . Hunsberger [Hunsberger, 2002] gave an elegant solution to this temporal decoupling problem by proposing an iterative procedure that basically makes each inter-agent constraint [j, 0] to S while making sure that the resulting system remains consistent, the effect is that an inter-\nt i \u2212 t j \u2264 D S [j, i] obsolete by tightening intra-agent constraints t i \u2212 z \u2264 D S [0, i] and z \u2212 t j \u2264 D S [j, 0]. These tightenings consist in selecting values \u03b4 i,1 and \u03b4 i,2 such that 1. t i \u2212 z \u2264 \u03b4 i,1 \u2264 D S [0, i], 2. z \u2212 t j \u2264 \u03b4 i,2 \u2264 D S [j, 0], and 3. \u03b4 i,1 + \u03b4 i,2 \u2264 D S [i, j].", "publication_ref": ["b3", "b0", "b0", "b3", "b3"], "figure_ref": [], "table_ref": []}, {"heading": "If we add the new constraints", "text": "t i \u2212 z \u2264 \u03b4 i,1 \u2264 D S [0, i] and z \u2212 t j \u2264 \u03b4 i,2 \u2264 D S\nagent constraint t i \u2212 t j = (t i \u2212 z) + (z \u2212 t j ) \u2264 \u03b4 i,1 + \u03b4 i,2 \u2264 D S [i, j\n] is now implied by the new, tighter, intra-agent constraints. Hence, the inter-agent constraint can be removed from the updated STP. Applying this procedure for every nonimplied inter-agent constraint ensures that all inter-agent constraints are implied by intra-agent constraints and the resulting system is a temporal decoupling. Example 6. Suppose that in the STNs S 1 and S 2 from our earlier examples, we have agents A 1 , A 2 and A 3 , where A i is responsible for scheduling t i . In S 1 , every inter-agent constraint \u22125 \u2264 t i \u2212 t j \u2264 5 is already implied by the intra-agent constraints 0 \u2264 t i \u2212 z \u2264 5 and 0 \u2264 t j \u2212 z \u2264 5, so decoupling is already achieved. In S 2 , however, we can decouple by tightening the intra-agent constraints to (for example) 0 \u2264 t 3 \u2212 z \u2264 2, 3 \u2264 t 2 \u2212 z \u2264 4 and 4 \u2264 t 1 \u2212 z \u2264 5, so that every inter-agent constraint is implied.\nAn arbitrary decoupling, however, is not always what we want, since the added constraints may limit the resulting flexibilities of the subsystems S i . Hence, the sum \u03a3 k i=1 flex (S i ) of the flexibilities of the subsystems S i could be considerably less than the flexibility flex (S) of the original system. It is a popular belief in the research community that an optimal decoupling i.e., a decoupling that would maximize the flexibilities of the subsystems, would still suffer from some flexibility loss. In the literature we are aware of (see e.g. [Hunsberger, 2002;Boerkoel and Durfee, 2011;2012]) several experiments have been performed to measure this loss of flexibility. However, the metrics used all have been based on the flex H metric discussed above. Instead of using this metric we try to find a decoupling that maximizes the sum of the flexibilities of the induced subsystems S i , and we consider it an optimal decoupling if the ratio (\u03a3 k i=1 flex (S i ))/flex (S) is maximal. Contrary to the popular beliefs in the research community we will show now that 1. an optimal decoupling can be obtained in O(k)-time using the flexibility metric we discussed before, 2. this optimal decoupling need not affect the flexibility of the system, i.e., we have \u03a3 k i=1 flex (S i ) = flex (S). Proposition 4. Let {S i } k i=1 be an optimal decoupling of an STN S. Then \u03a3 k i=1 flex (S i ) = flex (S). Proof. Consider the set of intervals {[l t , u t ] : t \u2208 T } occurring as solutions of the LP (1). Given the set A = {A i } k i=1 of k agents, let C inter \u2282 C be the set of all inter-agent constraints. For every inter-agent constraint t \u2212 t \u2264 c, where t occurs in S i and t occurs in S j , add the constraint t \u2212 z \u2264 u t to C i and add z \u2212 t \u2264 \u2212l t to C j . We show the following. Claim 1: The resulting systems {S i } k i=1 constitute a decoupling of S; Claim 2: The sum of the flexibilities flex (S i ) of the systems S i in the decoupling {S i } k i=1 equals flex (S). Ad Claim 1. Suppose, on the contrary, that the merge \u03c3 of some combination of individual schedules \u03c3 i , violates a constraint in C. This must be an inter-agent constraint t \u2212 t \u2264 c where t occurs in S i and t occurs in S j (i = j). So \u03c3 i (t) \u2212 \u03c3 j (t ) > c, but since \u03c3 i satisfies all constraints in C i , it follows that \u03c3 i (t) \u2264 u t , and similarly, \u03c3 j (t ) \u2265 l t .  Therefore, \u03c3 i (t) \u2212 \u03c3 j (t) \u2264 u t \u2212 l t . Since the constraint t + \u2212 t \u2212 \u2264 c occurs in the LP, we also know that u t \u2212 l t \u2264 c, so \u03c3 i (t) \u2212 \u03c3 j (t ) \u2264 c, which contradicts \u03c3 i (t) \u2212 \u03c3 j (t ) > c.\nAd Claim 2. By definition, we have \u03a3 k i=1 flex (S i ) \u2264 flex (S). Let I S be a set of (uncorrelated) intervals [l t , u t ] realizing maximum flexibility. For every subsystem S i = (T i , C i ), consider the set I Si , being the restriction of I S to T i . It is easy to see that each such set of intervals I Si constitutes a set of uncorrelated intervals, realizing maximum flexibility for S i . But then \u03a3 i flex (S i ) = flex (S). Hence, there exists at least one decoupling realizing a total flexibility equal to the original flexibility flex (S).\nExample 7. Consider Example 6. A decoupling for S 2 realizing maximum flexibility can be created by adding the following decoupling constraints:\nt 2 \u2212 z \u2264 5; z \u2212 t 2 \u2264 \u22125; t 3 \u2212 z \u2264 5; z \u2212 t 3 \u2264 \u22125.\nThe sum of flexibilities of the subsystems equals the flexibility of the original system. Example 8. To illustrate the difference between the current approach and previous approaches to flexibility and decoupling, we apply our method to the following STN (see Figure 2 adapted from [Boerkoel, 2012]): The STN models the activities and their constraints for three agents Chris, Ann and Bill. The purpose of this example is to show how to apply decoupling in a real-life situation, where each of the agents should have enough freedom to schedule its own activities. The flexibility of the STN S according to the flex N metric is 780 (minutes). Due to several dependencies this is a serious overestimation of the real flexibility of the system, which according to our metric equals flex (S) = 180 (minutes). In Figure 3, the result of decoupling the STN according to Boerkoel has been depicted. If this decoupling would have been optimal, we would expect its total flexibility to be equal to 180. However, the sum of the flexibilities of the three subsystems equals 135. Hence, we conclude that the decoupling applied can be improved by using our flexibility approach.", "publication_ref": ["b3", "b0", "b0", "b0"], "figure_ref": ["fig_1"], "table_ref": []}, {"heading": "Conclusion and Discussion", "text": "In this paper we have discussed an efficient method to determine the flexibility of a schedule for an STN. The advantage  -120,150 -105,180 -150, 240 -45,45 -105, 105 -165, 240 Figure 3: The decoupled STN from the previous figure (adapted from [Boerkoel, 2012]).\nof the flexibility metric we propose is twofold: First of all, this metric takes into account the correlations between time events unlike previous methods that have been proposed in the literature. As a consequence, our metric does not suffer from overestimations of the flexibility in an STN. Secondly, using this improved flexibility metric allows us to disprove a rather widespread belief in the research community, i.e., that temporal decoupling of an STN necessarily results in reduced flexibility: We showed that once the flexibility of an STN is determined, it can be used to decide upon a temporal decoupling that does not affect the (total) flexibility of the system. The total flexibility of a system, however, can be obtained in many, sometimes even quite unfair, ways. For example, preserving the total flexibility of the system could mean that a decoupling heavily favors some specific agents by giving them a lot of flexibility, while harming other agents by taking away their flexibility. To prevent this, we need to come up with fair flexibility distribution schemes as an objective to grant every agent an almost equal portion of flexibility. We could propose more fair distributions of flexibility and evaluate their performance by comparing it to the maximally obtainable flexibility as we have proposed in our paper to establish the price of fairness.\nAnother question we did not deal with in this paper is how we should distribute flexibility over the events in order to ensure that a given interval schedule as proposed in this paper could enhance the robustness of a schedule. For example, if certain events are considered as critical or more susceptible to delays, we could try to provide them with a larger scheduling interval. Research in this direction also should pay attention to the dependencies of events upon other events (as expressed by the STN) to minimize scheduling violations. Together with extensions of the STN framework with stochastic interpretations of the upper bounds c ij on the constraints, this would enable stochastic interpretations of the total flexibility of an STN and encourage empirical research into optimal distributions of flexibility over the events in order to ensure maximal (expected) robustness of the resulting schedule.\nFinally, note that temporal decoupling is now done off-line before the execution of the schedule. It would be quite interesting to come up with dynamic variants of decoupling where, based on the completion times of tasks already completed, the current decoupling is adapted to profit from flexibility in an even better way.", "publication_ref": ["b0"], "figure_ref": [], "table_ref": []}], "references": [{"ref_id": "b0", "title": "Artificial Intelligence in Space Systems: Coordination Through Problem Decoupling in Multi Agent Planning for Space Systems", "journal": "Lambert Academic Publishing", "year": "1991", "authors": "J C Durfee; E H Boerkoel; ; J C Durfee; E H Boerkoel;  Durfee;  Dechter"}, {"ref_id": "b1", "title": "Constraint processing", "journal": "Morgan Kaufmann", "year": "2003", "authors": "; R Dechter;  Dechter"}, {"ref_id": "b2", "title": "Algorithm 97: Shortest path", "journal": "Communications of the ACM", "year": "1962", "authors": "; R W Floyd;  Floyd"}, {"ref_id": "b3", "title": "Algorithms for a temporal decoupling problem in multi-agent planning", "journal": "", "year": "2002", "authors": "; L Hunsberger;  Hunsberger"}, {"ref_id": "b4", "title": "From precedence constraint posting to partial order schedules: A CSP approach to robust scheduling", "journal": "AI Communications", "year": "2001", "authors": " Morris"}], "figures": [{"figure_label": "1", "figure_type": "figure", "figure_id": "fig_0", "figure_caption": "Figure 1 :1Figure1: Two STNs each specifying three events t 1 , t 2 and t 3 in the interval [0, 5]. Here, S 1 specifies the concurrent execution of these events in the interval [0, 5], while S 2 encodes their sequential execution t 3 \u2264 t 2 \u2264 t 1 .", "figure_data": ""}, {"figure_label": "2", "figure_type": "figure", "figure_id": "fig_1", "figure_caption": "Figure 2 :2Figure2: An STN adapted from[Boerkoel, 2012]. The arrows without source labeled with two numbers [x, y] pointing towards an event t represent the weights of the constraints z \u2212 t \u2264 x and t \u2212 z \u2264 y.", "figure_data": ""}], "formulas": [{"formula_id": "formula_0", "formula_text": "D S [0, i] such that t i \u2212 z = t i \u2264 D S [0, i], so D S [0, i] is t i 's latest starting time, lst(t i ).", "formula_coordinates": [2.0, 315.0, 79.08, 243.0, 20.61]}, {"formula_id": "formula_1", "formula_text": "flex N (S) = \u03a3 t\u2208T flex N (t).", "formula_coordinates": [2.0, 379.46, 538.53, 114.08, 10.59]}, {"formula_id": "formula_2", "formula_text": "events in S 2 , it is clear that 0 \u2264 v 3 \u2264 v 2 \u2264 v 1 = 5. Hence, the flexibility of t 3 is v 3 \u2212 0, the flexibility of t 2 is v 2 \u2212 v 3 and the flexibility of t 1 is 5 \u2212 v 2 . So, the total flexibility of S 2 equals flex (S 2 ) = v 3 + (v 2 \u2212 v 3 ) + (5 \u2212 v 2 ) = 5.", "formula_coordinates": [3.0, 54.0, 475.23, 243.0, 56.29]}, {"formula_id": "formula_3", "formula_text": "lim k\u2192\u221e flex (S 1 ) flex (S 2 ) = lim k\u2192\u221e 5 \u00d7 k 5 = \u221e.", "formula_coordinates": [3.0, 102.89, 614.81, 145.22, 23.23]}, {"formula_id": "formula_4", "formula_text": "lim k\u2192\u221e f lex N (S 1 ) f lex N (S 2 ) = 5 \u00d7 k 5 \u00d7 k = 1.", "formula_coordinates": [3.0, 110.98, 655.3, 129.04, 23.23]}, {"formula_id": "formula_5", "formula_text": "D S [i, j] and D S [j, i] such that \u2212D S [j, i] \u2264 t j \u2212 t i \u2264 D S [i, j]", "formula_coordinates": [3.0, 315.0, 167.2, 243.0, 20.61]}, {"formula_id": "formula_6", "formula_text": "flex H (t i , t j ) = D S [i, j] + D S [j, i].", "formula_coordinates": [3.0, 365.22, 227.5, 142.55, 10.59]}, {"formula_id": "formula_7", "formula_text": "H (S) = flex N (S) + \u03a3 n i=1 \u03a3 n j>i flex H (t i , t j ).", "formula_coordinates": [3.0, 353.14, 277.77, 182.97, 12.69]}, {"formula_id": "formula_8", "formula_text": "flex H (S 1 ) = 5 \u00d7 k + k 2 \u00d7 10 = 5 \u00d7 k 2 , while flex H (S 2 ) = 5 \u00d7 k + k 2 \u00d7 5 = 5 \u00d7 k 2 \u2212 k 2 .", "formula_coordinates": [3.0, 315.0, 466.49, 216.92, 64.06]}, {"formula_id": "formula_9", "formula_text": "lim k\u2192\u221e flex H (S 1 ) flex H (S 2 ) = lim k\u2192\u221e 5 \u00d7 k 2 5 \u00d7 k 2 \u2212k 2 = 2,", "formula_coordinates": [3.0, 354.7, 561.84, 163.61, 27.94]}, {"formula_id": "formula_10", "formula_text": "A set I S = {[l ti , u ti ] | t i \u2208 T } of intervals for the variables in T is uncorrelated if for every pair (t i , t j ) \u2208 T 2 , it holds that t j \u2212 t i \u2264 c ji \u2208 C implies u tj \u2212 l ti \u2264 c ji .", "formula_coordinates": [4.0, 54.0, 611.07, 243.0, 42.53]}, {"formula_id": "formula_11", "formula_text": "T = {t + , t \u2212 | t \u2208 T \u2212 {z}} \u222a {z}; 2. C = {t + \u2212 t \u2212 \u2264 c | \u2200(t \u2212 t \u2264 c) \u2208 C} \u222a {z \u2212 t \u2212 \u2264 c | z \u2212 t \u2264 c \u2208 C} \u222a {t + \u2212 z \u2264 c | t \u2212 z \u2264 c \u2208 C}.", "formula_coordinates": [4.0, 322.47, 199.85, 235.53, 35.73]}, {"formula_id": "formula_12", "formula_text": "\u03c3(t + j ) \u2212 \u03c3(t \u2212 i ) \u2264 c ji , as required in Proposition 2. Example 4. Consider the STN S 2 presented in Example 1. Let STN S 2 = (T , C ) be the transformed STN where 1. T = {z, t \u2212 1 , t \u2212 2 , t \u2212 3 , t + 1 , t + 2 , t + 3 } and 2. C = {t + i \u2212 t \u2212 j \u2264 5 | 1 \u2264 i < j \u2264 3} \u222a {t + i \u2212 t \u2212 j \u2264 0 | 1 \u2264 j < i \u2264 3} \u222a {z \u2212 t \u2212 i \u2264 0 | i = 1, 2, 3} \u222a {t + i \u2212 z \u2264 5 | i = 1, 2, 3}", "formula_coordinates": [4.0, 315.0, 300.12, 243.0, 106.04]}, {"formula_id": "formula_13", "formula_text": "\u03c3 I (t 3 ) = [0, 1], \u03c3 I (t 2 ) = [1, 3], \u03c3 I (t 1 ) = [3, 4].", "formula_coordinates": [4.0, 315.0, 446.66, 190.32, 9.65]}, {"formula_id": "formula_14", "formula_text": "max t\u2208T (t + \u2212 t \u2212 ) subject to: t \u2212 \u2264 t + \u2200 t (1) t + \u2212 t \u2212 \u2264 c \u2200 (t \u2212 t \u2264 c) \u2208 C", "formula_coordinates": [4.0, 330.29, 567.3, 227.71, 52.36]}, {"formula_id": "formula_15", "formula_text": "\u03c3 i : T i \u2192 R \u22650 for the STP S i = (T i \u222a {z}, C i ),", "formula_coordinates": [5.0, 54.0, 265.2, 214.62, 12.33]}, {"formula_id": "formula_16", "formula_text": "Definition 2. Let S = (T, C) be a consistent STN. Sup- pose that T \\{z} = {T i } k", "formula_coordinates": [5.0, 54.0, 384.18, 243.0, 20.68]}, {"formula_id": "formula_17", "formula_text": "t i \u2212 t j \u2264 D S [j, i] obsolete by tightening intra-agent constraints t i \u2212 z \u2264 D S [0, i] and z \u2212 t j \u2264 D S [j, 0]. These tightenings consist in selecting values \u03b4 i,1 and \u03b4 i,2 such that 1. t i \u2212 z \u2264 \u03b4 i,1 \u2264 D S [0, i], 2. z \u2212 t j \u2264 \u03b4 i,2 \u2264 D S [j, 0], and 3. \u03b4 i,1 + \u03b4 i,2 \u2264 D S [i, j].", "formula_coordinates": [5.0, 54.0, 566.36, 243.01, 89.84]}, {"formula_id": "formula_18", "formula_text": "t i \u2212 z \u2264 \u03b4 i,1 \u2264 D S [0, i] and z \u2212 t j \u2264 \u03b4 i,2 \u2264 D S", "formula_coordinates": [5.0, 54.0, 662.32, 243.0, 20.61]}, {"formula_id": "formula_19", "formula_text": "agent constraint t i \u2212 t j = (t i \u2212 z) + (z \u2212 t j ) \u2264 \u03b4 i,1 + \u03b4 i,2 \u2264 D S [i, j", "formula_coordinates": [5.0, 54.0, 57.16, 289.37, 647.69]}, {"formula_id": "formula_20", "formula_text": "t 2 \u2212 z \u2264 5; z \u2212 t 2 \u2264 \u22125; t 3 \u2212 z \u2264 5; z \u2212 t 3 \u2264 \u22125.", "formula_coordinates": [6.0, 57.62, 415.92, 235.75, 9.65]}], "doi": ""}