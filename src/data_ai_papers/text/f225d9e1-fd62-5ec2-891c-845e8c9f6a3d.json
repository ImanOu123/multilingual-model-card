{"title": "Mining IC Test Data to Optimize VLSI Testing", "authors": "Tony Fountain; Thomas Dietterich; Bill Sudyka", "pub_date": "", "abstract": "We describe an application of data mining and decision analysis to the problem of die-level functional test in integrated circuit manufacturing.", "sections": [{"heading": "", "text": "Integrated circuits are fabricated on large wafers that can hold hundreds of individual chips (\"die\").\nIn current practice, large and expensive machines test each of these die to check that they are functioning properly (die-level functional test; DLFT), and then the wafers are cut up, and the good die are assembled into packages and connected to the package pins. Finally, the resulting packages are tested to ensure that the final product is functioning correctly.\nThe purpose of die-level functional test is to avoid the expense of packaging bad die and to provide rapid feedback to the fabrication process by detecting die failures.\nThe challenge for a decisiontheoretic approach is to reduce the amount of DLFT (and the associated costs) while still providing process feedback. We describe a decisiontheoretic approach to DLFT in which historical test data is mined to create a probabilistic model of patterns of die failure. This model is combined with greedy value-of-information computations to decide in real time which die to test next and when to stop testing. We report the results of several experiments that demonstrate the ability of this procedure to make good testing decisions, good stopping decisions, and to detect anomalous die.\nBased on experiments with historical test data from Hewlett Packard Company, the resulting system has the potential to improve profits on mature IC products.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "INTRODUCTION", "text": "Modern computer-integrated manufacturing lines provide many opportunities for applying data mining techniques. These lines contain many sensors and computer-controlled devices, so the information needed for intelligent control is available and control decisions can be implemented easily. Furthermore, in most current computer-integrated manufacturing lines, the supply of available sensor data far outstrips the ability of the existing control systems to digest and apply it.\nConsequently, the combination of data mining -to analyze data to build and update probabilistic models -and decision-theoretic control -to make decisions based on those models -can have a huge financial impact in reducing costs, increasing throughput, and raising profits.\nIn this paper, we report our experiences with one such application. We developed a decision-theoretic controller for one phase of the VLSI integrated circuit manufacturing process. The controller manages the die-level functional test (DLFT) process with the goal of maximizing the expected utility of the overall manufacturing process.\nWe applied our expertise in VLSI testing to develop an influence diagram for the  1 is a simplified schematic of the major IC manufacturing steps. ", "publication_ref": [], "figure_ref": ["fig_0"], "table_ref": []}, {"heading": "Fabrication:", "text": "A typical wafer is fabricated through a series of more than 100 process steps (Van Zant, 1997;Zorich, 1990).\nVirtually all of the processing is automated, but there are still many potential sources of failure that lead to defective wafers. An entire processing step may fail, in which case all of the die on a wafer will be bad. ", "publication_ref": ["b4"], "figure_ref": [], "table_ref": []}, {"heading": "DECISION-THEORETIC WAFER TEST", "text": "The goal of our project was to replace the exhaustive test policy with a decision-theoretic policy that decides in Figure 2 shows the influence diagram that we developed to model the manufacturing process. It contains a set of nodes {F i , f i , I i , p i , V i } for each die i on the wafer. According to this model, the first step in the process is to generate a value for the variable w at random according to P(w). This latent variable w is called the \"wafer class\", and it models the spatial correlations among the failures of individual die as a finite mixture model, as discussed in more detail below. The next step in the model is to choose a die to be tested. This is indicated by choosing one of the decision variables F i and setting its value to 1.\nThe results of all previous functional tests are available when test F i is chosen, although the diagram does not show this. The result of the functional test for die i is f i , which is distributed according to P(f i |F i , w).\nAfter testing F i , another die F j can be chosen and test result f j observed, and so on.\nAt some point, the testing process is terminated by setting all of the remaining F i to 0. The next step is to choose which die to ink. This is indicated by choosing values for all of the decision variables\nI i (i = 1,\u2026,n).\nDepending on the inking decision I i and the functional test result f i , the result of the final package test, p i , is observed according to probability P(p i |I i , f i ). The utility model is summarized in Table 1.    To understand the probabilistic model of Figure 2, it is helpful to separate it out from the rest of the influence diagram (see Figure 3). This shows that we are modeling the die failures as being conditionally independent given a latent class variable w. This is the standard na\u00efve Bayes' belief network that has already proven useful in diagnostic systems (Henrion, 1990) and learning and discovery systems (Dietterich, 1997, Cheeseman, Self, Kelly, Taylor, andStutz, 1988). Each die i corresponds to a fixed spatial location on the wafer, so if a particular location (e.g., near the edge) is prone to frequent failure, its value for P(f i =0|w) will be large.\nFigure 2: Wafer Test Influence Diagram W N W N W W W Y W c c c c v V Y W Y W v C N W c C N W c j d j j j j j f p k f p k h k j j k f f j f p p j\n\u2261 = \u2212 \u2261 \u2212 \u2212 \u2212 C N W c c V Y W C C C k k j k h j f p k ( ( ) * ) ( ( ))\nF 1 I 1 V 1 f 1 p 1 F 2 I 2 V 2 f 2 p 2 F n I n V n f n p n D V\nIn the experiments reported below, we set w to have four possible values, which gives us a mixture model with four multinomial components.\nNote that unlike the applications of the na\u00efve Bayes model in supervised learning, the class variable w is not observed. Also note that unlike in the applications of na\u00efve Bayes to clustering in Autoclass, we are not particularly interested in the structure of the classes that are learned. We simply view it as a convenient representation of the joint distribution P(f 1 , f 2 , \u2026, f n ) of failures of the die on the wafers. We considered employing more sophisticated models of die failure, including models of \"blobs\"\nand \"scratches\". However, an analysis of the spatial statistics of die failure showed no evidence for such spatiallylocal patterns (Fountain, 1998).\nTo acquire the probabilities P(w) and P(f i |w), we applied the EM algorithm to fit this na\u00efve Bayes network to historical data from a mature IC product manufactured by Hewlett-Packard.\nThe probabilities P(pi|fi) were set to be identical for all die, and they were acquired from domain experts rather than from data. They represent the probability that a packaged die will fail the post-packaging functional test given that it passed (or failed) the die-level functional test.", "publication_ref": ["b0", "b3"], "figure_ref": [], "table_ref": ["tab_3"]}, {"heading": "Figure 3: Wafer Test Belief Net", "text": "To apply this model to compute a DLFT policy, we perform an iterative one-step value of information (VOI) computation.\nInitially, all of the functional test decision nodes F i are set to 0 (no test).\nThe die inking decisions, I i , and the wafer disposition decision, D, are then made to maximize expected utility. Call this the \"termination utility\", U term , because it is the utility of terminating functional testing and carrying out inking and packaging. The functional testing process then proceeds as follows.\nFor each die that has not yet been tested, the expected utility U i of testing that one die and then making the inking and wafer disposition decisions is computed.\nIf\nterm i i U U > max\n, then test i is performed, f i is observed, and the termination utility U term is recomputed.\nOtherwise, testing terminates, and the inking and disposition decisions are made.\nOne-step greedy VOI does not in general yield the optimal policy for a sequential decision problem. However, we expect it to perform very well in this particular problem because we are assuming that each testing action does not alter the wafer (e.g., by causing other die to fail).\nIn addition, the inking decisions can be made independently, and the total utility is additive. Below, we will test experimentally how well greedy VOI works.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "METHODS", "text": "Hewlett-Packard provided a data set for a mature IC product. The data consisted of the test results from 2400 wafers. We split this data into two separate data sets.\nSet 1 was used during model development and debugging. It consisted of 1200 wafers: 600 for\nf 2 f 1 f 3 f n w P w ( ) P f w i ( | ) p 2 p 1 p 3 p n P p f i i ( | )\ntraining and 600 for testing. Set 2 was used for a final test of the system, and it also consisted of 1200 wafers: 600 for training and 600 for testing. The wafers are grouped into \"lots\" of 24 wafers, which are kept together (in a cassette)\nduring the manufacturing process.\nBecause there is a strong possibility that wafers within a lot share the same defects, we divided the wafers according to entire lots, so each training data consisted of 25 lots and each testing set of 25 lots. The lots were kept in chronological order.\nTables 2 and 3 ", "publication_ref": [], "figure_ref": [], "table_ref": ["tab_6"]}, {"heading": "RESULTS", "text": "We performed four experiments to address the following questions:\n1. How well does the decision-theoretic approach perform compared to exhaustive testing, no testing, and optimal testing? Each of these questions is addressed in turn.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "PERFORMANCE", "text": "We compared the performance of the decision-theoretic testing policy (\"DT\") with three other policies: (a) the current exhaustive test approach (\"Exhaustive\"), (b) a policy that performed no tests and packaged all die (\"Package All\"), and (c) an optimal testing policy (\"Oracle\") that performs no testing but packages only those die that would have passed the functional test.\nThe oracle policy provides an upper bound on the best that any implementable policy could do. We   The results from the model tests are presented in Tables 4 and 5 (for the test data in Data Set 1 and Data Set 2, respectively). The results show that the current exhaustive testing policy is the worst, and the DT policy is the best of the three implementable policies.\nIndeed, the DT policy achieves 96% of the profit that can be realized by the Oracle, and it gives a 3.8% improvement in profit over exhaustive testing.\nThe Package All policy produces almost as much profit as the DT policy, so a reasonable question is what advantage the DT policy has over Package All.\nThe answer is that on wafers with high yield there may be little benefit. The problem with Package All is that process problems will not be detected until package test results become available.\nThis can be a problem, because often packaging is performed at a location   ", "publication_ref": [], "figure_ref": [], "table_ref": ["tab_8"]}, {"heading": "DETECTING PROCESS", "text": "", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "PROBLEMS", "text": "An interesting question for any testing policy is how it responds to abnormal wafers. Although the decision-theoretic approach was targeted towards a stable mature product, process problems are common, and abnormal wafer test results are often the first symptoms of such problems. An important question for a testing policy is how well can it recognize abnormally bad wafers?\nTo explore this issue, we discuss six wafers from Data Set 1 in detail. The first two wafers are typical \"good\" wafers with yields over 80%. The next two wafers are \"bad\", with yields of less than 10%. The final two wafers are \"mediocre\", with yields of 66% and 65%. The test wafers are described in   In Table 8, current profit is the profit realized under the exhaustive test policy.\nVOI profit is the profit realized under the decision-theoretic policy.\nTo visualize the testing behavior, wafer test maps are presented below for each wafer. These maps show the good dice, the dice that were tested according to the selective test policy, and the dice that were packaged according to this policy.\nIn each map, green (light) encodes true, so green represents good dice, tested dice, and packaged dice. Red (dark) encodes bad dice, untested dice, and unpackaged dice. The analysis of these six wafers shows that the decision-theoretic policy is responsive to abnormal wafers. There is a direct relationship between wafer yield and the number of functional tests performed. The higher the yield, the fewer tests. This means that, for a stable and mature product, the system tests only a small fraction of the total dice. However, the system is sensitive to abnormal yields, which indicate process problems. On such wafers, the system tends to test more thoroughly. For wafers with extremely low yield, the system responds by testing almost all dice. This means that a minimal amount of resources are expended on good wafers, yet bad wafers are detected.\nThe reasons for this highly-desirable behavior are not entirely clear. One explanation is that because our IC product was a mature, high-yield product, the learned stochastic model is expecting to see good wafers. So when it encounters a bad wafer, its predictions concerning the untested wafers become uncertain (near 0.5), and it must do more testing to make good inking decisions.\nIf our product had been one where half of the wafers were good and the other half very bad, then a bad wafer would not have been surprising, and the decision-theoretic policy would only perform enough tests to be confident of which kind of wafer it had. Then it would proceed to the inking decisions.\nThis analysis suggests that the output from the decision-theoretic approach could be fed into statistical process control (SPC) methods that routinely monitor for process problems. A straightforward extension to the current SPC system would be to replace actual test measures with predicted measures.\nSo, for example, rather than setting control limits around the actual functional test results, the control limits could be set around the predicted functional test results. Thus, the decision-theoretic approach provides dual benefits. First, it greatly reduces the requirement for testing resources.\nSecond, it satisfies the requirement for prompt detection of process problems.", "publication_ref": [], "figure_ref": [], "table_ref": ["tab_14"]}, {"heading": "ROBUSTNESS TO CHANGES IN UTILITY PARAMETERS", "text": "One benefit of decision-theoretic methods is that changes in utility parameters should result in rational changes in performance without explicit re-engineering the learned models or control structures. To verify this, we experimented with changes to two of the utility parameters:\n\u2022 Cost of performing a single functional test,\n\u2022 Cost of packaging a single die. ", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Changes to Package Cost", "text": "In the first set of tests, the cost to package a single die was manipulated. The results are summarized in Table 9.  The results show that when it is relatively inexpensive to package dice, the system packages more and tests less.\nAs the package cost increases, false positives become more expensive, so more tests are performed to reduce this risk. Thus, with respect to changes in package cost, the system performs rationally by adjusting its testing and package decisions to maximize expected profits.   First, given the quality of the wafers in the training set, all dice had a reasonable prior probability of being good. Second, the value of a good package was sufficient to justify packaging all dice based on these prior probabilities. ", "publication_ref": [], "figure_ref": [], "table_ref": ["tab_16"]}, {"heading": "Changes to Functional Test Cost", "text": "", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "CONCLUDING REMARKS", "text": "", "publication_ref": [], "figure_ref": [], "table_ref": []}], "references": [{"ref_id": "b0", "title": "Bayesian classification", "journal": "Morgan Kaufmann", "year": "1988", "authors": "P Cheeseman; M Self; J Kelly; W Taylor; D Freeman; J Stutz"}, {"ref_id": "b1", "title": "Maximum likelihood from incomplete data via the EM algorithm", "journal": "Journal of the Royal Statistical Society B", "year": "1976", "authors": "A P Dempster; N M Laird; D B Rubin"}, {"ref_id": "b2", "title": "Machine-Learning research: four current directions", "journal": "AAAI Press", "year": "1997", "authors": "T G Dietterich"}, {"ref_id": "b3", "title": "Just enough die-level functional test: Optimizing IC test via machine learning and decision theory. Doctoral dissertation", "journal": "", "year": "1998", "authors": "T Fountain"}, {"ref_id": "b4", "title": "Microchip fabrication: a practical guide to semiconductor processing", "journal": "McGraw-Hill", "year": "1997", "authors": "P Van Zant"}, {"ref_id": "b5", "title": "Handbook of Quality Integrated Circuit Manufacturing", "journal": "Academic Press", "year": "1991", "authors": "R Zorich"}], "figures": [{"figure_label": "1", "figure_type": "figure", "figure_id": "fig_0", "figure_caption": "Figure 1 :1Figure 1: Major IC Manufacturing Steps", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_1", "figure_caption": "real time which die to test and when to stop testing. Because the DLFT is performed by a robotic tester, it can be reprogrammed to test the die in any desired order based on the results of previous tests. The decision-theoretic policy seeks to maximize overall profit by combining a probabilistic model of the spatial distribution of die failures with a utility model of the costs of the IC manufacturing process.", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_2", "figure_caption": "Finally, we haveincluded a wafer disposition decision D, which represents the decision to either package the (noninked) die on the wafer or to scrap the entire wafer. The utility of die i is represented by V i, and it includes the cost of the functional test (indicated by the arrow from F i ), the cost of packaging and package test (indicated by the arrow from I i ), and the selling price of the IC (indicated by the arrow from p i , since the IC can only be sold if it passes package testing). The total utility of the wafer is represented by V, and it includes the sum of the V i 's and also the cost of cutting up the wafer and shipping the die to the packaging facility (indicated by the arrow from D).", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_6", "figure_caption": "(e.g., Asia) far from the wafer fabrication plant (e.g., US). In these cases the delay in feedback and the costs of shipping and handling make the Package All policy risky. Furthermore, after packaging, the physical position of each die on the wafer is no longer known, so the spatial information provided by die-level test is lost. This spatial information is valuable for diagnosing fabrication problems. One of the benefits of the DT policy is that for good wafers it can produce profits comparable to those produced with a Package All policy, but for bad wafers, it can detect process problems while the wafers are still at the fabrication plant the past the point of non-positive VOI until all dice were tested. Then the history of testing decisions was analyzed to find the moment at which the profit would have been maximized had the system stopped then. Profit includes the costs for functional tests up to that point and the rewards obtained by making package decisions at that point.", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_7", "figure_caption": "FigureFigure 7: Detecting Process Problems: Wafer 1", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_9", "figure_caption": "Foreach of these parameters, a series of tests was performed in which the parameter of interest was swept through a range of values and performance on a testing scenario was measured. For these tests, we applied the stochastic model trained on the 600 training wafers from Data Set 1 to test 48 test-set wafers. Performance was measured by the number of functional tests performed, the number of dice packaged, the number of false positives (i.e., bad die packaged), and the number of true negatives (i.e., bad die not packaged).", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_10", "figure_caption": "Let c k represent the normal package cost.Then consider the effects of cutting the package cost in half (.5c k )and of doubling the package cost (2c k ).", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_11", "figure_caption": "Asecond set of tests was performed in which the functional test cost was manipulated. Let c f represent the current cost of a single functional test. Then consider the effects of setting the functional test cost at .1 c f , .67 c f , c f , 1.33 c f , 1.67 c f , 2 c f , and 10 c f . The results are summarized in", "figure_data": ""}, {"figure_label": "", "figure_type": "table", "figure_id": "tab_1", "figure_caption": "patterns of failed die (e.g., in the center, in rings around the center, and most commonly, near the edges of the wafer).", "figure_data": "usually repeat many of the functionalmachine presses electrical probes ontotests that were performed during DLFT.Wafer Fabrication the die contacts, input signals are fed toThe test results from package testing areParametric Test the circuit, and output signals areThe wafers can also be scratched during used to decide which ICs to sell.measured. Functional testing simulatesautomated handling, which creates linearnormalFunctional Test and abnormaloperatingfailure patterns and edge defects. This brief summary shows that Die-Assembly conditions (e.g., high, normal, and lowFinally, defects in the silicon substrate Level Functional Test (DLFT) is notvoltagetests).Theconventionaland in the applied materials, as well as essential to the quality of the finalPackage Test approach to DLFT is exhaustive waferdust particles, can create spatially product, because any failures will beFinal Yield test, i.e., all dice on all wafers undergouniform patterns of die failures. detected during Package Test. Hence,DLFT. If a die fails the functional test,the main purpose of DLFT is to reducean ink dot is placed on it, so that it will2. Wafer parametric test: costs by avoiding packaging defectivenot be packaged later. The decision toParametric tests measure physical and dice. A secondary purpose of DLFT isplace the ink dot is called the \"inkingelectrical parameters of the wafer such to provide rapid feedback to thedecision\". After inking, the wafers areas electrical conductivity and behavior manufacturing process by detecting andtypically shipped to a separate locationof individual sample components diagnosing faulty manufacturingfor packaging.(transistors, processes. The challenge for a decision-capacitors, resistors).Although the above diagram depicts theoretic approach is to reduce the4. Packagingparametric testing as a distinct stage amount of DLFT (and hence reduce itsTo convert the wafers into packaged ICs,following wafer fabrication, in reality, cost) while not appreciably increasingthe wafers are cut into individual dice byparametric the coststests ofare packaging performed anda high-precision diamond saw. Thethroughout the fabrication process. manufacturing.resulting chips are mounted intopackages, electrical contacts are bonded3. Die-level functional test (DLFT)in place, and then a protective coveringFunctional testing typically occurs onceis added.Many stepsthe wafers are completely fabricated andinvolve creating uniform thin layers onthe dice are completely formed andthe wafer (e.g., by placing a drop of 5. Package testfunctional. Functional tests measure theliquid material in the center and then Once the ICs are packaged, they areoperational quality of the individualspinning the wafer), and failures in this tested again to ensure that the packagingdice. A large and expensive roboticprocess can lead to radially-symmetric process was successful. Package tests"}, {"figure_label": "1", "figure_type": "table", "figure_id": "tab_3", "figure_caption": "Wafer Test Utility ModelOur cost model does not capture three important costs. First, the cost (or", "figure_data": ""}, {"figure_label": "2", "figure_type": "table", "figure_id": "tab_6", "figure_caption": "", "figure_data": ": Test Wafer Statistics (DataSet 1)"}, {"figure_label": "3", "figure_type": "table", "figure_id": "tab_7", "figure_caption": "", "figure_data": ": Test Wafer Statistics (DataSet 2)WeappliedtheExpectation-Maximization (EM, Dempster, Laird,and Rubin, 1976) algorithm to train thena\u00efve Bayes stochastic model. Todetermine the number of values of thelatent variable w, we fit models with 1,2, 4, 8, 12, 16, 20, and 24 values to thetraining data from Data Set 1 andmeasured the log likelihood of thewafers in the corresponding validationset.The best validation set loglikelihood was achieved with a modelcontaining 4 classes. For this model, theEM algorithm converged after no morethan 50 iterations, which required lessthan three minute of CPU time. Toobtain our final probability model for thedecision-theoretic tester, we trained a 4-class model on the training data fromData Set 2."}, {"figure_label": "4", "figure_type": "table", "figure_id": "tab_8", "figure_caption": "Four Test Policies on Data Set 1", "figure_data": "TotalNumber NumberProfit Tested PackagedExhaustive 1174900 125400 101516Package1215211 0125400AllDT1218309 5194 122292Oracle???"}, {"figure_label": "5", "figure_type": "table", "figure_id": "tab_9", "figure_caption": "", "figure_data": ""}, {"figure_label": "6", "figure_type": "table", "figure_id": "tab_10", "figure_caption": "", "figure_data": ": Optimal Stopping: Results(Data Set 1)"}, {"figure_label": "6", "figure_type": "table", "figure_id": "tab_11", "figure_caption": "", "figure_data": "summarizes the results of thisexperiment on the test data from DataSet 1. The table shows that greedy VOIStopping tests less than OptimalStopping (performing only about 73% asmany tests) and packages more (about2% more packages). So OptimalStopping spends a bit more on functionaltesting in order to reduce the number ofbad dice packaged. Despite thisdifference, greedy VOI Stoppingperforms very well and realizes over99% of the profit achieved by OptimalStopping."}, {"figure_label": "7", "figure_type": "table", "figure_id": "tab_12", "figure_caption": "", "figure_data": "The simulation results arepresented in Table 8.WIDNGDY11780.8521800.863170.08420.0151380.6661180.56"}, {"figure_label": "7", "figure_type": "table", "figure_id": "tab_13", "figure_caption": "", "figure_data": ": Test Wafer Statistics (WID =wafer id number, NGD = number ofgood dice on wafer, Y = yield)"}, {"figure_label": "8", "figure_type": "table", "figure_id": "tab_14", "figure_caption": "", "figure_data": ": Wafer Test Results (NT =number of die tested, NP = numberpackaged, CP = exhaustive test profit,VOIP = VOI test profit)"}, {"figure_label": "9", "figure_type": "table", "figure_id": "tab_16", "figure_caption": "", "figure_data": ": Robustness Tests: Changes toPackage Cost (NT = number of dietested, NP number packaged, NFP =false positives, NTN = true negatives)"}, {"figure_label": "10", "figure_type": "table", "figure_id": "tab_17", "figure_caption": "", "figure_data": ".NT NPNFPNTN.1C10038286 017462.67C1509 9485 1199 547C796 9672 1386 3601.33C 321 9835 1549 1971.67C 240 9854 1568 1782.0C169 9912 1626 12010C010032 1746 0"}, {"figure_label": "10", "figure_type": "table", "figure_id": "tab_18", "figure_caption": "Results of Changes toFunctional Test Costs (NT = number of die tested, NP = number packaged, NFP = false positives, NTN = true negatives).This table shows that the system behaves rationally by adjusting its testing and packaging decisions to reflect changes in cost parameters. When the package cost is increased, the system tests more to avoid wasting resources by packaging bad dice. On the other hand, when the functional test cost is increased, the system tests less and packages more. If the test cost is set sufficiently low, then the system tests all dice. If the test cost is set sufficiently high, then the system tests none of the dice. In none of the test scenarios was it profitable to miss a good die, so the number of true positives was always equal to the total number of good dice, and the number of false negatives was always zero. This behavior is the result of two factors.", "figure_data": ""}], "formulas": [{"formula_id": "formula_0", "formula_text": "I i (i = 1,\u2026,n).", "formula_coordinates": [6.0, 209.28, 246.44, 79.26, 11.35]}, {"formula_id": "formula_1", "formula_text": "Figure 2: Wafer Test Influence Diagram W N W N W W W Y W c c c c v V Y W Y W v C N W c C N W c j d j j j j j f p k f p k h k j j k f f j f p p j", "formula_coordinates": [6.0, 324.24, 335.96, 200.04, 233.9]}, {"formula_id": "formula_2", "formula_text": "\u2261 = \u2212 \u2261 \u2212 \u2212 \u2212 C N W c c V Y W C C C k k j k h j f p k ( ( ) * ) ( ( ))", "formula_coordinates": [6.0, 378.48, 568.78, 150.84, 27.72]}, {"formula_id": "formula_3", "formula_text": "F 1 I 1 V 1 f 1 p 1 F 2 I 2 V 2 f 2 p 2 F n I n V n f n p n D V", "formula_coordinates": [6.0, 369.84, 145.92, 136.7, 156.45]}, {"formula_id": "formula_4", "formula_text": "term i i U U > max", "formula_coordinates": [8.0, 347.28, 134.13, 67.9, 20.5]}, {"formula_id": "formula_5", "formula_text": "f 2 f 1 f 3 f n w P w ( ) P f w i ( | ) p 2 p 1 p 3 p n P p f i i ( | )", "formula_coordinates": [8.0, 114.96, 266.37, 163.5, 85.59]}], "doi": ""}