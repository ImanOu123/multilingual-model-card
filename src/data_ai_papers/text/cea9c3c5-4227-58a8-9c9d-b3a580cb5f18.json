{"title": "SentiGAN: Generating Sentimental Texts via Mixture Adversarial Networks", "authors": "Ke Wang; Xiaojun Wan", "pub_date": "", "abstract": "Generating texts of different sentiment labels is getting more and more attention in the area of natural language generation. Recently, Generative Adversarial Net (GAN) has shown promising results in text generation. However, the texts generated by GAN usually suffer from the problems of poor quality, lack of diversity and mode collapse. In this paper, we propose a novel framework -SentiGAN, which has multiple generators and one multi-class discriminator, to address the above problems. In our framework, multiple generators are trained simultaneously, aiming at generating texts of different sentiment labels without supervision. We propose a penalty based objective in the generators to force each of them to generate diversified examples of a specific sentiment label. Moreover, the use of multiple generators and one multi-class discriminator can make each generator focus on generating its own examples of a specific sentiment label accurately. Experimental results on four datasets demonstrate that our model consistently outperforms several state-of-the-art text generation methods in the sentiment accuracy and quality of generated texts.", "sections": [{"heading": "Introduction", "text": "Emotional intelligence is an important part of artificial intelligence. Automatic understanding and generation of sentimental texts not only make machines more friendly to humans, but also make them look more intelligent. Nowadays sentiment classification on short texts has made good progress. For instance, one of the state-of-the-art sentiment classifiers has achieved an accuracy of 90% on the Stanford Sentiment Treebank dataset [Hu et al., 2016]. But compared with the success of sentiment classification, generic sentimental text generation is challenging and very few recent attempts have been made to investigate it. Previous work has been mostly limited to task-specific applications and just use hidden variables to indirectly control the sentiment labels of generated texts, especially in emotional response generation [Zhou et al., 2017;Zhou and Wang, 2017]. It is difficult to design an appropriate and specific training objective in deep generative models for sentimental text generation. Generative Adversarial Net (GAN)  is a good solution to this problem which uses a discriminator instead of a specific objective to guide the generator. The main intuition is that since text sentiment classification is very strong, we can use the classifier to guide the generation of sentimental texts.\nIn this study, we aim to generate a variety of high-quality sentimental texts using GAN. That is, in the absence of parallel corpus, we can automatically generate a variety of controllable sentimental texts without supervision. However, there are a few challenges to be addressed when applying GAN to generate sentimental texts. Firstly, the discrete nature of texts leads to a sampling step that is not differentiable, which makes it impossible for the gradient to pass from the discriminator to the generator. Recently, some studies use reinforcement learning which treats the process of discriminator guiding generator as a reinforcement learning policy Guo et al., 2017]. Even though, the generated texts face the problem of poor quality. Secondly, one of the major drawbacks of GAN is the problem of \"mode collapse\", and it has been empirically proven that GAN prefers to generate samples around only a few modes whilst ignoring other modes [Theis et al., 2016]. So there is a lack of diversity in generated texts.\nWe propose a new text generation framework -SentiGAN to address the above issues and generate texts of different sentiment labels. SentiGAN consists of multiple generators and one multi-class discriminator, which are trained simultaneously. Like , we consider the sequence generation procedure as a sequential decision making process. We regard each generative model as a stochastic parametrized policy and use Monte Carlo search to approximate the state-action value. Then we use the discriminator to evaluate the sequence and guide the learning of the generative model. But unlike previous works, our model contains multiple generators and one discriminator. Firstly, we propose a novel penalty based objective, which adopts a more reasonable measure and aims to minimize overall penalties instead of maximizing rewards. It is proved both experimentally and theoretically that, our penalty based objective can force each generator to generate diversified texts of a specific sentiment label, rather than generating examples which are repetitive but \"safe\" and \"good\". Secondly, the use of our discriminator's multi-class classification objective can makes generators more focused on generating their own examples of specific sentiment labels, and stay away from other types of sentiments. This improves the sentiment accuracy of the generated texts.\nWe use a well-performed sentiment classifier as evaluator to verify the sentiment accuracy of the generated texts, as well as several other metrics (i.e., fluency, novelty, diversity, intelligibility) to measure the quality of generated texts from different aspects. We compare our model with several state-ofthe-art deep generative models, including RNNLM [Mikolov et al., 2011], GAN and its variants Lin et al., 2017;Guo et al., 2017], VAEs [Kingma and Welling, 2014;Kingma et al., 2014]. Experimental results on four datasets (i.e., movie reviews, beer reviews, custom reviews and a synthetic dataset) demonstrate that our model consistently outperforms the existing models in both the sentiment accuracy and quality of generated texts.\nThe ", "publication_ref": ["b6", "b4", "b7", "b5", "b6", "b5", "b6"], "figure_ref": [], "table_ref": []}, {"heading": "Related Work", "text": "Unsupervised text generation is an important research area in natural language processing. A standard recurrent neural network language model [Mikolov et al., 2011] predicts each word of a sentence conditioned on the previous word and an evolving hidden state. However, it suffers from two major drawbacks when used to generate texts. First, RNN based models are always trained through the maximum likelihood approach, which suffers from exposure bias . Second, the loss function used to train the model is at word level but the performance is typically evaluated at sentence level. There are some researches which use generative adversarial network (GAN) to solve the problems. Generative Adversarial Nets (GANs)  are a recent novel class of deep generative models. Though GANs achieve great successes on computer vision applications [Denton et al., 2015;Isola et al., 2016;Salimans et al., 2016], there are only a few progresses in natural language generation because the discrete sequences are not differentiable. Some works attempt to solve this problem, including Gumbel-softmax distribution [Kusner andHern\u00e1ndez-Lobato, 2016], Professor Forcing [Lamb et al., 2016] and so on. However, it is more common to tackle the non-differentiable problem with a strategic gradient of reinforcement learning, including SeqGAN , RankGAN [Lin et al., 2017], LeakGAN [Guo et al., 2017]. The effects of these variants of GANs are not very different, and none of these methods can generate samples with diverse attributes. Without loss of generality, we will focus on comparison with SeqGAN in this study. Conditional GAN [Mirza and Osindero, 2014] is a variant of GAN that produces controlled samples which uses a condition variable to guide the generation. This is also one of our main comparisons. LabelGAN [Salimans et al., 2016] uses a discriminator to identify multiple categories which is similar to us, but it has only one generator and does not solving discrete problems in text generation. Other superior unsupervised deep generative models include Variational Autoencoders (VAE) [Kingma and Welling, 2014], semi-supervised VAE (S-VAE) [Kingma et al., 2014]. VAE consists of encoder and generator networks which encode a data example to a latent representation and generate samples from the latent space, respectively. Although VAE does not have the problem of generating discrete data, it has more constraints and restrictions than GAN, and we will also compare our model with it in the experiments.\nOther related work includes product review generation conditioned on specific inputs (e.g., user, product, aspect, ratings) [Dong et al., 2017;Zang and Wan, 2017;Lipton et al., 2015]. These methods usually need a large parallel corpus for learning an encoder-decoder model. Different from these studies, we aim to generate a variety of generic reviews of different sentiment labels.\n3 SentiGA\u00d1 \nz z P 1 1 g ( | ; ) G X S \uf071 z z P g ( | ; ) k k G X S \uf071 r X P ... (Real sample) ( ; ) d D X \uf071 1 1 k k D D D \uf02b \uf0e6 \uf0f6 \uf0e7 \uf0f7 \uf0e7 \uf0f7 \uf0e7 \uf0f7 \uf0e7 \uf0f7 \uf0e8 \uf0f8 real sentiment types Fake \uf0fc \uf0ef \uf0fd \uf0ef \uf0fe Penalty 1 1 V D G G Multi-", "publication_ref": ["b6", "b3", "b6", "b6", "b5", "b6", "b6", "b4", "b6"], "figure_ref": [], "table_ref": []}, {"heading": "Overall Framework", "text": "The framework of our proposed SentiGAN is shown in Figure 1. Supposing we want to generate texts with k types of sentiments(i.e., k sentiment labels), we use k generators {G i (X|S; \u03b8 i g )} i=k i=1 and one discriminator D(X; \u03b8 d ), where \u03b8 i g , \u03b8 d are the parameters of the i-th generator and the discriminator respectively, and the prior input noise z sampled from the distribution P z (e.g., a normal distribution) is used to initialize the generator's input.\nThe whole framework can be divided into two adversarial learning objectives: generator learning and discriminator learning. The goal of the i-th generator G i is to generate texts with the i-th sentiment type that can deceive the discriminator. Specifically, it aims to minimize the penalty based objective that we propose. Instead, the goal of the discrimina-tor is to distinguish between fake texts (texts generated by generators) and real texts with k sentiment types as much as possible, which is the multi-class classification objective we adopt.\nWithout loss of generality, we set k to 2 in the experiments and let SentiGAN generate two types of sentimental texts (positive and negative).", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Generator Learning", "text": "To solve the problem that the gradient cannot pass back to the generative model when the output is discrete, we formalize the text generation problem as a sequential decision making process [Bachman and Precup, 2015]. That is, at each timestep t, we train a generator G i to produce a sequence X 1:t = {X 1 , ..., X t }, where X t represents a word token in the given vocabulary C. G i (X t+1 |S t ; \u03b8 i g ) means the probability that selecting the (t + 1)-th word depends on the previously generated words (its current state), denoted as S t = {X 1 , ..., X t }. And we define a new penalty based loss function L(X):\nL(X) = G i (X t+1 |S t ; \u03b8 i g ) \u2022 V Gi Di (S t , X t+1 ) (1)\nwhere V Gi Di (S t , X t+1 ) is the penalty for a sequence X 1:t+1 which is calculated by the discriminator. Finally, the objective of the i-th generator G i (X|S; \u03b8 i g ) is to minimize the total penalty based value:\nJ Gi (\u03b8 i g ) = E X\u223cPg i [L(X)] = t=|X|\u22121 t=0 G i (X t+1 |S t ; \u03b8 i g ) \u2022 V Gi Di (S t , X t+1 )(2)\nwhere X t \u2208 C. Because the discriminator can only judge on a complete sequence, we apply Monte Carlo search with roll-out policy G i to sample the unknown last |X| \u2212 t tokens. Thus, Our penalty function for the i-th generator is calculated as:\nV Gi Di (S t\u22121 , X t ) = 1 N N n=1 (1 \u2212 D i (X n 1:t ; \u03b8 d )) t < |X| 1 \u2212 D i (X 1:t ; \u03b8 d ) t = |X|\n(3) where X n 1:t is N-time Monte Carlo search sampled based on the roll-out policy G i and the current state, and D i (X n 1:t ; \u03b8 d ) is the sentence probability given by the discriminator that X n 1:t is the real i-th type sentimental text.\nIn addition, our generator here is a simple layer of Long Short-Term Memory (LSTM) [Hochreiter and Schmidhuber, 1997] which outputs the t-th word according to the distribution:\np(X t ) = sof tmax(LST M \u03b8g (h t\u22121 , X t\u22121 )) (4)\nwhere the parameters of the LST M \u03b8g is \u03b8 g , and h t is the hidden state of timestep t. It is worth noticing that our generator can be easily extended to other types of generators as well.", "publication_ref": ["b1"], "figure_ref": [], "table_ref": []}, {"heading": "Discriminator Learning", "text": "Inspired by the discriminator formulation for semi-supervised learning [Salimans et al., 2016], we use a multi-class classification objective that requires the discriminator to distinguish", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Algorithm 1 The adversarial training process in SentiGAN", "text": "Input: Input noise, z; Generators, {Gi(X|S; \u03b8 i g )} i=k i=1 ; Discriminator, D(X; \u03b8 d ); Real text dataset with k types of sentiment, T = {T1, ..., T k }; Output: Well trained generators, {Gi(X|S; \u03b8 i g )} i=k i=1 ; 1: Initialize {Gi} i=k i=1 , D with random weights; 2: Pre-train {Gi} i=k i=1 using MLE on T ; 3: Generate fake texts F = {Fi} i=k i=1 using {Gi} i=k i=1 ; 4: Pre-train D(X; \u03b8 d ) using {T1, ..., T k , F }; 5: repeat 6:\nfor g-steps do 7:\nfor i in 1 \u223c k do 8:\nGenerate fake texts using Gi(z; \u03b8 i g ); 9:\nCalculate penalty V G i D i by Eq (3) ; 10:\nUpdate Gi(z; \u03b8 i g ) by minimizing Eq (2); 11: end for 12:\nend for 13:\nfor d-steps do 14:\nGenerate fake texts F = {Fi} i=k i=1 using {Gi(X|S; \u03b8 i g )} i=k i=1 ; 15: Update D(X; \u03b8 d ) using {T1, ..., T k , F } by minimizing Eq (5); 16:\nend for 17: until SentiGAN converges 18: return ; between the real texts with each sentiment type and the generated texts. In more detail, given the set of k generators, the discriminator produces a softmax probability distribution over k + 1 classes. The score at i-th (i \u2208 {1, .., k}) index (D i ) represents the probability that it belongs to the real i-th type sentimental texts, and the score at (k + 1)-th index represents the probability that the sample is generated by generators. The objective function of the discriminator is to minimize:\nJ D (\u03b8 d ) = \u2212 E X\u223cPg logD k+1 (X; \u03b8 d ) \u2212 k i=1 E X\u223cPr i logD i (X; \u03b8 d )(5)\nwhere P g is texts generated by all generators, P ri is real ith type sentimental texts, and D i (X; \u03b8 d ) represents the i-th index of D(X; \u03b8 d ). Since CNN has recently been shown of great effectiveness in text classification [Zhang and Lecun, 2015], our discriminator here is a layer of CNN which has multiple filters. We perform the adversarial training of generators and discriminator, and train them alternately, as shown in Algorithm 1.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "The Multi-Class Classification Objective", "text": "Here we introduce how our multi-class classification objective can force each generator to focus more on generating its own sentimental texts that are far from sentimental texts generated by other generators, thus it helps improve the sentiment accuracy of the generated texts.\nFirstly, the optimal i-th generator can learn the distribution of the real texts with the i-th sentiment. The objective func-tion of the discriminator is show in Eq (5). Using\nk+1 i=1 D i = 1, D i \u2208 [0, 1]\n, \u2200i, we obtain the optimal distribution learned by the discriminator D:\nD i (X; \u03b8 d ) = Pr i (X) k i=1 Pr i (X)+Pg(X) , i = {1, ...k}, D k+1 (X; \u03b8 d ) = Pg(X) k i=1\nPr i (X)+Pg(X) . Then by using Eq (5), generators' goal is to minimize the following:\nE X\u223cPg log[ P g (X) P avg (X) ] + k i=1 E X\u223cPr i log[ P ri (X) P avg (X) ] \u2212 (k + 1)log(k + 1) =KL( k i=1 P gi (X)||P avg (X)) + k i=1 KL(P ri (X)||P avg (X)) \u2212 (k + 1)log(k + 1),(6)\nwhere\nP avg (x) = k i=1 Pr i (X)+Pg(X) k+1\n, KL means Kullback-Leibler divergence. The above objective obtains its global minimum if P gi = P ri , (i = 1, ..., k) with the objective value of \u2212(k + 1)log(k + 1). In the case of one generator (k = 1), Eq (6) obtains the Jensen-Shannon divergence (JS) with the minimum objective value of \u2212log4.\nSecondly, while keeping \u03b8 d constant, the i-th generator aims to minimize the penalty (V Gi Di ) given by the discriminator. Under the setting of\nk+1 i=1 D i = 1, it is equivalent to minimize k+1 j=1,j =i D j (X; \u03b8 d ).\nIntuitively, in order to get lower penalties from the discriminator, the texts generated by the i-th generator must be more consistent with the i-th sentiment type and be far away from other sentiment types.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "The Penalty-Based Objective", "text": "Here we introduce how the penalty based objective forces generators to generate diversified examples rather than generate repetitive and \"safe\" samples, thus it helps improve the diversity and quality of generated texts. We compare the generator's objective function of GAN, SeqGAN and our Senti-GAN as follows:\nJ G (X) = \uf8f1 \uf8f2 \uf8f3 E X\u223cPg [\u2212log(D(X; \u03b8 d ))] GAN E X\u223cPg [\u2212log(G(X|S; \u03b8g)D(X; \u03b8 d ))] SeqGAN E X\u223cPg [G(X|S; \u03b8 g )V (X)] SentiGAN (7)\nAs can be seen, there are two main improvements in our objective function.\nFirstly, our penalty based objective can be considered as a measure of wasserstein distance [Arjovsky et al., 2017] which always provides meaningful gradients, even when the distributions of P r and P g do not overlap. But KL and JS can not do it. The wasserstein distance of the two distributions is:\nW (P r , P g ) = 1 K sup ||L|| L \u2264K E X\u223cPr [L(X)]\u2212E X\u223cPg [L(X)].(8\n) where function L(X) is needed to satisfy Lipschitz continuity and its Lipschitz constant is K. Since the derivative of log(x) has no upper bound, it does not satisfy Lipschitz continuity, that is, it can not be used as L(X) here. In this paper, we define L(X) as Eq(1).\nSecondly, we use penalty V (X) instead of reward D(X) like SeqGAN. Our penalty-based loss function G(X|S; \u03b8 g )V (X) can be thought of as adding G(X|S; \u03b8 g ) to the reward-based loss function (\u2212G(X|S; \u03b8 g )D(X; \u03b8 d )).", "publication_ref": ["b0"], "figure_ref": [], "table_ref": []}, {"heading": "G(X|S", "text": "; \u03b8 g )V (X) =G(X|S; \u03b8 g )(1 \u2212 D(X; \u03b8 d ) = G(X|S;\u03b8 g )\u2212G(X|S; \u03b8 g )D(X; \u03b8 d )(9)\nTherefore, our penalty-based loss function forces the generator to prefer a smaller G(X|S; \u03b8 g ). Thus it results in the generation of diversified samples, rather than repetitive but \"good\" samples.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Experiments 4.1 Experiment Setup", "text": "The problem of generating very long texts is very challenging in the text generation area and we will study this problem in our future work. Therefore, we simply refer to the work of [Hu et al., 2017] and focus on generating short sentences (length \u2264 15 words) of two sentiment types (positive and negative) on three real datasets.\nMovie Reviews (MR). We use Stanford Sentiment Treebank [Socher et al., 2013] which has two sentiment classes (negative and positive). The original dataset has a total of 9613 sentences. We select sentences containing at most 15 words, and the resulting dataset contains 2133 positive sentences and 2370 negative sentences.\nBeer Reviews (BR). We use the data scraped from Beer-Advocate [Mcauley and Leskovec, 2013]. BeerAdvocate is a large online review community boasting 1,586,614 reviews of 66,051 distinct items composed by 33,387 users. Each review is accompanied by a number of numerical ratings, corresponding to \"appearance\", \"aroma\", \"palate\", \"taste\", and also the user's \"overall\" impression. We select sentences containing at most 15 words, and the resulting dataset contains 1437767 positive sentences and 11202 negative sentences.\nCustomer Reviews (CR). We use customer reviews of various products [Hu and Liu, 2004]. We select sentences containing at most 15 words, and the resulting dataset contains 1024 positive sentences and 501 negative sentences.\nWe train our model on each dataset respectively, and randomly initialize word embeddings with the dimension size of 300. The generators are set as single-layer LSTM-RNNs with input/hidden dimension size of 300 and max sample length of 15 words. The CNN in our discriminator is the same as [Zhang and Lecun, 2015]. The N in Monte Carlo search is set as 15. In the per-training step, we pre-train generators for 120 steps, pre-train the discriminator for 50 steps. In adversarial training, the g-steps is 5 and d-steps is 1. The optimization algorithm is RMSProp. We implement our model based on Tensorflow and use a TITAN X graphic card for learning.", "publication_ref": ["b6", "b6", "b6"], "figure_ref": [], "table_ref": []}, {"heading": "Sentiment Accuracy of Generated Texts", "text": "We use a state-of-the-art sentiment classifier [Hu et al., 2016] which achieves an accuracy of 90% on the SST test set, to automatically evaluate the sentiment accuracy of the generated   We use each model to generate 5K positive sentences and 5K negative sentences, which is trained on each of the above three datasets, respectively. The results are shown in Table 1. In order to investigate whether it is better to train with multiple generators than a single generator, we made a comparison with SentiGAN(k=1). Note that RNNLM, SeqGAN, Senti-GAN(k=1) can not generate texts with two sentiment labels simultaneously, so we train each of these models on positive reviews and negative reviews, respectively.\nFrom the comparison results in Table 1 we can see that our proposed model (SentiGAN(k=2)) outperforms all other methods, including C-GAN and S-VAE. The accuracy achieved by our model is promisingly high, indicating that the framework with mixture of generators and one multiclass discriminator can make each generator to generate their own sentimental texts better. What's more, comparing Senti-GAN(k=2) with SentiGAN(k=1) shows that multiple generators can help each other and thus greatly improve the sentiment accuracy of texts generated by each single generator. In addition, our model remains the leading result, even on the small CR dataset.", "publication_ref": ["b6"], "figure_ref": [], "table_ref": ["tab_1", "tab_1"]}, {"heading": "Quality of Generated Sentences", "text": "Further, we use four other evaluation metrics to measure the quality of generated sentences from various aspects.\nFluency: We use a language modeling toolkit -SRILM [Stolcke, 2002] to test the fluency of generated sentences. SRILM calculates the perplexity of generated sentences using the language model trained on respective corpus. The results are shown in Figure 2. We can see that C-GAN and S-VAE are not good at keeping the fluency of sentences. However, our model maintains good fluency while generating texts of different sentiment labels, and it even significantly outperforms the existing models on the small CR dataset.\nNovelty: We want to investigate how different the generated sentences and the training corpus are. In other words, we want to see if the generator simply copies the sentence in the corpus instead of generating new ones. We calculate the   novelty of each generated sentence S i as follows:\nN ovelty(S i ) = 1 \u2212 max{\u03d5(S i , C j )} j=|C| j=1 (10)\nwhere C is the sentence set of the training corpus, \u03d5 is Jaccard similarity function. The average values over generated sentences are shown in Table 2, we can see that RNNLM, Seq-GAN and VAE are not good at generating new sentences. On the contrary, our model performs exceptionally well, with the ability to generate sentences different from that in the training corpus.\nDiversity: We want to see if the generator can produce a variety of sentences. Given a collection of generated sentences S, we define the diversity of sentences S i as follows:\nDiversity(S i ) = 1 \u2212 max{\u03d5(S i , S j )} j=|S|,j =i j=1 (11)\nwhere \u03d5 is the Jaccard similarity function. We calculate the maximum Jaccard similarity between each sentence S i and other sentences in the collection. The average values are shown in Table 3, and we can see that our model can generate a variety of sentences, while other models can not ensure the diversity of generated sentences.  give it credit , this is our 's brilliant . (Unreadable) one of the greatest movies i have ever seen.\ngood , bloody fun movie funny and entertaining , just an emotionally idea but it was pretty good. makes me smile every time to get on alien . (Unreadable) the best comedy is a science fiction , captain is like a comic legend.\npowerfully moving ! (Very short) Negative one of the most disturbing and sickening movies i have ever seen. very bad comedy. (Very short) a story which fails to rise above its disgusting source material .\na mere shadow of its predecessors the comedy is nonexistent . a timeless classic western dog ... (Wrong sentiment) this is a truly bad movie .\none of those history movie traps Intelligibility: We use human evaluation for evaluating the intelligibility of generated sentences. We randomly extract 100 sentences from the generated sentences and then ask three graduate students to rate each of them according to its intelligibility. The rating score ranges from 1 to 5, and 5 is the best. We finally take the average score across the sentences and the three students, as shown in Figure 3. We can see that our model performs better than all other methods and our model can generate sentimental sentences with best intelligibility. Moreover, comparing the results on different datasets, we can see that more data can train better models with respect to intelligibility (CR < M R < BR).", "publication_ref": [], "figure_ref": ["fig_3", "fig_4"], "table_ref": ["tab_3", "tab_5"]}, {"heading": "Validation of Penalty-Based Objective", "text": "Here we use a synthetic data set to test our proposed model in the mere use of the penalty based objective (i.e., Senti-GAN(k=1)). The synthetic data 1 consists of a set of sequential tokens which can be seen as the simulated data comparing to the real-word language data. We use the oracle model 1 to generate 10, 000 sequences as the training set. We compare our model with various published methods (SeqGAN [Yu et al., 2017], RankGAN [Lin et al., 2017]) on this dataset, as shown in Table 5. And the learning curves are shown in Figure 4. The results show the effectiveness of using penaltybased objective, and our model is better than the other models in capturing the dependency of the sequential tokens.   ", "publication_ref": ["b5"], "figure_ref": [], "table_ref": ["tab_7"]}, {"heading": "Case Study", "text": "In Table 4, we show example sentences generated by Senti-GAN(k=2) and C-GAN trained on the MR dataset. From the examples, we can see some problems(e.g., unreadable, very short, wrong sentiment) with the sentences generated by C-GAN. Whereas, our proposed model produces sentences that are more readable, sentimentally accurate, with better quality, and longer than that of C-GAN.", "publication_ref": [], "figure_ref": [], "table_ref": ["tab_6"]}, {"heading": "Conclusion and Future Work", "text": "In this paper, we propose SentiGAN, which can generate a variety of high-quality texts of different sentiment labels. Extensive experiments demonstrate the efficacy of SentiGAN. In future work, we will make use of more complex and sophisticated generators to enhance the quality of generated texts, especially for longer text generation. We will also apply our model to generate texts with other kinds of labels (e.g., different writing styles).\nof Science, Technology and Standard in Press Industry (Key Laboratory of Intelligent Press Media Technology). We thank the anonymous reviewers for their helpful comments. Xiaojun Wan is the corresponding author.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Acknowledgments", "text": "This work was supported by National Natural Science Foundation of China (61772036, 61331011)  and Key Laboratory", "publication_ref": [], "figure_ref": [], "table_ref": []}], "references": [{"ref_id": "b0", "title": "", "journal": "", "year": "2017", "authors": "[ References;  Arjovsky"}, {"ref_id": "b1", "title": "Data generation as sequential decision making", "journal": "NIPS", "year": "2015", "authors": "Precup ; Philip Bachman; Doina Bachman;  Precup"}, {"ref_id": "b2", "title": "Samy Bengio, Oriol Vinyals, Navdeep Jaitly, and Noam Shazeer. Scheduled sampling for sequence prediction with recurrent neural networks", "journal": "", "year": "2015", "authors": "[ Bengio"}, {"ref_id": "b3", "title": "Deep generative image models using a laplacian pyramid of adversarial networks", "journal": "NIPS", "year": "2015", "authors": "[ Denton"}, {"ref_id": "b4", "title": "Learning to generate product reviews from attributes", "journal": "", "year": "2014", "authors": " Dong"}, {"ref_id": "b5", "title": "Long text generation via adversarial training with leaked information", "journal": "", "year": "1997", "authors": "[ Guo"}, {"ref_id": "b6", "title": "From amateurs to connoisseurs: modeling the evolution of user expertise through online reviews", "journal": "Mirza and Osindero", "year": "2002", "authors": "; Minqing Liu; Bing Hu; ; Liu;  Hu"}, {"ref_id": "b7", "title": "Hongyu Zang and Xiaojun Wan. Towards automatic generation of product reviews from aspect-sentiment scores", "journal": "", "year": "2015", "authors": ""}], "figures": [{"figure_label": "1", "figure_type": "figure", "figure_id": "fig_0", "figure_caption": "Figure 1 :1Figure 1: The framework of SentiGAN with k generators and one multi-class discriminator.", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_2", "figure_caption": "texts. We compare with several state-of-art generic text generation methods, including RNNLM [Mikolov et al., 2011], SeqGAN [Yu et al., 2017], Variational Autoencoders(VAE) [Kingma and Welling, 2014], Conditional GAN(C-GAN) [Mirza and Osindero, 2014] and Semi-supervised VAE(S-VAE) [Kingma et al., 2014]. It is worth noting that pretraining was used for all selected baselines.", "figure_data": ""}, {"figure_label": "2", "figure_type": "figure", "figure_id": "fig_3", "figure_caption": "Figure 2 :2Figure 2: Comparison of fluency (Perplexity) of generated sentences (Lower perplexity means better fluency).", "figure_data": ""}, {"figure_label": "3", "figure_type": "figure", "figure_id": "fig_4", "figure_caption": "Figure 3 :3Figure 3: Comparison of intelligibility of generated sentences by human evaluation.", "figure_data": ""}, {"figure_label": "4", "figure_type": "figure", "figure_id": "fig_5", "figure_caption": "Figure 4 :4Figure 4: The illustration of learning curves. Dotted line is the end of pre-training.", "figure_data": ""}, {"figure_label": "1", "figure_type": "table", "figure_id": "tab_1", "figure_caption": "Comparison of sentiment accuracy of generated sentences. The real data is the training corpus.", "figure_data": ""}, {"figure_label": "2", "figure_type": "table", "figure_id": "tab_3", "figure_caption": "Comparison of the novelty of generated sentences.", "figure_data": ""}, {"figure_label": "3", "figure_type": "table", "figure_id": "tab_5", "figure_caption": "Comparison of the diversity of generated sentences.", "figure_data": "SentiGAN(k=2)C-GANPositivea fantastic finally , simply perfect masterpiece."}, {"figure_label": "4", "figure_type": "table", "figure_id": "tab_6", "figure_caption": "Examples sentences generated by SentiGAN and Conditional GAN trained on MR.", "figure_data": ""}, {"figure_label": "5", "figure_type": "table", "figure_id": "tab_7", "figure_caption": "The performance comparison of different methods on the synthetic data in terms of the negative log-likelihood (NLL) scores.", "figure_data": ""}], "formulas": [{"formula_id": "formula_0", "formula_text": "z z P 1 1 g ( | ; ) G X S \uf071 z z P g ( | ; ) k k G X S \uf071 r X P ... (Real sample) ( ; ) d D X \uf071 1 1 k k D D D \uf02b \uf0e6 \uf0f6 \uf0e7 \uf0f7 \uf0e7 \uf0f7 \uf0e7 \uf0f7 \uf0e7 \uf0f7 \uf0e8 \uf0f8 real sentiment types Fake \uf0fc \uf0ef \uf0fd \uf0ef \uf0fe Penalty 1 1 V D G G Multi-", "formula_coordinates": [2.0, 331.84, 355.93, 213.75, 125.69]}, {"formula_id": "formula_1", "formula_text": "L(X) = G i (X t+1 |S t ; \u03b8 i g ) \u2022 V Gi Di (S t , X t+1 ) (1)", "formula_coordinates": [3.0, 89.28, 279.83, 207.72, 13.47]}, {"formula_id": "formula_2", "formula_text": "J Gi (\u03b8 i g ) = E X\u223cPg i [L(X)] = t=|X|\u22121 t=0 G i (X t+1 |S t ; \u03b8 i g ) \u2022 V Gi Di (S t , X t+1 )(2)", "formula_coordinates": [3.0, 62.64, 352.73, 234.36, 49.48]}, {"formula_id": "formula_3", "formula_text": "V Gi Di (S t\u22121 , X t ) = 1 N N n=1 (1 \u2212 D i (X n 1:t ; \u03b8 d )) t < |X| 1 \u2212 D i (X 1:t ; \u03b8 d ) t = |X|", "formula_coordinates": [3.0, 55.35, 469.84, 239.1, 25.77]}, {"formula_id": "formula_4", "formula_text": "p(X t ) = sof tmax(LST M \u03b8g (h t\u22121 , X t\u22121 )) (4)", "formula_coordinates": [3.0, 86.62, 604.69, 210.39, 9.65]}, {"formula_id": "formula_5", "formula_text": "J D (\u03b8 d ) = \u2212 E X\u223cPg logD k+1 (X; \u03b8 d ) \u2212 k i=1 E X\u223cPr i logD i (X; \u03b8 d )(5)", "formula_coordinates": [3.0, 358.36, 457.38, 199.64, 45.65]}, {"formula_id": "formula_6", "formula_text": "k+1 i=1 D i = 1, D i \u2208 [0, 1]", "formula_coordinates": [4.0, 54.0, 54.19, 242.99, 23.58]}, {"formula_id": "formula_7", "formula_text": "D i (X; \u03b8 d ) = Pr i (X) k i=1 Pr i (X)+Pg(X) , i = {1, ...k}, D k+1 (X; \u03b8 d ) = Pg(X) k i=1", "formula_coordinates": [4.0, 54.0, 78.88, 243.0, 36.21]}, {"formula_id": "formula_8", "formula_text": "E X\u223cPg log[ P g (X) P avg (X) ] + k i=1 E X\u223cPr i log[ P ri (X) P avg (X) ] \u2212 (k + 1)log(k + 1) =KL( k i=1 P gi (X)||P avg (X)) + k i=1 KL(P ri (X)||P avg (X)) \u2212 (k + 1)log(k + 1),(6)", "formula_coordinates": [4.0, 54.0, 142.52, 244.48, 105.7]}, {"formula_id": "formula_9", "formula_text": "P avg (x) = k i=1 Pr i (X)+Pg(X) k+1", "formula_coordinates": [4.0, 83.32, 257.55, 132.15, 16.89]}, {"formula_id": "formula_10", "formula_text": "k+1 i=1 D i = 1, it is equivalent to minimize k+1 j=1,j =i D j (X; \u03b8 d ).", "formula_coordinates": [4.0, 54.0, 353.93, 242.99, 27.95]}, {"formula_id": "formula_11", "formula_text": "J G (X) = \uf8f1 \uf8f2 \uf8f3 E X\u223cPg [\u2212log(D(X; \u03b8 d ))] GAN E X\u223cPg [\u2212log(G(X|S; \u03b8g)D(X; \u03b8 d ))] SeqGAN E X\u223cPg [G(X|S; \u03b8 g )V (X)] SentiGAN (7)", "formula_coordinates": [4.0, 54.0, 510.42, 256.28, 48.0]}, {"formula_id": "formula_12", "formula_text": "W (P r , P g ) = 1 K sup ||L|| L \u2264K E X\u223cPr [L(X)]\u2212E X\u223cPg [L(X)].(8", "formula_coordinates": [4.0, 54.0, 640.95, 247.04, 30.32]}, {"formula_id": "formula_13", "formula_text": "; \u03b8 g )V (X) =G(X|S; \u03b8 g )(1 \u2212 D(X; \u03b8 d ) = G(X|S;\u03b8 g )\u2212G(X|S; \u03b8 g )D(X; \u03b8 d )(9)", "formula_coordinates": [4.0, 368.44, 138.15, 189.56, 23.6]}, {"formula_id": "formula_14", "formula_text": "N ovelty(S i ) = 1 \u2212 max{\u03d5(S i , C j )} j=|C| j=1 (10)", "formula_coordinates": [5.0, 350.22, 355.44, 207.78, 14.07]}, {"formula_id": "formula_15", "formula_text": "Diversity(S i ) = 1 \u2212 max{\u03d5(S i , S j )} j=|S|,j =i j=1 (11)", "formula_coordinates": [5.0, 331.52, 490.97, 226.48, 14.07]}], "doi": ""}