{"title": "Adding Conditional Control to Text-to-Image Diffusion Models", "authors": "Lvmin Zhang; Anyi Rao; Maneesh Agrawala", "pub_date": "2023-11-26", "abstract": "\"masterpiece of fairy tale, giant deer, golden antlers\" Input human pose Default \"chef in kitchen\" \"\u2026, quaint city Galic\" \"Lincoln statue\" Figure 1: Controlling Stable Diffusion with learned conditions. ControlNet allows users to add conditions like Canny edges (top), human pose (bottom), etc., to control the image generation of large pretrained diffusion models. The default results use the prompt \"a high-quality, detailed, and professional image\". Users can optionally give prompts like the \"chef in kitchen\".", "sections": [{"heading": "Introduction", "text": "Many of us have experienced flashes of visual inspiration that we wish to capture in a unique image. With the advent of text-to-image diffusion models [54,62,72], we can now create visually stunning images by typing in a text prompt.\nYet, text-to-image models are limited in the control they provide over the spatial composition of the image; precisely expressing complex layouts, poses, shapes and forms can be difficult via text prompts alone. Generating an image that accurately matches our mental imagery often requires numerous trial-and-error cycles of editing a prompt, inspecting the resulting images and then re-editing the prompt.\nCan we enable finer grained spatial control by letting users provide additional images that directly specify their desired image composition? In computer vision and machine learning, these additional images (e.g., edge maps, human pose skeletons, segmentation maps, depth, normals, etc.) are often treated as conditioning on the image generation process. Image-to-image translation models [34,98] learn the mapping from conditioning images to target images. The research community has also taken steps to control textto-image models with spatial masks [6,20], image editing instructions [10], personalization via finetuning [21,75], etc. While a few problems (e.g., generating image variations, inpainting) can be resolved with training-free techniques like constraining the denoising diffusion process or editing attention layer activations, a wider variety of problems like depth-to-image, pose-to-image, etc., require end-to-end learning and data-driven solutions.\nLearning conditional controls for large text-to-image diffusion models in an end-to-end way is challenging. The amount of training data for a specific condition may be significantly smaller than the data available for general text-toimage training. For instance, the largest datasets for various specific problems (e.g., object shape/normal, human pose extraction, etc.) are usually about 100K in size, which is 50,000 times smaller than the LAION-5B [79] dataset that was used to train Stable Diffusion [82]. The direct finetuning or continued training of a large pretrained model with limited data may cause overfitting and catastrophic forgetting [31,75]. Researchers have shown that such forgetting can be alleviated by restricting the number or rank of trainable parameters [14,25,31,92]. For our problem, designing deeper or more customized neural architectures might be necessary for handling in-the-wild conditioning images with complex shapes and diverse high-level semantics.\nThis paper presents ControlNet, an end-to-end neural network architecture that learns conditional controls for large pretrained text-to-image diffusion models (Stable Diffusion in our implementation). ControlNet preserves the quality and capabilities of the large model by locking its parameters, and also making a trainable copy of its encoding layers. This architecture treats the large pretrained model as a strong backbone for learning diverse conditional controls. The trainable copy and the original, locked model are connected with zero convolution layers, with weights initialized to zeros so that they progressively grow during the training. This architecture ensures that harmful noise is not added to the deep features of the large diffusion model at the beginning of training, and protects the large-scale pretrained backbone in the trainable copy from being damaged by such noise.\nOur experiments show that ControlNet can control Stable Diffusion with various conditioning inputs, including Canny edges, Hough lines, user scribbles, human key points, segmentation maps, shape normals, depths, etc. (Figure 1). We test our approach using a single conditioning image, with or without text prompts, and we demonstrate how our approach supports the composition of multiple conditions. Additionally, we report that the training of ControlNet is robust and scalable on datasets of different sizes, and that for some tasks like depth-to-image conditioning, training Con-trolNets on a single NVIDIA RTX 3090Ti GPU can achieve results competitive with industrial models trained on large computation clusters. Finally, we conduct ablative studies to investigate the contribution of each component of our model, and compare our models to several strong conditional image generation baselines with user studies.\nIn summary, (1) we propose ControlNet, a neural network architecture that can add spatially localized input conditions to a pretrained text-to-image diffusion model via efficient finetuning, (2) we present pretrained ControlNets to control Stable Diffusion, conditioned on Canny edges, Hough lines, user scribbles, human key points, segmentation maps, shape normals, depths, and cartoon line drawings, and (3) we validate the method with ablative experiments comparing to several alternative architectures, and conduct user studies focused on several previous baselines across different tasks.", "publication_ref": ["b52", "b60", "b70", "b32", "b96", "b5", "b18", "b9", "b19", "b73", "b77", "b29", "b73", "b13", "b23", "b29", "b90"], "figure_ref": [], "table_ref": []}, {"heading": "Related Work", "text": "", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Finetuning Neural Networks", "text": "One way to finetune a neural network is to directly continue training it with the additional training data. But this approach can lead to overfitting, mode collapse, and catastrophic forgetting. Extensive research has focused on developing finetuning strategies that avoid such issues. HyperNetwork is an approach that originated in the Natural Language Processing (NLP) community [25], with the aim of training a small recurrent neural network to influence the weights of a larger one. It has been applied to image generation with generative adversarial networks (GANs) [4,18]. Heathen et al. [26] and Kurumuz [43] implement HyperNetworks for Stable Diffusion [72] to change the artistic style of its output images. Adapter methods are widely used in NLP for customizing a pretrained transformer model to other tasks by embedding new module layers into it [30,84]. In computer vision, adapters are used for incremental learning [74] and domain adaptation [70]. This technique is often used with CLIP [66] for transferring pretrained backbone models to different tasks [23,66,85,94]. More recently, adapters have yielded successful results in vision transformers [49,50] and ViT-Adapter [14]. In concurrent work with ours, T2I-Adapter [56] adapts Stable Diffusion to external conditions. Additive Learning circumvents forgetting by freezing the original model weights and adding a small number of new parameters using learned weight masks [51,74], pruning [52], or hard attention [80]. Side-Tuning [92] uses a side branch model to learn extra functionality by linearly blending the outputs of a frozen model and an added network, with a predefined blending weight schedule. Low-Rank Adaptation (LoRA) prevents catastrophic forgetting [31] by learning the offset of parameters with lowrank matrices, based on the observation that many over-parameterized models reside in a low intrinsic dimension subspace [2,47].\nZero-Initialized Layers are used by ControlNet for connecting network blocks. Research on neural networks has extensively discussed the initialization and manipulation of network weights [36,37,44,45,46,76,83,95]. For example, Gaussian initialization of weights can be less risky than initializing with zeros [1]. More recently, Nichol et al. [59] discussed how to scale the initial weight of convolution layers in a diffusion model to improve the training, and their implementation of \"zero module\" is an extreme case to scale weights to zero. Stability's model cards [83] also mention the use of zero weights in neural layers. Manipulating the initial convolution weights is also discussed in ProGAN [36], StyleGAN [37], and Noise2Noise [46].", "publication_ref": ["b23", "b3", "b16", "b24", "b41", "b70", "b28", "b82", "b72", "b68", "b64", "b21", "b64", "b83", "b92", "b47", "b48", "b13", "b54", "b49", "b72", "b50", "b78", "b90", "b29", "b1", "b45", "b34", "b35", "b42", "b43", "b44", "b74", "b81", "b93", "b0", "b57", "b81", "b34", "b35", "b44"], "figure_ref": [], "table_ref": []}, {"heading": "Image Diffusion", "text": "Image Diffusion Models were first introduced by Sohl-Dickstein et al. [81] and have been recently applied to image generation [17,42]. The Latent Diffusion Models (LDM) [72] performs the diffusion steps in the latent image space [19], which reduces the computation cost. Text-toimage diffusion models achieve state-of-the-art image generation results by encoding text inputs into latent vectors via pretrained language models like CLIP [66]. Glide [58] is a text-guided diffusion model supporting image generation and editing. Disco Diffusion [5] processes text prompts with clip guidance. Stable Diffusion [82] is a large-scale implementation of latent diffusion [72]. Imagen [78] directly diffuses pixels using a pyramid structure without using latent images. Commercial products include DALL-E2 [62] and Midjourney [54].\nControlling Image Diffusion Models facilitate personalization, customization, or task-specific image generation. The image diffusion process directly provides some control over color variation [53] and inpainting [67,7]. Text-guided control methods focus on adjusting prompts, manipulating CLIP features, and modifying cross-attention [7,10,20,27,40,41,58,64,67]. MakeAScene [20] encodes segmentation masks into tokens to control image generation. SpaText [6] maps segmentation masks into localized token embeddings. GLIGEN [48] learns new parameters in attention layers of diffusion models for grounded generating. Textual Inversion [21] and DreamBooth [75] can personalize content in the generated image by finetuning the image diffusion model using a small set of user-provided example images. Promptbased image editing [10,33,86] provides practical tools to manipulate images with prompts. Voynov et al. [88] propose an optimization method that fits the diffusion process with sketches. Concurrent works [8,9,32,56] examine a wide variety of ways to control diffusion models. Figure 2: A neural block takes a feature map x as input and outputs another feature map y, as shown in (a). To add a ControlNet to such a block we lock the original block and create a trainable copy and connect them together using zero convolution layers, i.e., 1 \u00d7 1 convolution with both weight and bias initialized to zero. Here c is a conditioning vector that we wish to add to the network, as shown in (b).", "publication_ref": ["b79", "b15", "b40", "b70", "b17", "b64", "b56", "b4", "b70", "b76", "b60", "b52", "b51", "b65", "b6", "b6", "b9", "b18", "b25", "b38", "b39", "b56", "b62", "b65", "b18", "b5", "b46", "b19", "b73", "b9", "b31", "b84", "b86", "b7", "b8", "b30", "b54"], "figure_ref": [], "table_ref": []}, {"heading": "Image-to-Image Translation", "text": "Conditional GANs [15,34,63,90,93,97,98,99] and transformers [13,19,68] ", "publication_ref": ["b14", "b32", "b61", "b88", "b91", "b95", "b96", "b97", "b12", "b17", "b66"], "figure_ref": [], "table_ref": []}, {"heading": "Method", "text": "ControlNet is a neural network architecture that can enhance large pretrained text-to-image diffusion models with spatially localized, task-specific image conditions. We first introduce the basic structure of a ControlNet in Section 3.1 and then describe how we apply a ControlNet to the image diffusion model Stable Diffusion [72] in Section 3.2. We elaborate on our training in Section 3.3 and detail several extra considerations during inference such as composing multiple ControlNets in Section 3.4.", "publication_ref": ["b70"], "figure_ref": [], "table_ref": []}, {"heading": "ControlNet", "text": "ControlNet injects additional conditions into the blocks of a neural network (Figure 2). Herein, we use the term network block to refer to a set of neural layers that are commonly put together to form a single unit of a neural network, e.g., resnet block, conv-bn-relu block, multi-head attention block, transformer block, etc. Suppose F(\u2022; \u0398) is such a trained neural block, with parameters \u0398, that transforms an input feature map x, into another feature map y as y = F(x; \u0398).\n(1)\nIn our setting, x and y are usually 2D feature maps, i.e., x \u2208 R h\u00d7w\u00d7c with {h, w, c} as the height, width, and number of channels in the map, respectively (Figure 2a).\nTo add a ControlNet to such a pre-trained neural block, we lock (freeze) the parameters \u0398 of the original block and simultaneously clone the block to a trainable copy with parameters \u0398 c (Figure 2b). The trainable copy takes an external conditioning vector c as input. When this structure is applied to large models like Stable Diffusion, the locked parameters preserve the production-ready model trained with billions of images, while the trainable copy reuses such largescale pretrained model to establish a deep, robust, and strong backbone for handling diverse input conditions.\nThe trainable copy is connected to the locked model with zero convolution layers, denoted Z(\u2022; \u2022). Specifically, Z(\u2022; \u2022) is a 1 \u00d7 1 convolution layer with both weight and bias initialized to zeros. To build up a ControlNet, we use two instances of zero convolutions with parameters \u0398 z1 and \u0398 z2 respectively. The complete ControlNet then computes\ny c = F(x; \u0398) + Z(F(x + Z(c; \u0398 z1 ); \u0398 c ); \u0398 z2 ), (2)\nwhere y c is the output of the ControlNet block. In the first training step, since both the weight and bias parameters of a zero convolution layer are initialized to zero, both of the Z(\u2022; \u2022) terms in Equation (2) evaluate to zero, and\ny c = y.(3)\nIn this way, harmful noise cannot influence the hidden states of the neural network layers in the trainable copy when the training starts. Moreover, since Z(c; \u0398 z1 ) = 0 and the trainable copy also receives the input image x, the trainable copy is fully functional and retains the capabilities of the large, pretrained model allowing it to serve as a strong backbone for further learning. Zero convolutions protect this backbone by eliminating random noise as gradients in the initial training steps. We detail the gradient calculation for zero convolutions in supplementary materials.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "ControlNet for Text-to-Image Diffusion", "text": "We use Stable Diffusion [72] as an example to show how ControlNet can add conditional control to a large pretrained diffusion model. Stable Diffusion is essentially a U-Net [73] with an encoder, a middle block, and a skip-connected decoder. Both the encoder and decoder contain 12 blocks, and the full model contains 25 blocks, including the middle block. Of the 25 blocks, 8 blocks are down-sampling or up-sampling convolution layers, while the other 17 blocks are main blocks that each contain 4 resnet layers and 2 Vision Transformers (ViTs). Each ViT contains several crossattention and self-attention mechanisms. For example, in Figure 3a, the \"SD Encoder Block A\" contains 4 resnet layers and 2 ViTs, while the \"\u00d73\" indicates that this block is repeated three times. Text prompts are encoded using the  The trainable blue blocks and the white zero convolution layers are added to build a ControlNet.\nCLIP text encoder [66], and diffusion timesteps are encoded with a time encoder using positional encoding. The ControlNet structure is applied to each encoder level of the U-net (Figure 3b). In particular, we use ControlNet to create a trainable copy of the 12 encoding blocks and 1 middle block of Stable Diffusion. The 12 encoding blocks are in 4 resolutions (64 \u00d7 64, 32 \u00d7 32, 16 \u00d7 16, 8 \u00d7 8) with each one replicated 3 times. The outputs are added to the 12 skip-connections and 1 middle block of the U-net. Since Stable Diffusion is a typical U-net structure, this ControlNet architecture is likely to be applicable with other models.\nThe way we connect the ControlNet is computationally efficient -since the locked copy parameters are frozen, no gradient computation is required in the originally locked encoder for the finetuning. This approach speeds up training and saves GPU memory. As tested on a single NVIDIA A100 PCIE 40GB, optimizing Stable Diffusion with Control-Net requires only about 23% more GPU memory and 34% more time in each training iteration, compared to optimizing Stable Diffusion without ControlNet.\nImage diffusion models learn to progressively denoise images and generate samples from the training domain. The denoising process can occur in pixel space or in a latent space encoded from training data. Stable Diffusion uses latent images as the training domain as working in this space has been shown to stabilize the training process [72]. Specifically, Stable Diffusion uses a pre-processing method similar to VQ-GAN [19] to convert 512 \u00d7 512 pixel-space images into smaller 64 \u00d7 64 latent images. To add ControlNet to Stable Diffusion, we first convert each input conditioning image (e.g., edge, pose, depth, etc.) from an input size of 512 \u00d7 512 into a 64 \u00d7 64 feature space vector that matches the size of Stable Diffusion. In particular, we use a tiny network E(\u2022) of four convolution layers with 4 \u00d7 4 kernels and 2 \u00d7 2 strides (activated by ReLU, using 16, 32, 64, 128, channels respectively, initialized with Gaussian weights and trained jointly with the full model) to encode an image-space condition c i into a feature space conditioning vector c f as,\nc f = E(c i ).(4)\nThe conditioning vector c f is passed into the ControlNet.", "publication_ref": ["b70", "b71", "b64", "b70", "b17"], "figure_ref": ["fig_1", "fig_1"], "table_ref": []}, {"heading": "Training", "text": "Given an input image z 0 , image diffusion algorithms progressively add noise to the image and produce a noisy image z t , where t represents the number of times noise is added. Given a set of conditions including time step t, text prompts c t , as well as a task-specific condition c f , image diffusion algorithms learn a network \u03f5 \u03b8 to predict the noise added to the noisy image z t with\nL = E z0,t,ct,cf,\u03f5\u223cN (0,1) \u2225\u03f5 \u2212 \u03f5 \u03b8 (z t , t, c t , c f ))\u2225 2 2 , (5\n)\nwhere L is the overall learning objective of the entire diffusion model. This learning objective is directly used in finetuning diffusion models with ControlNet.\nIn the training process, we randomly replace 50% text prompts c t with empty strings. This approach increases ControlNet's ability to directly recognize semantics in the input conditioning images (e.g., edges, poses, depth, etc.) as a replacement for the prompt.\nDuring the training process, since zero convolutions do not add noise to the network, the model should always be able to predict high-quality images. We observe that the model does not gradually learn the control conditions but abruptly succeeds in following the input conditioning image; usually in less than 10K optimization steps. As shown in Figure 4, we call this the \"sudden convergence phenomenon\".", "publication_ref": [], "figure_ref": ["fig_2"], "table_ref": []}, {"heading": "Inference", "text": "We can further control how the extra conditions of Con-trolNet affect the denoising diffusion process in several ways.    Classifier-free guidance resolution weighting. Stable Diffusion depends on a technique called Classifier-Free Guidance (CFG) [29] to generate high-quality images. CFG is formulated as \u03f5 prd = \u03f5 uc + \u03b2 cfg (\u03f5 c \u2212 \u03f5 uc ) where \u03f5 prd , \u03f5 uc , \u03f5 c , \u03b2 cfg are the model's final output, unconditional output, conditional output, and a user-specified weight respectively. When a conditioning image is added via ControlNet, it can be added to both \u03f5 uc and \u03f5 c , or only to the \u03f5 c . In challenging cases, e.g., when no prompts are given, adding it to both \u03f5 uc and \u03f5 c will completely remove CFG guidance (Figure 5b); using only \u03f5 c will make the guidance very strong (Figure 5c). Our solution is to first add the conditioning image to \u03f5 c and Sketch Normal map Depth map Canny [11] edge M-LSD [24] line HED [91] edge ADE20k [96] seg. Human pose  then multiply a weight w i to each connection between Stable Diffusion and ControlNet according to the resolution of each block w i = 64/h i , where h i is the size of i th block, e.g., h 1 = 8, h 2 = 16, ..., h 13 = 64. By reducing the CFG guidance strength , we can achieve the result shown in Figure 5d, and we call this CFG Resolution Weighting.\nComposing multiple ControlNets. To apply multiple conditioning images (e.g., Canny edges, and pose) to a single instance of Stable Diffusion, we can directly add the outputs of the corresponding ControlNets to the Stable Diffusion model (Figure 6). No extra weighting or linear interpolation is necessary for such composition.", "publication_ref": ["b27", "b10", "b22", "b89", "b94"], "figure_ref": ["fig_4", "fig_4", "fig_4", "fig_5"], "table_ref": []}, {"heading": "Experiments", "text": "We implement ControlNets with Stable Diffusion to test various conditions, including Canny Edge [11], Depth Map [69], Normal Map [87], M-LSD lines [24], HED soft edge [91], ADE20K segmentation [96], Openpose [12], and user sketches. See also the supplementary material for examples of each conditioning along with detailed training and inference parameters.", "publication_ref": ["b10", "b67", "b85", "b22", "b89", "b94", "b11"], "figure_ref": [], "table_ref": []}, {"heading": "Qualitative Results", "text": "Figure 1 shows the generated images in several prompt settings. Figure 7 shows our results with various conditions without prompts, where the ControlNet robustly interprets content semantics in diverse input conditioning images.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Ablative Study", "text": "We study alternative structures of ControlNets by (1) replacing the zero convolutions with standard convolution layers initialized with Gaussian weights, and (2) replacing each block's trainable copy with one single convolution layer, which we call ControlNet-lite. See also the supplementary material for the full details of these ablative structures.\nWe present 4 prompt settings to test with possible behaviors of real-world users: (1) no prompt; (2) insufficient prompts that do not fully cover objects in conditioning images, e.g., the default prompt of this paper \"a high-quality, detailed, and professional image\"; (3) conflicting prompts that change the semantics of conditioning images; (4) perfect prompts that describe necessary content semantics, e.g., \"a nice house\". Figure 8a shows that ControlNet succeeds in  ADE20K (GT) VQGAN [19] LDM [72] PITI [89] ControlNet-lite ControlNet 0.58 \u00b1 0.10 0.21 \u00b1 0.15 0.31 \u00b1 0.09 0.26 \u00b1 0.16 0.32 \u00b1 0.12 0.35 \u00b1 0.14  8c) is not strong enough to interpret the conditioning images and fails in the insufficient and no prompt conditions. When zero convolutions are replaced, the performance of ControlNet drops to about the same as ControlNet-lite, indicating that the pretrained backbone of the trainable copy is destroyed during finetuning (Figure 8b).", "publication_ref": ["b17", "b70", "b87"], "figure_ref": ["fig_7", "fig_7", "fig_7"], "table_ref": []}, {"heading": "Quantitative Evaluation", "text": "User study. We sample 20 unseen hand-drawn sketches, and then assign each sketch to 5 methods: PITI [89]'s sketch model, Sketch-Guided Diffusion (SGD) [88] with default edge-guidance scale (\u03b2 = 1.6), SGD [88] with relatively high edge-guidance scale (\u03b2 = 3.2), the aforementioned ControlNet-lite, and ControlNet. We invited 12 users to rank these 20 groups of 5 results individually in terms of \"the quality of displayed images\" and \"the fidelity to the sketch\".\nIn this way, we obtain 100 rankings for result quality and 100 for condition fidelity. We use the Average Human Ranking (AHR) as a preference metric where users rank each result on a scale of 1 to 5 (lower is worse). The average rankings are shown in Table 1.   Comparison to previous methods.We present the qualitative comparisons to PITI [89], Sketch-Guided Diffusion [88], and Taming Transformers [19].\nFormer to detect the segmentations again to compute the reconstructed IoUs (Table 2). Besides, we use Frechet Inception Distance (FID) [28] to measure the distribution distance over randomly generated 512\u00d7512 image sets using different segmentation-conditioned methods, as well as text-image CLIP scores [66] and CLIP aesthetic score [79] in Table 3. See also the supplementary material for detailed settings.", "publication_ref": ["b87", "b86", "b86", "b87", "b86", "b17", "b26", "b64", "b77"], "figure_ref": [], "table_ref": ["tab_3", "tab_4", "tab_6"]}, {"heading": "Comparison to Previous Methods", "text": "Figure 9 presents a visual comparison of baselines and our method (Stable Diffusion + ControlNet). Specifically, we show the results of PITI [89], Sketch-Guided Diffusion [88], and Taming Transformers [19]. (Note that the backbone of PITI is OpenAI GLIDE [57] that have different visual quality and performance.) We observe that ControlNet can robustly handle diverse conditioning images and achieves sharp and clean results.  the model to generate a recognizable lion. The learning is scalable when more data is provided. Capability to interpret contents. We showcase Control-Net's capability to capture the semantics from input conditioning images in Figure 11. Transferring to community models. Since ControlNets do not change the network topology of pretrained SD models, it can be directly applied to various models in the stable diffusion community, such as Comic Diffusion [61] and Protogen 3.4 [16], in Figure 12.", "publication_ref": ["b87", "b86", "b17", "b55", "b59"], "figure_ref": ["fig_8", "fig_10"], "table_ref": []}, {"heading": "Conclusion", "text": "ControlNet is a neural network structure that learns conditional control for large pretrained text-to-image diffusion models. It reuses the large-scale pretrained layers of source models to build a deep and strong encoder to learn specific conditions. The original model and trainable copy are connected via \"zero convolution\" layers that eliminate harmful noise during training. Extensive experiments verify that Con-trolNet can effectively control Stable Diffusion with single or multiple conditions, with or without prompts. Results on diverse conditioning datasets show that the ControlNet struc-ture is likely to be applicable to a wider range of conditions, and facilitate relevant applications.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Acknowledgment", "text": "This work was partially supported by the Stanford Institute for Human-Centered AI and the Brown Institute for Media Innovation.", "publication_ref": [], "figure_ref": [], "table_ref": []}], "references": [{"ref_id": "b0", "title": "Weight initialization in neural network, inspired by andrew ng", "journal": "", "year": "", "authors": " Sadia Afrin"}, {"ref_id": "b1", "title": "Intrinsic dimensionality explains the effectiveness of language model fine-tuning", "journal": "Association for Computational Linguistics", "year": "2021-08", "authors": "Armen Aghajanyan; Sonal Gupta; Luke Zettlemoyer"}, {"ref_id": "b2", "title": "Only a matter of style: Age transformation using a style-based regression model", "journal": "ACM Transactions on Graphics (TOG)", "year": "", "authors": "Yuval Alaluf; Or Patashnik; Daniel Cohen-Or"}, {"ref_id": "b3", "title": "Hyperstyle: Stylegan inversion with hypernetworks for real image editing", "journal": "", "year": "", "authors": "Yuval Alaluf; Omer Tov; Ron Mokady"}, {"ref_id": "b4", "title": "", "journal": "Alembics. Disco diffusion", "year": "", "authors": ""}, {"ref_id": "b5", "title": "Spatext: Spatio-textual representation for controllable image generation", "journal": "", "year": "2022", "authors": "Omri Avrahami; Thomas Hayes; Oran Gafni; Sonal Gupta; Yaniv Taigman; Devi Parikh; Dani Lischinski; Ohad Fried; Xi Yin"}, {"ref_id": "b6", "title": "Blended diffusion for text-driven editing of natural images", "journal": "", "year": "", "authors": "Omri Avrahami; Dani Lischinski; Ohad Fried"}, {"ref_id": "b7", "title": "Multidiffusion: Fusing diffusion paths for controlled image generation", "journal": "", "year": "2023", "authors": "Omer Bar-Tal; Lior Yariv; Yaron Lipman; Tali Dekel"}, {"ref_id": "b8", "title": "Unpaired structure-guided masked image generation", "journal": "", "year": "2023", "authors": "Dina Bashkirova; Jose Lezama; Kihyuk Sohn; Kate Saenko; Irfan Essa Masksketch"}, {"ref_id": "b9", "title": "-structpix2pix: Learning to follow image editing instructions", "journal": "", "year": "2022", "authors": "Tim Brooks; Aleksander Holynski; Alexei A Efros"}, {"ref_id": "b10", "title": "A computational approach to edge detection", "journal": "IEEE Transactions on Pattern Analysis and Machine Intelligence", "year": "1986", "authors": "John Canny"}, {"ref_id": "b11", "title": "Openpose: Realtime multi-person 2d pose estimation using part affinity fields", "journal": "IEEE Transactions on Pattern Analysis and Machine Intelligence", "year": "2019", "authors": "Z Cao; G Hidalgo; T Martinez; S Simon; Y A Wei;  Sheikh"}, {"ref_id": "b12", "title": "Pre-trained image processing transformer", "journal": "", "year": "2021", "authors": "Hanting Chen; Yunhe Wang; Tianyu Guo; Chang Xu; Yiping Deng; Zhenhua Liu; Siwei Ma; Chunjing Xu; Chao Xu; Wen Gao"}, {"ref_id": "b13", "title": "Vision transformer adapter for dense predictions", "journal": "", "year": "", "authors": "Zhe Chen; Yuchen Duan; Wenhai Wang; Junjun He; Tong Lu; Jifeng Dai; Yu Qiao"}, {"ref_id": "b14", "title": "Stargan: Unified generative adversarial networks for multi-domain image-to-image translation", "journal": "", "year": "2018", "authors": "Yunjey Choi; Minje Choi; Munyoung Kim; Jung-Woo Ha; Sunghun Kim; Jaegul Choo"}, {"ref_id": "b15", "title": "Diffusion models beat gans on image synthesis", "journal": "", "year": "2021", "authors": "Prafulla Dhariwal; Alexander Nichol"}, {"ref_id": "b16", "title": "Hyperinverter: Improving stylegan inversion via hypernetwork", "journal": "", "year": "", "authors": "M Tan; Anh Tuan Dinh; Rang Tran; Binh-Son Nguyen;  Hua"}, {"ref_id": "b17", "title": "Taming transformers for high-resolution image synthesis", "journal": "", "year": "2008", "authors": "Patrick Esser; Robin Rombach; Bjorn Ommer"}, {"ref_id": "b18", "title": "Make-a-scene: Scenebased text-to-image generation with human priors", "journal": "Springer", "year": "2022", "authors": "Oran Gafni; Adam Polyak; Oron Ashual; Shelly Sheynin; Devi Parikh; Yaniv Taigman"}, {"ref_id": "b19", "title": "An image is worth one word: Personalizing text-to-image generation using textual inversion", "journal": "", "year": "2022", "authors": "Rinon Gal; Yuval Alaluf; Yuval Atzmon; Or Patashnik; H Amit; Gal Bermano; Daniel Chechik;  Cohen-Or"}, {"ref_id": "b20", "title": "Stylegan-nada: Clipguided domain adaptation of image generators", "journal": "ACM Transactions on Graphics (TOG)", "year": "", "authors": "Rinon Gal; Or Patashnik; Haggai Maron; H Amit; Gal Bermano; Daniel Chechik;  Cohen-Or"}, {"ref_id": "b21", "title": "Clipadapter: Better vision-language models with feature adapters", "journal": "", "year": "2021", "authors": "Peng Gao; Shijie Geng; Renrui Zhang; Teli Ma; Rongyao Fang; Yongfeng Zhang; Hongsheng Li; Yu Qiao"}, {"ref_id": "b22", "title": "Towards light-weight and real-time line segment detection", "journal": "", "year": "", "authors": "Geonmo Gu; Byungsoo Ko; Seounghyun Go; Sung-Hyun Lee; Jingeun Lee; Minchul Shin"}, {"ref_id": "b23", "title": "International Conference on Learning Representations", "journal": "", "year": "2017", "authors": "David Ha; Andrew M Dai; Quoc V Le;  Hypernetworks"}, {"ref_id": "b24", "title": "Hypernetwork style training, a tiny guide, stablediffusion-webui", "journal": "", "year": "", "authors": " Heathen"}, {"ref_id": "b25", "title": "Prompt-to-prompt image editing with cross attention control", "journal": "", "year": "2022", "authors": "Amir Hertz; Ron Mokady; Jay Tenenbaum; Kfir Aberman; Yael Pritch; Daniel Cohen-Or"}, {"ref_id": "b26", "title": "Gans trained by a two time-scale update rule converge to a local nash equilibrium", "journal": "Curran Associates, Inc", "year": "2017", "authors": "Martin Heusel; Hubert Ramsauer; Thomas Unterthiner; Bernhard Nessler; Sepp Hochreiter"}, {"ref_id": "b27", "title": "Classifier-free diffusion guidance", "journal": "", "year": "2022", "authors": "Jonathan Ho; Tim Salimans"}, {"ref_id": "b28", "title": "Parameter-efficient transfer learning for nlp", "journal": "", "year": "2019", "authors": "Neil Houlsby; Andrei Giurgiu; Stanislaw Jastrzebski; Bruna Morrone; Quentin De Laroussilhe; Andrea Gesmundo; Mona Attariyan; Sylvain Gelly"}, {"ref_id": "b29", "title": "Low-rank adaptation of large language models", "journal": "", "year": "2021", "authors": "J Edward; Yelong Hu; Phillip Shen; Zeyuan Wallis; Yuanzhi Allen-Zhu; Shean Li; Lu Wang; Weizhu Wang;  Chen;  Lora"}, {"ref_id": "b30", "title": "Composer: Creative and controllable image synthesis with composable conditions", "journal": "", "year": "", "authors": "Lianghua Huang; Di Chen; Yu Liu; Deli Shen Yujun; Zhou Zhao;  Jingren"}, {"ref_id": "b31", "title": "Region-aware diffusion for zero-shot textdriven image editing", "journal": "", "year": "2023", "authors": "Nisha Huang; Fan Tang; Weiming Dong; Tong-Yee Lee; Changsheng Xu"}, {"ref_id": "b32", "title": "Image-to-image translation with conditional adversarial networks", "journal": "", "year": "2017", "authors": "Phillip Isola; Jun-Yan Zhu; Tinghui Zhou; Alexei A Efros"}, {"ref_id": "b33", "title": "OneFormer: One Transformer to Rule Universal Image Segmentation", "journal": "", "year": "2023", "authors": "Jitesh Jain; Jiachen Li; Mangtik Chiu; Ali Hassani; Nikita Orlov; Humphrey Shi"}, {"ref_id": "b34", "title": "Progressive growing of gans for improved quality, stability, and variation", "journal": "", "year": "2018", "authors": "Tero Karras; Timo Aila; Samuli Laine; Jaakko Lehtinen"}, {"ref_id": "b35", "title": "A style-based generator architecture for generative adversarial networks", "journal": "", "year": "2019", "authors": "Tero Karras; Samuli Laine; Timo Aila"}, {"ref_id": "b36", "title": "A style-based generator architecture for generative adversarial networks", "journal": "IEEE Transactions on Pattern Analysis", "year": "2021", "authors": "Tero Karras; Samuli Laine; Timo Aila"}, {"ref_id": "b37", "title": "Multi-level latent space structuring for generative control", "journal": "", "year": "", "authors": "Oren Katzir; Vicky Perepelook; Dani Lischinski; Daniel Cohen-Or"}, {"ref_id": "b38", "title": "Imagic: Text-based real image editing with diffusion models", "journal": "", "year": "2022", "authors": "Bahjat Kawar; Shiran Zada; Oran Lang; Omer Tov; Huiwen Chang; Tali Dekel; Inbar Mosseri; Michal Irani"}, {"ref_id": "b39", "title": "Diffusionclip: Text-guided diffusion models for robust image manipulation", "journal": "", "year": "", "authors": "Gwanghyun Kim; Taesung Kwon; Jong Chul Ye"}, {"ref_id": "b40", "title": "Variational diffusion models", "journal": "", "year": "2021", "authors": "Diederik Kingma; Tim Salimans; Ben Poole; Jonathan Ho"}, {"ref_id": "b41", "title": "Novelai improvements on stable diffusion", "journal": "", "year": "", "authors": " Kurumuz"}, {"ref_id": "b42", "title": "Deep learning", "journal": "Nature", "year": "2003", "authors": "Yann Lecun; Yoshua Bengio; Geoffrey Hinton"}, {"ref_id": "b43", "title": "Gradientbased learning applied to document recognition", "journal": "Proceedings of the IEEE", "year": "1998", "authors": "Y Lecun; L Bottou; Y Bengio; P Haffner"}, {"ref_id": "b44", "title": "Noise2noise: Learning image restoration without clean data", "journal": "", "year": "2018", "authors": "Jaakko Lehtinen; Jacob Munkberg; Jon Hasselgren; Samuli Laine; Tero Karras; Miika Aittala; Timo Aila"}, {"ref_id": "b45", "title": "Measuring the intrinsic dimension of objective landscapes", "journal": "International Conference on Learning Representations", "year": "2018", "authors": "Chunyuan Li; Heerad Farkhoor; Rosanne Liu; Jason Yosinski"}, {"ref_id": "b46", "title": "Gligen: Open-set grounded text-to-image generation", "journal": "", "year": "", "authors": "Yuheng Li; Haotian Liu; Qingyang Wu; Fangzhou Mu; Jianwei Yang; Jianfeng Gao; Chunyuan Li; Yong Jae Lee"}, {"ref_id": "b47", "title": "Exploring plain vision transformer backbones for object detection", "journal": "", "year": "", "authors": "Yanghao Li; Hanzi Mao; Ross Girshick; Kaiming He"}, {"ref_id": "b48", "title": "Benchmarking detection transfer learning with vision transformers", "journal": "", "year": "2021", "authors": "Yanghao Li; Saining Xie; Xinlei Chen; Piotr Dollar; Kaiming He; Ross Girshick"}, {"ref_id": "b49", "title": "Piggyback: Adapting a single network to multiple tasks by learning to mask weights", "journal": "", "year": "2018", "authors": "Arun Mallya; Dillon Davis; Svetlana Lazebnik"}, {"ref_id": "b50", "title": "Packnet: Adding multiple tasks to a single network by iterative pruning", "journal": "", "year": "2018", "authors": "Arun Mallya; Svetlana Lazebnik"}, {"ref_id": "b51", "title": "Sdedit: Guided image synthesis and editing with stochastic differential equations", "journal": "", "year": "2021", "authors": "Chenlin Meng; Yutong He; Yang Song; Jiaming Song; Jiajun Wu; Jun-Yan Zhu; Stefano Ermon"}, {"ref_id": "b52", "title": "", "journal": "", "year": "", "authors": " Midjourney"}, {"ref_id": "b53", "title": "Selfdistilled stylegan: Towards generation from internet photos", "journal": "", "year": "2022", "authors": "Ron Mokady; Omer Tov; Michal Yarom; Oran Lang; Inbar Mosseri; Tali Dekel; Daniel Cohen-Or; Michal Irani"}, {"ref_id": "b54", "title": "T2i-adapter: Learning adapters to dig out more controllable ability for text-to-image diffusion models", "journal": "", "year": "2023", "authors": "Chong Mou; Xintao Wang; Liangbin Xie; Jian Zhang; Zhongang Qi; Ying Shan; Xiaohu Qie"}, {"ref_id": "b55", "title": "GLIDE: towards photorealistic image generation and editing with text-guided diffusion models", "journal": "CoRR", "year": "2021", "authors": "Alex Nichol; Prafulla Dhariwal; Aditya Ramesh; Pranav Shyam; Pamela Mishkin; Bob Mcgrew; Ilya Sutskever; Mark Chen"}, {"ref_id": "b56", "title": "Glide: Towards photorealistic image generation and editing with text-guided diffusion models", "journal": "", "year": "", "authors": "Alex Nichol; Prafulla Dhariwal; Aditya Ramesh; Pranav Shyam; Pamela Mishkin; Bob Mcgrew; Ilya Sutskever; Mark Chen"}, {"ref_id": "b57", "title": "Improved denoising diffusion probabilistic models", "journal": "", "year": "", "authors": "Alexander Quinn; Nichol ; Prafulla Dhariwal"}, {"ref_id": "b58", "title": "Mystyle: A personalized generative prior", "journal": "", "year": "2022", "authors": "Yotam Nitzan; Kfir Aberman; Qiurui He; Orly Liba; Michal Yarom; Yossi Gandelsman; Inbar Mosseri; Yael Pritch; Daniel Cohen-Or"}, {"ref_id": "b59", "title": "Comic-diffusion v2", "journal": "", "year": "", "authors": ""}, {"ref_id": "b60", "title": "", "journal": "", "year": "2023", "authors": " Openai"}, {"ref_id": "b61", "title": "Semantic image synthesis with spatially-adaptive normalization", "journal": "", "year": "2019", "authors": "Taesung Park; Ming-Yu Liu; Ting-Chun Wang; Jun-Yan Zhu"}, {"ref_id": "b62", "title": "Zero-shot image-to-image translation", "journal": "", "year": "2023", "authors": "Gaurav Parmar; Krishna Kumar Singh; Richard Zhang; Yijun Li; Jingwan Lu; Jun-Yan Zhu"}, {"ref_id": "b63", "title": "Styleclip: Text-driven manipulation of stylegan imagery", "journal": "", "year": "2003", "authors": "Or Patashnik; Zongze Wu; Eli Shechtman; Daniel Cohen-Or; Dani Lischinski"}, {"ref_id": "b64", "title": "Learning transferable visual models from natural language supervision", "journal": "", "year": "2008", "authors": "Alec Radford; Jong Wook Kim; Chris Hallacy; Aditya Ramesh; Gabriel Goh; Sandhini Agarwal; Girish Sastry; Amanda Askell; Pamela Mishkin; Jack Clark"}, {"ref_id": "b65", "title": "Hierarchical text-conditional image generation with clip latents", "journal": "", "year": "", "authors": "Aditya Ramesh; Prafulla Dhariwal; Alex Nichol; Casey Chu; Mark Chen"}, {"ref_id": "b66", "title": "Zero-shot text-to-image generation", "journal": "", "year": "", "authors": "Aditya Ramesh; Mikhail Pavlov; Gabriel Goh; Scott Gray; Chelsea Voss; Alec Radford; Mark Chen; Ilya Sutskever"}, {"ref_id": "b67", "title": "Towards robust monocular depth estimation: Mixing datasets for zero-shot cross-dataset transfer", "journal": "IEEE Transactions on Pattern Analysis and Machine Intelligence", "year": "2020", "authors": "Ren\u00e9 Ranftl; Katrin Lasinger; David Hafner; Konrad Schindler; Vladlen Koltun"}, {"ref_id": "b68", "title": "Efficient parametrization of multi-domain deep neural networks", "journal": "", "year": "2018", "authors": "Hakan Sylvestre-Alvise Rebuffi; Andrea Bilen;  Vedaldi"}, {"ref_id": "b69", "title": "Encoding in style: a stylegan encoder for image-to-image translation", "journal": "", "year": "2021", "authors": "Elad Richardson; Yuval Alaluf; Or Patashnik; Yotam Nitzan; Yaniv Azar; Stav Shapiro; Daniel Cohen-Or"}, {"ref_id": "b70", "title": "High-resolution image synthesis with latent diffusion models", "journal": "", "year": "2007", "authors": "Robin Rombach; Andreas Blattmann; Dominik Lorenz; Patrick Esser; Bj\u00f6rn Ommer"}, {"ref_id": "b71", "title": "U-net: Convolutional networks for biomedical image segmentation", "journal": "", "year": "2015", "authors": "Olaf Ronneberger; Philipp Fischer; Thomas Brox"}, {"ref_id": "b72", "title": "Incremental learning through deep adaptation", "journal": "IEEE Transactions on Pattern Analysis and Machine Intelligence", "year": "2018", "authors": "Amir Rosenfeld;  John K Tsotsos"}, {"ref_id": "b73", "title": "Dreambooth: Fine tuning text-to-image diffusion models for subject-driven generation", "journal": "", "year": "2022", "authors": "Nataniel Ruiz; Yuanzhen Li; Varun Jampani; Yael Pritch; Michael Rubinstein; Kfir Aberman"}, {"ref_id": "b74", "title": "Learning representations by back-propagating errors", "journal": "Nature", "year": "1986-10", "authors": "David E Rumelhart; Geoffrey E Hinton; Ronald J Williams"}, {"ref_id": "b75", "title": "Palette: Image-to-image diffusion models", "journal": "", "year": "", "authors": "Chitwan Saharia; William Chan; Huiwen Chang; Chris Lee; Jonathan Ho; Tim Salimans; David Fleet; Mohammad Norouzi"}, {"ref_id": "b76", "title": "Photorealistic text-to-image diffusion models with deep language understanding", "journal": "Burcu Karagol Ayan", "year": "2022", "authors": "Chitwan Saharia; William Chan; Saurabh Saxena; Lala Li; Jay Whang; Emily Denton; ; S Sara Mahdavi; Rapha Gontijo Lopes"}, {"ref_id": "b77", "title": "LAION-5b: An open large-scale dataset for training next generation image-text models", "journal": "", "year": "2008", "authors": "Christoph Schuhmann; Romain Beaumont; Richard Vencu; W Cade; Ross Gordon; Mehdi Wightman; Theo Cherti; Aarush Coombes; Clayton Katta; Mitchell Mullis; Patrick Wortsman;  Schramowski; R Srivatsa; Katherine Kundurthy; Ludwig Crowson; Robert Schmidt; Jenia Kaczmarczyk;  Jitsev"}, {"ref_id": "b78", "title": "Marius Miron, and Alexandros Karatzoglou. Overcoming catastrophic forgetting with hard attention to the task", "journal": "", "year": "2018", "authors": "Joan Serra; Didac Suris"}, {"ref_id": "b79", "title": "Deep unsupervised learning using nonequilibrium thermodynamics", "journal": "PMLR", "year": "2015", "authors": "Jascha Sohl-Dickstein; Eric Weiss; Niru Maheswaranathan; Surya Ganguli"}, {"ref_id": "b80", "title": "Stable diffusion v1.5 model card", "journal": "", "year": "2022", "authors": " Stability"}, {"ref_id": "b81", "title": "Stable diffusion v2 model card, stable-diffusion-2-depth", "journal": "", "year": "2022", "authors": " Stability"}, {"ref_id": "b82", "title": "Bert and pals: Projected attention layers for efficient adaptation in multi-task learning", "journal": "", "year": "2019", "authors": "Asa Cooper Stickland; Iain Murray"}, {"ref_id": "b83", "title": "Vl-adapter: Parameter-efficient transfer learning for vision-and-language tasks", "journal": "", "year": "2021", "authors": "Yi-Lin Sung; Jaemin Cho; Mohit Bansal"}, {"ref_id": "b84", "title": "Plug-and-play diffusion features for text-driven image-toimage translation", "journal": "", "year": "", "authors": "Narek Tumanyan; Michal Geyer; Shai Bagon; Tali Dekel"}, {"ref_id": "b85", "title": "A dense indoor and outdoor depth dataset", "journal": "", "year": "2019", "authors": "Igor Vasiljevic; Nick Kolkin; Shanyi Zhang; Ruotian Luo; Haochen Wang; Z Falcon; Andrea F Dai; Mohammadreza Daniele; Steven Mostajabi;  Basart; R Matthew;  Walter"}, {"ref_id": "b86", "title": "Sketchguided text-to-image diffusion models", "journal": "", "year": "2008", "authors": "Andrey Voynov; Kfir Abernan; Daniel Cohen-Or"}, {"ref_id": "b87", "title": "Pretraining is all you need for image-to-image translation", "journal": "", "year": "2008", "authors": "Tengfei Wang; Ting Zhang; Bo Zhang; Hao Ouyang; Dong Chen; Qifeng Chen; Fang Wen"}, {"ref_id": "b88", "title": "High-resolution image synthesis and semantic manipulation with conditional gans", "journal": "", "year": "2018", "authors": "Ting-Chun Wang; Ming-Yu Liu; Jun-Yan Zhu; Andrew Tao; Jan Kautz; Bryan Catanzaro"}, {"ref_id": "b89", "title": "Holistically-nested edge detection", "journal": "", "year": "2015", "authors": "Saining Xie; Zhuowen Tu"}, {"ref_id": "b90", "title": "Side-tuning: Network adaptation via additive side networks", "journal": "Springer", "year": "2020", "authors": "Jeffrey O Zhang; Alexander Sax; Amir Zamir; Leonidas J Guibas; Jitendra Malik"}, {"ref_id": "b91", "title": "Cross-domain correspondence learning for exemplar-based image translation", "journal": "", "year": "2020", "authors": "Pan Zhang; Bo Zhang; Dong Chen; Lu Yuan; Fang Wen"}, {"ref_id": "b92", "title": "Tipadapter: Training-free clip-adapter for better vision-language modeling", "journal": "", "year": "2021", "authors": "Renrui Zhang; Rongyao Fang; Peng Gao; Wei Zhang; Kunchang Li; Jifeng Dai; Yu Qiao; Hongsheng Li"}, {"ref_id": "b93", "title": "Zero initialization: Initializing residual networks with only zeros and ones", "journal": "", "year": "2021", "authors": "Jiawei Zhao; Florian Sch\u00e4fer; Anima Anandkumar"}, {"ref_id": "b94", "title": "Scene parsing through ade20k dataset", "journal": "", "year": "2017", "authors": "Bolei Zhou; Hang Zhao; Xavier Puig; Sanja Fidler; Adela Barriuso; Antonio Torralba"}, {"ref_id": "b95", "title": "Cocosnet v2: Full-resolution correspondence learning for image translation", "journal": "", "year": "2021", "authors": "Xingran Zhou; Bo Zhang; Ting Zhang; Pan Zhang; Jianmin Bao; Dong Chen; Zhongfei Zhang; Fang Wen"}, {"ref_id": "b96", "title": "Unpaired image-to-image translation using cycle-consistent adversarial networks", "journal": "", "year": "2017", "authors": "Jun-Yan Zhu; Taesung Park; Phillip Isola; Alexei A Efros"}, {"ref_id": "b97", "title": "Toward multimodal image-to-image translation", "journal": "Advances in Neural Information Processing Systems", "year": "2017", "authors": "Jun-Yan Zhu; Richard Zhang; Deepak Pathak; Trevor Darrell; Alexei A Efros; Oliver Wang; Eli Shechtman"}], "figures": [{"figure_label": "3", "figure_type": "figure", "figure_id": "fig_1", "figure_caption": "Figure 3 :3Figure 3: Stable Diffusion's U-net architecture connected with a ControlNet on the encoder blocks and middle block. The locked, gray blocks show the structure of Stable Diffusion V1.5 (or V2.1, as they use the same U-net architecture). The trainable blue blocks and the white zero convolution layers are added to build a ControlNet.", "figure_data": ""}, {"figure_label": "4", "figure_type": "figure", "figure_id": "fig_2", "figure_caption": "Figure 4 :4Figure 4: The sudden convergence phenomenon. Due to the zero convolutions, ControlNet always predicts high-quality images during the entire training. At a certain step in the training process (e.g., the 6133 steps marked in bold), the model suddenly learns to follow the input condition.", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_3", "figure_caption": "(a) Input Canny map (b) W/o CFG (c) W/o CFG-RW (d) Full (w/o prompt)", "figure_data": ""}, {"figure_label": "5", "figure_type": "figure", "figure_id": "fig_4", "figure_caption": "Figure 5 :5Figure 5: Effect of Classifier-Free Guidance (CFG) and the proposed CFG Resolution Weighting (CFG-RW).", "figure_data": ""}, {"figure_label": "6", "figure_type": "figure", "figure_id": "fig_5", "figure_caption": "Figure 6 :6Figure 6: Composition of multiple conditions. We present the application to use depth and pose simultaneously.", "figure_data": ""}, {"figure_label": "8", "figure_type": "figure", "figure_id": "fig_7", "figure_caption": "Figure 8 :8Figure 8: Ablative study of different architectures on a sketch condition and different prompt settings. For each setting, we show a random batch of 6 samples without cherry-picking. Images are at 512 \u00d7 512 and best viewed when zoomed in. The green \"conv\" blocks on the left are standard convolution layers initialized with Gaussian weights.", "figure_data": ""}, {"figure_label": "9", "figure_type": "figure", "figure_id": "fig_8", "figure_caption": "Figure 9 :9Figure9: Comparison to previous methods.We present the qualitative comparisons to PITI[89], Sketch-Guided Diffusion[88], and Taming Transformers[19].", "figure_data": ""}, {"figure_label": "51011", "figure_type": "figure", "figure_id": "fig_9", "figure_caption": "4. 5 .Figure 10 :Figure 11 :51011Figure 10: The influence of different training dataset sizes. See also the supplementary material for extended examples.", "figure_data": ""}, {"figure_label": "12", "figure_type": "figure", "figure_id": "fig_10", "figure_caption": "Figure 12 :12Figure 12: Transfer pretrained ControlNets to community models [16, 61] without training the neural networks again.", "figure_data": ""}, {"figure_label": "", "figure_type": "table", "figure_id": "tab_0", "figure_caption": "StyleGANs can be controlled by extra encoders[71], with more applications studied in[3,22,38,39,55,60,65,71].", "figure_data": ""}, {"figure_label": "", "figure_type": "table", "figure_id": "tab_1", "figure_caption": "( z t , t, c t , c f )", "figure_data": "Prompt c tTime tText EncoderTime EncoderCondition c fzero convolutionInput z t+Prompt&TimeSD Encoder Block A 64\u00d764\u00d73SD Encoder Block A 64\u00d764 (trainable copy)\u00d73SD Encoder Block B 32\u00d732\u00d73SD Encoder Block B 32\u00d732 (trainable copy)\u00d73SD Encoder Block C 16\u00d716\u00d73SD Encoder Block C 16\u00d716 (trainable copy)\u00d73SD Encoder Block D 8\u00d78\u00d73SD Encoder Block D 8\u00d78 (trainable copy)\u00d73SD MiddleSD Middle BlockBlock 8\u00d788\u00d78 (trainable copy)SD Decoder Block D 8\u00d78\u00d73zero convolution zero convolution\u00d73SD Decoder Block C 16\u00d716\u00d73zero convolution\u00d73SD Decoder Block B 32\u00d732\u00d73zero convolution\u00d73Output \u03f5 \u03b8 SD Decoder Block A 64\u00d764\u00d73zero convolution\u00d73(a) Stable Diffusion(b) ControlNet"}, {"figure_label": "1", "figure_type": "table", "figure_id": "tab_3", "figure_caption": "Average User Ranking (AUR) of result quality and condition fidelity. We report the user preference ranking (1 to 5 indicates worst to best) of different methods.", "figure_data": ""}, {"figure_label": "2", "figure_type": "table", "figure_id": "tab_4", "figure_caption": "Evaluation of semantic segmentation label reconstruction (ADE20K) with Intersection over Union (IoU \u2191).", "figure_data": ""}, {"figure_label": "3", "figure_type": "table", "figure_id": "tab_6", "figure_caption": "Evaluation for image generation conditioned by semantic segmentation. We report FID, CLIP text-image score, and CLIP aesthetic scores for our method and other baselines. We also report the performance of Stable Diffusion without segmentation conditions. Methods marked with \"*\" are trained from scratch. scale NVIDIA A100 cluster, thousands of GPU hours, and more than 12M training images. We train a ControlNet for the SD V2 with the same depth conditioning but only use 200k training samples, one single NVIDIA RTX 3090Ti, and 5 days of training. We use 100 images generated by each SDv2-D2I and ControlNet to teach 12 users to distinguish the two methods. Afterwards, we generate 200 images and ask the users to tell which model generated each image. The average precision of the users is 0.52 \u00b1 0.17, indicating that the two method yields almost indistinguishable results.", "figure_data": "Condition reconstruction and FID score. We use the testset of ADE20K [96] to evaluate the conditioning fidelity.The state-of-the-art segmentation method OneFormer [35]achieves an Intersection-over-Union (IoU) with 0.58 on theground-truth set. We use different methods to generateimages with ADE20K segmentations and then apply One-"}], "formulas": [{"formula_id": "formula_0", "formula_text": "y c = F(x; \u0398) + Z(F(x + Z(c; \u0398 z1 ); \u0398 c ); \u0398 z2 ), (2)", "formula_coordinates": [4.0, 63.97, 309.65, 223.06, 9.84]}, {"formula_id": "formula_1", "formula_text": "y c = y.(3)", "formula_coordinates": [4.0, 152.35, 383.77, 134.68, 9.84]}, {"formula_id": "formula_2", "formula_text": "c f = E(c i ).(4)", "formula_coordinates": [5.0, 145.52, 320.04, 141.51, 9.84]}, {"formula_id": "formula_3", "formula_text": "L = E z0,t,ct,cf,\u03f5\u223cN (0,1) \u2225\u03f5 \u2212 \u03f5 \u03b8 (z t , t, c t , c f ))\u2225 2 2 , (5", "formula_coordinates": [5.0, 62.05, 465.31, 221.11, 12.69]}, {"formula_id": "formula_4", "formula_text": ")", "formula_coordinates": [5.0, 283.16, 467.7, 3.87, 8.64]}], "doi": ""}