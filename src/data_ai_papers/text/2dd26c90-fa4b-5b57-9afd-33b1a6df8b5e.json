{"title": "Understanding Black-box Predictions via Influence Functions", "authors": "Wei Pang;  Koh; Percy Liang", "pub_date": "", "abstract": "How can we explain the predictions of a blackbox model? In this paper, we use influence functions -a classic technique from robust statistics -to trace a model's prediction through the learning algorithm and back to its training data, thereby identifying training points most responsible for a given prediction. To scale up influence functions to modern machine learning settings, we develop a simple, efficient implementation that requires only oracle access to gradients and Hessian-vector products. We show that even on non-convex and non-differentiable models where the theory breaks down, approximations to influence functions can still provide valuable information. On linear models and convolutional neural networks, we demonstrate that influence functions are useful for multiple purposes: understanding model behavior, debugging models, detecting dataset errors, and even creating visuallyindistinguishable training-set attacks.", "sections": [{"heading": "Introduction", "text": "A key question often asked of machine learning systems is \"Why did the system make this prediction?\" We want models that are not just high-performing but also explainable. By understanding why a model does what it does, we can hope to improve the model (Amershi et al., 2015), discover new science (Shrikumar et al., 2017), and provide end-users with explanations of actions that impact them (Goodman & Flaxman, 2016).\nHowever, the best-performing models in many domainse.g., deep neural networks for image and speech recognition (Krizhevsky et al., 2012) -are complicated, blackbox models whose predictions seem hard to explain. Work on interpreting these black-box models has focused on understanding how a fixed model leads to particular predictions, e.g., by locally fitting a simpler model around the test 1 Stanford University, Stanford, CA. Correspondence to: Pang Wei Koh <pangwei@cs.stanford.edu>, Percy Liang <pliang@cs.stanford.edu>.", "publication_ref": ["b3", "b43", "b20", "b28"], "figure_ref": [], "table_ref": []}, {"heading": "Proceedings of the 34 th International Conference on Machine", "text": "Learning, Sydney, Australia, PMLR 70, 2017. Copyright 2017 by the author(s).\npoint (Ribeiro et al., 2016) or by perturbing the test point to see how the prediction changes (Simonyan et al., 2013;Li et al., 2016b;Datta et al., 2016;Adler et al., 2016). These works explain the predictions in terms of the model, but how can we explain where the model came from?\nIn this paper, we tackle this question by tracing a model's predictions through its learning algorithm and back to the training data, where the model parameters ultimately derive from. To formalize the impact of a training point on a prediction, we ask the counterfactual: what would happen if we did not have this training point, or if the values of this training point were changed slightly?\nAnswering this question by perturbing the data and retraining the model can be prohibitively expensive. To overcome this problem, we use influence functions, a classic technique from robust statistics (Hampel, 1974) that tells us how the model parameters change as we upweight a training point by an infinitesimal amount. This allows us to \"differentiate through the training\" to estimate in closed-form the effect of a variety of training perturbations.\nDespite their rich history in statistics, influence functions have not seen widespread use in machine learning; to the best of our knowledge, the work closest to ours is Wojnowicz et al. (2016), which introduced a method for approximating a quantity related to influence in generalized linear models. One obstacle to adoption is that influence functions require expensive second derivative calculations and assume model differentiability and convexity, which limits their applicability in modern contexts where models are often non-differentiable, non-convex, and highdimensional. We address these challenges by showing that we can efficiently approximate influence functions using second-order optimization techniques (Pearlmutter, 1994;Martens, 2010;Agarwal et al., 2016), and that they remain accurate even as the underlying assumptions of differentiability and convexity degrade.\nInfluence functions capture the core idea of studying models through the lens of their training data. We show that they are a versatile tool that can be applied to a wide variety of seemingly disparate tasks: understanding model behavior, debugging models, detecting dataset errors, and creating visually-indistinguishable adversarial training examples that can flip neural network test predictions, the training set analogue of Goodfellow et al. (2015).\narXiv:1703.04730v3 [stat.ML] 29 Dec 2020", "publication_ref": ["b41", "b44", "b31", "b15", "b1", "b21", "b52", "b39", "b34", "b2", "b19"], "figure_ref": [], "table_ref": []}, {"heading": "Approach", "text": "Consider a prediction problem from some input space X (e.g., images) to an output space Y (e.g., labels). We are given training points z 1 , . . . , z n , where z i = (x i , y i ) \u2208 X \u00d7 Y. For a point z and parameters \u03b8 \u2208 \u0398, let L(z, \u03b8) be the loss, and let 1 n n i=1 L(z i , \u03b8) be the empirical risk. The empirical risk minimizer is given b\u0177 \u03b8 def = arg min \u03b8\u2208\u0398 1 n n i=1 L(z i , \u03b8). 1 Assume that the empirical risk is twice-differentiable and strictly convex in \u03b8; in Section 4 we explore relaxing these assumptions.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Upweighting a training point", "text": "Our goal is to understand the effect of training points on a model's predictions. We formalize this goal by asking the counterfactual: how would the model's predictions change if we did not have this training point?\nLet us begin by studying the change in model parameters due to removing a point z from the training set. Formally, this change is\u03b8 \u2212z \u2212\u03b8, wher\u00ea \u03b8 \u2212z def = arg min \u03b8\u2208\u0398 zi =z L(z i , \u03b8). However, retraining the model for each removed z is prohibitively slow.\nFortunately, influence functions give us an efficient approximation. The idea is to compute the parameter change if z were upweighted by some small , giving us new parameters\u03b8 ,z (Cook & Weisberg, 1982) tells us that the influence of upweighting z on the parameters\u03b8 is given by\ndef = arg min \u03b8\u2208\u0398 1 n n i=1 L(z i , \u03b8) + L(z, \u03b8). A classic result\nI up,params (z) def = d\u03b8 ,z d =0 = \u2212H \u22121 \u03b8 \u2207 \u03b8 L(z,\u03b8),(1)\nwhere\nH\u03b8 def = 1 n n i=1 \u2207 2 \u03b8 L(z i ,\u03b8)\nis the Hessian and is positive definite (PD) by assumption. In essence, we are forming a quadratic approximation to the empirical risk around\u03b8 and take a single Newton step; see appendix A for a derivation. Since removing a point z is the same as upweighting it by = \u2212 1 n , we can linearly approximate the parameter change due to removing z without retraining the model by computing\u03b8 \u2212z \u2212\u03b8 \u2248 \u2212 1 n I up,params (z). Next, we apply the chain rule to measure how upweighting z changes functions of\u03b8. In particular, the influence of upweighting z on the loss at a test point z test again has a closed-form expression:\nI up,loss (z, z test ) def = dL(z test ,\u03b8 ,z ) d =0 (2) = \u2207 \u03b8 L(z test ,\u03b8) d\u03b8 ,z d =0 = \u2212\u2207 \u03b8 L(z test ,\u03b8) H \u22121 \u03b8 \u2207 \u03b8 L(z,\u03b8).\n1 We fold in any regularization terms into L.", "publication_ref": ["b14"], "figure_ref": [], "table_ref": []}, {"heading": "Perturbing a training input", "text": "Let us develop a finer-grained notion of influence by studying a different counterfactual: how would the model's predictions change if a training input were modified?\nFor a training point z = (x, y), define z \u03b4 def = (x + \u03b4, y). Consider the perturbation z \u2192 z \u03b4 , and let\u03b8 z \u03b4 ,\u2212z be the empirical risk minimizer on the training points with z \u03b4 in place of z. To approximate its effects, define the parameters resulting from moving mass from z onto z \u03b4 :\u03b8 ,z \u03b4 ,\u2212z\ndef = arg min \u03b8\u2208\u0398 1 n n i=1 L(z i , \u03b8) + L(z \u03b4 , \u03b8) \u2212 L(z, \u03b8\n). An analogous calculation to (1) yields:\nd\u03b8 ,z \u03b4 ,\u2212z d =0 = I up,params (z \u03b4 ) \u2212 I up,params (z) = \u2212H \u22121 \u03b8 \u2207 \u03b8 L(z \u03b4 ,\u03b8) \u2212 \u2207 \u03b8 L(z,\u03b8) . (3)\nAs before, we can make the linear approximation\u03b8 z \u03b4 ,\u2212z \u2212 \u03b8 \u2248 1 n (I up,params (z \u03b4 ) \u2212 I up,params (z)), giving us a closedform estimate of the effect of z \u2192 z \u03b4 on the model. Analogous equations also apply for changes in y. While influence functions might appear to only work for infinitesimal (therefore continuous) perturbations, it is important to note that this approximation holds for arbitrary \u03b4: theupweighting scheme allows us to smoothly interpolate between z and z \u03b4 . This is particularly useful for working with discrete data (e.g., in NLP) or with discrete label changes.\nIf x is continuous and \u03b4 is small, we can further approximate (3). Assume that the input domain X \u2286 R d , the parameters \u0398 \u2286 R p , and L is differentiable in \u03b8 and x.\nAs \u03b4 \u2192 0, \u2207 \u03b8 L(z \u03b4 ,\u03b8) \u2212 \u2207 \u03b8 L(z,\u03b8) \u2248 [\u2207 x \u2207 \u03b8 L(z,\u03b8)]\u03b4, where \u2207 x \u2207 \u03b8 L(z,\u03b8) \u2208 R p\u00d7d . Substituting into (3), d\u03b8 ,z \u03b4 ,\u2212z d =0 \u2248 \u2212H \u22121 \u03b8 [\u2207 x \u2207 \u03b8 L(z,\u03b8)]\u03b4.(4)\nWe thus have\u03b8\nz \u03b4 ,\u2212z \u2212\u03b8 \u2248 \u2212 1 n H \u22121 \u03b8 [\u2207 x \u2207 \u03b8 L(z,\u03b8)]\u03b4.\nDifferentiating w.r.t. \u03b4 and applying the chain rule gives us\nI pert,loss (z, z test ) def = \u2207 \u03b4 L(z test ,\u03b8 z \u03b4 ,\u2212z ) \u03b4=0 (5) = \u2212\u2207 \u03b8 L(z test ,\u03b8) H \u22121 \u03b8 \u2207 x \u2207 \u03b8 L(z,\u03b8\n). [I pert,loss (z, z test )]\u03b4 tells us the approximate effect that z \u2192 z + \u03b4 has on the loss at z test . By setting \u03b4 in the direction of I pert,loss (z, z test ) , we can construct local perturbations of z that maximally increase the loss at z test . In Section 5.2, we will use this to construct training-set attacks. Finally, we note that I pert,loss (z, z test ) can help us identify the features of z that are most responsible for the prediction on z test .", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Relation to Euclidean distance", "text": "To find the training points most relevant to a test point, it is common to look at its nearest neighbors in Euclidean terms in Iup,loss? Here, we plot Iup,loss against variants that are missing these terms and show that they are necessary for picking up the truly influential training points. For these calculations, we use logistic regression to distinguish 1's from 7's in MNIST (LeCun et al., 1998), picking an arbitrary test point ztest; similar trends hold across other test points. Green dots are train images of the same label as the test image (7) while red dots are 1's. Left: Without the train loss term, we overestimate the influence of many training points: the points near the horizontal axis should have Iup,loss close to 0, but instead have high influence when we remove the train loss term). Mid: Without H \u22121 \u03b8 , all green training points are helpful (removing each point increases test loss) and all red points are harmful (removing each point decreases test loss). This is because \u2200x, x 0 (all pixel values are positive), so x \u2022 xtest \u2265 0, but it is incorrect: many harmful training points actually share the same label as To the model, they look very different, so the presence of the training image makes the model think that the test image is less likely to be a 7. The Euclidean inner product does not pick up on these less intuitive, but important, harmful influences.\nspace (e.g., Ribeiro et al. (2016)); if all points have the same norm, this is equivalent to choosing x with the largest x \u2022 x test . For intuition, we compare this to I up,loss (z, z test ) on a logistic regression model and show that influence is much more accurate at accounting for the effect of training. \nH \u03b8 = 1 n n i=1 \u03c3(\u03b8 x i )\u03c3(\u2212\u03b8 x i )x i x i . From (2), I up,loss (z, z test ) is: \u2212y test y \u2022 \u03c3(\u2212y test \u03b8 x test ) \u2022 \u03c3(\u2212y\u03b8 x) \u2022 x test H \u22121 \u03b8 x.\nWe highlight two key differences from x \u2022 x test . First, \u03c3(\u2212y\u03b8 x) gives points with high training loss more influence, revealing that outliers can dominate the model parameters. Second, the weighted covariance matrix H \u22121 \u03b8 measures the \"resistance\" of the other training points to the removal of z; if \u2207 \u03b8 L(z,\u03b8) points in a direction of little variation, its influence will be higher since moving in that direction will not significantly increase the loss on other training points. As we show in Fig 1, these differences mean that influence functions capture the effect of model training much more accurately than nearest neighbors.", "publication_ref": ["b41"], "figure_ref": [], "table_ref": []}, {"heading": "Efficiently calculating influence", "text": "There are two challenges to efficiently computing\nI up,loss (z, z test ) = \u2212\u2207 \u03b8 L(z test ,\u03b8) H \u22121 \u03b8 \u2207 \u03b8 L(z,\u03b8). First,", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "it requires forming and inverting", "text": "H\u03b8 = 1 n n i=1 \u2207 2 \u03b8 L(z i ,\u03b8\n), the Hessian of the empirical risk. With n training points and \u03b8 \u2208 R p , this requires O(np 2 + p 3 ) operations, which is too expensive for models like deep neural networks with millions of parameters. Second, we need to calculate I up,loss (z i , z test ) across all training points z i .\nThe first problem is well-studied in second-order optimization. The idea is to avoid explicitly computing H \u22121 \u03b8 ; instead, we use implicit Hessian-vector products (HVPs) to efficiently approximate s test def = H \u22121 \u03b8 \u2207 \u03b8 L(z test ,\u03b8) and then compute I up,loss (z, z test ) = \u2212s test \u2022 \u2207 \u03b8 L(z,\u03b8). This also solves the second problem: for each test point of interest, we can precompute s test and then efficiently compute \u2212s test \u2022 \u2207 \u03b8 L(z i ,\u03b8) for each training point z i . We discuss two techniques for approximating s test , both relying on the fact that the HVP of a single term in H\u03b8, [\u2207 2 \u03b8 L(z i ,\u03b8)]v, can be computed for arbitrary v in the same time that \u2207 \u03b8 L(z i ,\u03b8) would take, which is typically O(p) (Pearlmutter, 1994).", "publication_ref": ["b39"], "figure_ref": [], "table_ref": []}, {"heading": "Conjugate gradients (CG).", "text": "The first technique is a standard transformation of matrix inversion into an optimization problem. Since H\u03b8 0 by assumption, H \u22121 \u03b8 v \u2261 arg min t {t H\u03b8t \u2212 v t}. We can solve this with CG approaches that only require the evaluation of H\u03b8t, which takes O(np) time, without explicitly forming H\u03b8. While an exact solution takes p CG iterations, in practice we can get a good approximation with fewer iterations; see Martens (2010) for more details.\nStochastic estimation. With large datasets, standard CG can be slow; each iteration still goes through all n training points. We use a method developed by Agarwal et al. (2016) to get an estimator that only samples a single point per iteration, which results in significant speedups.\nDropping the\u03b8 subscript for clarity, let H \u22121 j def = j i=0 (I \u2212 H) i , the first j terms in the Taylor expansion of H \u22121 . Rewrite this recursively as H \u22121\nj = I + (I \u2212 H)H \u22121 j\u22121 . From the validity of the Taylor expansion, H \u22121 j \u2192 H \u22121 as j \u2192 \u221e. 2\nThe key is that at each iteration, we can substitute the full H with a draw from any unbiased (and fasterto-compute) estimator of H to formH j . Since\nE[H \u22121 j ] = H \u22121 j , we still have E[H \u22121 j ] \u2192 H \u22121 .\nIn particular, we can use \u2207 2 \u03b8 L(z i ,\u03b8), for any z i , as an unbiased estimator of H. This gives us the following procedure: uniformly sample t points z s1 , . . . , z st from the training data; defineH \u22121 0 v = v; and recursively comput\u1ebd\nH \u22121 j v = v + I \u2212 \u2207 2 \u03b8 L(z sj ,\u03b8) H \u22121 j\u22121 v, takingH \u22121 t v\nas our final unbiased estimate of H \u22121 v. We pick t to be large enough such thatH t stabilizes, and to reduce variance we repeat this procedure r times and average results. Empirically, we found this significantly faster than CG.\nWe note that the original method of Agarwal et al. (2016) dealt only with generalized linear models, for which [\u2207 2 \u03b8 L(z i ,\u03b8)]v can be efficiently computed in O(p) time. In our case, we rely on Pearlmutter (1994)'s more general algorithm for fast HVPs, described above, to achieve the same time complexity. 3 With these techniques, we can compute I up,loss (z i , z test ) on all training points z i in O(np + rtp) time; we show in Section 4.1 that empirically, choosing rt = O(n) gives accurate results. Similarly, we can compute\nI pert,loss (z i , z test ) = \u2212 1 n \u2207 \u03b8 L(z test ,\u03b8) H \u22121 \u03b8 \u2207 x \u2207 \u03b8 L(z i,\n\u03b8) with two matrix-vector products: we first compute s test , then find s test \u2207 x \u2207 \u03b8 L(z i ,\u03b8) with the same HVP trick. These computations are easy to implement in auto-grad systems like TensorFlow (Abadi et al., 2015) and Theano (Theano D. Team, 2016), as users need only specify the loss; the rest is automatically handled.", "publication_ref": ["b34", "b2", "b2", "b0", "b48"], "figure_ref": [], "table_ref": []}, {"heading": "Validation and extensions", "text": "Recall that influence functions are asymptotic approximations of leave-one-out retraining under the assumptions that (i) the model parameters\u03b8 minimize the empirical risk, and that (ii) the empirical risk is twice-differentiable and strictly convex. Here, we empirically show that influence functions are accurate approximations (Section 4.1) that Figure 2. Influence matches leave-one-out retraining. We arbitrarily picked a wrongly-classified test point ztest, but this trend held more broadly. These results are from 10-class MNIST. Left: For each of the 500 training points z with largest Iup,loss(z, ztest) , we plotted \u2212 1 n \u2022 Iup,loss(z, ztest) against the actual change in test loss after removing that point and retraining. The inverse HVP was solved exactly with CG. Mid: Same, but with the stochastic approximation. Right: The same plot for a CNN, computed on the 100 most influential points with CG. For the actual difference in loss, we removed each point and retrained from\u03b8 for 30k steps.\nprovide useful information even when these assumptions are violated (Sections 4.2, 4.3).", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Influence functions vs. leave-one-out retraining", "text": "Influence functions assume that the weight on a training point is changed by an infinitesimally small . To investigate the accuracy of using influence functions to approximate the effect of removing a training point and retraining, we compared \u2212 \u03b8 L(z i ,\u03b8)]v, this runs quickly: in fact, we accurately estimated H \u22121 v without even looking at every data point, since n = 55, 000 > rt. Surprisingly, even r = 1 worked; while results were noisier, it was still able to identify the most influential points.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Non-convexity and non-convergence", "text": "In Section 2, we took\u03b8 as the global minimum. In practice, if we obtain our parameters\u03b8 by running SGD with early stopping or on non-convex objectives,\u03b8 =\u03b8. As a result, H\u03b8 could have negative eigenvalues. We show that influence functions on\u03b8 still give meaningful results in practice.\nOur approach is to form a convex quadratic approximation of the loss around\u03b8, i.e.,L(z,\n\u03b8) = L(z,\u03b8) + \u2207L(z,\u03b8) (\u03b8 \u2212\u03b8)+ 1 2 (\u03b8 \u2212\u03b8) (H\u03b8 +\u03bbI)(\u03b8 \u2212\u03b8).\nHere, \u03bb is a damping term that we add if H\u03b8 has negative eigenvalues; this corresponds to adding L 2 regularization on the parameters. We then calculate I up,loss usingL. If\u03b8 is close to a local minimum, this is correlated with the result of taking a Newton step from\u03b8 after removing weight from z (see appendix B).\nWe checked the behavior of I up,loss in a non-convergent, non-convex setting by training a convolutional neural network for 500k iterations. 5 The model had not converged and H\u03b8 was not PD, so we added a damping term with \u03bb = 0.01. Even in this difficult setting, the predicted and actual changes in loss were highly correlated (Pearson's R = 0.86, Fig 2-Right).", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Non-differentiable losses", "text": "What happens when the derivatives of the loss, \u2207 \u03b8 L and \u2207 2 \u03b8 L, do not exist? In this section, we show that influence functions computed on smooth approximations to non-differentiable losses can predict the behavior of the original, non-differentiable loss under leave-one-out retraining. The robustness of this approximation suggests that we can train non-differentiable models and swap out non-differentiable components for smoothed versions for the purposes of calculating influence.\nTo see this, we trained a linear SVM on the same 1s vs. 7s MNIST task in Section 2.3. This involves minimizing Hinge(s) = max(0, 1 \u2212 s); this simple piece-wise linear function is similar to ReLUs, which cause nondifferentiability in neural networks. We set the derivatives at the hinge to 0 and calculated I up,loss . As one might expect, this was inaccurate (Fig 3b-Left): the second derivative carries no information about how close a support vector z is to the hinge, so the quadratic approximation of L(z,\u03b8) is linear, which leads to I up,loss (z, z test ) overestimating the influence of z.\nFor the purposes of calculating influence, we approximated Hinge(s) with SmoothHinge(s, t) = t log(1+exp( 1\u2212s t )), which approaches the hinge loss as t \u2192 0 (Fig 3a). Using the same SVM weights as before, we found that calculating I up,loss using SmoothHinge(s, 0. ", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Use cases of influence functions", "text": "", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Understanding model behavior", "text": "By telling us the training points \"responsible\" for a given prediction, influence functions reveal insights about how models rely on and extrapolate from the training data. In this section, we show that two models can make the same correct predictions but get there in very different ways.\nWe compared (a) the state-of-the-art Inception v3 network (Szegedy et al., 2016) with all but the top layer frozen 6 and (b) an SVM with an RBF kernel on a dog vs. fish image classification dataset we extracted from ImageNet (Russakovsky et al., 2015) ", "publication_ref": ["b47", "b42"], "figure_ref": [], "table_ref": []}, {"heading": "Adversarial training examples", "text": "In this section, we show that models that place a lot of influence on a small number of points can be vulnerable to training input perturbations, posing a serious security risk in real-world ML systems where attackers can influence the training data (Huang et al., 2011). Recent work has generated adversarial test images that are visually indistinguish-able from real test images but completely fool a classifier (Goodfellow et al., 2015;Moosavi-Dezfooli et al., 2016). We demonstrate that influence functions can be used to craft adversarial training images that are similarly visuallyindistinguishable and can flip a model's prediction on a separate test image. To the best of our knowledge, this is the first proof-of-concept that visually-indistinguishable training attacks can be executed on otherwise highly-accurate neural networks.\nThe key idea is that I pert,loss (z, z test ) tells us how to modify training point z to most increase the loss on z test . Concretely, for a target test image z test , we can construct z i , an adversarial version of a training image z i , by initializingz i := z i and then iteratingz i := \u03a0(z i + \u03b1 sign(I pert,loss (z i , z test ))), where \u03b1 is a step size and \u03a0 projects onto the set of valid images that share the same 8bit representation with z i . After each iteration, we retrain the model. This is an iterated, training-set analogue of the methods used by, e.g., Goodfellow et al. (2015); Moosavi-Dezfooli et al. (2016) for test-set attacks.\nWe tested these adversarial training perturbations on the same Inception network on dogs vs. fish from Section 5.1, choosing this pair of animals to provide a stark contrast between the classes. We set \u03b1 = 0.02 and ran the attack for 100 iterations on each test image. As before, we froze all but the top layer for training; note that computing I pert,loss still involves differentiating through the entire network. Originally, the model correctly classified 591 / 600 test images. For each of these 591 test images, considered separately, we tried to find a visually-indistinguishable perturbation (i.e., same 8-bit representation) to a single training image, out of 1,800 total training images, that would flip the model's prediction. We were able to do this on 335 (57%) of the 591 test images. If we perturbed 2 training images for each test image, we could flip predictions on 77% of the 591 test images; and if we perturbed 10 training images, we could flip all but 1 of the 591. The above results are from attacking each test image separately, i.e., we use a different training set to attack each test image. We next tried to attack multiple test images simultaneously by increasing their average test loss, and found that single training image perturbations could simultaneously flip multiple test predictions as well (Fig 5).\nWe make three observations about these attacks. First, though the change in pixel values is small, the change in the final Inception feature layer is significantly larger: in pixel space and using L 2 distance, the training values change by less than 1% of the mean distance of a training point to the class centroid, whereas in Inception feature space, the change is on the same order as the mean distance. Second, the attack tries to perturb the training example in a direction of low variance, causing the model to overfit in that We targeted a set of 30 test images featuring the first author's dog in a variety of poses and backgrounds. By maximizing the average loss over these 30 images, we found a visuallyimperceptible change to the particular training image (shown on top) that flipped predictions on 16 test images. direction and consequently incorrectly classify the test images; we expect the attack to become harder as the number of training examples grows. Third, ambiguous or mislabeled training images are effective points to attack, since the model has low confidence and thus high loss on them, making them highly influential (recall Section 2.3). For example, the image in Fig 5 contains both a dog and a fish and is highly ambiguous; as a result, it is the training example that the model is least confident on (with a confidence of 77%, compared to the next lowest confidence of 90%).\nThis attack is mathematically equivalent to the gradientbased training set attacks explored by Biggio et al. (2012); Mei & Zhu (2015b) and others in the context of different models. Biggio et al. (2012) constructed a dataset poisoning attack against a linear SVM on a two-class MNIST task, but had to modify the training points in an obviously distinguishable way to be effective. Measuring the magnitude of I pert,loss gives model developers a way of quantifying how vulnerable their models are to training-set attacks.", "publication_ref": ["b23", "b19", "b38", "b19", "b38", "b6", "b36", "b6"], "figure_ref": ["fig_8", "fig_8"], "table_ref": []}, {"heading": "Debugging domain mismatch", "text": "Domain mismatch -where the training distribution does not match the test distribution -can cause models with high training accuracy to do poorly on test data (Ben-David et al., 2010). We show that influence functions can identify the training examples most responsible for the errors, helping model developers identify domain mismatch.\nAs a case study, we predicted whether a patient would be readmitted to a hospital. Domain mismatches are common in biomedical data; for example, different hospitals can serve very different populations, and readmission models trained on one population can do poorly on another (Kansagara et al., 2011). We used logistic regression to predict readmission with a balanced training dataset of 20K diabetic patients from 100+ US hospitals, each represented by 127 features (Strack et al., 2014). 7 3 out of the 24 children under age 10 in this dataset were re-admitted. To induce a domain mismatch, we filtered out 20 children who were not re-admitted, leaving 3 out of 4 readmitted. This caused the model to wrongly classify many children in the test set. Our aim is to identify the 4 children in the training set as being \"responsible\" for these errors.\nAs a baseline, we tried the common practice of looking at the learned parameters\u03b8 to see if the indicator variable for being a child was obviously different. However, this did not work: 14/127 features had a larger coefficient.\nPicking a random child z test that the model got wrong, we calculated \u2212I up,loss (z i , z test ) for each training point z i . This clearly highlighted the 4 training children, each of whom were 30-40 times as influential as the next most influential examples. The 1 child in the training set who was not readmitted had a very positive influence, while the other 3 had very negative influences. Calculating I pert,loss on these 4 children showed that a change in the 'child' indicator variable had by far the largest effect on I up,loss .", "publication_ref": ["b4", "b26"], "figure_ref": [], "table_ref": []}, {"heading": "Fixing mislabeled examples", "text": "Labels in the real world are often noisy, especially if crowdsourced (Fr\u00e9nay & Verleysen, 2014), and can even be adversarially corrupted, as in Section 5.2. Even if a human expert could recognize wrongly labeled examples, it is impossible in many applications to manually review all of the training data. We show that influence functions can help human experts prioritize their attention, allowing them to inspect only the examples that actually matter.\nThe key idea is to flag the training points that exert the most influence on the model. Because we do not have access to the test set, we measure the influence of z i with I up,loss (z i , z i ), which approximates the error incurred on z i if we remove z i from the training set.\nOur case study is email spam classification, which relies graphic (e.g., age, race, gender), administrative (e.g., length of hospital stay), or medical (e.g., test results). on user-provided labels and is also vulnerable to adversarial attack (Biggio et al., 2011). We flipped the labels of a random 10% of the training data and then simulated manually inspecting a fraction of the training points, correcting them if they had been flipped. Using influence functions to prioritize the training points to inspect allowed us to repair the dataset (Fig 6, blue) without checking too many points, outperforming the baselines of checking points with the highest train loss (Fig 6,green) or at random (Fig 6,red). No method had access to the test data. ", "publication_ref": ["b18", "b5"], "figure_ref": ["fig_9"], "table_ref": []}, {"heading": "Related work", "text": "The use of influence-based diagnostics originated in statistics in the 70s, driven by the seminal papers of Hampel (1974) and Jaeckel (1972) (where it was called the infinitesimal jackknife). It was further developed in the book by Hampel et al. (1986) and many other contemporary papers (Cook, 1977;Cook & Weisberg, 1980;Pregibon et al., 1981;Cook & Weisberg, 1982). Earlier work focused on removing training points from linear models, with later work extending this to more general models and a wider variety of perturbations (Hampel et al., 1986;Cook, 1986;Thomas & Cook, 1990;Chatterjee & Hadi, 1986;Wei et al., 1998). Prior work mostly focused on experiments with small datasets, e.g., n = 24 and p = 10 in Cook & Weisberg (1980), and thus paid special attention to exact solutions, or if not possible, characterizations of the error terms.\nInfluence functions have not been used much in the ML literature, with some exceptions. Christmann & Steinwart (2004); Debruyne et al. (2008); Liu et al. (2014) use influence functions to study model robustness and to do fast cross-validation in kernel methods. Wojnowicz et al. (2016) use matrix sketching to estimate Cook's distance, which is closely related to influence; they focus on prioritizing training points for human attention and derive methods specific to generalized linear models. Kabra et al. (2015) define a different notion of influence that is specialized to finite hypothesis classes.\nAs noted in Section 5.2, our training-set attack is mathematically equivalent to an approach first explored by Biggio et al. (2012) in the context of SVMs, with follow-up work extending the framework and applying it to linear and logistic regression (Mei & Zhu, 2015b), topic modeling (Mei & Zhu, 2015a), and collaborative filtering (Li et al., 2016a). These papers derived the attack directly from the KKT conditions without considering influence, though for continuous data, the end result is equivalent. Influence functions additionally let us consider attacks on discrete data (Section 2.2), but we have not tested this empirically. Our work connects the literature on trainingset attacks with work on \"adversarial examples\" (Goodfellow et al., 2015;Moosavi-Dezfooli et al., 2016), visuallyimperceptible perturbations on test inputs.\nIn contrast to training-set attacks, Cadamuro et al. (2016) consider the task of taking an incorrect test prediction and finding a small subset of training data such that changing the labels on this subset makes the prediction correct. They provide a solution for OLS and Gaussian process models when the labels are continuous. Our work with influence functions allow us to solve this problem in a much larger range of models and in datasets with discrete labels.", "publication_ref": ["b21", "b24", "b22", "b11", "b13", "b40", "b14", "b22", "b12", "b49", "b8", "b51", "b13", "b10", "b16", "b33", "b52", "b25", "b6", "b36", "b35", "b30", "b19", "b38", "b7"], "figure_ref": [], "table_ref": []}, {"heading": "Discussion", "text": "We have discussed a variety of applications, from creating training-set attacks to debugging models and fixing datasets. Underlying each of these applications is a common tool, influence functions, which are based on a simple idea-we can better understand model behavior by looking at how it was derived from its training data.\nAt their core, influence functions measure the effect of local changes: what happens when we upweight a point by an infinitesimally-small ? This locality allows us to derive efficient closed-form estimates, and as we show, they can be surprisingly effective. However, we might want to ask about more global changes, e.g., how does a subpopulation of patients from this hospital affect the model? Since influence functions depend on the model not changing too much, how to tackle this is an open question.\nIt seems inevitable that high-performing, complex, blackbox models will become increasingly prevalent and important. We hope that the approach presented here-of looking at the model through the lens of the training data-will become a standard part of the toolkit of developing, understanding, and diagnosing machine learning.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "A. Deriving the influence function I up,params", "text": "For completeness, we provide a standard derivation of the influence function I up,params in the context of loss minimization (M-estimation). This derivation is based on asymptotic arguments and is not fully rigorous; see van der Vaart (1998) and other statistics textbooks for a more thorough treatment.\nRecall that\u03b8 minimizes the empirical risk:\nR(\u03b8) def = 1 n n i=1 L(z i , \u03b8).(6)\nWe further assume that R is twice-differentiable and strongly convex in \u03b8, i.e.,\nH\u03b8\ndef = \u2207 2 R(\u03b8) = 1 n n i=1 \u2207 2 \u03b8 L(z i ,\u03b8)(7)\nexists and is positive definite. This guarantees the existence of H \u22121 \u03b8 , which we will use in the subsequent derivation. The perturbed parameters\u03b8 ,z can be written a\u015d \u03b8 ,z = arg min \u03b8\u2208\u0398 {R(\u03b8) + L(z, \u03b8)} .\n(8)\nDefine the parameter change \u2206 =\u03b8 ,z \u2212\u03b8, and note that, as\u03b8 doesn't depend on , the quantity we seek to compute can be written in terms of it:\nd\u03b8 ,z d = d\u2206 d .(9)\nSince\u03b8 ,z is a minimizer of ( 8), let us examine its firstorder optimality conditions: 0 = \u2207R(\u03b8 ,z ) + \u2207L(z,\u03b8 ,z ).\nNext, since\u03b8 ,z \u2192\u03b8 as \u2192 0, we perform a Taylor expansion of the right-hand side: 0 \u2248 \u2207R(\u03b8) + \u2207L(z,\u03b8) + (11)\n\u2207 2 R(\u03b8) + \u2207 2 L(z,\u03b8) \u2206 , where we have dropped o( \u2206 ) terms.\nSolving for \u2206 , we get:\n\u2206 \u2248 \u2212 \u2207 2 R(\u03b8) + \u2207 2 L(z,\u03b8) \u22121(12)\n\u2207R(\u03b8) + \u2207L(z,\u03b8) .\nSince\u03b8 minimizes R, we have \u2207R(\u03b8) = 0. Dropping o( ) terms, we have\n\u2206 \u2248 \u2212 \u2207 2 R(\u03b8) \u22121 \u2207L(z,\u03b8) . (13\n)\nCombining with ( 7) and ( 9), we conclude that:\nd\u03b8 ,z d =0 = \u2212H \u22121 \u03b8 \u2207L(z,\u03b8)(14)\ndef = I up,params (z).\nB. Influence at non-convergence\nConsider a training point z. When the model parameters \u03b8 are close to but not at a local minimum, I up,params (z) is approximately equal to a constant (which does not depend on z) plus the change in parameters after upweighting z and then taking a single Newton step from\u03b8. The high-level idea is that even though the gradient of the empirical risk at \u03b8 is not 0, the Newton step from\u03b8 can be decomposed into a component following the existing gradient (which does not depend on the choice of z) and a second component responding to the upweighted z (which I up,params (z) tracks).\nLet g def = 1\nn n i=1 \u2207 \u03b8 L(z i ,\u03b8) be the gradient of the empirical risk at\u03b8; since\u03b8 is not a local minimum, g = 0.\nAfter upweighting z by , the gradient at\u03b8 goes from g \u2192 g + \u2207 \u03b8 L(z,\u03b8), and the empirical Hessian goes from H\u03b8 \u2192 H\u03b8 + \u2207 2 \u03b8 L(z,\u03b8). A Newton step from\u03b8 therefore changes the parameters by:\nN ,z def = \u2212 H\u03b8 + \u2207 2 \u03b8 L(z,\u03b8) \u22121 g + \u2207 \u03b8 L(z,\u03b8) .(16)\nIgnoring terms in g, 2 , and higher, we get N ,z \u2248 \u2212H \u22121 \u03b8 g + \u2207 \u03b8 L(z,\u03b8) . Therefore, the actual change due to a Newton step N ,z is equal to a constant \u2212H \u22121 \u03b8 g (that doesn't depend on z) plus times I up,params (z) = \u2212H \u22121 \u03b8 \u2207 \u03b8 L(z,\u03b8) (which captures the contribution of z).", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Acknowledgements", "text": "We thank Jacob Steinhardt, Zhenghao Chen, and Hongseok Namkoong for helpful discussions and comments. We are also grateful to Doug Martin, Swee Keat Lim, and Teresa Yeo for finding typos and omissions in a previous version of the manuscript. This work was supported by a Future of Life Research Award and a Microsoft Research Faculty Fellowship.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Reproducibility", "text": "The code and data for replicating our experiments is available on GitHub http://bit.ly/gt-influence and Codalab http://bit.ly/cl-influence.", "publication_ref": [], "figure_ref": [], "table_ref": []}], "references": [{"ref_id": "b0", "title": "Tensorflow: Large-scale machine learning on heterogeneous distributed systems", "journal": "", "year": "2015", "authors": "M Abadi; A Agarwal; P Barham; E Brevdo; Z Chen; C Citro; G S Corrado; A Davis; J Dean; M Devin; S Ghemawat; I J Goodfellow; A Harp; G Irving; M Isard; Y Jia; R J\u00f3zefowicz; L Kaiser; M Kudlur; J Levenberg; D Man\u00e9; R Monga; S Moore; D G Murray; C Olah; M Schuster; J Shlens; B Steiner; I Sutskever; K Talwar; P A Tucker; V Vanhoucke; V Vasudevan; F B Vi\u00e9gas; O Vinyals; P Warden; M Wattenberg; M Wicke; Y Yu; X Zheng"}, {"ref_id": "b1", "title": "Auditing black-box models for indirect influence", "journal": "", "year": "2016", "authors": "P Adler; C Falk; S A Friedler; G Rybeck; C Scheidegger; B Smith; S Venkatasubramanian"}, {"ref_id": "b2", "title": "Second order stochastic optimization in linear time", "journal": "", "year": "2016", "authors": "N Agarwal; B Bullins; E Hazan"}, {"ref_id": "b3", "title": "Redesigning performance analysis tools for machine learning", "journal": "", "year": "2015", "authors": "S Amershi; M Chickering; S M Drucker; B Lee; P Simard; J Suh;  Modeltracker"}, {"ref_id": "b4", "title": "A theory of learning from different domains", "journal": "", "year": "2010", "authors": "S Ben-David; J Blitzer; K Crammer; A Kulesza; F Pereira; J W Vaughan"}, {"ref_id": "b5", "title": "Support vector machines under adversarial label noise", "journal": "ACML", "year": "2011", "authors": "B Biggio; B Nelson; P Laskov"}, {"ref_id": "b6", "title": "Poisoning attacks against support vector machines", "journal": "", "year": "2012", "authors": "B Biggio; B Nelson; P Laskov"}, {"ref_id": "b7", "title": "Debugging machine learning models", "journal": "", "year": "2016", "authors": "G Cadamuro; R Gilad-Bachrach; X Zhu"}, {"ref_id": "b8", "title": "Influential observations, high leverage points, and outliers in linear regression", "journal": "Statistical Science", "year": "1986", "authors": "S Chatterjee; A S Hadi"}, {"ref_id": "b9", "title": "", "journal": "", "year": "2015", "authors": "F Chollet;  Keras"}, {"ref_id": "b10", "title": "On robustness properties of convex risk minimization methods for pattern recognition", "journal": "Journal of Machine Learning Research", "year": "2004", "authors": "A Christmann; I Steinwart"}, {"ref_id": "b11", "title": "Detection of influential observation in linear regression", "journal": "Technometrics", "year": "1977", "authors": "R D Cook"}, {"ref_id": "b12", "title": "Assessment of local influence", "journal": "Journal of the Royal Statistical Society. Series B (Methodological)", "year": "1986", "authors": "R D Cook"}, {"ref_id": "b13", "title": "Characterizations of an empirical influence function for detecting influential cases in regression", "journal": "Technometrics", "year": "1980", "authors": "R D Cook; S Weisberg"}, {"ref_id": "b14", "title": "Residuals and influence in regression", "journal": "Chapman and Hall", "year": "1982", "authors": "R D Cook; S Weisberg"}, {"ref_id": "b15", "title": "Algorithmic transparency via quantitative input influence: Theory and experiments with learning systems", "journal": "", "year": "2016", "authors": "A Datta; S Sen; Y Zick"}, {"ref_id": "b16", "title": "Model selection in kernel based regression using the influence function", "journal": "Journal of Machine Learning Research", "year": "2008", "authors": "M Debruyne; M Hubert; J A Suykens"}, {"ref_id": "b17", "title": "Decaf: A deep convolutional activation feature for generic visual recognition", "journal": "", "year": "2014", "authors": "J Donahue; Y Jia; O Vinyals; J Hoffman; N Zhang; E Tzeng; Darrell ; T "}, {"ref_id": "b18", "title": "Classification in the presence of label noise: a survey", "journal": "IEEE Transactions on Neural Networks and Learning Systems", "year": "2014", "authors": "B Fr\u00e9nay; M Verleysen"}, {"ref_id": "b19", "title": "Explaining and harnessing adversarial examples", "journal": "", "year": "2015", "authors": "I J Goodfellow; J Shlens; C Szegedy"}, {"ref_id": "b20", "title": "European union regulations on algorithmic decision-making and a \"right to explanation", "journal": "", "year": "2016", "authors": "B Goodman; S Flaxman"}, {"ref_id": "b21", "title": "The influence curve and its role in robust estimation", "journal": "Journal of the American Statistical Association", "year": "1974", "authors": "F R Hampel"}, {"ref_id": "b22", "title": "Robust Statistics: The Approach Based on Influence Functions", "journal": "Wiley", "year": "1986", "authors": "F R Hampel; E M Ronchetti; P J Rousseeuw; W A Stahel"}, {"ref_id": "b23", "title": "Adversarial machine learning", "journal": "", "year": "2011", "authors": "L Huang; A D Joseph; B Nelson; B I Rubinstein; J Tygar"}, {"ref_id": "b24", "title": "The infinitesimal jackknife. Unpublished memorandum", "journal": "", "year": "1972", "authors": "L A Jaeckel"}, {"ref_id": "b25", "title": "Understanding classifier errors by examining influential neighbors", "journal": "", "year": "2015", "authors": "M Kabra; A Robie; K Branson"}, {"ref_id": "b26", "title": "Risk prediction models for hospital readmission: a systematic review", "journal": "JAMA", "year": "2011", "authors": "D Kansagara; H Englander; A Salanitro; D Kagen; C Theobald; M Freeman; S Kripalani"}, {"ref_id": "b27", "title": "A method for stochastic optimization", "journal": "", "year": "2015", "authors": "D Kingma; J Ba;  Adam"}, {"ref_id": "b28", "title": "Imagenet classification with deep convolutional neural networks", "journal": "", "year": "2012", "authors": "A Krizhevsky; I Sutskever; G E Hinton"}, {"ref_id": "b29", "title": "Gradientbased learning applied to document recognition. Proceedings of the IEEE", "journal": "", "year": "1998", "authors": "Y Lecun; L Bottou; Y Bengio; P Haffner"}, {"ref_id": "b30", "title": "Data poisoning attacks on factorization-based collaborative filtering", "journal": "", "year": "2016", "authors": "B Li; Y Wang; A Singh; Y Vorobeychik"}, {"ref_id": "b31", "title": "Understanding neural networks through representation erasure", "journal": "", "year": "2016", "authors": "J Li; W Monroe; D Jurafsky"}, {"ref_id": "b32", "title": "On the limited memory BFGS method for large scale optimization. Mathematical Programming", "journal": "", "year": "1989", "authors": "D C Liu; J Nocedal"}, {"ref_id": "b33", "title": "Efficient approximation of cross-validation for kernel methods using Bouligand influence function", "journal": "", "year": "2014", "authors": "Y Liu; S Jiang; S Liao"}, {"ref_id": "b34", "title": "Deep learning via hessian-free optimization", "journal": "", "year": "2010", "authors": "J Martens"}, {"ref_id": "b35", "title": "The security of latent Dirichlet allocation", "journal": "", "year": "2015", "authors": "S Mei; X Zhu"}, {"ref_id": "b36", "title": "Using machine teaching to identify optimal training-set attacks on machine learners", "journal": "", "year": "2015", "authors": "S Mei; X Zhu"}, {"ref_id": "b37", "title": "Spam filtering with naive Bayes -which naive Bayes", "journal": "", "year": "2006", "authors": "V Metsis; I Androutsopoulos; G Paliouras"}, {"ref_id": "b38", "title": "Deepfool: a simple and accurate method to fool deep neural networks", "journal": "", "year": "2016", "authors": "S Moosavi-Dezfooli; A Fawzi; P Frossard"}, {"ref_id": "b39", "title": "Fast exact multiplication by the Hessian", "journal": "Neural Computation", "year": "1994", "authors": "B A Pearlmutter"}, {"ref_id": "b40", "title": "Logistic regression diagnostics", "journal": "Annals of Statistics", "year": "1981", "authors": "D Pregibon"}, {"ref_id": "b41", "title": "Why Should I Trust You?\": Explaining the predictions of any classifier", "journal": "", "year": "2016", "authors": "M T Ribeiro; S Singh; C Guestrin"}, {"ref_id": "b42", "title": "ImageNet large scale visual recognition challenge", "journal": "International Journal of Computer Vision", "year": "2015", "authors": "O Russakovsky; J Deng; H Su; J Krause; S Satheesh; S Ma; Z Huang; A Karpathy; A Khosla; M Bernstein"}, {"ref_id": "b43", "title": "Learning important features through propagating activation differences", "journal": "", "year": "2017", "authors": "A Shrikumar; P Greenside; A Kundaje"}, {"ref_id": "b44", "title": "Deep inside convolutional networks: Visualising image classification models and saliency maps", "journal": "", "year": "2013", "authors": "K Simonyan; A Vedaldi; A Zisserman"}, {"ref_id": "b45", "title": "Striving for simplicity: The all convolutional net", "journal": "", "year": "2014", "authors": "J T Springenberg; A Dosovitskiy; T Brox; M Riedmiller"}, {"ref_id": "b46", "title": "Impact of HbA1c measurement on hospital readmission rates: Analysis of 70,000 clinical database patient records. BioMed Research International", "journal": "", "year": "2014", "authors": "B Strack; J P Deshazo; C Gennings; J L Olmo; S Ventura; K J Cios; J N Clore"}, {"ref_id": "b47", "title": "Rethinking the Inception architecture for computer vision", "journal": "", "year": "2016", "authors": "C Szegedy; V Vanhoucke; S Ioffe; J Shlens; Z Wojna"}, {"ref_id": "b48", "title": "Theano: A Python framework for fast computation of mathematical expressions", "journal": "", "year": "2016", "authors": "D Theano;  Team"}, {"ref_id": "b49", "title": "Assessing influence on predictions from generalized linear models", "journal": "Technometrics", "year": "1990", "authors": "W Thomas; R D Cook"}, {"ref_id": "b50", "title": "Asymptotic statistics", "journal": "Cambridge University Press", "year": "1998", "authors": "A W Van Der Vaart"}, {"ref_id": "b51", "title": "Generalized leverage and its applications", "journal": "Scandinavian Journal of Statistics", "year": "1998", "authors": "B Wei; Y Hu; W Fung"}, {"ref_id": "b52", "title": "Influence sketching", "journal": "", "year": "2016", "authors": "M Wojnowicz; B Cruz; X Zhao; B Wallace; M Wolff; J Luan; Crable ; C "}], "figures": [{"figure_label": "1", "figure_type": "figure", "figure_id": "fig_0", "figure_caption": "Figure 1 .1Figure 1. Components of influence. (a) What is the effect of the training loss and H \u22121 \u03b8", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_1", "figure_caption": "ztest. See panel (b). Right: Without training loss or H \u22121 \u03b8 , what is left is the scaled Euclidean inner product ytesty \u2022 \u03c3(\u2212ytest\u03b8 \u2022 xtest)x test x, which fails to accurately capture influence; the scatter plot deviates quite far from the diagonal. (b) The test image and a harmful training image with the same label.", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_2", "figure_caption": "Let p(y | x) = \u03c3(y\u03b8 x), with y \u2208 {\u22121, 1} and \u03c3(t) = 1 1+exp(\u2212t) . We seek to maximize the probability of the training set. For a training point z = (x, y), L(z, \u03b8) = log(1 + exp(\u2212y\u03b8 x)), \u2207 \u03b8 L(z, \u03b8) = \u2212\u03c3(\u2212y\u03b8 x)yx, and", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_3", "figure_caption": "1 n I up,loss (z, z test ) with L(z test ,\u03b8 \u2212z ) \u2212 L(z test ,\u03b8) (i.e., actually doing leave-one-out retraining). With a logistic regression model on 10-class MNIST, 4 the predicted and actual changes matched closely (Fig 2-Left). The stochastic approximation from Agarwal et al. (2016) was also accurate with r = 10 repeats and t = 5, 000 iterations (Fig 2-Mid). Since each iteration only requires one HVP [\u2207 2", "figure_data": ""}, {"figure_label": "31", "figure_type": "figure", "figure_id": "fig_4", "figure_caption": "Figure 3 . 1 ni31Figure 3. Smooth approximations to the hinge loss. (a) By varying t, we can approximate the hinge loss with arbitrary accuracy: the green and blue lines are overlaid on top of each other. (b) Using a random, wrongly-classified test point, we compared the predicted vs. actual differences in loss after leave-one-out retraining on the 100 most influential training points. A similar trend held for other test points. The SVM objective is to minimize 0.005 w 2 2 + 1 n i Hinge(yiw xi). Left: Influence functions were unable to accurately predict the change, overestimating its magnitude considerably. Mid: Using SmoothHinge(\u2022, 0.001) let us accurately predict the change in the hinge loss after retraining. Right: Correlation remained high over a wide range of t, though it degrades when t is too large. When t = 0.001, Pearson's R = 0.95; when t = 0.1, Pearson's R = 0.91.", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_5", "figure_caption": "001) closely matched the actual change due to retraining in the original Hinge(s) (Pearson's R = 0.95; Fig 3b-Mid) and remained accurate over a wide range of t (Fig 3b-Right).", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_6", "figure_caption": ", with 900 training examples for each class. Freezing neural networks in this way is not uncommon in computer vision and is equivalent to training a logistic regression model on the bottleneck features (Donahue et al., 2014). We picked a test image both models got correct (Fig 4-Top) and used SmoothHinge(\u2022, 0.001) to compute the influence for the SVM. As expected, I up,loss in the RBF SVM varied inversely with raw pixel distance, with training images far from the test image in pixel space having almost no influence; the Inception influences were much less correlated with distance in pixel space (Fig 4-Left). Looking at the two most helpful images (most positive \u2212I up,loss ) for each model in Fig 4-Right, we see that the Inception network picked on the distinctive characteristics of clownfish, whereas the RBF SVM pattern-matched training images superficially.Moreover, in the RBF SVM, fish (green points) close to the test image were mostly helpful, while dogs (red) were mostly harmful, with the RBF acting as a soft nearest neighbor function. In contrast, in the Inception network, fish and dogs could be helpful or harmful for correctly classifying the test image as a fish; in fact, the 5th most helpful training image was a dog that, to the model, looked very different from the test fish.", "figure_data": ""}, {"figure_label": "4", "figure_type": "figure", "figure_id": "fig_7", "figure_caption": "Figure 4 .4Figure 4. Inception vs. RBF SVM. Bottom left: \u2212Iup,loss(z, ztest) vs. z \u2212 ztest 2 2 . Green dots are fish and red dots are dogs. Bottom right: The two most helpful training images, for each model, on the test. Top right: An image of a dog in the training set that helped the Inception model correctly classify the test image as a fish.", "figure_data": ""}, {"figure_label": "5", "figure_type": "figure", "figure_id": "fig_8", "figure_caption": "Figure 5 .5Figure 5. Training-set attacks.We targeted a set of 30 test images featuring the first author's dog in a variety of poses and backgrounds. By maximizing the average loss over these 30 images, we found a visuallyimperceptible change to the particular training image (shown on top) that flipped predictions on 16 test images.", "figure_data": ""}, {"figure_label": "6", "figure_type": "figure", "figure_id": "fig_9", "figure_caption": "Figure 6 .6Figure 6. Fixing mislabeled examples. Plots of how test accuracy (left) and the fraction of flipped data detected (right) change with the fraction of train data checked, using different algorithms for picking points to check. Error bars show the std. dev. across 40 repeats of this experiment, with a different subset of labels flipped in each; error bars on the right are too small to be seen. These results are on the Enron1 spam dataset (Metsis et al., 2006), with 4,147 training and 1,035 test examples; we trained logistic regression on a bag-of-words representation of the emails.", "figure_data": ""}], "formulas": [{"formula_id": "formula_0", "formula_text": "def = arg min \u03b8\u2208\u0398 1 n n i=1 L(z i , \u03b8) + L(z, \u03b8). A classic result", "formula_coordinates": [2.0, 55.44, 389.05, 234.0, 24.52]}, {"formula_id": "formula_1", "formula_text": "I up,params (z) def = d\u03b8 ,z d =0 = \u2212H \u22121 \u03b8 \u2207 \u03b8 L(z,\u03b8),(1)", "formula_coordinates": [2.0, 70.77, 439.35, 218.67, 22.31]}, {"formula_id": "formula_2", "formula_text": "H\u03b8 def = 1 n n i=1 \u2207 2 \u03b8 L(z i ,\u03b8)", "formula_coordinates": [2.0, 83.8, 472.03, 114.17, 15.2]}, {"formula_id": "formula_3", "formula_text": "I up,loss (z, z test ) def = dL(z test ,\u03b8 ,z ) d =0 (2) = \u2207 \u03b8 L(z test ,\u03b8) d\u03b8 ,z d =0 = \u2212\u2207 \u03b8 L(z test ,\u03b8) H \u22121 \u03b8 \u2207 \u03b8 L(z,\u03b8).", "formula_coordinates": [2.0, 71.84, 635.9, 217.6, 68.5]}, {"formula_id": "formula_4", "formula_text": "def = arg min \u03b8\u2208\u0398 1 n n i=1 L(z i , \u03b8) + L(z \u03b4 , \u03b8) \u2212 L(z, \u03b8", "formula_coordinates": [2.0, 307.44, 181.38, 233.44, 27.15]}, {"formula_id": "formula_5", "formula_text": "d\u03b8 ,z \u03b4 ,\u2212z d =0 = I up,params (z \u03b4 ) \u2212 I up,params (z) = \u2212H \u22121 \u03b8 \u2207 \u03b8 L(z \u03b4 ,\u03b8) \u2212 \u2207 \u03b8 L(z,\u03b8) . (3)", "formula_coordinates": [2.0, 315.59, 228.48, 225.86, 40.75]}, {"formula_id": "formula_6", "formula_text": "As \u03b4 \u2192 0, \u2207 \u03b8 L(z \u03b4 ,\u03b8) \u2212 \u2207 \u03b8 L(z,\u03b8) \u2248 [\u2207 x \u2207 \u03b8 L(z,\u03b8)]\u03b4, where \u2207 x \u2207 \u03b8 L(z,\u03b8) \u2208 R p\u00d7d . Substituting into (3), d\u03b8 ,z \u03b4 ,\u2212z d =0 \u2248 \u2212H \u22121 \u03b8 [\u2207 x \u2207 \u03b8 L(z,\u03b8)]\u03b4.(4)", "formula_coordinates": [2.0, 307.44, 441.33, 234.0, 55.32]}, {"formula_id": "formula_7", "formula_text": "z \u03b4 ,\u2212z \u2212\u03b8 \u2248 \u2212 1 n H \u22121 \u03b8 [\u2207 x \u2207 \u03b8 L(z,\u03b8)]\u03b4.", "formula_coordinates": [2.0, 367.68, 503.71, 154.08, 15.22]}, {"formula_id": "formula_8", "formula_text": "I pert,loss (z, z test ) def = \u2207 \u03b4 L(z test ,\u03b8 z \u03b4 ,\u2212z ) \u03b4=0 (5) = \u2212\u2207 \u03b8 L(z test ,\u03b8) H \u22121 \u03b8 \u2207 x \u2207 \u03b8 L(z,\u03b8", "formula_coordinates": [2.0, 315.25, 535.8, 226.19, 37.79]}, {"formula_id": "formula_9", "formula_text": "H \u03b8 = 1 n n i=1 \u03c3(\u03b8 x i )\u03c3(\u2212\u03b8 x i )x i x i . From (2), I up,loss (z, z test ) is: \u2212y test y \u2022 \u03c3(\u2212y test \u03b8 x test ) \u2022 \u03c3(\u2212y\u03b8 x) \u2022 x test H \u22121 \u03b8 x.", "formula_coordinates": [3.0, 55.44, 436.99, 234.0, 47.22]}, {"formula_id": "formula_10", "formula_text": "I up,loss (z, z test ) = \u2212\u2207 \u03b8 L(z test ,\u03b8) H \u22121 \u03b8 \u2207 \u03b8 L(z,\u03b8). First,", "formula_coordinates": [3.0, 55.44, 666.74, 225.78, 15.22]}, {"formula_id": "formula_11", "formula_text": "H\u03b8 = 1 n n i=1 \u2207 2 \u03b8 L(z i ,\u03b8", "formula_coordinates": [3.0, 180.57, 681.38, 101.0, 14.56]}, {"formula_id": "formula_12", "formula_text": "j = I + (I \u2212 H)H \u22121 j\u22121 . From the validity of the Taylor expansion, H \u22121 j \u2192 H \u22121 as j \u2192 \u221e. 2", "formula_coordinates": [4.0, 55.44, 94.84, 234.0, 38.34]}, {"formula_id": "formula_13", "formula_text": "E[H \u22121 j ] = H \u22121 j , we still have E[H \u22121 j ] \u2192 H \u22121 .", "formula_coordinates": [4.0, 55.44, 146.13, 234.0, 27.46]}, {"formula_id": "formula_14", "formula_text": "H \u22121 j v = v + I \u2212 \u2207 2 \u03b8 L(z sj ,\u03b8) H \u22121 j\u22121 v, takingH \u22121 t v", "formula_coordinates": [4.0, 55.44, 229.86, 222.19, 13.5]}, {"formula_id": "formula_15", "formula_text": "I pert,loss (z i , z test ) = \u2212 1 n \u2207 \u03b8 L(z test ,\u03b8) H \u22121 \u03b8 \u2207 x \u2207 \u03b8 L(z i,", "formula_coordinates": [4.0, 55.44, 423.8, 225.16, 15.22]}, {"formula_id": "formula_16", "formula_text": "\u03b8) = L(z,\u03b8) + \u2207L(z,\u03b8) (\u03b8 \u2212\u03b8)+ 1 2 (\u03b8 \u2212\u03b8) (H\u03b8 +\u03bbI)(\u03b8 \u2212\u03b8).", "formula_coordinates": [4.0, 307.44, 654.43, 234.0, 23.55]}, {"formula_id": "formula_17", "formula_text": "R(\u03b8) def = 1 n n i=1 L(z i , \u03b8).(6)", "formula_coordinates": [9.0, 123.66, 378.26, 165.78, 30.32]}, {"formula_id": "formula_18", "formula_text": "H\u03b8", "formula_coordinates": [9.0, 99.22, 461.3, 12.08, 8.74]}, {"formula_id": "formula_19", "formula_text": "def = \u2207 2 R(\u03b8) = 1 n n i=1 \u2207 2 \u03b8 L(z i ,\u03b8)(7)", "formula_coordinates": [9.0, 114.78, 450.89, 174.67, 30.32]}, {"formula_id": "formula_20", "formula_text": "d\u03b8 ,z d = d\u2206 d .(9)", "formula_coordinates": [9.0, 144.5, 630.16, 144.94, 22.31]}, {"formula_id": "formula_22", "formula_text": "\u2206 \u2248 \u2212 \u2207 2 R(\u03b8) + \u2207 2 L(z,\u03b8) \u22121(12)", "formula_coordinates": [9.0, 351.44, 184.62, 190.0, 15.91]}, {"formula_id": "formula_23", "formula_text": "\u2206 \u2248 \u2212 \u2207 2 R(\u03b8) \u22121 \u2207L(z,\u03b8) . (13", "formula_coordinates": [9.0, 363.08, 267.92, 174.21, 11.03]}, {"formula_id": "formula_24", "formula_text": ")", "formula_coordinates": [9.0, 537.29, 270.31, 4.15, 8.64]}, {"formula_id": "formula_25", "formula_text": "d\u03b8 ,z d =0 = \u2212H \u22121 \u03b8 \u2207L(z,\u03b8)(14)", "formula_coordinates": [9.0, 366.71, 316.19, 174.73, 22.38]}, {"formula_id": "formula_27", "formula_text": "N ,z def = \u2212 H\u03b8 + \u2207 2 \u03b8 L(z,\u03b8) \u22121 g + \u2207 \u03b8 L(z,\u03b8) .(16)", "formula_coordinates": [9.0, 317.58, 601.03, 223.86, 31.75]}], "doi": ""}