{"title": "Group Normalization", "authors": "Yuxin Wu; Kaiming He", "pub_date": "2018-06-11", "abstract": "Batch Normalization (BN) is a milestone technique in the development of deep learning, enabling various networks to train. However, normalizing along the batch dimension introduces problems -BN's error increases rapidly when the batch size becomes smaller, caused by inaccurate batch statistics estimation. This limits BN's usage for training larger models and transferring features to computer vision tasks including detection, segmentation, and video, which require small batches constrained by memory consumption. In this paper, we present Group Normalization (GN) as a simple alternative to BN. GN divides the channels into groups and computes within each group the mean and variance for normalization. GN's computation is independent of batch sizes, and its accuracy is stable in a wide range of batch sizes. On ResNet-50 trained in ImageNet, GN has 10.6% lower error than its BN counterpart when using a batch size of 2; when using typical batch sizes, GN is comparably good with BN and outperforms other normalization variants. Moreover, GN can be naturally transferred from pre-training to fine-tuning. GN can outperform its BNbased counterparts for object detection and segmentation in COCO, 1 and for video classification in Kinetics, showing that GN can effectively replace the powerful BN in a variety of tasks. GN can be easily implemented by a few lines of code in modern libraries.", "sections": [{"heading": "Introduction", "text": "Batch Normalization (Batch Norm or BN) [26] has been established as a very effective component in deep learning, largely helping push the frontier in computer vision [59,20] and beyond [54]. BN normalizes the features by the mean and variance computed within a (mini-)batch. This has been shown by many practices to ease optimization and enable very deep networks to converge. The stochastic uncertainty of the batch statistics also acts as a regularizer that can benefit generalization. BN has been a foundation of many stateof-the-art computer vision algorithms. Despite its great success, BN exhibits drawbacks that are also caused by its distinct behavior of normalizing along the batch dimension. In particular, it is required for BN to work with a sufficiently large batch size (e.g., 32 per worker 2 [26,59,20]). A small batch leads to inaccurate estimation of the batch statistics, and reducing BN's batch size increases the model error dramatically (Figure 1). As a result, many recent models [59,20,57,24,63] are trained with non-trivial batch sizes that are memory-consuming. The heavy reliance on BN's effectiveness to train models in turn prohibits people from exploring higher-capacity models that would be limited by memory.\nThe restriction on batch sizes is more demanding in computer vision tasks including detection [12,47,18], segmentation [38,18], video recognition [60,6], and other highlevel systems built on them. For example, the Fast/er and Mask R-CNN frameworks [12,47,18] use a batch size of 1 or 2 images because of higher resolution, where BN is \"frozen\" by transforming to a linear layer [20]; in video classification with 3D convolutions [60,6], the presence of spatial-temporal features introduces a trade-off between the temporal length and batch size. The usage of BN often requires these systems to compromise between the model design and batch sizes. This paper presents Group Normalization (GN) as a simple alternative to BN. We notice that many classical features like SIFT [39] and HOG [9] are group-wise features and involve group-wise normalization. For example, a HOG vector is the outcome of several spatial cells where each cell is represented by a normalized orientation histogram. Analogously, we propose GN as a layer that divides channels into groups and normalizes the features within each group (Figure 2). GN does not exploit the batch dimension, and its computation is independent of batch sizes.\nGN behaves very stably over a wide range of batch sizes (Figure 1). With a batch size of 2 samples, GN has 10.6% lower error than its BN counterpart for ResNet-50 [20] in ImageNet [50]. With a regular batch size, GN is comparably good as BN (with a gap of \u223c0.5%) and outperforms other normalization variants [3,61,51]. Moreover, although the batch size may change, GN can naturally transfer from pretraining to fine-tuning. GN shows improved results vs. its BN counterpart on Mask R-CNN for COCO object detection and segmentation [37], and on 3D convolutional networks for Kinetics video classification [30]. The effectiveness of GN in ImageNet, COCO, and Kinetics demonstrates that GN is a competitive alternative to BN that has been dominant in these tasks.\nThere have been existing methods, such as Layer Normalization (LN) [3] and Instance Normalization (IN) [61] (Figure 2), that also avoid normalizing along the batch dimension. These methods are effective for training sequential models (RNN/LSTM [49,22]) or generative models (GANs [15,27]). But as we will show by experiments, both LN and IN have limited success in visual recognition, for which GN presents better results. Conversely, GN could be used in place of LN and IN and thus is applicable for sequential or generative models. This is beyond the focus of this paper, but it is suggestive for future research.", "publication_ref": ["b25", "b58", "b19", "b53", "b31", "b1", "b25", "b58", "b19", "b58", "b19", "b56", "b23", "b62", "b11", "b46", "b17", "b37", "b17", "b59", "b5", "b11", "b46", "b17", "b19", "b59", "b5", "b38", "b8", "b19", "b49", "b2", "b60", "b50", "b36", "b29", "b2", "b60", "b48", "b21", "b14", "b26"], "figure_ref": ["fig_0", "fig_1", "fig_0", "fig_1"], "table_ref": []}, {"heading": "Related Work", "text": "Normalization. It is well-known that normalizing the input data makes training faster [33]. To normalize hidden features, initialization methods [33,14,19] have been derived based on strong assumptions of feature distributions, which can become invalid when training evolves.\nNormalization layers in deep networks had been widely used before the development of BN. Local Response Normalization (LRN) [40,28,32] was a component in AlexNet [32] and following models [64,53,58]. Unlike recent methods [26,3,61], LRN computes the statistics in a small neighborhood for each pixel.\nBatch Normalization [26] performs more global normalization along the batch dimension (and as importantly, it suggests to do this for all layers). But the concept of \"batch\" is not always present, or it may change from time to time. For example, batch-wise normalization is not legitimate at inference time, so the mean and variance are pre-computed from the training set [26], often by running average; consequently, there is no normalization performed when testing. The pre-computed statistics may also change when the target data distribution changes [45]. These issues lead to inconsistency at training, transferring, and testing time. In addition, as aforementioned, reducing the batch size can have dramatic impact on the estimated batch statistics.\nSeveral normalization methods [3,61,51,2,46] have been proposed to avoid exploiting the batch dimension. Layer Normalization (LN) [3] operates along the channel dimension, and Instance Normalization (IN) [61] performs BN-like computation but only for each sample (Figure 2). Instead of operating on features, Weight Normalization (WN) [51] proposes to normalize the filter weights. These methods do not suffer from the issues caused by the batch dimension, but they have not been able to approach BN's accuracy in many visual recognition tasks. We provide comparisons with these methods in context of the remaining sections.\nAddressing small batches. Ioffe [25] proposes Batch Renormalization (BR) that alleviates BN's issue involving small batches. BR introduces two extra parameters that constrain the estimated mean and variance of BN within a certain range, reducing their drift when the batch size is small. BR has better accuracy than BN in the small-batch regime. But BR is also batch-dependent, and when the batch size decreases its accuracy still degrades [25].\nThere are also attempts to avoid using small batches. The object detector in [43] performs synchronized BN whose mean and variance are computed across multiple GPUs. However, this method does not solve the problem of small batches; instead, it migrates the algorithm problem to engineering and hardware demands, using a number of GPUs proportional to BN's requirements. Moreover, the synchronized BN computation prevents using asynchronous solvers (ASGD [10]), a practical solution to large-scale training widely used in industry. These issues can limit the scope of using synchronized BN.\nInstead of addressing the batch statistics computation (e.g., [25,43]), our normalization method inherently avoids this computation.\nGroup-wise computation. Group convolutions have been presented by AlexNet [32] for distributing a model into two GPUs. The concept of groups as a dimension for model design has been more widely studied recently. The work of ResNeXt [63] investigates the trade-off between depth, width, and groups, and it suggests that a larger number of groups can improve accuracy under similar computational cost. MobileNet [23] and Xception [7] exploit channel-wise (also called \"depth-wise\") convolutions, which are group convolutions with a group number equal to the channel number. ShuffleNet [65] proposes a channel shuffle operation that permutes the axes of grouped features. These methods all involve dividing the channel dimension into groups. Despite the relation to these methods, GN does not require group convolutions. GN is a generic layer, as we evaluate in standard ResNets [20].", "publication_ref": ["b32", "b32", "b13", "b18", "b39", "b27", "b31", "b31", "b63", "b52", "b57", "b25", "b2", "b60", "b25", "b25", "b44", "b2", "b60", "b50", "b1", "b45", "b2", "b60", "b50", "b24", "b24", "b42", "b9", "b24", "b42", "b31", "b62", "b22", "b6", "b64", "b19"], "figure_ref": ["fig_1"], "table_ref": []}, {"heading": "Group Normalization", "text": "The channels of visual representations are not entirely independent. Classical features of SIFT [39], HOG [9], and GIST [41] are group-wise representations by design, where each group of channels is constructed by some kind of histogram. These features are often processed by groupwise normalization over each histogram or each orientation. Higher-level features such as VLAD [29] and Fisher Vectors (FV) [44] are also group-wise features where a group can be thought of as the sub-vector computed with respect to a cluster.\nAnalogously, it is not necessary to think of deep neural network features as unstructured vectors. For example, for conv 1 (the first convolutional layer) of a network, it is reasonable to expect a filter and its horizontal flipping to exhibit similar distributions of filter responses on natural images. If conv 1 happens to approximately learn this pair of filters, or if the horizontal flipping (or other transformations) is made into the architectures by design [11,8], then the corresponding channels of these filters can be normalized together.\nThe higher-level layers are more abstract and their behaviors are not as intuitive. However, in addition to orientations (SIFT [39], HOG [9], or [11,8]), there are many factors that could lead to grouping, e.g., frequency, shapes, illumination, textures. Their coefficients can be interdependent. In fact, a well-accepted computational model in neuroscience is to normalize across the cell responses [21,52,55,5], \"with various receptive-field centers (covering the visual field) and with various spatiotemporal frequency tunings\" (p183, [21]); this can happen not only in the primary visual cortex, but also \"throughout the visual system\" [5]. Motivated by these works, we propose new generic group-wise normalization for deep neural networks.", "publication_ref": ["b38", "b8", "b40", "b28", "b43", "b10", "b7", "b38", "b8", "b10", "b7", "b20", "b51", "b54", "b4", "b20", "b4"], "figure_ref": [], "table_ref": []}, {"heading": "Formulation", "text": "We first describe a general formulation of feature normalization, and then present GN in this formulation. A family of feature normalization methods, including BN, LN, IN, and GN, perform the following computation:\nx i = 1 \u03c3 i (x i \u2212 \u00b5 i ). (1\n)\nHere x is the feature computed by a layer, and i is an index.\nIn the case of 2D images, i\n= (i N , i C , i H , i W ) is a 4D vec- tor indexing the features in (N, C, H, W ) order,\nwhere N is the batch axis, C is the channel axis, and H and W are the spatial height and width axes. \u00b5 and \u03c3 in (1) are the mean and standard deviation (std) computed by:\n\u00b5 i = 1 m k\u2208Si x k , \u03c3 i = 1 m k\u2208Si (x k \u2212 \u00b5 i ) 2 + , (2)\nwith as a small constant. S i is the set of pixels in which the mean and std are computed, and m is the size of this set. Many types of feature normalization methods mainly differ in how the set S i is defined (Figure 2), discussed as follows.\nIn Batch Norm [26], the set S i is defined as:\nS i = {k | k C = i C },(3)\nwhere i C (and k C ) denotes the sub-index of i (and k) along the C axis. This means that the pixels sharing the same channel index are normalized together, i.e., for each channel, BN computes \u00b5 and \u03c3 along the (N, H, W ) axes. In Layer Norm [3], the set is:\nS i = {k | k N = i N },(4)\nmeaning that LN computes \u00b5 and \u03c3 along the (C, H, W ) axes for each sample. In Instance Norm [61], the set is:\nS i = {k | k N = i N , k C = i C }.(5)\nmeaning that IN computes \u00b5 and \u03c3 along the (H, W ) axes for each sample and each channel. The relations among BN, LN, and IN are in Figure 2.\nAs in [26], all methods of BN, LN, and IN learn a perchannel linear transform to compensate for the possible lost of representational ability:\ny i = \u03b3x i + \u03b2,(6)\nwhere \u03b3 and \u03b2 are trainable scale and shift (indexed by i C in all case, which we omit for simplifying notations).\nGroup Norm. Formally, a Group Norm layer computes \u00b5 and \u03c3 in a set S i defined as:\nS i = {k | k N = i N , k C C/G = i C C/G }. (7\n)\nHere G is the number of groups, which is a pre-defined hyper-parameter (G = 32 by default). C/G is the number of channels per group. \u2022 is the floor operation, and \" k C C/G = i C C/G \" means that the indexes i and k are in the same group of channels, assuming each group of channels are stored in a sequential order along the C axis. GN computes \u00b5 and \u03c3 along the (H, W ) axes and along a group of C G channels. The computation of GN is illustrated in Figure 2 (rightmost), which is a simple case of 2 groups (G = 2) each having 3 channels.\nGiven S i in Eqn.( 7), a GN layer is defined by Eqn.( 1), (2), and (6). Specifically, the pixels in the same group are normalized together by the same \u00b5 and \u03c3. GN also learns the per-channel \u03b3 and \u03b2.\nRelation to Prior Work. LN, IN, and GN all perform independent computations along the batch axis. The two extreme cases of GN are equivalent to LN and IN (Figure 2).\nRelation to Layer Normalization [3]. GN becomes LN if we set the group number as G = 1. LN assumes all channels in a layer make \"similar contributions\" [3]. Unlike the case of fully-connected layers studied in [3], this assumption can be less valid with the presence of convolutions, as discussed in [3]. GN is less restricted than LN, because each group of channels (instead of all of them) are assumed to subject to the shared mean and variance; the model still has flexibility of learning a different distribution for each group. This leads to improved representational power of GN over LN, as shown by the lower training and validation error in experiments (Figure 4). [61]. GN becomes IN if we set the group number as G = C (i.e., one channel per group). But IN can only rely on the spatial dimension for computing the mean and variance and it misses the opportunity of exploiting the channel dependence.", "publication_ref": ["b25", "b2", "b60", "b25", "b5", "b2", "b2", "b2", "b2", "b60"], "figure_ref": ["fig_1", "fig_1", "fig_1", "fig_1", "fig_3"], "table_ref": []}, {"heading": "Relation to Instance Normalization", "text": "", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Implementation", "text": "GN can be easily implemented by a few lines of code in PyTorch [42] and TensorFlow [1] where automatic differentiation is supported. Figure 3 shows the code based on TensorFlow. In fact, we only need to specify how the mean and variance (\"moments\") are computed, along the appropriate axes as defined by the normalization method.", "publication_ref": ["b41", "b0"], "figure_ref": ["fig_2"], "table_ref": []}, {"heading": "Experiments", "text": "", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Image Classification in ImageNet", "text": "We experiment in the ImageNet classification dataset [50] with 1000 classes. We train on the \u223c1.28M training images and evaluate on the 50,000 validation images, using the ResNet models [20].\nImplementation details. As standard practice [20,17], we use 8 GPUs to train all models, and the batch mean and variance of BN are computed within each GPU. We use the method of [19] to initialize all convolutions for all models. We use 1 to initialize all \u03b3 parameters, except for each residual block's last normalization layer where we initialize \u03b3 by 0 following [16] (such that the initial state of a residual block is identity). We use a weight decay of 0.0001 for all weight layers, including \u03b3 and \u03b2 (following [17] but unlike [20,16]). We train 100 epochs for all models, and decrease the learning rate by 10\u00d7 at 30, 60, and 90 epochs.\nDuring training, we adopt the data augmentation of [58] as implemented by [17]. We evaluate the top-1 classification error on the center crops of 224\u00d7224 pixels in the validation set. To reduce random variations, we report the median error rate of the final 5 epochs [16]. Other implementation details follow [17].\nOur baseline is the ResNet trained with BN [20]. To compare with LN, IN, and GN, we replace BN with the specific variant. We use the same hyper-parameters for all models. We set G = 32 for GN by default.\nComparison of feature normalization methods. We first experiment with a regular batch size of 32 images (per GPU) [26,20]. BN works successfully in this regime, so this is a strong baseline to compare with. Figure 4 shows the error curves, and Table 1 shows the final results.\nFigure 4 shows that all of these normalization methods are able to converge. LN has a small degradation of 1.7%  comparing with BN. This is an encouraging result, as it suggests that normalizing along all channels (as done by LN) of a convolutional network is reasonably good. IN also makes the model converge, but is 4.8% worse than BN. 3 In this regime where BN works well, GN is able to approach BN's accuracy, with a decent degradation of 0.5% in the validation set. Actually, Figure 4 (left) shows that GN has lower training error than BN, indicating that GN is effective for easing optimization. The slightly higher validation error of GN implies that GN loses some regularization ability of BN. This is understandable, because BN's mean and variance computation introduces uncertainty caused by the stochastic batch sampling, which helps regularization [26]. This uncertainty is missing in GN (and LN/IN). But it is possible that GN combined with a suitable regularizer will improve results. This can be a future research topic. 3 For completeness, we have also trained ResNet-50 with WN [51], which is filter (instead of feature) normalization. WN's result is 28.2%.  1.\nSmall batch sizes. Although BN benefits from the stochasticity under some situations, its error increases when the batch size becomes smaller and the uncertainty gets bigger. We show this in Figure 1, Figure 5, and Table 2.\nWe evaluate batch sizes of 32, 16, 8, 4, 2 images per GPU. In all cases, the BN mean and variance are computed within each GPU and not synchronized. All models are trained in 8 GPUs. In this set of experiments, we adopt the linear learning rate scaling rule [31,4,16] to adapt to batch size changes -we use a learning rate of 0.1 [20] for the batch size of 32, and 0.1N/32 for a batch size of N . This linear scaling rule works well for BN if the total batch size changes (by changing the number of GPUs) but the per-GPU batch size does not change [16]. We keep the same number of training epochs for all cases (Figure 5, x-axis). All other hyper-parameters are unchanged.  Figure 5 (left) shows that BN's error becomes considerably higher with small batch sizes. GN's behavior is more stable and insensitive to the batch size. Actually, Figure 5 (right) shows that GN has very similar curves (subject to random variations) across a wide range of batch sizes from 32 to 2. In the case of a batch size of 2, GN has 10.6% lower error rate than its BN counterpart (24.1% vs. 34.7%).\nThese results indicate that the batch mean and variance estimation can be overly stochastic and inaccurate, especially when they are computed over 4 or 2 images. However, this stochasticity disappears if the statistics are computed from 1 image, in which case BN becomes similar to IN at training time. We see that IN has a better result (28.4%) than BN with a batch size of 2 (34.7%).\nThe robust results of GN in Table 2 demonstrate GN's strength. It allows to remove the batch size constraint imposed by BN, which can give considerably more memory (e.g., 16\u00d7 or more). This will make it possible to train higher-capacity models that would be otherwise bottlenecked by memory limitation. We hope this will create new opportunities in architecture design.\nComparison with Batch Renorm (BR). BR [25] introduces two extra parameters (r and d in [25]) that constrain the estimated mean and variance of BN. Their values are controlled by r max and d max . To apply BR to ResNet-50, we have carefully chosen these hyper-parameters, and found that r max = 1.5 and d max = 0.5 work best for ResNet-50.\nWith a batch size of 4, ResNet-50 trained with BR has an error rate of 26.3%. This is better than BN's 27.3%, but still 2.1% higher than GN's 24.2%.", "publication_ref": ["b49", "b19", "b19", "b16", "b18", "b15", "b16", "b19", "b15", "b57", "b16", "b15", "b16", "b19", "b25", "b19", "b2", "b25", "b2", "b50", "b30", "b3", "b15", "b19", "b15", "b24", "b24"], "figure_ref": ["fig_3", "fig_3", "fig_3", "fig_0", "fig_0"], "table_ref": ["tab_0", "tab_1", "tab_1"]}, {"heading": "Group division.", "text": "Thus far all presented GN models are trained with a group number of G = 32. Next we evaluate different ways of dividing into groups. With a given fixed group number, GN performs reasonably well for all values of G we studied (Table 3, top panel). In the extreme case of G = 1, GN is equivalent to LN, and its error rate is higher than all cases of G > 1 studied.\nWe also evaluate fixing the number of channels per group (Table 3, bottom panel). Note that because the layers can have different channel numbers, the group number G can change across layers in this setting. In the extreme case of 1 channel per group, GN is equivalent to IN. Even if using as few as 2 channels per group, GN has substantially lower error than IN (25.6% vs. 28.4%). This result shows the effect of grouping channels when performing normalization.\nDeeper models. We have also compared GN with BN on ResNet-101 [20]. With a batch size of 32, our BN baseline of ResNet-101 has 22.0% validation error, and the GN counterpart has 22.4%, slightly worse by 0.4%. With a batch size of 2, GN ResNet-101's error is 23.0%. This is still a decently stable result considering the very small batch size, and it is 8.9% better than the BN counterpart's 31.9%.\nResults and analysis of VGG models. To study GN/BN compared to no normalization, we consider VGG-16 [56] that can be healthily trained without normalization layers. We apply BN or GN right after each convolutional layer. Figure 6 shows the evolution of the feature distributions of conv 5 3 (the last convolutional layer). GN and BN behave qualitatively similar, while being substantially different with the variant that uses no normalization; this phenomenon is also observed for all other convolutional layers. This comparison suggests that performing normalization is essential for controlling the distribution of features.\nFor VGG-16, GN is better than BN by 0.4% (Figure 6, right). This possibly implies that VGG-16 benefits less from BN's regularization effect, and GN (that leads to lower training error) is superior to BN in this case.", "publication_ref": ["b19", "b55"], "figure_ref": [], "table_ref": ["tab_2", "tab_2"]}, {"heading": "Object Detection and Segmentation in COCO", "text": "Next we evaluate fine-tuning the models for transferring to object detection and segmentation. These computer vision tasks in general benefit from higher-resolution input, so the batch size tends to be small in common practice (1 or 2 images/GPU [12,47,18,36]). As a result, BN is turned into a linear layer y = \u03b3 \u03c3 (x \u2212 \u00b5) + \u03b2 where \u00b5 and \u03c3 are pre-computed from the pre-trained model and frozen [20]. We denote this as BN * , which in fact performs no normalization during fine-tuning. We have also tried a variant that fine-tunes BN (normalization is performed and not frozen) and found it works poorly (reducing \u223c6 AP with a batch size of 2), so we ignore this variant.\nWe experiment on the Mask R-CNN baselines [18], implemented in the publicly available codebase of Detectron [13]. We use the end-to-end variant with the same hyperparameters as in [13]. We replace BN * with GN during finetuning, using the corresponding models pre-trained from ImageNet. 4 During fine-tuning, we use a weight decay of 0 for the \u03b3 and \u03b2 parameters, which is important for good detection results when \u03b3 and \u03b2 are being tuned. We fine-tune with a batch size of 1 image/GPU and 8 GPUs.\nThe models are trained in the COCO train2017 set and evaluated in the COCO val2017 set (a.k.a minival). We report the standard COCO metrics of Average Precision (AP), AP 50 , and AP 75 , for bounding box detection (AP bbox ) and instance segmentation (AP mask ).\nResults of C4 backbone. Table 4 shows the comparison of GN vs. BN * on Mask R-CNN using a conv 4 backbone (\"C4\" [18]). This C4 variant uses ResNet's layers of up to conv 4 to extract feature maps, and ResNet's conv 5 layers as the Region-of-Interest (RoI) heads for classification and regression. As they are inherited from the pre-trained model, the backbone and head both involve normalization layers.\nOn this baseline, GN improves over BN * by 1.1 box AP and 0.8 mask AP. We note that the pre-trained GN model is slightly worse than BN in ImageNet (24.1% vs. 23.6%), but GN still outperforms BN * for fine-tuning. BN * creates inconsistency between pre-training and fine-tuning (frozen), which may explain the degradation.\nWe have also experimented with the LN variant, and found it is 1.9 box AP worse than GN and 0.8 worse than BN * . Although LN is also independent of batch sizes, its representational power is weaker than GN. layers to construct a pyramid, and appends randomly initialized layers as the head. In [35], the box head consists of two hidden fully-connected layers (2fc). We find that replacing the 2fc box head with 4conv1fc (similar to [48]) can better leverage GN. The resulting comparisons are in Table 5.\nAs a baseline, BN * has 38.6 box AP using the 4conv1fc head, on par with its 2fc counterpart using the same pretrained model (38.5 AP). By adding GN to all convolutional layers of the box head (but still using the BN * backbone), we increase the box AP by 0.9 to 39.5 (2nd row, Table 5). This ablation shows that a substantial portion of GN's improvement for detection is from normalization in the head (which is also done by the C4 variant). On the contrary, applying BN to the box head (that has 512 RoIs per image) does not provide satisfactory result and is \u223c9 AP worsein detection, the batch of RoIs are sampled from the same image and their distribution is not i.i.d., and the non-i.i.d. distribution is also an issue that degrades BN's batch statistics estimation [25]. GN does not suffer from this problem.\nNext we replace the FPN backbone with the GN-based counterpart, i.e., the GN pre-trained model is used during fine-tuning (3rd row, Table 5). Applying GN to the backbone alone contributes a 0.5 AP gain (from 39.5 to 40.0), suggesting that GN helps when transferring features.  Table 6 shows the full results of GN (applied to the backbone, box head, and mask head), compared with the standard Detectron baseline [13] based on BN * . Using the same hyper-parameters as [13], GN increases over BN * by a healthy margin. Moreover, we found that GN is not fully trained with the default schedule in [13], so we also tried increasing the iterations from 180k to 270k (BN * does not benefit from longer training). Our final ResNet-50 GN model (\"long\", Table 6) is 2.2 points box AP and 1.6 points mask AP better than its BN * variant.\nTraining Mask R-CNN from scratch. GN allows us to easily investigate training object detectors from scratch (without any pre-training). We show the results in Table 7, where the GN models are trained for 270k iterations. 5 To our knowledge, our numbers (41.0 box AP and 36.4 mask AP) are the best from-scratch results in COCO reported to date; they can even compete with the ImageNet-pretrained results in Table 6. As a reference, with synchronous BN [43], a concurrent work [34] achieves a from-scratch result of 34.5 box AP using R50 ( ", "publication_ref": ["b11", "b46", "b17", "b35", "b19", "b17", "b12", "b12", "b3", "b17", "b34", "b47", "b24", "b12", "b12", "b12", "b4", "b42", "b33"], "figure_ref": [], "table_ref": []}, {"heading": "Video Classification in Kinetics", "text": "Lastly we evaluate video classification in the Kinetics dataset [30]. Many video classification models [60,6] extend the features to 3D spatial-temporal dimensions. This is memory-demanding and imposes constraints on the batch sizes and model designs.\nWe experiment with Inflated 3D (I3D) convolutional networks [6]. We use the ResNet-50 I3D baseline as described in [62]. The models are pre-trained from ImageNet. For both BN and GN, we extend the normalization from over (H, W ) to over (T, H, W ), where T is the temporal axis. We train in the 400-class Kinetics training set and evaluate in the validation set. We report the top-1 and top-5 classification accuracy, using standard 10-clip testing that averages softmax scores from 10 clips regularly sampled.\nWe study two different temporal lengths: 32-frame and 64-frame input clips. The 32-frame clip is regularly sampled with a frame interval of 2 from the raw video, and the 64-frame clip is sampled continuously. The model is fully convolutional in spacetime, so the 64-frame variant consumes about 2\u00d7 more memory. We study a batch size of 8 or 4 clips/GPU for the 32-frame variant, and 4 clips/GPU for the 64-frame variant due to memory limitation.\nResults of 32-frame inputs. Table 8 (col. 1, 2) shows the video classification accuracy in Kinetics using 32-frame clips. For the batch size of 8, GN is slightly worse than BN by 0.3% top-1 accuracy and 0.1% top-5. This shows that GN is competitive with BN when BN works well. For the smaller batch size of 4, GN's accuracy is kept similar (72.8 / 90.6 vs. 73.0 / 90.6), but is better than BN's 72.1 / 90.0. BN's accuracy is decreased by 1.2% when the batch size decreases from 8 to 4.\nFigure 7 shows the error curves. BN's error curves (left) have a noticeable gap when the batch size decreases from 8 to 4, while GN's error curves (right) are very similar.\nResults of 64-frame inputs. Table 8 (col. 3) shows the results of using 64-frame clips. In this case, BN has a result of 73.3 / 90.8. These appear to be acceptable numbers (vs. 73.3 / 90.7 of 32-frame, batch size 8), but the trade-off between the temporal length (64 vs. 32) and batch size (4 vs. 8) could have been overlooked. Comparing col. 3 and col. 2 in Table 8, we find that the temporal length actually has positive impact (+1.2%), but it is veiled by BN's negative effect of the smaller batch size.\nGN does not suffer from this trade-off. The 64-frame variant of GN has 74.5 / 91.7 accuracy, showing healthy gains over its BN counterpart and all BN variants. GN helps the model benefit from temporal length, and the longer clip boosts the top-1 accuracy by 1.7% (top-5 1.1%) with the same batch size.\nThe improvement of GN on detection, segmentation, and video classification demonstrates that GN is a strong alternative to the powerful and currently dominant BN technique in these tasks.", "publication_ref": ["b29", "b59", "b5", "b5", "b61"], "figure_ref": ["fig_5"], "table_ref": []}, {"heading": "Discussion and Future Work", "text": "We have presented GN as an effective normalization layer without exploiting the batch dimension. We have evaluated GN's behaviors in a variety of applications. We note, however, that BN has been so influential that many state-ofthe-art systems and their hyper-parameters have been designed for it, which may not be optimal for GN-based models. It is possible that re-designing the systems or searching new hyper-parameters for GN will give better results.\nIn addition, we have shown that GN is related to LN and IN, two normalization methods that are particularly successful in training recurrent (RNN/LSTM) or generative (GAN) models. This suggests us to study GN in those areas in the future. We will also investigate GN's performance on learning representations for reinforcement learning (RL) tasks, e.g., [54], where BN is playing an important role for training very deep models [20].", "publication_ref": ["b53", "b19"], "figure_ref": [], "table_ref": []}, {"heading": "", "text": "Acknowledgement. We would like to thank Piotr Doll\u00e1r and Ross Girshick for helpful discussions.", "publication_ref": [], "figure_ref": [], "table_ref": []}], "references": [{"ref_id": "b0", "title": "Tensorflow: A system for large-scale machine learning", "journal": "", "year": "2016", "authors": "M Abadi; P Barham; J Chen; Z Chen; A Davis; J Dean; M Devin; S Ghemawat; G Irving; M Isard"}, {"ref_id": "b1", "title": "Normalization propagation: A parametric technique for removing internal covariate shift in deep networks", "journal": "", "year": "2016", "authors": "D Arpit; Y Zhou; B Kota; V Govindaraju"}, {"ref_id": "b2", "title": "Layer normalization", "journal": "", "year": "2016", "authors": "J L Ba; J R Kiros; G E Hinton"}, {"ref_id": "b3", "title": "Optimization methods for large-scale machine learning", "journal": "", "year": "2016", "authors": "L Bottou; F E Curtis; J Nocedal"}, {"ref_id": "b4", "title": "Normalization as a canonical neural computation", "journal": "Nature Reviews Neuroscience", "year": "2012", "authors": "M Carandini; D J Heeger"}, {"ref_id": "b5", "title": "Quo vadis, action recognition? a new model and the kinetics dataset", "journal": "", "year": "2017", "authors": "J Carreira; A Zisserman"}, {"ref_id": "b6", "title": "Xception: Deep learning with depthwise separable convolutions", "journal": "", "year": "2017", "authors": "F Chollet"}, {"ref_id": "b7", "title": "Group equivariant convolutional networks", "journal": "", "year": "2016", "authors": "T Cohen; M Welling"}, {"ref_id": "b8", "title": "Histograms of oriented gradients for human detection", "journal": "", "year": "2005", "authors": "N Dalal; B Triggs"}, {"ref_id": "b9", "title": "Large scale distributed deep networks", "journal": "", "year": "2012", "authors": "J Dean; G Corrado; R Monga; K Chen; M Devin; M Mao; A Senior; P Tucker; K Yang; Q V Le"}, {"ref_id": "b10", "title": "Exploiting cyclic symmetry in convolutional neural networks", "journal": "", "year": "2016", "authors": "S Dieleman; J De Fauw; K Kavukcuoglu"}, {"ref_id": "b11", "title": "Fast R-CNN", "journal": "", "year": "2015", "authors": "R Girshick"}, {"ref_id": "b12", "title": "", "journal": "", "year": "2018", "authors": "R Girshick; I Radosavovic; G Gkioxari; P Doll\u00e1r; K He;  Detectron"}, {"ref_id": "b13", "title": "Understanding the difficulty of training deep feedforward neural networks", "journal": "", "year": "2010", "authors": "X Glorot; Y Bengio"}, {"ref_id": "b14", "title": "Generative adversarial nets", "journal": "", "year": "2014", "authors": "I Goodfellow; J Pouget-Abadie; M Mirza; B Xu; D Warde-Farley; S Ozair; A Courville; Y Bengio"}, {"ref_id": "b15", "title": "Accurate, large minibatch SGD: Training ImageNet in 1 hour", "journal": "", "year": "2017", "authors": "P Goyal; P Doll\u00e1r; R Girshick; P Noordhuis; L Wesolowski; A Kyrola; A Tulloch; Y Jia; K He"}, {"ref_id": "b16", "title": "Training and investigating Residual Nets", "journal": "", "year": "2016", "authors": "S Gross; M Wilber"}, {"ref_id": "b17", "title": "Mask R-CNN", "journal": "", "year": "2017", "authors": "K He; G Gkioxari; P Doll\u00e1r; R Girshick"}, {"ref_id": "b18", "title": "Delving deep into rectifiers: Surpassing human-level performance on imagenet classification", "journal": "", "year": "2015", "authors": "K He; X Zhang; S Ren; J Sun"}, {"ref_id": "b19", "title": "Deep residual learning for image recognition", "journal": "", "year": "2016", "authors": "K He; X Zhang; S Ren; J Sun"}, {"ref_id": "b20", "title": "Normalization of cell responses in cat striate cortex", "journal": "", "year": "1992", "authors": "D J Heeger"}, {"ref_id": "b21", "title": "Long short-term memory", "journal": "Neural computation", "year": "1997", "authors": "S Hochreiter; J Schmidhuber"}, {"ref_id": "b22", "title": "MobileNets: Efficient convolutional neural networks for mobile vision applications", "journal": "", "year": "2017", "authors": "A G Howard; M Zhu; B Chen; D Kalenichenko; W Wang; T Weyand; M Andreetto; H Adam"}, {"ref_id": "b23", "title": "Densely connected convolutional networks", "journal": "", "year": "2017", "authors": "G Huang; Z Liu; L Van Der Maaten; K Q Weinberger"}, {"ref_id": "b24", "title": "Batch renormalization: Towards reducing minibatch dependence in batch-normalized models", "journal": "", "year": "2017", "authors": "S Ioffe"}, {"ref_id": "b25", "title": "Batch normalization: Accelerating deep network training by reducing internal covariate shift", "journal": "", "year": "2015", "authors": "S Ioffe; C Szegedy"}, {"ref_id": "b26", "title": "Image-to-image translation with conditional adversarial networks", "journal": "", "year": "2017", "authors": "P Isola; J.-Y Zhu; T Zhou; A A Efros"}, {"ref_id": "b27", "title": "What is the best multi-stage architecture for object recognition", "journal": "", "year": "2009", "authors": "K Jarrett; K Kavukcuoglu; Y Lecun"}, {"ref_id": "b28", "title": "Aggregating local descriptors into a compact image representation", "journal": "", "year": "2010", "authors": "H Jegou; M Douze; C Schmid; P Perez"}, {"ref_id": "b29", "title": "The Kinetics human action video dataset", "journal": "", "year": "2017", "authors": "W Kay; J Carreira; K Simonyan; B Zhang; C Hillier; S Vijayanarasimhan; F Viola; T Green; T Back; P Natsev"}, {"ref_id": "b30", "title": "One weird trick for parallelizing convolutional neural networks", "journal": "", "year": "2014", "authors": "A Krizhevsky"}, {"ref_id": "b31", "title": "Imagenet classification with deep convolutional neural networks", "journal": "", "year": "2012", "authors": "A Krizhevsky; I Sutskever; G Hinton"}, {"ref_id": "b32", "title": "Efficient backprop", "journal": "", "year": "1998", "authors": "Y Lecun; L Bottou; G B Orr; K.-R M\u00fcller"}, {"ref_id": "b33", "title": "DetNet: A backbone network for object detection", "journal": "", "year": "2018", "authors": "Z Li; C Peng; G Yu; X Zhang; Y Deng; J Sun"}, {"ref_id": "b34", "title": "Feature pyramid networks for object detection", "journal": "", "year": "2017", "authors": "T.-Y Lin; P Doll\u00e1r; R Girshick; K He; B Hariharan; S Belongie"}, {"ref_id": "b35", "title": "Focal loss for dense object detection", "journal": "", "year": "2017", "authors": "T.-Y Lin; P Goyal; R Girshick; K He; P Doll\u00e1r"}, {"ref_id": "b36", "title": "Microsoft COCO: Common objects in context", "journal": "", "year": "2014", "authors": "T.-Y Lin; M Maire; S Belongie; J Hays; P Perona; D Ramanan; P Doll\u00e1r; C L Zitnick"}, {"ref_id": "b37", "title": "Fully convolutional networks for semantic segmentation", "journal": "", "year": "2015", "authors": "J Long; E Shelhamer; T Darrell"}, {"ref_id": "b38", "title": "Distinctive image features from scale-invariant keypoints", "journal": "IJCV", "year": "2004", "authors": "D G Lowe"}, {"ref_id": "b39", "title": "Nonlinear image representation using divisive normalization", "journal": "", "year": "2008", "authors": "S Lyu; E P Simoncelli"}, {"ref_id": "b40", "title": "Modeling the shape of the scene: A holistic representation of the spatial envelope", "journal": "IJCV", "year": "2001", "authors": "A Oliva; A Torralba"}, {"ref_id": "b41", "title": "Automatic differentiation in pytorch", "journal": "", "year": "2017", "authors": "A Paszke; S Gross; S Chintala; G Chanan; E Yang; Z De-Vito; Z Lin; A Desmaison; L Antiga; A Lerer"}, {"ref_id": "b42", "title": "MegDet: A large mini-batch object detector", "journal": "", "year": "2018", "authors": "C Peng; T Xiao; Z Li; Y Jiang; X Zhang; K Jia; G Yu; J Sun"}, {"ref_id": "b43", "title": "Fisher kernels on visual vocabularies for image categorization", "journal": "", "year": "2007", "authors": "F Perronnin; C Dance"}, {"ref_id": "b44", "title": "Learning multiple visual domains with residual adapters", "journal": "", "year": "2017", "authors": "S.-A Rebuffi; H Bilen; A Vedaldi"}, {"ref_id": "b45", "title": "Normalizing the normalizers: Comparing and extending network normalization schemes", "journal": "", "year": "2017", "authors": "M Ren; R Liao; R Urtasun; F H Sinz; R S Zemel"}, {"ref_id": "b46", "title": "Faster R-CNN: Towards real-time object detection with region proposal networks", "journal": "", "year": "2015", "authors": "S Ren; K He; R Girshick; J Sun"}, {"ref_id": "b47", "title": "Object detection networks on convolutional feature maps", "journal": "TPAMI", "year": "2017", "authors": "S Ren; K He; R Girshick; X Zhang; J Sun"}, {"ref_id": "b48", "title": "Learning representations by back-propagating errors", "journal": "Nature", "year": "1986", "authors": "D E Rumelhart; G E Hinton; R J Williams"}, {"ref_id": "b49", "title": "", "journal": "", "year": "2015", "authors": "O Russakovsky; J Deng; H Su; J Krause; S Satheesh; S Ma; Z Huang; A Karpathy; A Khosla; M Bernstein; A C Berg; L Fei-Fei"}, {"ref_id": "b50", "title": "Weight normalization: A simple reparameterization to accelerate training of deep neural networks", "journal": "", "year": "2016", "authors": "T Salimans; D P Kingma"}, {"ref_id": "b51", "title": "Natural signal statistics and sensory gain control", "journal": "Nature neuroscience", "year": "2001", "authors": "O Schwartz; E P Simoncelli"}, {"ref_id": "b52", "title": "Overfeat: Integrated recognition, localization and detection using convolutional networks", "journal": "", "year": "2014", "authors": "P Sermanet; D Eigen; X Zhang; M Mathieu; R Fergus; Y Lecun"}, {"ref_id": "b53", "title": "Mastering the game of go without human knowledge", "journal": "Nature", "year": "2017", "authors": "D Silver; J Schrittwieser; K Simonyan; I Antonoglou; A Huang; A Guez; T Hubert; L Baker; M Lai; A Bolton; Y Chen; T Lillicrap; F Hui; L Sifre; G Van Den Driessche; T Graepel; D Hassabis"}, {"ref_id": "b54", "title": "Natural image statistics and neural representation. Annual review of neuroscience", "journal": "", "year": "2001", "authors": "E P Simoncelli; B A Olshausen"}, {"ref_id": "b55", "title": "Very deep convolutional networks for large-scale image recognition", "journal": "", "year": "2015", "authors": "K Simonyan; A Zisserman"}, {"ref_id": "b56", "title": "Inception-v4, inception-resnet and the impact of residual connections on learning", "journal": "", "year": "2016", "authors": "C Szegedy; S Ioffe; V Vanhoucke"}, {"ref_id": "b57", "title": "Going deeper with convolutions", "journal": "", "year": "2015", "authors": "C Szegedy; W Liu; Y Jia; P Sermanet; S Reed; D Anguelov; D Erhan; V Vanhoucke; A Rabinovich"}, {"ref_id": "b58", "title": "Rethinking the inception architecture for computer vision", "journal": "", "year": "2016", "authors": "C Szegedy; V Vanhoucke; S Ioffe; J Shlens; Z Wojna"}, {"ref_id": "b59", "title": "Learning spatiotemporal features with 3D convolutional networks", "journal": "", "year": "2015", "authors": "D Tran; L Bourdev; R Fergus; L Torresani; M Paluri"}, {"ref_id": "b60", "title": "Instance normalization: The missing ingredient for fast stylization", "journal": "", "year": "2016", "authors": "D Ulyanov; A Vedaldi; V Lempitsky"}, {"ref_id": "b61", "title": "Non-local neural networks", "journal": "In CVPR", "year": "2018", "authors": "X Wang; R Girshick; A Gupta; K He"}, {"ref_id": "b62", "title": "Aggregated residual transformations for deep neural networks", "journal": "", "year": "2017", "authors": "S Xie; R Girshick; P Doll\u00e1r; Z Tu; K He"}, {"ref_id": "b63", "title": "Visualizing and understanding convolutional neural networks", "journal": "", "year": "2014", "authors": "M D Zeiler; R Fergus"}, {"ref_id": "b64", "title": "ShuffleNet: An extremely efficient convolutional neural network for mobile devices", "journal": "", "year": "2018", "authors": "X Zhang; X Zhou; M Lin; J Sun"}], "figures": [{"figure_label": "1", "figure_type": "figure", "figure_id": "fig_0", "figure_caption": "Figure 1 .1Figure 1. ImageNet classification error vs. batch sizes. This is a ResNet-50 model trained in the ImageNet training set using 8 workers (GPUs), evaluated in the validation set.", "figure_data": ""}, {"figure_label": "2", "figure_type": "figure", "figure_id": "fig_1", "figure_caption": "Figure 2 .2Figure 2. Normalization methods. Each subplot shows a feature map tensor, with N as the batch axis, C as the channel axis, and (H, W ) as the spatial axes. The pixels in blue are normalized by the same mean and variance, computed by aggregating the values of these pixels.", "figure_data": ""}, {"figure_label": "3", "figure_type": "figure", "figure_id": "fig_2", "figure_caption": "Figure 3 .3Figure 3. Python code of Group Norm based on TensorFlow.", "figure_data": ""}, {"figure_label": "4", "figure_type": "figure", "figure_id": "fig_3", "figure_caption": "Figure 4 .4Figure 4. Comparison of error curves with a batch size of 32 images/GPU. We show the ImageNet training error (left) and validation error (right) vs. numbers of training epochs. The model is ResNet-50.", "figure_data": ""}, {"figure_label": "7", "figure_type": "figure", "figure_id": "fig_5", "figure_caption": "Figure 7 .7Figure 7. Error curves in Kinetics with an input length of 32 frames. We show ResNet-50 I3D's validation error of BN (left) and GN (right) using a batch size of 8 and 4 clips/GPU. The monitored validation error is the 1-clip error under the same data augmentation as the training set, while the final validation accuracy in Table8is 10-clip testing without data augmentation.", "figure_data": ""}, {"figure_label": "1", "figure_type": "table", "figure_id": "tab_0", "figure_caption": "", "figure_data": "60Group Norm (GN)BN, 32 ims/gpuGN, 32 ims/gpuBN, 16 ims/gpu55GN, 16 ims/gpuBN, 8 ims/gpuGN, 8 ims/gpuBN, 4 ims/gpu50GN, 4 ims/gpuBN, 2 ims/gpu45GN, 2 ims/gpu40 error (%)353025200102030405060708090100epochsBNLNINGNval error23.625.328.424.1(vs. BN)-1.74.80.5"}, {"figure_label": "2", "figure_type": "table", "figure_id": "tab_1", "figure_caption": "", "figure_data": "batch size3216842BN23.623.724.827.334.7GN24.124.224.024.224.10.50.5-0.8-3.1-10.6"}, {"figure_label": "3", "figure_type": "table", "figure_id": "tab_2", "figure_caption": "Figure 6. Evolution of feature distributions of conv5 3's output (before normalization and ReLU) from VGG-16, shown as the {1, 20, 80, 99} percentile of responses. The table on the right shows the ImageNet validation error (%). Models are trained with 32 images/GPU.", "figure_data": "Group Norm1st percentile20th percentile80th percentile99th percentileerrornone 29.2BN 28.0GN 27.6"}, {"figure_label": "46", "figure_type": "table", "figure_id": "tab_3", "figure_caption": "Results of FPN backbone. Next we compare GN and BN * on Mask R-CNN using a Feature Pyramid Network (FPN) backbone[35], the currently state-of-the-art framework in COCO. Unlike the C4 variant, FPN exploits all pre-trained Detection and segmentation ablation results in COCO, using Mask R-CNN with ResNet-50 C4. BN * means BN is frozen. Detection and segmentation results in COCO using Mask R-CNN and FPN. Here BN * is the default Detectron baseline [13], and GN is applied to the backbone, box head, and mask head. \"long\" means training with more iterations. Code of these results are in https://github.com/facebookresearch/ Detectron/blob/master/projects/GN.", "figure_data": "backbone AP bbox AP bbox 50AP bbox 75AP mask AP mask 50AP mask 75BN *37.757.940.932.854.334.7GN38.859.242.233.655.935.4backbone box head AP bbox AP bbox 50AP bbox 75AP mask AP mask 50AP mask 75BN *-38.6 59.5 41.9 34.2 56.2 36.1BN *GN39.5 60.0 43.2 34.4 56.4 36.3GNGN40.0 61.0 43.3 34.8 57.3 36.3Table 5. Detection and segmentation ablation results in COCO,using Mask R-CNN with ResNet-50 FPN and a 4conv1fc bound-ing box head. BN * means BN is frozen.AP bbox AP bbox 50AP bbox 75AP mask AP mask 50AP mask 75R50 BN *38.6 59.8 42.1 34.5 56.4 36.3R50 GN40.3 61.0 44.0 35.7 57.9 37.7R50 GN, long 40.8 61.6 44.4 36.1 58.5 38.2R101 BN *40.9 61.9 44.8 36.4 58.5 38.7R101 GN41.8 62.5 45.4 36.8 59.2 39.0R101 GN, long 42.3 62.8 46.2 37.2 59.7 39.5"}, {"figure_label": "87", "figure_type": "table", "figure_id": "tab_4", "figure_caption": "is 10-clip testing without data augmentation. Detection and segmentation results trained from scratch in COCO using Mask R-CNN and FPN. Here the BN results are from[34], and BN is synced across GPUs[43] and is not frozen.Code of these results are in", "figure_data": "from scratch AP bbox AP bbox 50AP bbox 75AP mask AP mask 50AP mask 75R50 BN [34] 34.5 55.2 37.7---R50 GN39.5 59.8 43.6 35.2 56.9 37.6R101 GN41.0 61.1 44.9 36.4 58.2 38.7"}, {"figure_label": "78", "figure_type": "table", "figure_id": "tab_5", "figure_caption": ", and 36.3 using a specialized backbone.", "figure_data": "clip length323264batch size844BN73.3 / 90.772.1 / 90.073.3 / 90.8GN73.0 / 90.672.8 / 90.674.5 / 91.7"}], "formulas": [{"formula_id": "formula_0", "formula_text": "x i = 1 \u03c3 i (x i \u2212 \u00b5 i ). (1", "formula_coordinates": [3.0, 389.63, 284.7, 151.61, 23.22]}, {"formula_id": "formula_1", "formula_text": ")", "formula_coordinates": [3.0, 541.24, 291.75, 3.87, 8.64]}, {"formula_id": "formula_2", "formula_text": "= (i N , i C , i H , i W ) is a 4D vec- tor indexing the features in (N, C, H, W ) order,", "formula_coordinates": [3.0, 308.86, 328.45, 236.25, 20.91]}, {"formula_id": "formula_3", "formula_text": "\u00b5 i = 1 m k\u2208Si x k , \u03c3 i = 1 m k\u2208Si (x k \u2212 \u00b5 i ) 2 + , (2)", "formula_coordinates": [3.0, 318.15, 409.44, 226.96, 26.88]}, {"formula_id": "formula_4", "formula_text": "S i = {k | k C = i C },(3)", "formula_coordinates": [3.0, 385.03, 516.05, 160.08, 9.65]}, {"formula_id": "formula_5", "formula_text": "S i = {k | k N = i N },(4)", "formula_coordinates": [3.0, 384.17, 605.66, 160.94, 9.65]}, {"formula_id": "formula_6", "formula_text": "S i = {k | k N = i N , k C = i C }.(5)", "formula_coordinates": [3.0, 364.31, 659.39, 180.8, 9.65]}, {"formula_id": "formula_7", "formula_text": "y i = \u03b3x i + \u03b2,(6)", "formula_coordinates": [4.0, 139.58, 119.93, 146.78, 9.65]}, {"formula_id": "formula_8", "formula_text": "S i = {k | k N = i N , k C C/G = i C C/G }. (7", "formula_coordinates": [4.0, 84.95, 199.78, 197.54, 22.31]}, {"formula_id": "formula_9", "formula_text": ")", "formula_coordinates": [4.0, 282.49, 206.84, 3.87, 8.64]}], "doi": ""}