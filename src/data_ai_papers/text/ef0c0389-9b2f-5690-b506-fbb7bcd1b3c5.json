{"title": "Swin Transformer: Hierarchical Vision Transformer using Shifted Windows", "authors": "Ze Liu; Yutong Lin; Yue Cao; Han Hu; Yixuan Wei; Zheng Zhang; Stephen Lin; Baining Guo", "pub_date": "2021-08-17", "abstract": "This paper presents a new vision Transformer, called Swin Transformer, that capably serves as a general-purpose backbone for computer vision. Challenges in adapting Transformer from language to vision arise from differences between the two domains, such as large variations in the scale of visual entities and the high resolution of pixels in images compared to words in text. To address these differences, we propose a hierarchical Transformer whose representation is computed with Shifted windows. The shifted windowing scheme brings greater efficiency by limiting self-attention computation to non-overlapping local windows while also allowing for cross-window connection. This hierarchical architecture has the flexibility to model at various scales and has linear computational complexity with respect to image size. These qualities of Swin Transformer make it compatible with a broad range of vision tasks, including image classification (87.3 top-1 accuracy on ImageNet-1K) and dense prediction tasks such as object detection (58.7 box AP and 51.1 mask AP on COCO testdev) and semantic segmentation (53.5 mIoU on ADE20K val). Its performance surpasses the previous state-of-theart by a large margin of +2.7 box AP and +2.6 mask AP on COCO, and +3.2 mIoU on ADE20K, demonstrating the potential of Transformer-based models as vision backbones. The hierarchical design and the shifted window approach also prove beneficial for all-MLP architectures. The code and models are publicly available at https://github. com/microsoft/Swin-Transformer. * Equal contribution. \u2020 Interns at MSRA. \u2021 Contact person.", "sections": [{"heading": "Introduction", "text": "Modeling in computer vision has long been dominated by convolutional neural networks (CNNs). Beginning with AlexNet [39] and its revolutionary performance on the ImageNet image classification challenge, CNN architectures have evolved to become increasingly powerful through  [20] produce feature maps of a single low resolution and have quadratic computation complexity to input image size due to computation of selfattention globally.\ngreater scale [30,76], more extensive connections [34], and more sophisticated forms of convolution [70,18,84]. With CNNs serving as backbone networks for a variety of vision tasks, these architectural advances have led to performance improvements that have broadly lifted the entire field.\nOn the other hand, the evolution of network architectures in natural language processing (NLP) has taken a different path, where the prevalent architecture today is instead the Transformer [64]. Designed for sequence modeling and transduction tasks, the Transformer is notable for its use of attention to model long-range dependencies in the data. Its tremendous success in the language domain has led researchers to investigate its adaptation to computer vision, where it has recently demonstrated promising results on certain tasks, specifically image classification [20] and joint vision-language modeling [47].\nIn this paper, we seek to expand the applicability of Transformer such that it can serve as a general-purpose backbone for computer vision, as it does for NLP and as CNNs do in vision. We observe that significant challenges in transferring its high performance in the language domain to the visual domain can be explained by differences between the two modalities. One of these differences involves scale. Unlike the word tokens that serve as the basic elements of processing in language Transformers, visual elements can vary substantially in scale, a problem that receives attention in tasks such as object detection [42,53,54]. In existing Transformer-based models [64,20], tokens are all of a fixed scale, a property unsuitable for these vision applications. Another difference is the much higher resolution of pixels in images compared to words in passages of text. There exist many vision tasks such as semantic segmentation that require dense prediction at the pixel level, and this would be intractable for Transformer on high-resolution images, as the computational complexity of its self-attention is quadratic to image size. To overcome these issues, we propose a generalpurpose Transformer backbone, called Swin Transformer, which constructs hierarchical feature maps and has linear computational complexity to image size. As illustrated in Figure 1(a), Swin Transformer constructs a hierarchical representation by starting from small-sized patches (outlined in gray) and gradually merging neighboring patches in deeper Transformer layers. With these hierarchical feature maps, the Swin Transformer model can conveniently leverage advanced techniques for dense prediction such as feature pyramid networks (FPN) [42] or U-Net [51]. The linear computational complexity is achieved by computing self-attention locally within non-overlapping windows that partition an image (outlined in red). The number of patches in each window is fixed, and thus the complexity becomes linear to image size. These merits make Swin Transformer suitable as a general-purpose backbone for various vision tasks, in contrast to previous Transformer based architectures [20] which produce feature maps of a single resolution and have quadratic complexity.\nA key design element of Swin Transformer is its shift of the window partition between consecutive self-attention layers, as illustrated in Figure 2. The shifted windows bridge the windows of the preceding layer, providing connections among them that significantly enhance modeling power (see Table 4). This strategy is also efficient in regards to real-world latency: all query patches within a window share the same key set 1 , which facilitates memory access in hardware. In contrast, earlier sliding window based self-attention approaches [33,50] suffer from low latency on general hardware due to different key sets for different query pixels 2 . Our experiments show that the proposed Figure 2. An illustration of the shifted window approach for computing self-attention in the proposed Swin Transformer architecture. In layer l (left), a regular window partitioning scheme is adopted, and self-attention is computed within each window. In the next layer l + 1 (right), the window partitioning is shifted, resulting in new windows. The self-attention computation in the new windows crosses the boundaries of the previous windows in layer l, providing connections among them.\nshifted window approach has much lower latency than the sliding window method, yet is similar in modeling power (see Tables 5 and 6). The shifted window approach also proves beneficial for all-MLP architectures [61].\nThe proposed Swin Transformer achieves strong performance on the recognition tasks of image classification, object detection and semantic segmentation. It outperforms the ViT / DeiT [20,63] and ResNe(X)t models [30,70] significantly with similar latency on the three tasks. Its 58.7 box AP and 51.1 mask AP on the COCO test-dev set surpass the previous state-of-the-art results by +2.7 box AP (Copy-paste [26] without external data) and +2.6 mask AP (DetectoRS [46]). On ADE20K semantic segmentation, it obtains 53.5 mIoU on the val set, an improvement of +3.2 mIoU over the previous state-of-the-art (SETR [81]). It also achieves a top-1 accuracy of 87.3% on ImageNet-1K image classification.\nIt is our belief that a unified architecture across computer vision and natural language processing could benefit both fields, since it would facilitate joint modeling of visual and textual signals and the modeling knowledge from both domains can be more deeply shared. We hope that Swin Transformer's strong performance on various vision problems can drive this belief deeper in the community and encourage unified modeling of vision and language signals.", "publication_ref": ["b38", "b19", "b29", "b75", "b33", "b69", "b17", "b83", "b63", "b19", "b46", "b41", "b52", "b53", "b63", "b19", "b41", "b50", "b19", "b32", "b49", "b1", "b60", "b19", "b62", "b29", "b69", "b25", "b45", "b80"], "figure_ref": ["fig_0"], "table_ref": ["tab_5"]}, {"heading": "Related Work", "text": "CNN and variants CNNs serve as the standard network model throughout computer vision. While the CNN has existed for several decades [40], it was not until the introduction of AlexNet [39] that the CNN took off and became mainstream. Since then, deeper and more effective convolutional neural architectures have been proposed to further propel the deep learning wave in computer vision, e.g., VGG [52], GoogleNet [57], ResNet [30], DenseNet [34], weights across a feature map, it is difficult for a sliding-window based self-attention layer to have efficient memory access in practice.\nHRNet [65], and EfficientNet [58]. In addition to these architectural advances, there has also been much work on improving individual convolution layers, such as depthwise convolution [70] and deformable convolution [18,84]. While the CNN and its variants are still the primary backbone architectures for computer vision applications, we highlight the strong potential of Transformer-like architectures for unified modeling between vision and language. Our work achieves strong performance on several basic visual recognition tasks, and we hope it will contribute to a modeling shift.\nSelf-attention based backbone architectures Also inspired by the success of self-attention layers and Transformer architectures in the NLP field, some works employ self-attention layers to replace some or all of the spatial convolution layers in the popular ResNet [33,50,80]. In these works, the self-attention is computed within a local window of each pixel to expedite optimization [33], and they achieve slightly better accuracy/FLOPs trade-offs than the counterpart ResNet architecture. However, their costly memory access causes their actual latency to be significantly larger than that of the convolutional networks [33]. Instead of using sliding windows, we propose to shift windows between consecutive layers, which allows for a more efficient implementation in general hardware.\nSelf-attention/Transformers to complement CNNs Another line of work is to augment a standard CNN architecture with self-attention layers or Transformers. The selfattention layers can complement backbones [67,7,3,71,23,74,55] or head networks [32,27] by providing the capability to encode distant dependencies or heterogeneous interactions. More recently, the encoder-decoder design in Transformer has been applied for the object detection and instance segmentation tasks [8,13,85,56]. Our work explores the adaptation of Transformers for basic visual feature extraction and is complementary to these works.\nTransformer based vision backbones Most related to our work is the Vision Transformer (ViT) [20] and its follow-ups [63,72,15,28,66]. The pioneering work of ViT directly applies a Transformer architecture on nonoverlapping medium-sized image patches for image classification. It achieves an impressive speed-accuracy tradeoff on image classification compared to convolutional networks. While ViT requires large-scale training datasets (i.e., JFT-300M) to perform well, DeiT [63] introduces several training strategies that allow ViT to also be effective using the smaller ImageNet-1K dataset. The results of ViT on image classification are encouraging, but its architecture is unsuitable for use as a general-purpose backbone network on dense vision tasks or when the input image resolution is high, due to its low-resolution feature maps and the quadratic increase in complexity with image size. There are a few works applying ViT models to the dense vision tasks of object detection and semantic segmentation by direct upsampling or deconvolution but with relatively lower performance [2,81]. Concurrent to our work are some that modify the ViT architecture [72,15,28] for better image classification. Empirically, we find our Swin Transformer architecture to achieve the best speedaccuracy trade-off among these methods on image classification, even though our work focuses on general-purpose performance rather than specifically on classification. Another concurrent work [66] explores a similar line of thinking to build multi-resolution feature maps on Transformers. Its complexity is still quadratic to image size, while ours is linear and also operates locally which has proven beneficial in modeling the high correlation in visual signals [36,25,41]. Our approach is both efficient and effective, achieving state-of-the-art accuracy on both COCO object detection and ADE20K semantic segmentation.", "publication_ref": ["b39", "b38", "b51", "b56", "b29", "b33", "b64", "b57", "b69", "b17", "b83", "b32", "b49", "b79", "b32", "b32", "b66", "b6", "b2", "b70", "b22", "b73", "b54", "b31", "b26", "b7", "b12", "b84", "b55", "b19", "b62", "b71", "b14", "b27", "b65", "b62", "b1", "b80", "b71", "b14", "b27", "b65", "b35", "b24", "b40"], "figure_ref": [], "table_ref": []}, {"heading": "Method", "text": "", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Overall Architecture", "text": "An overview of the Swin Transformer architecture is presented in Figure 3, which illustrates the tiny version (Swin-T). It first splits an input RGB image into non-overlapping patches by a patch splitting module, like ViT. Each patch is treated as a \"token\" and its feature is set as a concatenation of the raw pixel RGB values. In our implementation, we use a patch size of 4 \u00d7 4 and thus the feature dimension of each patch is 4 \u00d7 4 \u00d7 3 = 48. A linear embedding layer is applied on this raw-valued feature to project it to an arbitrary dimension (denoted as C).\nSeveral Transformer blocks with modified self-attention computation (Swin Transformer blocks) are applied on these patch tokens. The Transformer blocks maintain the number of tokens ( H 4 \u00d7 W 4 ), and together with the linear embedding are referred to as \"Stage 1\".\nTo produce a hierarchical representation, the number of tokens is reduced by patch merging layers as the network gets deeper. The first patch merging layer concatenates the features of each group of 2 \u00d7 2 neighboring patches, and applies a linear layer on the 4C-dimensional concatenated features. This reduces the number of tokens by a multiple of 2 \u00d7 2 = 4 (2\u00d7 downsampling of resolution), and the output dimension is set to 2C. Swin Transformer blocks are applied afterwards for feature transformation, with the resolution kept at H 8 \u00d7 W 8 . This first block of patch merging and feature transformation is denoted as \"Stage 2\". The procedure is repeated twice, as \"Stage 3\" and \"Stage 4\", with output resolutions of H 16 \u00d7 W 16 and H 32 \u00d7 W 32 , respectively. These stages jointly produce a hierarchical representation, with the same feature map resolutions as those of typical convolutional networks, e.g., VGG [52] and ResNet [30]. As a result, the proposed architecture can conveniently replace the backbone networks in existing methods for various vision tasks.\nSwin Transformer block Swin Transformer is built by replacing the standard multi-head self attention (MSA) module in a Transformer block by a module based on shifted windows (described in Section 3.2), with other layers kept the same. As illustrated in Figure 3(b), a Swin Transformer block consists of a shifted window based MSA module, followed by a 2-layer MLP with GELU nonlinearity in between. A LayerNorm (LN) layer is applied before each MSA module and each MLP, and a residual connection is applied after each module.", "publication_ref": ["b51", "b29"], "figure_ref": ["fig_1", "fig_1"], "table_ref": []}, {"heading": "Shifted Window based Self-Attention", "text": "The standard Transformer architecture [64] and its adaptation for image classification [20] both conduct global selfattention, where the relationships between a token and all other tokens are computed. The global computation leads to quadratic complexity with respect to the number of tokens, making it unsuitable for many vision problems requiring an immense set of tokens for dense prediction or to represent a high-resolution image.\nSelf-attention in non-overlapped windows For efficient modeling, we propose to compute self-attention within local windows. The windows are arranged to evenly partition the image in a non-overlapping manner. Supposing each window contains M \u00d7 M patches, the computational complexity of a global MSA module and a window based one on an image of h \u00d7 w patches are 3 :\n\u2126(MSA) = 4hwC 2 + 2(hw) 2 C,(1)\n\u2126(W-MSA) = 4hwC 2 + 2M 2 hwC,(2)\nwhere the former is quadratic to patch number hw, and the latter is linear when M is fixed (set to 7 by default). Global self-attention computation is generally unaffordable for a large hw, while the window based self-attention is scalable.", "publication_ref": ["b63", "b19", "b2"], "figure_ref": [], "table_ref": []}, {"heading": "Shifted window partitioning in successive blocks", "text": "The window-based self-attention module lacks connections across windows, which limits its modeling power. To introduce cross-window connections while maintaining the efficient computation of non-overlapping windows, we propose a shifted window partitioning approach which alternates between two partitioning configurations in consecutive Swin Transformer blocks. As illustrated in Figure 2, the first module uses a regular window partitioning strategy which starts from the top-left pixel, and the 8 \u00d7 8 feature map is evenly partitioned into 2 \u00d7 2 windows of size 4 \u00d7 4 (M = 4). Then, the next module adopts a windowing configuration that is shifted from that of the preceding layer, by displacing the windows by\n( M 2 , M\n2 ) pixels from the regularly partitioned windows. With the shifted window partitioning approach, consecutive Swin Transformer blocks are computed a\u015d\nz l = W-MSA LN z l\u22121 + z l\u22121 , z l = MLP LN \u1e91 l +\u1e91 l , z l+1 = SW-MSA LN z l + z l , z l+1 = MLP LN \u1e91 l+1 +\u1e91 l+1 ,(3)\nwhere\u1e91 l and z l denote the output features of the (S)W-MSA module and the MLP module for block l, respectively; W-MSA and SW-MSA denote window based multi-head self-attention using regular and shifted window partitioning configurations, respectively. The shifted window partitioning approach introduces connections between neighboring non-overlapping windows in the previous layer and is found to be effective in image classification, object detection, and semantic segmentation, as shown in Table 4.", "publication_ref": [], "figure_ref": [], "table_ref": ["tab_5"]}, {"heading": "Efficient batch computation for shifted configuration", "text": "An issue with shifted window partitioning is that it will result in more windows, from h\nM \u00d7 w M to ( h M + 1) \u00d7 ( w M +1\n) in the shifted configuration, and some of the windows will be smaller than M \u00d7 M 4 . A naive solution is to pad the smaller windows to a size of M \u00d7 M and mask out the padded values when computing attention. When the number of windows in regular partitioning is small, e.g. 2 \u00d7 2, the increased computation with this naive solution is considerable (2 \u00d7 2 \u2192 3 \u00d7 3, which is 2.25 times greater). Here, we propose a more efficient batch computation approach by cyclic-shifting toward the top-left direction, as illustrated in Figure 4. After this shift, a batched window may be composed of several sub-windows that are not adjacent in the feature map, so a masking mechanism is employed to limit self-attention computation to within each sub-window. With the cyclic-shift, the number of batched windows remains the same as that of regular window partitioning, and thus is also efficient. The low latency of this approach is shown in Table 5.", "publication_ref": [], "figure_ref": ["fig_2"], "table_ref": []}, {"heading": "Relative position bias", "text": "In computing self-attention, we follow [49,1,32,33] by including a relative position bias\nB \u2208 R M 2 \u00d7M 2\nto each head in computing similarity:\nAttention(Q, K, V ) = SoftMax(QK T / \u221a d + B)V, (4\n)\nwhere We observe significant improvements over counterparts without this bias term or that use absolute position embedding, as shown in Table 4. Further adding absolute position embedding to the input as in [20] drops performance slightly, thus it is not adopted in our implementation.\nQ, K, V \u2208 R M 2\nThe learnt relative position bias in pre-training can be also used to initialize a model for fine-tuning with a different window size through bi-cubic interpolation [20,63].", "publication_ref": ["b48", "b0", "b31", "b32", "b19", "b19", "b62"], "figure_ref": [], "table_ref": ["tab_5"]}, {"heading": "Architecture Variants", "text": "We build our base model, called Swin-B, to have of model size and computation complexity similar to ViT-B/DeiT-B. We also introduce Swin-T, Swin-S and Swin-L, which are versions of about 0.25\u00d7, 0.5\u00d7 and 2\u00d7 the model size and computational complexity, respectively. Note that the complexity of Swin-T and Swin-S are similar to those of ResNet-50 (DeiT-S) and ResNet-101, respectively. The window size is set to M = 7 by default. The query dimension of each head is d = 32, and the expansion layer of each MLP is \u03b1 = 4, for all experiments. The architecture hyper-parameters of these model variants are:\n\u2022 Swin-T: C = 96, layer numbers = {2, 2, 6, 2}\n\u2022 Swin-S: C = 96, layer numbers ={2, 2, 18, 2}\n\u2022 Swin-B: C = 128, layer numbers ={2, 2, 18, 2}\n\u2022 Swin-L: C = 192, layer numbers ={2, 2, 18, 2}\nwhere C is the channel number of the hidden layers in the first stage. The model size, theoretical computational complexity (FLOPs), and throughput of the model variants for ImageNet image classification are listed in Table 1.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Experiments", "text": "We conduct experiments on ImageNet-1K image classification [19], COCO object detection [43], and ADE20K semantic segmentation [83]. In the following, we first compare the proposed Swin Transformer architecture with the previous state-of-the-arts on the three tasks. Then, we ablate the important design elements of Swin Transformer.", "publication_ref": ["b18", "b42", "b82"], "figure_ref": [], "table_ref": []}, {"heading": "Image Classification on ImageNet-1K", "text": "Settings For image classification, we benchmark the proposed Swin Transformer on ImageNet-1K [19], which contains 1.28M training images and 50K validation images from 1,000 classes. The top-1 accuracy on a single crop is reported. We consider two training settings:\n\u2022 Regular ImageNet-1K training. This setting mostly follows [63]. We employ an AdamW [37] optimizer for 300 epochs using a cosine decay learning rate scheduler and 20 epochs of linear warm-up. A batch size of 1024, an initial learning rate of 0.001, and a weight decay of 0.05 are used. We include most of the augmentation and regularization strategies of [63] in training, except for repeated augmentation [31] and EMA [45], which do not enhance performance. Note that this is contrary to [63] where repeated augmentation is crucial to stabilize the training of ViT.\n\u2022 Compared with the state-of-the-art ConvNets, i.e. Reg-Net [48] and EfficientNet [58], the Swin Transformer achieves a slightly better speed-accuracy trade-off. Noting that while RegNet [48] and EfficientNet [58] are obtained via a thorough architecture search, the proposed Swin Transformer is adapted from the standard Transformer and has strong potential for further improvement. ", "publication_ref": ["b18", "b62", "b36", "b62", "b30", "b44", "b62", "b47", "b57", "b47", "b57"], "figure_ref": [], "table_ref": []}, {"heading": "Results with", "text": "", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Object Detection on COCO", "text": "Settings Object detection and instance segmentation experiments are conducted on COCO 2017, which contains 118K training, 5K validation and 20K test-dev images. An ablation study is performed using the validation set, and a system-level comparison is reported on test-dev. For the ablation study, we consider four typical object detection frameworks: Cascade Mask R-CNN [29,6], ATSS [79], RepPoints v2 [12], and Sparse RCNN [56] in mmdetection [10]. For these four frameworks, we utilize the same settings: multi-scale training [8,56] (resizing the input such that the shorter side is between 480 and 800 while the longer side is at most 1333), AdamW [44] optimizer (initial learning rate of 0.0001, weight decay of 0.05, and batch size of 16), and 3x schedule (36 epochs). For system-level comparison, we adopt an improved HTC [9] (denoted as HTC++) with instaboost [22], stronger multi-scale training [7], 6x schedule (72 epochs), soft-NMS [5], and ImageNet-22K pre-trained model as initialization.\nWe compare our Swin Transformer to standard Con-  -Table 2. Results on COCO object detection and instance segmentation. \u2020 denotes that additional decovolution layers are used to produce hierarchical feature maps. * indicates multi-scale testing. vNets, i.e. ResNe(X)t, and previous Transformer networks, e.g. DeiT. The comparisons are conducted by changing only the backbones with other settings unchanged. Note that while Swin Transformer and ResNe(X)t are directly applicable to all the above frameworks because of their hierarchical feature maps, DeiT only produces a single resolution of feature maps and cannot be directly applied. For fair comparison, we follow [81] to construct hierarchical feature maps for DeiT using deconvolution layers.  2(c)). Regarding inference speed, while ResNe(X)t is built by highly optimized Cudnn functions, our architecture is implemented with built-in PyTorch functions that are not all well-optimized. A thorough kernel optimization is beyond the scope of this paper.", "publication_ref": ["b28", "b5", "b78", "b11", "b55", "b9", "b7", "b55", "b43", "b8", "b21", "b6", "b4", "b80"], "figure_ref": [], "table_ref": ["tab_4", "tab_4"]}, {"heading": "Comparison to ResNe(X)t", "text": "", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Comparison to DeiT", "text": "The performance of DeiT-S using the Cascade Mask R-CNN framework is shown in Table 2(b). The results of Swin-T are +2.5 box AP and +2.3 mask AP higher than DeiT-S with similar model size (86M vs. 80M) and significantly higher inference speed (15.3 FPS vs. 10.4 FPS). The lower inference speed of DeiT is mainly due to its quadratic complexity to input image size.  4. Ablation study on the shifted windows approach and different position embedding methods on three benchmarks, using the Swin-T architecture. w/o shifting: all self-attention modules adopt regular window partitioning, without shifting; abs. pos.: absolute position embedding term of ViT; rel. pos.: the default settings with an additional relative position bias term (see Eq. ( 4)); app.: the first scaled dot-product term in Eq. (4).", "publication_ref": [], "figure_ref": [], "table_ref": ["tab_5"]}, {"heading": "Comparison to previous state-of-the-art", "text": "categories. It has 25K images in total, with 20K for training, 2K for validation, and another 3K for testing. We utilize UperNet [69] in mmseg [16] as our base framework for its high efficiency. More details are presented in the Appendix.\nResults Table 3 lists the mIoU, model size (#param), FLOPs and FPS for different method/backbone pairs. From these results, it can be seen that Swin-S is +5.3 mIoU higher (49.3 vs. 44.0) than DeiT-S with similar computation cost. It is also +4.4 mIoU higher than ResNet-101, and +2.4 mIoU higher than ResNeSt-101 [78]. Our Swin-L model with ImageNet-22K pre-training achieves 53.5 mIoU on the val set, surpassing the previous best model by +3.2 mIoU (50.3 mIoU by SETR [81] which has a larger model size).", "publication_ref": ["b68", "b15", "b77", "b80"], "figure_ref": [], "table_ref": []}, {"heading": "Ablation Study", "text": "In this section, we ablate important design elements in the proposed Swin Transformer, using ImageNet-1K image classification, Cascade Mask R-CNN on COCO object detection, and UperNet on ADE20K semantic segmentation.\nShifted windows Ablations of the shifted window approach on the three tasks are reported in Table 4. Swin-T with the shifted window partitioning outperforms the counterpart built on a single window partitioning at each stage by +1.1% top-1 accuracy on ImageNet-1K, +2.8 box AP/+2.2 mask AP on COCO, and +2.8 mIoU on ADE20K. The results indicate the effectiveness of using shifted windows to build connections among windows in the preceding layers. The latency overhead by shifted window is also small, as shown in Table 5. shifted window (cyclic) 3.0 1.9 1.3 1.0 755 437 278 Table 5. Real speed of different self-attention computation methods and implementations on a V100 GPU.", "publication_ref": [], "figure_ref": [], "table_ref": ["tab_5"]}, {"heading": "Relative position bias", "text": "on COCO, and +2.3/+2.9 mIoU on ADE20K in relation to those without position encoding and with absolute position embedding, respectively, indicating the effectiveness of the relative position bias. Also note that while the inclusion of absolute position embedding improves image classification accuracy (+0.4%), it harms object detection and semantic segmentation (-0.2 box/mask AP on COCO and -0.6 mIoU on ADE20K).\nWhile the recent ViT/DeiT models abandon translation invariance in image classification even though it has long been shown to be crucial for visual modeling, we find that inductive bias that encourages certain translation invariance is still preferable for general-purpose visual modeling, particularly for the dense prediction tasks of object detection and semantic segmentation.\nDifferent self-attention methods The real speed of different self-attention computation methods and implementations are compared in Table 5. Our cyclic implementation is more hardware efficient than naive padding, particularly for deeper stages. Overall, it brings a 13%, 18% and 18% speed-up on Swin-T, Swin-S and Swin-B, respectively.\nThe self-attention modules built on the proposed shifted window approach are 40.8\u00d7/2.5\u00d7, 20.2\u00d7/2.5\u00d7, 9.3\u00d7/2.1\u00d7, and 7.6\u00d7/1.8\u00d7 more efficient than those of sliding windows in naive/kernel implementations on four network stages, respectively. Overall, the Swin Transformer architectures built on shifted windows are 4.1/1.5, 4.0/1.5, 3.6/1.5 times faster than variants built on sliding windows for Swin-T, Swin-S, and Swin-B, respectively. Table 6 compares their accuracy on the three tasks, showing that they are similarly accurate in visual modeling.\nCompared to Performer [14], which is one of the fastest Transformer architectures (see [60]), the proposed shifted window based self-attention computation and the overall Swin Transformer architectures are slightly faster (see Table 5), while achieving +2.3% top-1 accuracy compared to Performer on ImageNet-1K using Swin-T (see Table 6). 46.1 Table 6. Accuracy of Swin Transformer using different methods for self-attention computation on three benchmarks. sentation and has linear computational complexity with respect to input image size. Swin Transformer achieves the state-of-the-art performance on COCO object detection and ADE20K semantic segmentation, significantly surpassing previous best methods. We hope that Swin Transformer's strong performance on various vision problems will encourage unified modeling of vision and language signals.", "publication_ref": ["b13", "b59"], "figure_ref": [], "table_ref": []}, {"heading": "Conclusion", "text": "As a key element of Swin Transformer, the shifted window based self-attention is shown to be effective and efficient on vision problems, and we look forward to investigating its use in natural language processing as well.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Acknowledgement", "text": "We thank many colleagues at Microsoft for their help, in particular, Li Dong and Furu Wei for useful discussions; Bin Xiao, Lu Yuan and Lei Zhang for help on datasets.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "A1. Detailed Architectures", "text": "The detailed architecture specifications are shown in Table 7, where an input image size of 224\u00d7224 is assumed for all architectures. \"Concat n \u00d7 n\" indicates a concatenation of n \u00d7 n neighboring features in a patch. This operation results in a downsampling of the feature map by a rate of n. \"96-d\" denotes a linear layer with an output dimension of 96. \"win. sz. 7 \u00d7 7\" indicates a multi-head self-attention module with window size of 7 \u00d7 7.", "publication_ref": [], "figure_ref": [], "table_ref": ["tab_6"]}, {"heading": "A2. Detailed Experimental Settings", "text": "", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "A2.1. Image classification on ImageNet-1K", "text": "The image classification is performed by applying a global average pooling layer on the output feature map of the last stage, followed by a linear classifier. We find this strategy to be as accurate as using an additional class token as in ViT [20] and DeiT [63]. In evaluation, the top-1 accuracy using a single crop is reported.", "publication_ref": ["b19", "b62"], "figure_ref": [], "table_ref": []}, {"heading": "Regular ImageNet-1K training", "text": "The training settings mostly follow [63]. For all model variants, we adopt a default input image resolution of 224 2 . For other resolutions such as 384 2 , we fine-tune the models trained at 224 2 resolution, instead of training from scratch, to reduce GPU consumption.\nWhen training from scratch with a 224 2 input, we employ an AdamW [37] optimizer for 300 epochs using a cosine decay learning rate scheduler with 20 epochs of linear warm-up. A batch size of 1024, an initial learning rate of 0.001, a weight decay of 0.05, and gradient clipping with a max norm of 1 are used. We include most of the augmentation and regularization strategies of [63] in training, including RandAugment [17], Mixup [77], Cutmix [75], random erasing [82] and stochastic depth [35], but not repeated augmentation [31] and Exponential Moving Average (EMA) [45] which do not enhance performance. Note that this is contrary to [63] where repeated augmentation is crucial to stabilize the training of ViT. An increasing degree of stochastic depth augmentation is employed for larger models, i.e. 0.2, 0.3, 0.5 for Swin-T, Swin-S, and Swin-B, respectively.\nFor fine-tuning on input with larger resolution, we employ an adamW [37] optimizer for 30 epochs with a constant learning rate of 10 \u22125 , weight decay of 10 \u22128 , and the same data augmentation and regularizations as the first stage except for setting the stochastic depth ratio to 0.1. ", "publication_ref": ["b62", "b36", "b62", "b16", "b76", "b74", "b81", "b34", "b30", "b44", "b62", "b36"], "figure_ref": [], "table_ref": []}, {"heading": "ImageNet-22K pre-training", "text": "", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "A2.2. Object detection on COCO", "text": "For an ablation study, we consider four typical object detection frameworks: Cascade Mask R-CNN [29,6], ATSS [79], RepPoints v2 [12], and Sparse RCNN [56] in mmdetection [10]. For these four frameworks, we utilize the same settings: multi-scale training [8,56] (resizing the input such that the shorter side is between 480 and 800 while the longer side is at most 1333), AdamW [44] optimizer (initial learning rate of 0.0001, weight decay of 0.05, and batch size of 16), and 3x schedule (36 epochs with the learning rate decayed by 10\u00d7 at epochs 27 and 33).\nFor system-level comparison, we adopt an improved HTC [9] (denoted as HTC++) with instaboost [22], stronger multi-scale training [7] (resizing the input such that the shorter side is between 400 and 1400 while the longer side is at most 1600), 6x schedule (72 epochs with the learning rate decayed at epochs 63 and 69 by a factor of 0.1), soft-NMS [5], and an extra global self-attention layer appended at the output of last stage and ImageNet-22K pre-trained ", "publication_ref": ["b28", "b5", "b78", "b11", "b55", "b9", "b7", "b55", "b43", "b8", "b21", "b6", "b4"], "figure_ref": [], "table_ref": []}, {"heading": "A2.3. Semantic segmentation on ADE20K", "text": "ADE20K [83] is a widely-used semantic segmentation dataset, covering a broad range of 150 semantic categories. It has 25K images in total, with 20K for training, 2K for validation, and another 3K for testing. We utilize UperNet [69] in mmsegmentation [16] as our base framework for its high efficiency.\nIn training, we employ the AdamW [44] optimizer with an initial learning rate of 6 \u00d7 10 \u22125 , a weight decay of 0.01, a scheduler that uses linear learning rate decay, and a linear warmup of 1,500 iterations. Models are trained on 8 GPUs with 2 images per GPU for 160K iterations. For augmentations, we adopt the default setting in mmsegmentation of random horizontal flipping, random re-scaling within ratio range [0.5, 2.0] and random photometric distortion. Stochastic depth with ratio of 0.2 is applied for all Swin Transformer models. Swin-T, Swin-S are trained on the standard setting as the previous approaches with an input of 512\u00d7512. Swin-B and Swin-L with \u2021 indicate that these two models are pre-trained on ImageNet-22K, and trained with the input of 640\u00d7640.\nIn inference, a multi-scale test using resolutions that are [0.5, 0.75, 1.0, 1.25, 1.5, 1.75]\u00d7 of that in training is employed. When reporting test scores, both the training images and validation images are used for training, following common practice [71].  ", "publication_ref": ["b82", "b68", "b15", "b43", "b70"], "figure_ref": [], "table_ref": []}, {"heading": "A3. More Experiments", "text": "", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "A3.2. Different Optimizers for ResNe(X)t on COCO", "text": "Table 9 compares the AdamW and SGD optimizers of the ResNe(X)t backbones on COCO object detection. The Cascade Mask R-CNN framework is used in this comparison. While SGD is used as a default optimizer for Cascade Mask R-CNN framework, we generally observe improved accuracy by replacing it with an AdamW optimizer, particularly for smaller backbones. We thus use AdamW for ResNe(X)t backbones when compared to the proposed Swin Transformer architectures.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "A3.3. Swin MLP-Mixer", "text": "We apply the proposed hierarchical design and the shifted window approach to the MLP-Mixer architectures [61], referred to as Swin-Mixer.  10. Performance of Swin MLP-Mixer on ImageNet-1K classification. D indictes the number of channels per head. Throughput is measured using the GitHub repository of [68] and a V100 GPU, following [63]. proach, ResMLP [61]. Swin-Mixer performs significantly better than MLP-Mixer (81.3% vs. 76.4%) using slightly smaller computation budget (10.4G vs. 12.7G). It also has better speed accuracy trade-off compared to ResMLP [62]. These results indicate the proposed hierarchical design and the shifted window approach are generalizable.", "publication_ref": ["b60", "b67", "b62", "b60", "b61"], "figure_ref": [], "table_ref": ["tab_8"]}], "references": [{"ref_id": "b0", "title": "Unilmv2: Pseudo-masked language models for unified language model pre-training", "journal": "", "year": "", "authors": "Hangbo Bao; Li Dong; Furu Wei; Wenhui Wang; Nan Yang; Xiaodong Liu; Yu Wang; Jianfeng Gao; Songhao Piao; Ming Zhou"}, {"ref_id": "b1", "title": "", "journal": "", "year": "2020", "authors": "Josh Beal; Eric Kim; Eric Tzeng; Dong Huk Park; Andrew Zhai; Dmitry Kislyuk"}, {"ref_id": "b2", "title": "Attention augmented convolutional networks", "journal": "", "year": "", "authors": "Irwan Bello; Barret Zoph; Ashish Vaswani; Jonathon Shlens; Quoc V Le"}, {"ref_id": "b3", "title": "Yolov4: Optimal speed and accuracy of object detection", "journal": "", "year": "2020", "authors": "Alexey Bochkovskiy; Chien-Yao Wang; Hong-Yuan Mark Liao"}, {"ref_id": "b4", "title": "Soft-nms -improving object detection with one line of code", "journal": "", "year": "2017-10", "authors": "Navaneeth Bodla; Bharat Singh; Rama Chellappa; Larry S Davis"}, {"ref_id": "b5", "title": "Cascade r-cnn: Delving into high quality object detection", "journal": "", "year": "2018", "authors": "Zhaowei Cai; Nuno Vasconcelos"}, {"ref_id": "b6", "title": "Gcnet: Non-local networks meet squeeze-excitation networks and beyond", "journal": "", "year": "2006", "authors": "Yue Cao; Jiarui Xu; Stephen Lin; Fangyun Wei; Han Hu"}, {"ref_id": "b7", "title": "End-toend object detection with transformers", "journal": "Springer", "year": "2020", "authors": "Nicolas Carion; Francisco Massa; Gabriel Synnaeve; Nicolas Usunier; Alexander Kirillov; Sergey Zagoruyko"}, {"ref_id": "b8", "title": "Hybrid task cascade for instance segmentation", "journal": "", "year": "2019", "authors": "Kai Chen; Jiangmiao Pang; Jiaqi Wang; Yu Xiong; Xiaoxiao Li; Shuyang Sun; Wansen Feng; Ziwei Liu; Jianping Shi; Wanli Ouyang"}, {"ref_id": "b9", "title": "Open mmlab detection toolbox and benchmark", "journal": "", "year": "2019", "authors": "Kai Chen; Jiaqi Wang; Jiangmiao Pang; Yuhang Cao; Yu Xiong; Xiaoxiao Li; Shuyang Sun; Wansen Feng; Ziwei Liu; Jiarui Xu"}, {"ref_id": "b10", "title": "Encoder-decoder with atrous separable convolution for semantic image segmentation", "journal": "", "year": "2018", "authors": "Yukun Liang-Chieh Chen; George Zhu; Florian Papandreou; Hartwig Schroff;  Adam"}, {"ref_id": "b11", "title": "Reppoints v2: Verification meets regression for object detection", "journal": "", "year": "2020", "authors": "Yihong Chen; Zheng Zhang; Yue Cao; Liwei Wang; Stephen Lin; Han Hu"}, {"ref_id": "b12", "title": "Relationnet++: Bridging visual representations for object detection via transformer decoder", "journal": "", "year": "2020", "authors": "Cheng Chi; Fangyun Wei; Han Hu"}, {"ref_id": "b13", "title": "Rethinking attention with performers", "journal": "", "year": "2021", "authors": "Valerii Krzysztof Marcin Choromanski; David Likhosherstov; Xingyou Dohan; Andreea Song; Tamas Gane; Peter Sarlos; Jared Quincy Hawkins; Afroz Davis; Lukasz Mohiuddin; David Benjamin Kaiser; Lucy J Belanger; Adrian Colwell;  Weller"}, {"ref_id": "b14", "title": "Do we really need explicit position encodings for vision transformers?", "journal": "", "year": "2021", "authors": "Xiangxiang Chu; Bo Zhang; Zhi Tian; Xiaolin Wei; Huaxia Xia"}, {"ref_id": "b15", "title": "MMSegmentation: Openmmlab semantic segmentation toolbox and benchmark", "journal": "", "year": "", "authors": ""}, {"ref_id": "b16", "title": "Randaugment: Practical automated data augmentation with a reduced search space", "journal": "", "year": "2020", "authors": "D Ekin; Barret Cubuk; Jonathon Zoph; Quoc V Shlens;  Le"}, {"ref_id": "b17", "title": "Deformable convolutional networks", "journal": "", "year": "2017", "authors": "Jifeng Dai; Haozhi Qi; Yuwen Xiong; Yi Li; Guodong Zhang; Han Hu; Yichen Wei"}, {"ref_id": "b18", "title": "Imagenet: A large-scale hierarchical image database", "journal": "Ieee", "year": "2009", "authors": "Jia Deng; Wei Dong; Richard Socher; Li-Jia Li; Kai Li; Li Fei-Fei"}, {"ref_id": "b19", "title": "An image is worth 16x16 words: Transformers for image recognition at scale", "journal": "", "year": "2005", "authors": "Alexey Dosovitskiy; Lucas Beyer; Alexander Kolesnikov; Dirk Weissenborn; Xiaohua Zhai; Thomas Unterthiner; Mostafa Dehghani; Matthias Minderer; Georg Heigold; Sylvain Gelly; Jakob Uszkoreit; Neil Houlsby"}, {"ref_id": "b20", "title": "Spinenet: Learning scale-permuted backbone for recognition and localization", "journal": "", "year": "2020", "authors": "Xianzhi Du; Tsung-Yi Lin; Pengchong Jin; Golnaz Ghiasi; Mingxing Tan; Yin Cui; V Quoc; Xiaodan Le;  Song"}, {"ref_id": "b21", "title": "Instaboost: Boosting instance segmentation via probability map guided copypasting", "journal": "", "year": "2019", "authors": "Jianhua Hao-Shu Fang; Runzhong Sun; Minghao Wang; Yong-Lu Gou; Cewu Li;  Lu"}, {"ref_id": "b22", "title": "Dual attention network for scene segmentation", "journal": "", "year": "2019", "authors": "Jun Fu; Jing Liu; Haijie Tian; Yong Li; Yongjun Bao; Zhiwei Fang; Hanqing Lu"}, {"ref_id": "b23", "title": "Adaptive context network for scene parsing", "journal": "", "year": "2019", "authors": "Jun Fu; Jing Liu; Yuhang Wang; Yong Li; Yongjun Bao; Jinhui Tang; Hanqing Lu"}, {"ref_id": "b24", "title": "Cognitron: A self-organizing multilayered neural network", "journal": "Biological cybernetics", "year": "1975", "authors": "Kunihiko Fukushima"}, {"ref_id": "b25", "title": "Simple copy-paste is a strong data augmentation method for instance segmentation", "journal": "", "year": "2020", "authors": "Golnaz Ghiasi; Yin Cui; Aravind Srinivas; Rui Qian; Tsung-Yi Lin; D Ekin;  Cubuk; V Quoc; Barret Le;  Zoph"}, {"ref_id": "b26", "title": "Learning region features for object detection", "journal": "", "year": "2018", "authors": "Jiayuan Gu; Han Hu; Liwei Wang; Yichen Wei; Jifeng Dai"}, {"ref_id": "b27", "title": "Transformer in transformer", "journal": "", "year": "2021", "authors": "Kai Han; An Xiao; Enhua Wu; Jianyuan Guo; Chunjing Xu; Yunhe Wang"}, {"ref_id": "b28", "title": "Piotr Doll\u00e1r, and Ross Girshick. Mask r-cnn", "journal": "", "year": "2017", "authors": "Kaiming He; Georgia Gkioxari"}, {"ref_id": "b29", "title": "Deep residual learning for image recognition", "journal": "", "year": "2004", "authors": "Kaiming He; Xiangyu Zhang; Shaoqing Ren; Jian Sun"}, {"ref_id": "b30", "title": "Augment your batch: Improving generalization through instance repetition", "journal": "", "year": "2020", "authors": "Elad Hoffer; Itay Ben-Nun; Niv Hubara; Torsten Giladi; Daniel Hoefler;  Soudry"}, {"ref_id": "b31", "title": "Relation networks for object detection", "journal": "", "year": "2018", "authors": "Han Hu; Jiayuan Gu; Zheng Zhang; Jifeng Dai; Yichen Wei"}, {"ref_id": "b32", "title": "Local relation networks for image recognition", "journal": "", "year": "2005", "authors": "Han Hu; Zheng Zhang; Zhenda Xie; Stephen Lin"}, {"ref_id": "b33", "title": "Densely connected convolutional networks", "journal": "", "year": "2017", "authors": "Gao Huang; Zhuang Liu; Laurens Van Der Maaten; Kilian Q Weinberger"}, {"ref_id": "b34", "title": "Deep networks with stochastic depth", "journal": "Springer", "year": "2016", "authors": "Gao Huang; Yu Sun; Zhuang Liu; Daniel Sedra; Kilian Q Weinberger"}, {"ref_id": "b35", "title": "Receptive fields, binocular interaction and functional architecture in the cat's visual cortex", "journal": "The Journal of physiology", "year": "1962", "authors": "H David;  Hubel; N Torsten;  Wiesel"}, {"ref_id": "b36", "title": "Adam: A method for stochastic optimization", "journal": "", "year": "2014", "authors": "P Diederik; Jimmy Kingma;  Ba"}, {"ref_id": "b37", "title": "Big transfer (bit): General visual representation learning", "journal": "", "year": "2019", "authors": "Alexander Kolesnikov; Lucas Beyer; Xiaohua Zhai; Joan Puigcerver; Jessica Yung; Sylvain Gelly; Neil Houlsby"}, {"ref_id": "b38", "title": "Imagenet classification with deep convolutional neural networks", "journal": "", "year": "2012", "authors": "Alex Krizhevsky; Ilya Sutskever; Geoffrey E Hinton"}, {"ref_id": "b39", "title": "Gradient-based learning applied to document recognition", "journal": "Proceedings of the IEEE", "year": "1998", "authors": "Yann Lecun; L\u00e9on Bottou; Yoshua Bengio; Patrick Haffner"}, {"ref_id": "b40", "title": "Object recognition with gradient-based learning", "journal": "Springer", "year": "1999", "authors": "Yann Lecun; Patrick Haffner; L\u00e9on Bottou; Yoshua Bengio"}, {"ref_id": "b41", "title": "Feature pyramid networks for object detection", "journal": "", "year": "2002", "authors": "Tsung-Yi Lin; Piotr Dollar; Ross Girshick; Kaiming He; Bharath Hariharan; Serge Belongie"}, {"ref_id": "b42", "title": "Microsoft coco: Common objects in context", "journal": "Springer", "year": "2014", "authors": "Tsung-Yi Lin; Michael Maire; Serge Belongie; James Hays; Pietro Perona; Deva Ramanan; Piotr Doll\u00e1r; C Lawrence Zitnick"}, {"ref_id": "b43", "title": "Decoupled weight decay regularization", "journal": "", "year": "2019", "authors": "Ilya Loshchilov; Frank Hutter"}, {"ref_id": "b44", "title": "Acceleration of stochastic approximation by averaging", "journal": "SIAM journal on control and optimization", "year": "1992", "authors": "T Boris; Anatoli B Juditsky Polyak"}, {"ref_id": "b45", "title": "Detectors: Detecting objects with recursive feature pyramid and switchable atrous convolution", "journal": "", "year": "2020", "authors": "Siyuan Qiao; Liang-Chieh Chen; Alan Yuille"}, {"ref_id": "b46", "title": "Learning transferable visual models from natural language supervision", "journal": "", "year": "2021", "authors": "Alec Radford; Jong Wook Kim; Chris Hallacy; Aditya Ramesh; Gabriel Goh; Sandhini Agarwal; Girish Sastry; Amanda Askell; Pamela Mishkin; Jack Clark; Gretchen Krueger; Ilya Sutskever"}, {"ref_id": "b47", "title": "Designing network design spaces", "journal": "", "year": "2020", "authors": "Ilija Radosavovic; Raj Prateek Kosaraju; Ross Girshick"}, {"ref_id": "b48", "title": "Exploring the limits of transfer learning with a unified text-to-text transformer", "journal": "Journal of Machine Learning Research", "year": "2020", "authors": "Colin Raffel; Noam Shazeer; Adam Roberts; Katherine Lee; Sharan Narang; Michael Matena; Yanqi Zhou; Wei Li; Peter J Liu"}, {"ref_id": "b49", "title": "Stand-alone selfattention in vision models", "journal": "Curran Associates, Inc", "year": "2019", "authors": "Prajit Ramachandran; Niki Parmar; Ashish Vaswani; Irwan Bello; Anselm Levskaya; Jon Shlens"}, {"ref_id": "b50", "title": "Unet: Convolutional networks for biomedical image segmentation", "journal": "Springer", "year": "2015", "authors": "Olaf Ronneberger; Philipp Fischer; Thomas Brox"}, {"ref_id": "b51", "title": "Very deep convolutional networks for large-scale image recognition", "journal": "", "year": "2015-05", "authors": "K Simonyan; A Zisserman"}, {"ref_id": "b52", "title": "An analysis of scale invariance in object detection snip", "journal": "", "year": "2018", "authors": "Bharat Singh; S Larry;  Davis"}, {"ref_id": "b53", "title": "Sniper: Efficient multi-scale training", "journal": "Curran Associates, Inc", "year": "2018", "authors": "Bharat Singh; Mahyar Najibi; Larry S Davis"}, {"ref_id": "b54", "title": "Jonathon Shlens, Pieter Abbeel, and Ashish Vaswani. Bottleneck transformers for visual recognition", "journal": "", "year": "2021", "authors": "Aravind Srinivas; Tsung-Yi Lin; Niki Parmar"}, {"ref_id": "b55", "title": "Sparse r-cnn: End-to-end object detection with learnable proposals", "journal": "", "year": "2020", "authors": "Peize Sun; Rufeng Zhang; Yi Jiang; Tao Kong; Chenfeng Xu; Wei Zhan; Masayoshi Tomizuka; Lei Li; Zehuan Yuan; Changhu Wang"}, {"ref_id": "b56", "title": "Going deeper with convolutions", "journal": "", "year": "2015", "authors": "Christian Szegedy; Wei Liu; Yangqing Jia; Pierre Sermanet; Scott Reed; Dragomir Anguelov; Dumitru Erhan; Vincent Vanhoucke; Andrew Rabinovich"}, {"ref_id": "b57", "title": "Efficientnet: Rethinking model scaling for convolutional neural networks", "journal": "PMLR", "year": "2019", "authors": "Mingxing Tan; Quoc Le"}, {"ref_id": "b58", "title": "Efficientdet: Scalable and efficient object detection", "journal": "", "year": "2020", "authors": "Mingxing Tan; Ruoming Pang; Quoc V Le"}, {"ref_id": "b59", "title": "Long range arena : A benchmark for efficient transformers", "journal": "", "year": "2021", "authors": "Yi Tay; Mostafa Dehghani; Samira Abnar; Yikang Shen; Dara Bahri; Philip Pham; Jinfeng Rao; Liu Yang; Sebastian Ruder; Donald Metzler"}, {"ref_id": "b60", "title": "Mlp-mixer: An all-mlp architecture for vision", "journal": "", "year": "2021", "authors": "Ilya Tolstikhin; Neil Houlsby; Alexander Kolesnikov; Lucas Beyer; Xiaohua Zhai; Thomas Unterthiner; Jessica Yung; Andreas Steiner; Daniel Keysers; Jakob Uszkoreit; Mario Lucic; Alexey Dosovitskiy"}, {"ref_id": "b61", "title": "Resmlp: Feedforward networks for image classification with data-efficient training", "journal": "", "year": "2021", "authors": "Hugo Touvron; Piotr Bojanowski; Mathilde Caron; Matthieu Cord; Alaaeldin El-Nouby; Edouard Grave; Gautier Izacard; Armand Joulin; Gabriel Synnaeve; Jakob Verbeek; Herv\u00e9 J\u00e9gou"}, {"ref_id": "b62", "title": "Training data-efficient image transformers & distillation through attention", "journal": "", "year": "2006", "authors": "Hugo Touvron; Matthieu Cord; Matthijs Douze; Francisco Massa; Alexandre Sablayrolles; Herv\u00e9 J\u00e9gou"}, {"ref_id": "b63", "title": "Attention is all you need", "journal": "", "year": "2004", "authors": "Ashish Vaswani; Noam Shazeer; Niki Parmar; Jakob Uszkoreit; Llion Jones; Aidan N Gomez; \u0141ukasz Kaiser; Illia Polosukhin"}, {"ref_id": "b64", "title": "Deep high-resolution representation learning for visual recognition", "journal": "", "year": "", "authors": "Jingdong Wang; Ke Sun; Tianheng Cheng; Borui Jiang; Chaorui Deng; Yang Zhao; Dong Liu; Yadong Mu; Mingkui Tan; Xinggang Wang"}, {"ref_id": "b65", "title": "Pyramid vision transformer: A versatile backbone for dense prediction without convolutions", "journal": "", "year": "2021", "authors": "Wenhai Wang; Enze Xie; Xiang Li; Deng-Ping Fan; Kaitao Song; Ding Liang; Tong Lu; Ping Luo; Ling Shao"}, {"ref_id": "b66", "title": "Non-local neural networks", "journal": "", "year": "2018", "authors": "Xiaolong Wang; Ross Girshick; Abhinav Gupta; Kaiming He"}, {"ref_id": "b67", "title": "Pytorch image models", "journal": "", "year": "2019", "authors": "Ross Wightman"}, {"ref_id": "b68", "title": "Unified perceptual parsing for scene understanding", "journal": "", "year": "2018", "authors": "Tete Xiao; Yingcheng Liu; Bolei Zhou; Yuning Jiang; Jian Sun"}, {"ref_id": "b69", "title": "Aggregated residual transformations for deep neural networks", "journal": "", "year": "2017", "authors": "Saining Xie; Ross Girshick; Piotr Doll\u00e1r; Zhuowen Tu; Kaiming He"}, {"ref_id": "b70", "title": "Disentangled non-local neural networks", "journal": "", "year": "", "authors": "Minghao Yin; Zhuliang Yao; Yue Cao; Xiu Li; Zheng Zhang; Stephen Lin; Han Hu"}, {"ref_id": "b71", "title": "Tokensto-token vit: Training vision transformers from scratch on imagenet", "journal": "", "year": "2021", "authors": "Li Yuan; Yunpeng Chen; Tao Wang; Weihao Yu; Yujun Shi; E H Francis; Jiashi Tay; Shuicheng Feng;  Yan"}, {"ref_id": "b72", "title": "Objectcontextual representations for semantic segmentation", "journal": "", "year": "2007", "authors": "Yuhui Yuan; Xilin Chen; Jingdong Wang"}, {"ref_id": "b73", "title": "Ocnet: Object context network for scene parsing", "journal": "", "year": "2018", "authors": "Yuhui Yuan; Jingdong Wang"}, {"ref_id": "b74", "title": "Cutmix: Regularization strategy to train strong classifiers with localizable features", "journal": "", "year": "2019", "authors": "Sangdoo Yun; Dongyoon Han; Sanghyuk Seong Joon Oh; Junsuk Chun; Youngjoon Choe;  Yoo"}, {"ref_id": "b75", "title": "Wide residual networks", "journal": "", "year": "2016", "authors": "Sergey Zagoruyko; Nikos Komodakis"}, {"ref_id": "b76", "title": "mixup: Beyond empirical risk minimization", "journal": "", "year": "2017", "authors": "Hongyi Zhang; Moustapha Cisse; David Yann N Dauphin;  Lopez-Paz"}, {"ref_id": "b77", "title": "Split-attention networks", "journal": "", "year": "2020", "authors": "Hang Zhang; Chongruo Wu; Zhongyue Zhang; Yi Zhu; Zhi Zhang; Haibin Lin; Yue Sun; Tong He; Jonas Mueller;  Manmatha"}, {"ref_id": "b78", "title": "Bridging the gap between anchor-based and anchor-free detection via adaptive training sample selection", "journal": "", "year": "2020", "authors": "Shifeng Zhang; Cheng Chi; Yongqiang Yao; Zhen Lei; Stan Z Li"}, {"ref_id": "b79", "title": "Exploring self-attention for image recognition", "journal": "", "year": "2020", "authors": "Hengshuang Zhao; Jiaya Jia; Vladlen Koltun"}, {"ref_id": "b80", "title": "Rethinking semantic segmentation from a sequence-to-sequence perspective with transformers", "journal": "", "year": "2008", "authors": "Sixiao Zheng; Jiachen Lu; Hengshuang Zhao; Xiatian Zhu; Zekun Luo; Yabiao Wang; Yanwei Fu; Jianfeng Feng; Tao Xiang; H S Philip;  Torr"}, {"ref_id": "b81", "title": "Random erasing data augmentation", "journal": "", "year": "2020", "authors": "Zhun Zhong; Liang Zheng; Guoliang Kang; Shaozi Li; Yi Yang"}, {"ref_id": "b82", "title": "Semantic understanding of scenes through the ade20k dataset", "journal": "International Journal on Computer Vision", "year": "2018", "authors": "Bolei Zhou; Hang Zhao; Xavier Puig; Tete Xiao; Sanja Fidler; Adela Barriuso; Antonio Torralba"}, {"ref_id": "b83", "title": "Deformable convnets v2: More deformable, better results", "journal": "", "year": "2019", "authors": "Xizhou Zhu; Han Hu; Stephen Lin; Jifeng Dai"}, {"ref_id": "b84", "title": "Deformable {detr}: Deformable transformers for end-to-end object detection", "journal": "", "year": "2021", "authors": "Xizhou Zhu; Weijie Su; Lewei Lu; Bin Li; Xiaogang Wang; Jifeng Dai"}], "figures": [{"figure_label": "1", "figure_type": "figure", "figure_id": "fig_0", "figure_caption": "Figure 1 .1Figure 1. (a) The proposed Swin Transformer builds hierarchical feature maps by merging image patches (shown in gray) in deeper layers and has linear computation complexity to input image size due to computation of self-attention only within each local window (shown in red). It can thus serve as a general-purpose backbone for both image classification and dense recognition tasks. (b) In contrast, previous vision Transformers [20] produce feature maps of a single low resolution and have quadratic computation complexity to input image size due to computation of selfattention globally.", "figure_data": ""}, {"figure_label": "3", "figure_type": "figure", "figure_id": "fig_1", "figure_caption": "Figure 3 .3Figure 3. (a) The architecture of a Swin Transformer (Swin-T); (b) two successive Swin Transformer Blocks (notation presented with Eq. (3)). W-MSA and SW-MSA are multi-head self attention modules with regular and shifted windowing configurations, respectively.", "figure_data": ""}, {"figure_label": "4", "figure_type": "figure", "figure_id": "fig_2", "figure_caption": "Figure 4 .4Figure 4. Illustration of an efficient batch computation approach for self-attention in shifted window partitioning.", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_3", "figure_caption": "\u00d7d are the query, key and value matrices; d is the query/key dimension, and M 2 is the number of patches in a window. Since the relative position along each axis lies in the range [\u2212M + 1, M \u2212 1], we parameterize a smaller-sized bias matrixB \u2208 R (2M \u22121)\u00d7(2M \u22121) , and values in B are taken fromB.", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_4", "figure_caption": "(HTC++) 57.1 49.5 57.7 50.2 284M 1470G Swin-L (HTC++)* 58.0 50.4 58.7 51.1 284M", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_5", "figure_caption": "This paper presents Swin Transformer, a new vision Transformer which produces a hierarchical feature repre-ImageNet COCO ADE20k Backbone top-1 top-5 AP box AP mask mIoU sliding window Swin-T 81.4 95.6 50.2", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_6", "figure_caption": "We also pre-train on the larger ImageNet-22K dataset, which contains 14.2 million images and 22K classes. The training is done in two stages. For the first stage with 224 2 input, we employ an AdamW optimizer for 90 epochs using a linear decay learning rate scheduler with a 5-epoch linear warm-up. A batch size of 4096, an initial learning rate of 0.001, and a weight decay of 0.01 are used. In the second stage of ImageNet-1K finetuning with 224 2 /384 2 input, we train the models for 30 epochs with a batch size of 1024, a constant learning rate of 10 \u22125 , and a weight decay of 10 \u22128 .", "figure_data": ""}, {"figure_label": "1", "figure_type": "figure", "figure_id": "fig_7", "figure_caption": "A3. 1 .1Image classification with different input size", "figure_data": ""}, {"figure_label": "", "figure_type": "table", "figure_id": "tab_0", "figure_caption": "Swin Transformers noticeably surpass the counterpart DeiT architectures with similar complexities: +1.5% for Swin-T (81.3%) over DeiT-S (79.8%) using 224 2 input, and +1.5%/1.4% for Swin-B (83.3%/84.5%) over DeiT-B (81.8%/83.1%) using 224 2 /384 2 input, respectively.", "figure_data": "Pre-training on ImageNet-22K and fine-tuning onImageNet-1K. We also pre-train on the largerImageNet-22K dataset, which contains 14.2 millionimages and 22K classes. We employ an AdamW opti-mizer for 90 epochs using a linear decay learning ratescheduler with a 5-epoch linear warm-up. A batch sizeof 4096, an initial learning rate of 0.001, and a weightdecay of 0.01 are used. In ImageNet-1K fine-tuning,we train the models for 30 epochs with a batch size of1024, a"}, {"figure_label": "", "figure_type": "table", "figure_id": "tab_1", "figure_caption": "ImageNet-22K pre-training We also pretrain the larger-capacity Swin-B and Swin-L on ImageNet-22K. Results fine-tuned on ImageNet-1K image classification are shown in Table 1(b). For Swin-B, the ImageNet-22K pre-training brings 1.8%\u223c1.9% gains over training on ImageNet-1K from scratch. Compared with the previous best results for ImageNet-22K pre-training, our models achieve significantly better speed-accuracy trade-offs: Swin-B obtains 86.4% top-1 accuracy, which is 2.4% higher than that of ViT with similar inference throughput (84.7 vs. 85.9 images/sec) and slightly lower FLOPs (47.0G vs. 55.4G). The larger Swin-L model achieves 87.3% top-1 accuracy, +0.9% better than that of the Swin-B model.", "figure_data": "(a) Regular ImageNet-1K trained modelsmethodimage size#param. FLOPsthroughput (image / s)ImageNet top-1 acc.RegNetY-4G [48] 224 2 21M 4.0G1156.780.0RegNetY-8G [48] 224 2 39M 8.0G591.681.7RegNetY-16G [48] 224 2 84M 16.0G334.782.9EffNet-B3 [58] 300 2 12M 1.8G732.181.6EffNet-B4 [58] 380 2 19M 4.2G349.482.9EffNet-B5 [58] 456 2 30M 9.9G169.183.6EffNet-B6 [58] 528 2 43M 19.0G96.984.0EffNet-B7 [58] 600 2 66M 37.0G55.184.3ViT-B/16 [20] 384 2 86M 55.4G85.977.9ViT-L/16 [20]384 2 307M 190.7G27.376.5DeiT-S [63]224 2 22M 4.6G940.479.8DeiT-B [63]224 2 86M 17.5G292.381.8DeiT-B [63]384 2 86M 55.4G85.983.1Swin-T224 2 29M 4.5G755.281.3Swin-S224 2 50M 8.7G436.983.0Swin-B224 2 88M 15.4G278.183.5Swin-B384 2 88M 47.0G84.784.5(b) ImageNet-22K pre-trained modelsmethodimage size#param. FLOPsthroughput (image / s)ImageNet top-1 acc.R-101x3 [38]384 2 388M 204.6G-84.4R-152x4 [38]480 2 937M 840.5G-85.4ViT-B/16 [20] 384 2 86M 55.4G85.984.0ViT-L/16 [20]384 2 307M 190.7G27.385.2Swin-B224 2 88M 15.4G278.185.2Swin-B384 2 88M 47.0G84.786.4Swin-L384 2 197M 103.9G42.187.3Table 1. Comparison of different backbones on ImageNet-1K clas-sification. Throughput is measured using the GitHub repositoryof [68] and a V100 GPU, following [63]."}, {"figure_label": "23", "figure_type": "table", "figure_id": "tab_3", "figure_caption": "(a) lists the results of Swin-T and ResNet-50 on the four object detection frameworks. Our Swin-T architecture brings consistent +3.4\u223c4.2 box AP gains over ResNet-50, with slightly larger model size, FLOPs and latency. Results of semantic segmentation on the ADE20K val and test set. \u2020 indicates additional deconvolution layers are used to produce hierarchical feature maps. \u2021 indicates that the model is pre-trained on ImageNet-22K. under different model capacity using Cascade Mask R-CNN. Swin Transformer achieves a high detection accuracy of 51.9 box AP and 45.0 mask AP, which are significant gains of +3.6 box AP and +3.3 mask AP over ResNeXt101-64x4d, which has similar model size, FLOPs and latency. On a higher baseline of 52.3 box AP and 46.0 mask AP using an improved HTC framework, the gains by Swin Transformer are also high, at +4.1 box AP and +3.1 mask AP (see Table", "figure_data": "Table 2(b) compares Swin Transformer and ResNe(X)t"}, {"figure_label": "2", "figure_type": "table", "figure_id": "tab_4", "figure_caption": "(c) compares our best results with those of previous state-ofthe-art models. Our best model achieves 58.7 box AP and 51.1 mask AP on COCO test-dev, surpassing the previous best results by +2.7 box AP (Copy-paste[26] without external data) and +2.6 mask AP (DetectoRS[46]).", "figure_data": "4.3. Semantic Segmentation on ADE20KSettings ADE20K [83] is a widely-used semantic seg-mentation dataset, covering a broad range of 150 semantic"}, {"figure_label": "4", "figure_type": "table", "figure_id": "tab_5", "figure_caption": "", "figure_data": "shows comparisons of dif-ferent position embedding approaches. Swin-T with rela-tive position bias yields +1.2%/+0.8% top-1 accuracy onImageNet-1K, +1.3/+1.5 box AP and +1.1/+1.3 mask AP"}, {"figure_label": "7", "figure_type": "table", "figure_id": "tab_6", "figure_caption": "Detailed architecture specifications. model as initialization. We adopt stochastic depth with ratio of 0.2 for all Swin Transformer models.", "figure_data": "downsp. rate (output size)Swin-TSwin-SSwin-BSwin-Lstage 14\u00d7 (56\u00d756)concat 4\u00d74, 96-d, LN win. sz. 7\u00d77, dim 96, head 3 \u00d7 2concat 4\u00d74, 96-d, LN win. sz. 7\u00d77, dim 96, head 3 \u00d7 2concat 4\u00d74, 128-d, LN win. sz. 7\u00d77, dim 128, head 4 \u00d7 2concat 4\u00d74, 192-d, LN win. sz. 7\u00d77, dim 192, head 6 \u00d7 2stage 28\u00d7 (28\u00d728)concat 2\u00d72, 192-d , LN concat 2\u00d72, 192-d , LN win. sz. 7\u00d77, dim 192, head 6 \u00d7 2 win. sz. 7\u00d77, dim 192, head 6 \u00d7 2concat 2\u00d72, 256-d , LN win. sz. 7\u00d77, dim 256, head 8 \u00d7 2concat 2\u00d72, 384-d , LN win. sz. 7\u00d77, dim 384, head 12 \u00d7 2stage 316\u00d7 (14\u00d714)concat 2\u00d72, 384-d , LN concat 2\u00d72, 384-d , LN win. sz. 7\u00d77, dim 384, head 12 \u00d7 6 win. sz. 7\u00d77, dim 384, head 12 \u00d7 18concat 2\u00d72, 512-d , LN win. sz. 7\u00d77, dim 512, head 16 \u00d7 18concat 2\u00d72, 768-d , LN win. sz. 7\u00d77, dim 768, head 24 \u00d7 18stage 432\u00d7 (7\u00d77)concat 2\u00d72, 768-d , LN concat 2\u00d72, 768-d , LN concat 2\u00d72, 1024-d , LN concat 2\u00d72, 1536-d , LN win. sz. 7\u00d77, dim 768, head 24 \u00d7 2 win. sz. 7\u00d77, dim 768, head 24 \u00d7 2 win. sz. 7\u00d77, dim 1024, head 32 \u00d7 2 win. sz. 7\u00d77, dim 1536, head 48 \u00d7 2"}, {"figure_label": "889", "figure_type": "table", "figure_id": "tab_7", "figure_caption": "the performance of Swin Transformers with different input image sizes from 224 2 to 384 2 . In general, a larger input resolution leads to better top-1 accuracy but with slower inference speed. Swin Transformers with different input image size on ImageNet-1K classification. 62.9 48.8 38.5 59.9 41.4 AdamW 46.3 64.3 50.5 40.1 61.7 43.4 X101-32x4d SGD 47.8 65.9 51.9 40.4 62.9 43.5 AdamW 48.1 66.5 52.4 41.6 63.9 45.2 X101-64x4d SGD 48.8 66.9 53.0 41.4 63.9 44.7 AdamW 48.3 66.4 52.3 41.7 64.0 45.1 Comparison of the SGD and AdamW optimizers for ResNe(X)t backbones on COCO object detection using the Cascade Mask R-CNN framework.", "figure_data": "Swin-TSwin-SSwin-Binputtop-1throughputtop-1throughputtop-1throughputsizeacc(image / s)acc(image / s)acc(image / s)224 2 81.3755.283.0436.983.3278.1256 2 81.6580.983.4336.783.7208.1320 2 82.1342.083.7198.284.0132.0384 2 82.2219.583.9127.684.584.7Backbone Optimizer AP box AP box 50 AP box 75 AP mask AP mask 50AP mask 75R50SGD45.0"}, {"figure_label": "10", "figure_type": "table", "figure_id": "tab_8", "figure_caption": "shows the performance of Swin-Mixer compared to the original MLP-Mixer architectures MLP-Mixer [61] and a follow-up ap-Mixer-B/16 [61] 224 2 59M 12.7G -76.4 ResMLP-S24 [62] 224 2 30M 6.0G 715 79.4 ResMLP-B24 [62] 224 2 116M 23.", "figure_data": "methodimage size#param. FLOPsthroughput (image / s)ImageNet top-1 acc.MLP-0G23181.0Swin-T/D24 (Transformer)256 2 28M 5.9G56381.6Swin-Mixer-T/D24 256 2 20M 4.0G80779.4Swin-Mixer-T/D12 256 2 21M 4.0G79279.6Swin-Mixer-T/D6 256 2 23M 4.0G76679.7Swin-Mixer-B/D24 (no shift)224 2 61M 10.4G40980.3Swin-Mixer-B/D24 224 2 61M 10.4G40981.3Table"}], "formulas": [{"formula_id": "formula_0", "formula_text": "\u2126(MSA) = 4hwC 2 + 2(hw) 2 C,(1)", "formula_coordinates": [4.0, 353.05, 286.23, 192.07, 11.03]}, {"formula_id": "formula_1", "formula_text": "\u2126(W-MSA) = 4hwC 2 + 2M 2 hwC,(2)", "formula_coordinates": [4.0, 353.05, 302.41, 192.07, 11.03]}, {"formula_id": "formula_2", "formula_text": "( M 2 , M", "formula_coordinates": [4.0, 308.86, 554.17, 41.11, 13.47]}, {"formula_id": "formula_3", "formula_text": "z l = W-MSA LN z l\u22121 + z l\u22121 , z l = MLP LN \u1e91 l +\u1e91 l , z l+1 = SW-MSA LN z l + z l , z l+1 = MLP LN \u1e91 l+1 +\u1e91 l+1 ,(3)", "formula_coordinates": [4.0, 356.19, 599.71, 205.48, 60.61]}, {"formula_id": "formula_4", "formula_text": "M \u00d7 w M to ( h M + 1) \u00d7 ( w M +1", "formula_coordinates": [5.0, 50.11, 312.98, 236.25, 25.43]}, {"formula_id": "formula_5", "formula_text": "B \u2208 R M 2 \u00d7M 2", "formula_coordinates": [5.0, 50.11, 568.07, 57.62, 12.5]}, {"formula_id": "formula_6", "formula_text": "Attention(Q, K, V ) = SoftMax(QK T / \u221a d + B)V, (4", "formula_coordinates": [5.0, 59.52, 584.84, 222.97, 17.93]}, {"formula_id": "formula_7", "formula_text": ")", "formula_coordinates": [5.0, 282.49, 594.13, 3.87, 8.64]}, {"formula_id": "formula_8", "formula_text": "Q, K, V \u2208 R M 2", "formula_coordinates": [5.0, 77.13, 614.51, 65.19, 12.5]}], "doi": ""}