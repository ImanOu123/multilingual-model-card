{"title": "Generative Pretraining from Pixels", "authors": "Mark Chen; Alec Radford; Rewon Child; Jeff Wu; Heewoo Jun; Prafulla Dhariwal; David Luan; Ilya Sutskever", "pub_date": "", "abstract": "Inspired by progress in unsupervised representation learning for natural language, we examine whether similar models can learn useful representations for images. We train a sequence Transformer to auto-regressively predict pixels, without incorporating knowledge of the 2D input structure. Despite training on low-resolution ImageNet without labels, we find that a GPT-2 scale model learns strong image representations as measured by linear probing, fine-tuning, and low-data classification. On CIFAR-10, we achieve 96.3% accuracy with a linear probe, outperforming a supervised Wide ResNet, and 99.0% accuracy with full finetuning, matching the top supervised pre-trained models. An even larger model trained on a mixture of ImageNet and web images is competitive with self-supervised benchmarks on ImageNet, achieving 72.0% top-1 accuracy on a linear probe of our features.", "sections": [{"heading": "Introduction", "text": "Unsupervised pre-training played a central role in the resurgence of deep learning. Starting in the mid 2000's, approaches such as the Deep Belief Network (Hinton et al., 2006) and Denoising Autoencoder (Vincent et al., 2008) were commonly used in neural networks for computer vision (Lee et al., 2009) and speech recognition (Mohamed et al., 2009). It was believed that a model which learned the data distribution P (X) would also learn beneficial features for the subsequent supervised modeling of P (Y |X) (Lasserre et al., 2006;Erhan et al., 2010). However, advancements such as piecewise linear activation functions (Nair & Hinton, 2010), improved initializations (Glorot & Bengio, 2010), and normalization strategies (Ioffe & Szegedy, 2015;Ba et al., 2016) removed the need for pre-training in order to achieve strong results. Other research cast doubt on the benefits of deep unsupervised representations and re-ported strong results using a single layer of learned features (Coates et al., 2011), or even random features (Huang et al., 2014;May et al., 2017). The approach fell out of favor as the state of the art increasingly relied on directly encoding prior structure into the model and utilizing abundant supervised data to directly learn representations (Krizhevsky et al., 2012;Graves & Jaitly, 2014). Retrospective study of unsupervised pre-training demonstrated that it could even hurt performance in modern settings (Paine et al., 2014).\nInstead, unsupervised pre-training flourished in a different domain. After initial strong results for word vectors (Mikolov et al., 2013), it has pushed the state of the art forward in Natural Language Processing on most tasks (Dai & Le, 2015;Peters et al., 2018;Howard & Ruder, 2018;Radford et al., 2018;Devlin et al., 2018). Interestingly, the training objective of a dominant approach like BERT, the prediction of corrupted inputs, closely resembles that of the Denoising Autoencoder, which was originally developed for images.\nAs a higher dimensional, noisier, and more redundant modality than text, images are believed to be difficult for generative modeling. Here, self-supervised approaches designed to encourage the modeling of more global structure (Doersch et al., 2015) have shown significant promise. A combination of new training objectives (Oord et al., 2018), more recent architectures (Gomez et al., 2017), and increased model capacity (Kolesnikov et al., 2019) has allowed these methods to achieve state of the art performance in low data settings (H\u00e9naff et al., 2019) and sometimes even outperform supervised representations in transfer learning settings (He et al., 2019;Misra & van der Maaten, 2019;Chen et al., 2020).\nGiven that it has been a decade since the original wave of generative pre-training methods for images and considering their substantial impact in NLP, this class of methods is due for a modern re-examination and comparison with the recent progress of self-supervised methods. We re-evaluate generative pre-training on images and demonstrate that when using a flexible architecture (Vaswani et al., 2017), a tractable and efficient likelihood based training objective (Larochelle & Murray, 2011;Oord et al., 2016), and significant compute resources (2048 TPU cores), generative pre-training is competitive with other self-supervised approaches and learns Figure 1. An overview of our approach. First, we pre-process raw images by resizing to a low resolution and reshaping into a 1D sequence. We then chose one of two pre-training objectives, auto-regressive next pixel prediction or masked pixel prediction. Finally, we evaluate the representations learned by these objectives with linear probes or fine-tuning.\nrepresentations that significantly improve the state of the art in low-resolution unsupervised representation learning settings. This is especially promising as our architecture uses a dense connectivity pattern which does not encode the 2D spatial structure of images yet is able to match and even outperform approaches which do. We report a set of experiments characterizing the performance of our approach on many datasets and in several different evaluation settings (low data, linear evaluation, full fine-tuning). We also conduct several experiments designed to better understand the achieved performance of these models. We investigate how representations are computed inside our model via the performance of linear probes as a function of model depth as well as studying how scaling the resolution and parameter count of the approach affects performance.", "publication_ref": ["b25", "b70", "b40", "b45", "b39", "b15", "b46", "b17", "b30", "b0", "b6", "b28", "b41", "b37", "b21", "b50", "b43", "b8", "b54", "b27", "b56", "b9", "b11", "b49", "b18", "b36", "b23", "b22", "b44", "b4", "b69", "b38", "b48"], "figure_ref": [], "table_ref": []}, {"heading": "Approach", "text": "Our approach consists of a pre-training stage followed by a fine-tuning stage. In pre-training, we explore both the auto-regressive and BERT objectives. We also apply the sequence Transformer architecture to predict pixels instead of language tokens. One way to measure representation quality is to fine-tune for image classification. Fine-tuning adds a small classification head to the model, used to optimize a classification objective and adapts all weights. Pre-training can be viewed as a favorable initialization or as a regularizer when used in combination with early stopping (Erhan et al., 2010).\nAnother approach for measuring representation quality uses the pre-trained model as a feature extractor. In particular, given labeled examples (X, Y ), the model is applied to X to produce features f X . Then, a linear classifier is trained on (f X , Y ). Linear probing captures the intuition that good features should linearly separate the classes of transfer tasks. Furthermore, linear probes help disentangle feature quality from model architecture: in fine-tuning, one model may outperform another because its architecture is more suited for the downstream task rather than because of better pretraining.\nWe begin this section by defining the auto-regressive and BERT objectives in the context of images. Next, we outline implementation details for our transformer decoder. Finally, we describe how the transformer is used for fine-tuning and how features are extracted for linear probes.", "publication_ref": ["b15"], "figure_ref": [], "table_ref": []}, {"heading": "Pre-training", "text": "Given an unlabeled dataset X consisting of high dimensional data x = (x 1 , ..., x n ), we can pick a permutation \u03c0 of the set [1, n] and model the density p(x) auto-regressively as follows:\np(x) = n i=1 p(x \u03c0i |x \u03c01 , ..., x \u03c0i\u22121 , \u03b8)\nWhen working with images, we pick the identity permutation \u03c0 i = i for 1 \u2264 i \u2264 n, also known as raster order. We train our model by minimizing the negative log-likelihood of the data:\nL AR = E x\u223cX [\u2212 log p(x)]\nWe also consider the BERT objective, which samples a sub-sequence M \u2282 [1, n] such that each index i independently has probability 0.15 of appearing in M . We call M the BERT mask, and we train our model by minimizing the negative log-likelihood of the \"masked\" elements x M conditioned on the \"unmasked\" ones x [1,n]\\M :\nL BERT = E x\u223cX E M i\u2208M \u2212 log p x i |x [1,n]\\M\nIn pre-training, we pick one of L AR or L BERT and minimize the loss over our pre-training dataset.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Architecture", "text": "The transformer decoder takes an input sequence x 1 , ..., x n of discrete tokens and produces a d-dimensional embedding for each position. The decoder is realized as a stack of L blocks, the l-th of which produces an intermediate embedding h l 1 , ..., h l n also of dimension d. We use the GPT-2 (Radford et al., 2019) formulation of the transformer decoder block, which acts on an input tensor h l as follows:\nn l = layer norm(h l ) a l = h l + multihead attention(n l ) h l+1 = a l + mlp(layer norm(a l ))\nIn particular, layer norms precede both the attention and mlp operations, and all operations lie strictly on residual paths. We find that such a formulation allows us to scale the transformer with ease. The only mixing across sequence elements occurs in the attention operation, and to ensure proper conditioning when training the AR objective, we apply the standard upper triangular mask to the n\u00d7n matrix of attention logits. When using the BERT objective, no attention logit masking is required: after applying content embeddings to the input sequence, we zero out the positions in M .\nAdditionally, since we learn independent position embeddings for each sequence element, our BERT model has no positional inductive biases (i.e. it is permutation invariant). Put another way, any spatial relationships between positions must be learned by the model at train time. This is not entirely true for the AR model, as choosing the raster order also fixes a prespecified ordering of the conditionals. Nevertheless, permutation invariance is a property in strong contrast to convolutional neural networks, which incorporate the inductive bias that features should arise from spatially proximate elements.\nFollowing the final transformer layer, we apply a layer norm n L = layer norm(h L ), and learn a projection from n L to logits parameterizing the conditional distributions at each sequence element. When training BERT, we simply ignore the logits at unmasked positions.", "publication_ref": ["b57"], "figure_ref": [], "table_ref": []}, {"heading": "Fine-tuning", "text": "When fine-tuning, we average pool n L across the sequence dimension to extract a d-dimensional vector of features per example:\nf L = n L i i\nWe learn a projection from f L to class logits, which we use to minimize a cross entropy loss L CLF .\nWhile fine-tuning on L CLF yields reasonable downstream performance, we find empirically that the joint objective\nL GEN + L CLF L GEN \u2208 {L AR , L\nBERT } works even better. Similar findings were reported by Radford et al. (2018).", "publication_ref": ["b56"], "figure_ref": [], "table_ref": []}, {"heading": "Linear Probing", "text": "Extracting fixed features for linear probing follows a similar procedure to fine-tuning, except that average pooling is not always at the final layer:\nf l = n l i i\nwhere 0 \u2264 l \u2264 L. We will show in the experiments section that the best features often lie in the middle of the network.\nAs in fine-tuning, we project these intermediate features to produce class logits. Because we view the features as fixed when linear probing, this projection contains the only trainable weights, so we can only optimize L CLF .", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Methodology", "text": "Although supervised pre-training is the dominant paradigm for image classification, curating large labeled image datasets is both expensive and time consuming. Instead of further scaling up labeling efforts, we can instead aspire to learn general purpose representations from the much larger set of available unlabeled images and fine-tune them for classification. We investigate this setting using Ima-geNet as a proxy for a large unlabeled corpus, and small classic labeled datasets (CIFAR-10, CIFAR-100, STL-10) as proxies for downstream tasks. For our largest model, we use an additional 100 million unlabeled web images, filtered to be similar to ImageNet.\nEven in cases where labels are available, unsupervised or self-supervised pre-training can still provide benefits in data efficiency or on fine-tuning speed. We investigate this setting by pre-training without labels and then fine-tuning or linear probing with labels.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Dataset and Data Augmentation", "text": "We use the ImageNet ILSVRC 2012 training dataset, splitting off 4% as our experimental validation set and report results on the ILSVRC 2012 validation set as our test set. For CIFAR-10, CIFAR-100 and STL-10, we split off 10% of the provided training set instead. We ignore the provided unlabeled examples in STL-10, which constitute a subset of ImageNet.\nNo data augmentation is used when pre-training on web images, and lightweight data augmentation is used when pre-training or fine-tuning on ImageNet. Specifically, when employing data augmentation, we randomly resize an image such that the shorter sidelength is in the range [256,384] and then take a random 224 \u00d7 224 crop. When evaluating on ImageNet, we resize the image such that the shorter sidelength is 224, and use the single 224 \u00d7 224 center crop.\nWhen full-network fine-tuning on CIFAR-10 and CIFAR-100, we use the augmentation popularized by Wide Residual Networks: 4 pixels are reflection padded on each side, and a 32 \u00d7 32 crop is randomly sampled from the padded image or its horizontal flip (Zagoruyko & Komodakis, 2016).\nOnce optimal hyperparameters are found, we fold our ex-perimental validation set back into the training set, retrain the model, and report numbers on the respective test set.", "publication_ref": ["b72"], "figure_ref": [], "table_ref": []}, {"heading": "Context Reduction", "text": "Because the memory requirements of the transformer decoder scale quadratically with context length when using dense attention, we must employ further techniques to reduce context length. If we naively trained a transformer on a sequence of length 224 2 \u00d7 3, our attention logits would be tens of thousands of times larger than those used in language models and even a single layer would not fit on a GPU. To deal with this, we first resize our image to a lower resolution, which we call the input resolution (IR). Our models have IRs of either 32 2 \u00d7 3, 48 2 \u00d7 3, or 64 2 \u00d7 3.\nAn IR of 32 2 \u00d7 3 is still quite computationally intensive. While working at even lower resolutions is tempting, prior work has demonstrated human performance on image classification begins to drop rapidly below this size (Torralba et al., 2008). Instead, motivated by early color display palettes, we create our own 9-bit color palette by clustering (R, G, B) pixel values using k-means with k = 512. Using this palette yields an input sequence length 3 times shorter than the standard (R, G, B) palette, while still encoding color faithfully. A similar approach was applied to spatial patches by Ranzato et al. (2014). We call the resulting context length (32 2 or 48 2 or 64 2 ) the model resolution (MR). Note that this reduction breaks permutation invariance of the color channels, but keeps the model spatially invariant.", "publication_ref": ["b66", "b59"], "figure_ref": [], "table_ref": []}, {"heading": "Model", "text": "Our largest model, iGPT-XL, contains L = 60 layers and uses an embedding size of d = 3072 for a total of 6.8B parameters. Our next largest model, iGPT-L, is essentially identical to GPT-2 with L = 48 layers, but contains a slightly smaller embedding size of d = 1536 (vs 1600) for a total of 1.4M parameters. We use the same model code as GPT-2, except that we initialize weights in the layerdependent fashion as in Sparse Transformer (Child et al., 2019) and zero-initialize all projections producing logits.\nWe also train iGPT-M, a 455M parameter model with L = 36 and d = 1024 and iGPT-S, a 76M parameter model with L = 24 and d = 512 to study the effect of model capacity on representation quality in a generative model.", "publication_ref": ["b5"], "figure_ref": [], "table_ref": []}, {"heading": "Training", "text": "When pre-training iGPT-XL, we use a batch size of 64 and train for 2M iterations, and for all other models we use a batch size of 128 and train for 1M iterations. We use Adam with \u03b2 1 = 0.9 and \u03b2 2 = 0.95 and sequentially try the learning rates 0.01, 0.003, 0.001, 0.0003, ..., stopping once the final validation loss starts increasing. The learning rate is warmed up for one epoch, and then decays to 0 following a cosine schedule. No dropout is used.\nWhen fine-tuning, we use the same batch size and Adam hyperparameters. Here, we do not employ a cosine schedule, and early stop once we reach the maximum validation accuracy. Again, no dropout is used.\nWhen running a linear probe on ImageNet, we follow recent literature and use SGD with momentum 0.9 and a high learning rate (we try the values 30, 10, 3, ... in the manner described above) (He et al., 2019). We train for 1000000 iterations with a cosine learning rate schedule. Finally, when running a linear probe on CIFAR-10, CIFAR-100, or STL-10, we use the L-BFGS algorithm for consistency with prior results (Pedregosa et al., 2011).", "publication_ref": ["b22", "b53"], "figure_ref": [], "table_ref": []}, {"heading": "Experiments and Results", "text": "We begin with experiments and results from the autoregressive formulation of iGPT. Comparisons with the BERT formulation appear in Section 4.6.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "What Representation Works Best in a Generative", "text": "Model Without Latent Variables?\nFigure 2. Representation quality depends on the layer from which we extract features. In contrast with supervised models, the best representations for these generative models lie in the middle of the network. We plot this unimodal dependence on depth by showing linear probes for iGPT-L on CIFAR-10, CIFAR-100, and STL-10.\nIn supervised pre-training, representation quality tends to increase monotonically with depth, such that the best representations lie at the penultimate layer (Zeiler & Fergus, 2014). Indeed, since a linear layer produces class logits from pre-logits, a good classifier necessarily achieves high accuracy on a linear probe of its pre-logits. If a downstream task also involves classification, it is empirically validated that penultimate features perform well.\nWith generative pre-training, it is not obvious whether a task like pixel prediction is relevant to image classification. This suggests that the penultimate layer of a model trained for pixel prediction might not produce the most useful representations for classification. Latent variable models such as VAEs can avoid this issue by explicitly learning a representation of the input data, but deep autoregressive generative models have the same width and connectivity pattern at every layer. Our first experiment studies how representation quality varies over one set of candidate representations: different layers of a generative model. We observe a very different behavior from supervised learning: representations first improve as a function of depth, and then, starting around the middle layer, begin to deteriorate until the penultimate layer (Figure 2).\nThis behavior potentially suggests that these generative models operate in two phases. In the first phase, each position gathers information from its surrounding context in order to build a more global image representation. In the second phase, this contextualized input is used to solve the conditional next pixel prediction task. This could resemble the behavior of encoder-decoder architectures common across deep learning, but learned within a monolithic architecture via a pre-training objective.\nConsequently, when evaluating a generative model with a linear probe, it is important to search for the best layer. Taking the final layer on CIFAR-10 decreases performance by 2.4%, the difference between a baseline and a state-ofthe-art result. In all settings, we find that the dependence of representation quality on depth is strongly unimodal. Using the linear probe as a tool for measuring representation quality, we investigate whether better generative models (as measured by log-prob on held-out data) also learn better representations.", "publication_ref": ["b73"], "figure_ref": [], "table_ref": []}, {"heading": "Better Generative Models Learn Better Representations", "text": "In Figure 3, we see that as validation loss on the autoregressive objective decreases throughout training, linear probe accuracy increases as well. This trend holds across several model capacities, with higher capacity models achieving better validation losses. This highlights the importance of scale for our approach. Note that for a given validation loss value, bigger models also perform better.", "publication_ref": [], "figure_ref": ["fig_0"], "table_ref": []}, {"heading": "Linear Probes on CIFAR and STL-10", "text": "In addition to CIFAR-10, we also evaluate linear probes on CIFAR-100 and STL-10 (Figure 2) to check whether the learned representations are useful across multiple datasets. For this evaluation setting, we achieve state-of-the-art across the entire spectrum of pre-training approaches (Table 1).\nFor example, on CIFAR-10, our model achieves 96.3%, outperforming both SimCLR (pre-trained on ImageNet without labels) and a ResNet-152 (pre-trained on ImageNet with labels). In fact, on all three datasets a linear classifier fit to the representations of iGPT-L outperforms the end-to-end supervised training of a WideResNet baseline.\nNote that our model is trained at the same input resolution (IR) as CIFAR, whereas models trained at the standard Im-ageNet IR may experience distribution shock upon linear evaluation. As a counterpoint, though STL-10 has an IR of 96 2 \u00d7 3, we still outperform AMDIM-L when we downsample to 32 2 \u00d7 3 before linear probing. We also note that fine-tuning should allow models trained at high IR to adjust to low resolution input.", "publication_ref": [], "figure_ref": [], "table_ref": ["tab_0"]}, {"heading": "Linear Probes on ImageNet", "text": "Recently, there has been a resurgence of interest in unsupervised and self-supervised learning on ImageNet, evaluated using linear probes on ImageNet. This is a particularly difficult setting for us, since we cannot efficiently train at the standard ImageNet input resolution (IR). Indeed, when training iGPT-L with a model resolution (MR) of 32 2 , we achieve only 60.3% best-layer linear probe accuracy. As with CIFAR-10, scale is critical to our approach: iGPT- M achieves 54.5% accuracy and iGPT-S achieves 41.9% accuracy.\nThe first obvious optimization is to increase MR while staying within accelerator memory limits. With a MR of 48 2 , iGPT-L achieves a best-layer accuracy of 65.2% using 1536 features and with a MR of 64 2 , iGPT-XL achieves a bestlayer accuracy of 68.7% using 3072 features.\nSince contrastive methods report their best results on 8192 features, we would ideally evaluate iGPT with an embedding dimension 8192 for comparison. Training such a model is prohibitively expensive, so we instead concatenate features from multiple layers as an approximation. However, our features tend to be correlated across layers, so we need more of them to be competitive. If we concatenate features from 5 layers centered at the best single layer of iGPT-XL, we achieve an accuracy of 72.0% using 15360 features, which is competitive with recent contrastive learning approaches (Table 2). Note that we require more parameters and compute to achieve this accuracy, but we work at low resolution and without utilizing knowledge of the 2D input structure.", "publication_ref": [], "figure_ref": [], "table_ref": ["tab_1"]}, {"heading": "Full Fine-tuning", "text": "To achieve even higher accuracy on downstream tasks, we adapt the entire model for classification through fine-tuning. Building off of the previous analysis, we tried attaching the classification head to the layer with the best representations. Though this setup trains faster than one with the head attached at the end, the latter is able to leverage greater model depth and eventually outperforms.\nOn CIFAR-10, iGPT-L achieves 99.0% accuracy and on CIFAR-100, it achieves 88.5% accuracy after fine-tuning. We outperform AutoAugment, the best supervised model on these datasets, though we do not use sophisticated data augmentation techniques. In fact, 99.0% ties GPipe, the best model which pre-trains using ImageNet labels.\nOn ImageNet, we achieve 66.3% accuracy after fine-tuning at MR 32 2 , a bump of 6% over linear probing. When finetuning at MR 48 2 , we achieve 72.6% accuracy, with a similar 7% bump over linear probing. However, our models still slightly underperform Isometric Neural Nets (Sandler et al., 2019), which achieves 70.2% at an IR of 28 2 \u00d7 3.\nFinally, as a baseline for ImageNet fine-tuning, we train the classification objective from a random initialization. At MR 48 2 , a model with tuned learning rate and dropout achieves 53.2% after 18 epochs, 19.4% worse than the pretrained model. Comparatively, the pre-trained model is much quicker to fine-tune, achieving the same 53.2% loss in roughly a single epoch.\nWhen fine-tuning, it is important to search over learning rates again, as the optimal learning rate on the joint training objective is often an order of magnitude smaller than that for pre-training. We also tried regularizing with dropout, though we did not observe any clear benefits. It is easy to overfit the classification objective on small datasets, so we employ early stopping based on validation accuracy.", "publication_ref": ["b61"], "figure_ref": [], "table_ref": []}, {"heading": "BERT", "text": "Given the success of BERT in language, we train iGPT-L at an input resolution of 32 2 \u00d7 3 and a model resolution of 32 2 (Figure 4). On CIFAR-10, we observe that linear probe accuracy at every layer is worse than that of the autoregressive model, with best-layer performance more than 1% lower. Best-layer accuracy on ImageNet is 6% lower.\nHowever, during fine-tuning, BERT makes up much of this gap. A fully fine-tuned CIFAR-10 model achieves 98.6% We see that auto-regressive models produce much better features than BERT models after pre-training, but BERT models catch up after fine-tuning.\naccuracy, only 0.4% behind its auto-regressive counterpart, while a fully fine-tuned ImageNet model achieves 66.5%, slightly surpassing auto-regressive performance.\nFinally, because inputs to the BERT model are masked at training time, we must also mask them at evaluation time to keep inputs in-distribution. This masking corruption may hinder the BERT model's ability to correctly predict image classes. Therefore, we also try an evaluation scheme where we sample 5 independent masks for each input and take the modal prediction, breaking ties at random. In this setting, CIFAR-10 results are largely unchanged, but on ImageNet, we gain almost 1% on our linear probes and fine-tunes.", "publication_ref": [], "figure_ref": ["fig_1"], "table_ref": []}, {"heading": "Low-Data CIFAR-10 Classification", "text": "Evaluations of unsupervised representations often reuse supervised learning datasets which have thousands to millions of labeled examples. However, a representation which has robustly encoded a semantic concept should be exceedingly data efficient. As inspiration, we note that humans are able to reliably recognize even novel concepts with a single example (Carey and Bartlett 1978). This motivates evaluating performance in a low-data regime as well. It is also a more realistic evaluation setting for the potential practical usefulness of an approach since it better matches the common real-world scenario of an abundance of raw data but a lack of labels.\nIn contrast with recent approaches for low-data classification, we do not make use of pseudo-labeling or data augmentation. Instead, we work directly on a subset of the raw supervised dataset, extracting features using our pre-trained model, and training a linear classifier on those features.  (Tarvainen & Valpola, 2017) and MixMatch (Berthelot et al., 2019) but still underperforms the state of the art methods (Xie et al., 2019;Sohn et al., 2020). Our approach to semi-supervised learning is very simple since we only fit a logistic regression classifier on iGPT-L's features without any data augmentation or fine-tuning -a significant difference from specially designed semi-supervised approaches. Other results reported from FixMatch (Sohn et al., 2020). As is standard in the low-data setting, we sample 5 random subsets and report mean and standard deviation accuracies (Table 4). On CIFAR-10, we find that with 4 labels per class, we achieve 73.2% accuracy outperforming MixMatch with much lower variance between runs and with 25 labels per class, we achieve 87.6% accuracy, though still significantly lower than the state of the art, FixMatch.\nAlthough we have established that large models are necessary for producing good representations, large models are also difficult to fine-tune in the ultra-low data regime. Indeed, we find that iGPT-L quickly memorizes a 40-example training set and fails to generalize well, achieving only 42.1% accuracy. We expect adapting recent approaches to semi-supervised learning will help in this setting.", "publication_ref": ["b64", "b3", "b71", "b62", "b62"], "figure_ref": [], "table_ref": ["tab_3"]}, {"heading": "Related Work", "text": "Many generative models have been developed and evaluated for their representation learning capabilities. Notably, GANs (Goodfellow et al., 2014;Radford et al., 2015;Donahue et al., 2016) and VAEs (Kingma & Welling, 2013;Kingma et al., 2014;Higgins et al., 2017) have been wellstudied.\nAs of yet, most generative model based approaches have not been competitive with supervised and self-supervised methods in the image domain. A notable exception is Big-BiGAN (Donahue & Simonyan, 2019) which first demonstrated that sufficiently high fidelity generative models learn image representations which are competitive with other selfsupervised methods.\nMany self-supervised approaches focus on designing auxiliary objectives which support the learning of useful representations without attempting to directly model the input data. Examples include surrogate classification (Dosovit-skiy et al., 2015), jigsaw puzzle solving (Noroozi & Favaro, 2016), and rotation prediction (Gidaris et al., 2018). A cluster of similar approaches based on contrastive losses comparing various views and transformations of input images have recently driven significant progress in self-supervised learning (Hjelm et al., 2018;Bachman et al., 2019;Tian et al., 2019).\nAmong contrastive approaches, our work is most similar to Contrast Predictive Coding (Oord et al., 2018) which also utilizes a autoregressive prediction objective, but in a learned latent space, and to Selfie (Trinh et al., 2019) which trains a bidirectional self-attention architecture on top of a standard convolutional network to differentiate correct vs wrong patches.\nOur work is directly inspired by the success of generative pre-training methods developed for Natural Language Processing. These methods predict some parts of a piece of text conditioned on other parts. Our work explores two training objectives in this framework, autoregressive prediction as originally explored for modern neural sequence models by Dai & Le (2015), and a denoising objective, similar to BERT (Devlin et al., 2018). The context in-painting approach of Pathak et al. (2016) also explores pre-training by predicting corruptions but predicts large regions of high-resolution images. Kolesnikov et al. (2019); Goyal et al. (2019) conducted rigorous investigations of existing self-supervised methods. Several of our findings are consistent with their results, including the benefits of scale and the non-monotonic performance of representations with depth in certain architectures.\nExpressive autoregressive models tractably optimizing likelihood were first applied to images by Uria et al. (2013) and popularized by Oord et al. (2016) serving for the basis of several papers similarly adapting transformers to the problem of generative image modeling (Parmar et al., 2018;Child et al., 2019). Ke et al. (2018) introduced the pixel-by-pixel CIFAR10 task and first benchmarked the performance of a 1D sequence transformer on a competitive image classification dataset. Rives et al. (2019) similarly investigates whether the recent success of unsupervised pre-training in NLP applies to other domains, observing promising results on protein sequence data.", "publication_ref": ["b19", "b55", "b13", "b33", "b34", "b24", "b12", "b47", "b16", "b26", "b1", "b65", "b49", "b67", "b8", "b9", "b52", "b36", "b20", "b68", "b48", "b51", "b5", "b31", "b60"], "figure_ref": [], "table_ref": []}, {"heading": "Discussion and Conclusion", "text": "Our results suggest that generative image modeling continues to be a promising route to learn high-quality unsupervised image representations. Simply predicting pixels learns state of the art representations for low resolution datasets.\nIn high resolution settings, our approach is also competitive with other self-supervised results on ImageNet.\nHowever, our experiments also demonstrate several areas for improvement. We currently model low resolution inputs with self-attention. By comparison, most other selfsupervised results use CNN based encoders that easily work with high resolution images. It is not immediately obvious how to best bridge the gap between performant autoregressive and discriminative models. Additionally, we observed that our approach requires large models in order to learn high quality representations. iGPT-L has 2 to 3 times as many parameters as similarly performing models on Ima-geNet and uses more compute.\nAlthough dense self-attention was a deliberate choice for this work due to it being domain agnostic and widely used in NLP, it becomes very memory and computationally expensive due to its quadratic scaling with sequence length. We mitigated this via the context reduction techniques discussed in section 3.2 but it is still a significant limitation. Future work could instead address this via architectural changes by exploring more efficient self-attention approaches. Several promising techniques have recently been developed such as local 2D relative attention (Bello et al., 2019;Ramachandran et al., 2019), sparse attention patterns (Child et al., 2019), locality sensitive hashing (Kitaev et al., 2020), and multiscale modeling (Menick & Kalchbrenner, 2018).\nFinally, our results, considered together with Donahue & Simonyan (2019), suggest revisiting the representation learning capabilities of other families of generative models such as flows (Dinh et al., 2014;Kingma & Dhariwal, 2018) and VAEs in order to study whether they show similarly competitive representation learning capabilities.", "publication_ref": ["b2", "b58", "b5", "b35", "b42", "b12", "b10", "b32"], "figure_ref": [], "table_ref": []}, {"heading": "A. Experimental details", "text": "A.1. Hyperparameters\nIn Table 5, we present the learning rates used to train each model in the paper. When using too high a learning rate, we observe an irrecoverable loss spike early on in training. Conversely, with too low a learning rate, training is stable but loss improves slowly and eventually underperforms. As we increase model size, the irrecoverable loss spike occurs at even lower learning rates. This motivates our procedure of sequentially searching learning rates from large to small and explains why larger models use lower learning rates than smaller models at fixed input resolution.\nWe used an Adam \u03b2 2 of 0.95 instead of the default 0.999 because the latter causes loss spikes during training. We did not use weight decay because applying a small weight decay of 0.01 did not change representation quality.\nOn iGPT-S, we found small gains in representation quality from using float32 instead of float16, from untying the token embedding matrix and the matrix producing token logits, and from zero initializing the matrices producing token and class logits. We applied these settings to all models.\nWhen training BERT models, one additional hyperparameter is the masking probability, set to 15% in Devlin et al. (2018). We also tried higher masking rates of 20%, 25%, 30%, and 35%, finding that 20% matched the performance of 15%, though higher probabilities decreased performance.", "publication_ref": ["b9"], "figure_ref": [], "table_ref": ["tab_5"]}], "references": [{"ref_id": "b0", "title": "", "journal": "", "year": "2016", "authors": "J L Ba; J R Kiros; G Hinton"}, {"ref_id": "b1", "title": "Learning representations by maximizing mutual information across views", "journal": "", "year": "2019", "authors": "P Bachman; R D Hjelm; W Buchwalter"}, {"ref_id": "b2", "title": "Attention augmented convolutional networks", "journal": "", "year": "2019", "authors": "I Bello; B Zoph; A Vaswani; J Shlens; Q V Le"}, {"ref_id": "b3", "title": "A holistic approach to semi-supervised learning", "journal": "", "year": "2019", "authors": "D Berthelot; N Carlini; I Goodfellow; N Papernot; A Oliver; C A Raffel;  Mixmatch"}, {"ref_id": "b4", "title": "A simple framework for contrastive learning of visual representations", "journal": "", "year": "2020", "authors": "T Chen; S Kornblith; M Norouzi; G Hinton"}, {"ref_id": "b5", "title": "Generating long sequences with sparse transformers", "journal": "", "year": "2019", "authors": "R Child; S Gray; A Radford; I Sutskever"}, {"ref_id": "b6", "title": "An analysis of singlelayer networks in unsupervised feature learning", "journal": "", "year": "2011", "authors": "A Coates; A Ng; H Lee"}, {"ref_id": "b7", "title": "Learning augmentation strategies from data", "journal": "", "year": "2019", "authors": "E Cubuk; B Zoph; D Mane; V Vasudevan; Q V Le;  Autoaugment"}, {"ref_id": "b8", "title": "Semi-supervised sequence learning", "journal": "", "year": "2015", "authors": "A M Dai; Q V Le"}, {"ref_id": "b9", "title": "Pre-training of deep bidirectional transformers for language understanding", "journal": "", "year": "2018", "authors": "J Devlin; M.-W Chang; K Lee; K Toutanova;  Bert"}, {"ref_id": "b10", "title": "Non-linear independent components estimation", "journal": "", "year": "2014", "authors": "L Dinh; D Krueger; Y Bengio;  Nice"}, {"ref_id": "b11", "title": "Unsupervised visual representation learning by context prediction", "journal": "", "year": "2015", "authors": "C Doersch; A Gupta; A A Efros"}, {"ref_id": "b12", "title": "Large scale adversarial representation learning", "journal": "", "year": "2019", "authors": "J Donahue; K Simonyan"}, {"ref_id": "b13", "title": "Adversarial feature learning", "journal": "", "year": "2016", "authors": "J Donahue; P Kr\u00e4henb\u00fchl; Darrell ; T "}, {"ref_id": "b14", "title": "Discriminative unsupervised feature learning with exemplar convolutional neural networks", "journal": "", "year": "2015", "authors": "A Dosovitskiy; P Fischer; J T Springenberg; M Riedmiller; T Brox"}, {"ref_id": "b15", "title": "Why does unsupervised pretraining help deep learning", "journal": "Journal of Machine Learning Research", "year": "2010-02", "authors": "D Erhan; Y Bengio; A Courville; P.-A Manzagol; P Vincent; S Bengio"}, {"ref_id": "b16", "title": "Unsupervised representation learning by predicting image rotations", "journal": "", "year": "2018", "authors": "S Gidaris; P Singh; N Komodakis"}, {"ref_id": "b17", "title": "Understanding the difficulty of training deep feedforward neural networks", "journal": "", "year": "2010", "authors": "X Glorot; Y Bengio"}, {"ref_id": "b18", "title": "The reversible residual network: Backpropagation without storing activations", "journal": "", "year": "2017", "authors": "A N Gomez; M Ren; R Urtasun; R B Grosse"}, {"ref_id": "b19", "title": "Generative adversarial nets", "journal": "", "year": "2014", "authors": "I Goodfellow; J Pouget-Abadie; M Mirza; B Xu; D Warde-Farley; S Ozair; A Courville; Y Bengio"}, {"ref_id": "b20", "title": "Scaling and benchmarking self-supervised visual representation learning", "journal": "", "year": "2019", "authors": "P Goyal; D Mahajan; A Gupta; I Misra"}, {"ref_id": "b21", "title": "Towards end-to-end speech recognition with recurrent neural networks", "journal": "", "year": "2014", "authors": "A Graves; N Jaitly"}, {"ref_id": "b22", "title": "Momentum contrast for unsupervised visual representation learning", "journal": "", "year": "2019", "authors": "K He; H Fan; Y Wu; S Xie; R Girshick"}, {"ref_id": "b23", "title": "Data-efficient image recognition with contrastive predictive coding", "journal": "", "year": "2019", "authors": "O J H\u00e9naff; A Razavi; C Doersch; S Eslami; A V Oord"}, {"ref_id": "b24", "title": "", "journal": "", "year": "2017", "authors": "I Higgins; L Matthey; A Pal; C Burgess; X Glorot; M Botvinick; S Mohamed; A Lerchner;  Betavae"}, {"ref_id": "b25", "title": "A fast learning algorithm for deep belief nets", "journal": "Neural computation", "year": "2006", "authors": "G E Hinton; S Osindero; Y.-W Teh"}, {"ref_id": "b26", "title": "Learning deep representations by mutual information estimation and maximization", "journal": "", "year": "2018", "authors": "R D Hjelm; A Fedorov; S Lavoie-Marchildon; K Grewal; P Bachman; A Trischler; Y Bengio"}, {"ref_id": "b27", "title": "Universal language model fine-tuning for text classification", "journal": "", "year": "2018", "authors": "J Howard; S Ruder"}, {"ref_id": "b28", "title": "Kernel methods match deep neural networks on timit", "journal": "IEEE", "year": "2014", "authors": "P.-S Huang; H Avron; T N Sainath; V Sindhwani; B Ramabhadran"}, {"ref_id": "b29", "title": "Efficient training of giant neural networks using pipeline parallelism", "journal": "", "year": "2019", "authors": "Y Huang; Y Cheng; A Bapna; O Firat; D Chen; M Chen; H Lee; J Ngiam; Q V Le; Y Wu"}, {"ref_id": "b30", "title": "Batch normalization: Accelerating deep network training by reducing internal covariate shift", "journal": "", "year": "2015", "authors": "S Ioffe; C Szegedy"}, {"ref_id": "b31", "title": "Sparse attentive backtracking: Temporal credit assignment through reminding", "journal": "", "year": "2018", "authors": "N R Ke; A G A P Goyal; O Bilaniuk; J Binas; M C Mozer; C Pal; Y Bengio"}, {"ref_id": "b32", "title": "Generative flow with invertible 1x1 convolutions", "journal": "", "year": "2018", "authors": "D P Kingma; P Dhariwal;  Glow"}, {"ref_id": "b33", "title": "Auto-encoding variational bayes", "journal": "", "year": "2013", "authors": "D P Kingma; M Welling"}, {"ref_id": "b34", "title": "Semi-supervised learning with deep generative models", "journal": "", "year": "2014", "authors": "D P Kingma; S Mohamed; D J Rezende; M Welling"}, {"ref_id": "b35", "title": "Reformer: The efficient transformer", "journal": "", "year": "2020", "authors": "N Kitaev; \u0141 Kaiser; A Levskaya"}, {"ref_id": "b36", "title": "Revisiting selfsupervised visual representation learning", "journal": "", "year": "2019", "authors": "A Kolesnikov; X Zhai; L Beyer"}, {"ref_id": "b37", "title": "Imagenet classification with deep convolutional neural networks", "journal": "", "year": "2012", "authors": "A Krizhevsky; I Sutskever; G E Hinton"}, {"ref_id": "b38", "title": "The neural autoregressive distribution estimator", "journal": "", "year": "2011", "authors": "H Larochelle; I Murray"}, {"ref_id": "b39", "title": "Principled hybrids of generative and discriminative models", "journal": "IEEE", "year": "2006", "authors": "J A Lasserre; C M Bishop; T P Minka"}, {"ref_id": "b40", "title": "Convolutional deep belief networks for scalable unsupervised learning of hierarchical representations", "journal": "", "year": "2009", "authors": "H Lee; R Grosse; R Ranganath; A Y Ng"}, {"ref_id": "b41", "title": "Kernel approximation methods for speech recognition", "journal": "", "year": "2017", "authors": "A May; A B Garakani; Z Lu; D Guo; K Liu; A Bellet; L Fan; M Collins; D Hsu; B Kingsbury"}, {"ref_id": "b42", "title": "Generating high fidelity images with subscale pixel networks and multidimensional upscaling", "journal": "", "year": "2018", "authors": "J Menick; N Kalchbrenner"}, {"ref_id": "b43", "title": "Distributed representations of words and phrases and their compositionality", "journal": "", "year": "2013", "authors": "T Mikolov; I Sutskever; K Chen; G S Corrado; J Dean"}, {"ref_id": "b44", "title": "Self-supervised learning of pretext-invariant representations", "journal": "", "year": "2019", "authors": "I Misra; L Van Der Maaten"}, {"ref_id": "b45", "title": "Deep belief networks for phone recognition", "journal": "", "year": "2009", "authors": "A Mohamed; G Dahl; G Hinton"}, {"ref_id": "b46", "title": "Rectified linear units improve restricted boltzmann machines", "journal": "", "year": "2010", "authors": "V Nair; G E Hinton"}, {"ref_id": "b47", "title": "Unsupervised learning of visual representations by solving jigsaw puzzles", "journal": "Springer", "year": "2016", "authors": "M Noroozi; P Favaro"}, {"ref_id": "b48", "title": "Pixel recurrent neural networks", "journal": "", "year": "2016", "authors": "A Oord; N Kalchbrenner; K Kavukcuoglu"}, {"ref_id": "b49", "title": "Representation learning with contrastive predictive coding", "journal": "", "year": "2018", "authors": "A Oord; Y Li; O Vinyals"}, {"ref_id": "b50", "title": "An analysis of unsupervised pre-training in light of recent advances", "journal": "", "year": "2014", "authors": "T L Paine; P Khorrami; W Han; T S Huang"}, {"ref_id": "b51", "title": "", "journal": "", "year": "2018", "authors": "N Parmar; A Vaswani; J Uszkoreit; \u0141 Kaiser; N Shazeer; A Ku; Tran ; D "}, {"ref_id": "b52", "title": "Context encoders: Feature learning by inpainting", "journal": "", "year": "2016", "authors": "D Pathak; P Krahenbuhl; J Donahue; T Darrell; A A Efros"}, {"ref_id": "b53", "title": "Scikit-learn: Machine learning in Python", "journal": "Journal of Machine Learning Research", "year": "2011", "authors": "F Pedregosa; G Varoquaux; A Gramfort; V Michel; B Thirion; O Grisel; M Blondel; P Prettenhofer; R Weiss; V Dubourg; J Vanderplas; A Passos; D Cournapeau; M Brucher; M Perrot; E Duchesnay"}, {"ref_id": "b54", "title": "Deep contextualized word representations", "journal": "", "year": "2018", "authors": "M E Peters; M Neumann; M Iyyer; M Gardner; C Clark; K Lee; L Zettlemoyer"}, {"ref_id": "b55", "title": "Unsupervised representation learning with deep convolutional generative adversarial networks", "journal": "", "year": "2015", "authors": "A Radford; L Metz; S Chintala"}, {"ref_id": "b56", "title": "Improving language understanding by generative pretraining", "journal": "", "year": "2018", "authors": "A Radford; K Narasimhan; T Salimans; I Sutskever"}, {"ref_id": "b57", "title": "Language models are unsupervised multitask learners", "journal": "", "year": "2019", "authors": "A Radford; J Wu; R Child; D Luan; D Amodei; I Sutskever"}, {"ref_id": "b58", "title": "Stand-alone self-attention in vision models", "journal": "", "year": "2019", "authors": "P Ramachandran; N Parmar; A Vaswani; I Bello; A Levskaya; J Shlens"}, {"ref_id": "b59", "title": "Video (language) modeling: a baseline for generative models of natural videos", "journal": "", "year": "2014", "authors": "M Ranzato; A Szlam; J Bruna; M Mathieu; R Collobert; S Chopra"}, {"ref_id": "b60", "title": "Biological structure and function emerge from scaling unsupervised learning to 250 million protein sequences", "journal": "bioRxiv", "year": "2019", "authors": "A Rives; S Goyal; J Meier; D Guo; M Ott; C L Zitnick; J Ma; Fergus ; R "}, {"ref_id": "b61", "title": "Non-discriminative data or weak model? on the relative importance of data and model resolution", "journal": "", "year": "2019", "authors": "M Sandler; J Baccash; A Zhmoginov; A Howard"}, {"ref_id": "b62", "title": "Fixmatch: Simplifying semi-supervised learning with consistency and confidence", "journal": "", "year": "2020", "authors": "K Sohn; D Berthelot; C.-L Li; Z Zhang; N Carlini; E D Cubuk; A Kurakin; H Zhang; C Raffel"}, {"ref_id": "b63", "title": "Rethinking model scaling for convolutional neural networks", "journal": "", "year": "2019", "authors": "M Tan; Q V Le;  Efficientnet"}, {"ref_id": "b64", "title": "Mean teachers are better role models: Weight-averaged consistency targets improve semi-supervised deep learning results", "journal": "", "year": "2017", "authors": "A Tarvainen; H Valpola"}, {"ref_id": "b65", "title": "Contrastive multiview coding", "journal": "", "year": "2019", "authors": "Y Tian; D Krishnan; P Isola"}, {"ref_id": "b66", "title": "80 million tiny images: A large data set for nonparametric object and scene recognition. IEEE transactions on pattern analysis and machine intelligence", "journal": "", "year": "2008", "authors": "A Torralba; R Fergus; W T Freeman"}, {"ref_id": "b67", "title": "Selfsupervised pretraining for image embedding", "journal": "", "year": "2019", "authors": "T H Trinh; M.-T Luong; Q V Le;  Selfie"}, {"ref_id": "b68", "title": "The realvalued neural autoregressive density-estimator", "journal": "", "year": "2013", "authors": "B Uria; I Murray; H Larochelle;  Rnade"}, {"ref_id": "b69", "title": "Attention is all you need", "journal": "", "year": "2017", "authors": "A Vaswani; N Shazeer; N Parmar; J Uszkoreit; L Jones; A N Gomez; \u0141 Kaiser; I Polosukhin"}, {"ref_id": "b70", "title": "Extracting and composing robust features with denoising autoencoders", "journal": "", "year": "2008", "authors": "P Vincent; H Larochelle; Y Bengio; P.-A Manzagol"}, {"ref_id": "b71", "title": "", "journal": "", "year": "2019", "authors": "Q Xie; Z Dai; E Hovy; M.-T Luong; Q V Le"}, {"ref_id": "b72", "title": "", "journal": "", "year": "2016", "authors": "S Zagoruyko; N Komodakis"}, {"ref_id": "b73", "title": "Visualizing and understanding convolutional networks", "journal": "Springer", "year": "2014", "authors": "M D Zeiler; R Fergus"}], "figures": [{"figure_label": "3", "figure_type": "figure", "figure_id": "fig_0", "figure_caption": "Figure 3 .3Figure 3. Plot of representation quality as a function of validation generative loss. Each line tracks a model throughout generative pre-training: the dotted markers denote checkpoints at steps 65K, 131K, 262K, 524K, and 1000K. The positive slope suggests a link between improved generative performance and improved representation quality. Larger models produce better representations than smaller ones both at the end of training and at the same value of validation loss. iGPT-XL is not shown since it was trained on a different dataset.", "figure_data": ""}, {"figure_label": "4", "figure_type": "figure", "figure_id": "fig_1", "figure_caption": "Figure 4 .4Figure 4. Comparison of auto-regressive pre-training with BERT pre-training using iGPT-L at an input resolution of 32 2 \u00d7 3. Blue bars display linear probe accuracy and orange bars display finetune accuracy. Bold colors show the performance boost from ensembling BERT masks.We see that auto-regressive models produce much better features than BERT models after pre-training, but BERT models catch up after fine-tuning.", "figure_data": ""}, {"figure_label": "1", "figure_type": "table", "figure_id": "tab_0", "figure_caption": "Comparing linear probe accuracies between our models and state-of-the-art models utilizing unsupervised ImageNet transfer or supervised ImageNet transfer.", "figure_data": "ModelAcc Unsup Transfer Sup TransferCIFAR-10 ResNet-152 SimCLR iGPT-L94 95.3 96.3\u221a \u221a\u221aCIFAR-100 ResNet-152 78.0 SimCLR 80.2 iGPT-L 82.8\u221a \u221a\u221aSTL-10 AMDIM-L iGPT-L94.2 95.5\u221a \u221a"}, {"figure_label": "2", "figure_type": "table", "figure_id": "tab_1", "figure_caption": "Comparing linear probe accuracies between our models and state-of-the-art self-supervised models. A blank input resolution (IR) corresponds to a model working at standard ImageNet resolution. We report the best performing configuration for each contrastive method, finding that our models achieve comparable performance.", "figure_data": "MethodIRParams (M) Features AccRotationorig.86819255.4iGPT-L32 2 \u202231362153660.3BigBiGANorig.86819261.3iGPT-L48 2 \u202231362153665.2AMDIMorig.626819268.1MoCoorig.375819268.6iGPT-XL64 2 \u202236801307268.7SimCLRorig.24204869.3CPC v2orig.303819271.5iGPT-XL64 2 \u2022368011536072.0SimCLRorig.375819276.5"}, {"figure_label": "3", "figure_type": "table", "figure_id": "tab_2", "figure_caption": "Comparing fine-tuning performance between our models and state-of-the-art models utilizing supervised ImageNet transfer. We also include AutoAugment, the best performing model trained end-to-end on CIFAR. Table results: AutoAugment(Cubuk et al., 2019), SimCLR(Chen et al., 2020), GPipe(Huang et al., 2019), ", "figure_data": "EfficentNet (Tan & Le, 2019)ModelAcc Unsup Transfer Sup TransferCIFAR-10AutoAugment 98.5 SimCLR 98.6 GPipe 99.0 iGPT-L 99.0\u221a \u221a\u221aCIFAR-100 iGPT-L SimCLR88.5 89.0\u221a \u221aAutoAugment 89.3 EfficientNet 91.7\u221a"}, {"figure_label": "4", "figure_type": "table", "figure_id": "tab_3", "figure_caption": "Comparing performance on low-data CIFAR-10. By leveraging many unlabeled ImageNet images, iGPT-L is able to outperform methods such as Mean Teacher", "figure_data": ""}, {"figure_label": "5", "figure_type": "table", "figure_id": "tab_5", "figure_caption": "Learning rates used for each model, objective, and input resolution (IR) combination.", "figure_data": "ModelObjectiveIRLearning RateiGPT-Sauto-regressive 32 2 \u00d7 30.003iGPT-Mauto-regressive 32 2 \u00d7 30.003iGPT-Lauto-regressive 32 2 \u00d7 30.001iGPT-Lauto-regressive 48 2 \u00d7 30.01iGPT-XL auto-regressive 64 2 \u00d7 30.0003iGPT-SBERT32 2 \u00d7 30.01iGPT-MBERT32 2 \u00d7 30.003iGPT-LBERT32 2 \u00d7 30.001"}], "formulas": [{"formula_id": "formula_0", "formula_text": "p(x) = n i=1 p(x \u03c0i |x \u03c01 , ..., x \u03c0i\u22121 , \u03b8)", "formula_coordinates": [2.0, 354.48, 393.24, 139.91, 30.32]}, {"formula_id": "formula_1", "formula_text": "L AR = E x\u223cX [\u2212 log p(x)]", "formula_coordinates": [2.0, 375.27, 480.18, 98.34, 15.52]}, {"formula_id": "formula_2", "formula_text": "L BERT = E x\u223cX E M i\u2208M \u2212 log p x i |x [1,n]\\M", "formula_coordinates": [2.0, 331.01, 584.73, 176.9, 20.06]}, {"formula_id": "formula_3", "formula_text": "n l = layer norm(h l ) a l = h l + multihead attention(n l ) h l+1 = a l + mlp(layer norm(a l ))", "formula_coordinates": [3.0, 98.32, 97.78, 148.23, 44.08]}, {"formula_id": "formula_4", "formula_text": "f L = n L i i", "formula_coordinates": [3.0, 148.34, 551.57, 47.71, 12.69]}, {"formula_id": "formula_5", "formula_text": "L GEN + L CLF L GEN \u2208 {L AR , L", "formula_coordinates": [3.0, 55.44, 628.55, 147.44, 27.33]}, {"formula_id": "formula_6", "formula_text": "f l = n l i i", "formula_coordinates": [3.0, 403.11, 89.94, 42.16, 12.69]}], "doi": ""}