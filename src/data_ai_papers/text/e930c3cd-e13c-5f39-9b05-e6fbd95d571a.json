{"title": "Structural-RNN: Deep Learning on Spatio-Temporal Graphs", "authors": "Ashesh Jain; Amir R Zamir; Silvio Savarese; Ashutosh Saxena", "pub_date": "2016-04-11", "abstract": "Deep Recurrent Neural Network architectures, though remarkably capable at modeling sequences, lack an intuitive high-level spatio-temporal structure. That is while many problems in computer vision inherently have an underlying high-level structure and can benefit from it. Spatiotemporal graphs are a popular tool for imposing such highlevel intuitions in the formulation of real world problems. In this paper, we propose an approach for combining the power of high-level spatio-temporal graphs and sequence learning success of Recurrent Neural Networks (RNNs). We develop a scalable method for casting an arbitrary spatiotemporal graph as a rich RNN mixture that is feedforward, fully differentiable, and jointly trainable. The proposed method is generic and principled as it can be used for transforming any spatio-temporal graph through employing a certain set of well defined steps. The evaluations of the proposed approach on a diverse set of problems, ranging from modeling human motion to object interactions, shows improvement over the state-of-the-art with a large margin. We expect this method to empower new approaches to problem formulation through high-level spatio-temporal graphs and Recurrent Neural Networks.", "sections": [{"heading": "Introduction", "text": "The world we live in is inherently structured. It is comprised of components that interact with each other in space and time, leading to a spatio-temporal composition. Utilizing such structures in problem formulation allows domainexperts to inject their high-level knowledge in learning frameworks. This has been the incentive for many efforts in computer vision and machine learning, such as Logic Networks [46], Graphical Models [28], and Structured SVMs [26]. Structures that span over both space and time (spatio-temporal) are of particular interest to computer vision and robotics communities. Primarily, interactions between humans and environment in real world are inherently spatio-temporal in nature. For example, during a cooking activity, humans interact with multiple objects both in space and through time. Similarly, parts of human body (arms, legs, etc.) have individual functions but work with each other in concert to generate physically sensible motions. Hence, bringing high-level spatio-temporal structures and rich sequence modeling capabilities together is of particular importance for many applications.\nThe notable success of RNNs has proven their capability on many end-to-end learning tasks [19,14,10,66]. However, they lack a high-level and intuitive spatio-temporal structure though they have been shown to be successful at modeling long sequences [49,43,52]. Therefore, augmenting a high-level structure with learning capability of RNNs leads to a powerful tool that has the best of both worlds. Spatio-temporal graphs (st-graphs) are a popular [39,37,4,11,32,65,22] general tool for representing such high-level spatio-temporal structures. The nodes of the graph typically represent the problem components, and the edges capture their spatio-temporal interactions. To achieve the above goal, we develop a generic tool for transforming an arbitrary st-graph into a feedforward mixture of RNNs, named structural-RNN (S-RNN). Figure 1 schematically illustrates this process, where a sample spatio-temporal problem is shown at the bottom, the corresponding st-graph representation is shown in the middle, and our RNN mixture counterpart of the st-graph is shown at the top.\nIn high-level steps, given an arbitrary st-graph, we first roll it out in time and decompose it into a set of contributing factor components. The factors identify the independent components that collectively determine one decision and are derived from both edges and nodes of the st-graph. We then semantically group the factor components and represent each group using one RNN, which results in the desired RNN mixture. The main challenges of this transformation problem are: 1) making the RNN mixture as rich as possible to enable learning complex functions, yet 2) keeping the RNN mixture scalable with respect to size of the input st-graph. In order to make the resulting RNN mixture rich, we liberally represent each spatio-temporal factor (including node factors, temporal edge factors, and spatiotemporal edge factors) using one RNN. On the other hand, to keep the overall mixture scalable but not lose the essential learning capacity, we utilize \"factor sharing\" (aka clique templates [54,42,53]) and allow the factors with similar semantic functions to share an RNN. This results in a rich and scalable feedforward mixture of RNNs that is equivalent to the provided st-graph in terms of input, output, and spatiotemporal relationships. The mixture is also fully differentiable, and therefore, can be trained jointly as one entity.\nThe proposed method is principled and generic as the transformation is based on a set of well defined steps and it is applicable to any problem that can be formulated as st-graphs (as defined in Section 3). Several previous works have attempted solving specific problems using a collection of RNNs [49,12,61,10,5], but they are almost unanimously task-specific. They also do not utilize mechanisms similar to factorization or factor sharing in devising their architecture to ensure richness and scalability.\nS-RNN is also modular, as it is enjoying an underlying high-level structure. This enables easy high-level manipulations which are basically not possible in unstructured (plain-vanilla) RNNs (e.g., we will experimentally show forming a feasible hybrid human motion by mixing parts of different motion styles -Sec 4.2 ). We evaluate the proposed approach on a diverse set of spatio-temporal problems (human pose modeling and forecasting, human-object interaction, and driver decision making), and show significant improvements over the state of the art on each problem. We also study complexity and convergence properties of S-RNN and provide further experimental insights by visualizing its memory cells that reveals some cells interestingly represent certain semantic operations. The code of the entire framework that accepts a st-graph as the input and yields the output RNN mixture is available at the http://asheshjain.org/srnn.\nThe contribution of this paper are: 1) a generic method for casting an arbitrary st-graph as a rich, scalable, and jointly trainable RNN mixture, 2) in defence of structured approaches, we show S-RNN significantly outperforms its unstructured (plain-vanilla) RNN counterparts, 3) in defence of RNNs, we show on several diverse spatio-temporal problems that modeling structure with S-RNN outperforms the non-deep learning based structured counterparts.", "publication_ref": ["b45", "b27", "b25", "b18", "b13", "b9", "b65", "b48", "b42", "b51", "b38", "b36", "b3", "b10", "b31", "b64", "b21", "b53", "b41", "b52", "b48", "b11", "b60", "b9", "b4"], "figure_ref": ["fig_0"], "table_ref": []}, {"heading": "Related Work", "text": "We give a categorized overview of the related literature. In general, three main characteristics differentiate our work from existing techniques: being generic and not restricted to a specific problem, providing a principled method for transforming a st-graph into a scalable rich feedforward RNN mixture, and being jointly trainable.\nSpatio-temporal problems. Problems that require spatial and temporal reasoning are very common in robotics and computer vision. Examples include human activity recognition and segmentation from videos [50,47,62,60,8,25,37,36], context-rich human-object interactions [39,33,29,20,30], modeling human motion [14,57,56] etc. Spatio-temporal reasoning also finds application in assistive robots, driver understanding, and object recognition [65,22,44,23,11]. In fact most of our daily activities are spatio-temporal in nature. With growing interests in rich interactions and robotics, this form of reasoning will become even more important. We evaluate our generic method on three context-rich spatio-temporal problems: (i) Human motion modeling [14]; (ii) Human-object interaction understanding [33]; and (iii) Driver maneuver anticipation [22].\nMixtures of deep architectures. Several previous works build multiple networks and wire them together in order to capture some complex structure (or interactions) in the problem with promising results on applications such as activity detection, scene labeling, image captioning, and object detection [12,5,9,16,49,61]. However, such architectures are mostly hand designed for specific problems, though they demonstrate the benefit in using a modular deep architecture. Recursive Neural Networks [17] are, on the other hand, generic feedforward architectures, but for problems with recursive structure such as parsing of natural sentences and scenes [48]. Our work is a remedy for problems expressed as spatio-temporal graphs. For a new spatiotemporal problem in hand, all a practitioner needs to do is to express their intuition about the problem as an st-graph.\nDeep learning with graphical models. Many works have addressed deep networks with graphical models for structured prediction tasks. Bengio et al. [1] combined CNNs with HMM for hand writing recognition. Tompson et al. [58] jointly train CNN and MRF for human pose estimation. Chen et al. [7] \nx\nx have addressed end-to-end image segmentation with fully connected CRF [66,41,15,40]. Several works follow a two-stage approach and decouple the deep network from CRF. They have been applied to multiple problems including image segmentation, pose estimation, document processing [64,6,38,3] etc. All of these works advocate and well demonstrate the benefit in exploiting the structure in the problem together with rich deep architectures. However, they largely do not address spatio-temporal problems and the proposed architectures are task-specific.\nE E G = (V, E , E ) Spatio-temporal edge Temporal edge + 1 \u03a8 \u03a8 \u03a8 ,\u03a8 , \u03a8 \u03a8 , \u03a8 , \u03a8 , \u03a8 , Human Object Object\nConditional Random Fields (CRF) model dependencies between the outputs by learning a joint distribution over them. They have been applied to many applications [34,13,45] including st-graphs which are commonly modeled as spatio-temporal CRF [39,33,65,11]. In our approach, we adopt st-graphs as a general graph representation and embody it using an RNN mixture architecture. Unlike CRF, our approach is not probabilistic and is not meant to model the joint distribution over the outputs. S-RNN instead learns the dependencies between the outputs via structural sharing of RNNs between the outputs.", "publication_ref": ["b49", "b46", "b61", "b59", "b7", "b24", "b36", "b35", "b38", "b32", "b28", "b19", "b29", "b13", "b56", "b55", "b64", "b21", "b43", "b22", "b10", "b13", "b32", "b21", "b11", "b4", "b8", "b15", "b48", "b60", "b16", "b47", "b0", "b57", "b6", "b65", "b40", "b14", "b39", "b63", "b5", "b37", "b2", "b33", "b12", "b44", "b38", "b32", "b64", "b10"], "figure_ref": [], "table_ref": []}, {"heading": "Structural-RNN architectures", "text": "In this section we describe our approach for building structural-RNN (S-RNN) architectures. We start with a st-graph, decompose it into a set of factor components, then represent each factor using a RNN. The RNNs are interconnected in a way that the resulting architecture captures the structure and interactions of the st-graph.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Representation of spatio-temporal graphs", "text": "Many applications that require spatial and temporal reasoning are modeled using st-graphs [4,11,33,65,22]. We represent a st-graph with G = (V, E S , E T ), whose structure (V, E S ) unrolls over time through edges E T . Figure 2a shows an example st-graph capturing human-object interactions during an activity. The nodes v \u2208 V and edges e \u2208 E S \u222a E T of the st-graph repeats over time. In particular, Figure 2b shows the same st-graph unrolled through time. In the unrolled st-graph, the nodes at a given time step t are connected with undirected spatio-temporal edge e = (u, v) \u2208 E S , and the nodes at adjacent time steps (say the node u at time t and the node v at time t + 1) are con-nected with undirected temporal edge iff (u, v) \u2208 E T . 1 Given a st-graph and the feature vectors associated with the nodes x t v and edges x t e , as shown in Figure 2b, the goal is to predict the node labels (or real value vectors) y t v at each time step t. For instance, in human-object interaction, the node features can represent the human and object poses, and edge features can their relative orientation; the node labels represent the human activity and object affordance. Label y t v is affected by both its node and its interactions with other nodes (edges), leading to an overall complex system. Such interactions are commonly parameterized with a factor graph that conveys how a (complicated) function over the st-graph factorizes into simpler functions [35]. We derive our S-RNN architecture from the factor graph representation of the st-graph. Our factor graph representation has a factor function \u03a8 v (y v , x v ) for each node and a pairwise factor \u03a8 e (y e(1) , y e(2) , x e ) for each edge. Figure 2c shows the factor graph corresponding to the st-graph in 2a. 2 Sharing factors between nodes. Each factor in the stgraph has parameters that needs to be learned. Instead of learning a distinct factor for each node, semantically similar nodes can optionally share factors. For example, all \"object nodes\" {u,w} in the st-graph can share the same node factor and parameters. This modeling choice allows enforcing parameter sharing between similar nodes. It further gives the flexibility to handle st-graphs with more nodes without increasing the number of parameters. For this purpose, we partition the nodes as C V = {V 1 , .., V P } where V p is a set of semantically similar nodes, and they all use the same node factor \u03a8 Vp . In Figure 3a we re-draw the st-graph and assign same color to the nodes sharing node factors.\nPartitioning nodes on their semantic meanings leads to a natural semantic partition of the edges,\nC E = {E 1 , .., E M },\nwhere E m is a set of edges whose nodes form a semantic pair. Therefore, all edges in the set E m share the same edge factor \u03a8 Em . For example all \"human-object 1 edges\" {(v, u), (v, w)} are modeled with the same edge factor. Sharing factors based on semantic meaning makes the overall parametrization compact. In fact, sharing parameters is necessary to address applications where the number of nodes depends on the context. For example, in human-object interaction the number of object nodes vary with the environment. Therefore, without sharing parameters between the object nodes, the model cannot generalize to new environments with more objects. For modeling flexibility, the edge factors are not shared across the edges in E S and E T . Hence, in Figure 3a, object-object (w, w) \u2208 E T temporal edge is colored differently from object-object (u, w) \u2208 E S spatio-temporal edge.\nIn order to predict the label of node v \u2208 V p , we consider its node factor \u03a8 Vp , and the edge factors connected to v in the factor graph. We define a node factor and an edge factor as neighbors if they jointly affect the label of some node in the st-graph. More formally, the node factor \u03a8 Vp and edge factor \u03a8 Em are neighbors, if there exist a node v \u2208 V p such that it connects to both \u03a8 Vp and \u03a8 Em in the factor graph. We will use this definition in building S-RNN architecture such that it captures the interactions in the st-graph.", "publication_ref": ["b3", "b10", "b32", "b64", "b21", "b0", "b34", "b1"], "figure_ref": ["fig_2", "fig_2", "fig_2", "fig_2", "fig_3", "fig_3"], "table_ref": []}, {"heading": "Structural-RNN from spatio-temporal graphs", "text": "We derive our S-RNN architecture from the factor graph representation of the st-graph. The factors in the st-graph operate in a temporal manner, where at each time step the factors observe (node & edge) features and perform some computation on those features. In S-RNN, we represent each factor with an RNN. We refer the RNNs obtained from the node factors as nodeRNNs and the RNNs obtained from the edge factors as edgeRNNs. The interactions represented by the st-graph are captured through connections between the nodeRNNs and the edgeRNNs.\nWe denote the RNNs corresponding to the node factor \u03a8 Vp and the edge factor \u03a8 Em as R Vp and R Em respectively. In order to obtain a feedforward network, we connect the edgeRNNs and nodeRNNs to form a bipartite graph G R = ({R Em }, {R Vp }, E R ). In particular, the edgeRNN R Em is connected to the nodeRNN R Vp iff the factors \u03a8 Em and \u03a8 Vp are neighbors in the st-graph, i.e. they jointly af-Algorithm 1 From spatio-temporal graph to S-RNN \nInput G = (V, E S , E T ), C V = {V 1 , ..., V P } Output S-RNN graph G R = ({R Em }, {R Vp }, E R ) 1: Semantically partition edges C E = {E 1 , ..., E M } 2: Find factor components {\u03a8 Vp , \u03a8 Em } of G 3: Represent each \u03a8\n(R Em , R Vp ) \u2208 E R iff \u2203v \u2208 V p , u \u2208 V s.t. (u, v) \u2208 E m Return G R = ({R Em }, {R Vp }, E R )\nfect the label of some node in the st-graph. To summarize, in Algorithm 1 we show the steps for constructing S-RNN architecture. Figure 3b shows the S-RNN for the human activity represented in Figure 3a. The nodeRNNs combine the outputs of the edgeRNNs they are connected to (i.e. its neighbors in the factor graph), and predict the node labels. The predictions of nodeRNNs (eg. R V1 and R V2 ) interact through the edgeRNNs (eg. R E1 ). Each edgeRNN handles a specific semantic interaction between the nodes connected in the st-grap and models how the interactions evolve over time. In the next section, we explain the inputs, outputs, and the training procedure of S-RNN.", "publication_ref": [], "figure_ref": ["fig_3", "fig_3"], "table_ref": []}, {"heading": "Training structural-RNN architecture", "text": "In order to train the S-RNN architecture, for each node of the st-graph the features associated with the node are fed into the architecture. In the forward-pass for node v \u2208 V p , the input into edgeRNN R Em is the temporal sequence of edge features x t e on the edge e \u2208 E m , where edge e is incident to node v in the st-graph. The nodeRNN R Vp at each time step concatenates the node feature x t v and the outputs of edgeRNNs it is connected to, and predicts the node label. At the time of training, the errors in prediction are backpropagated through the nodeRNN and edgeRNNs involved during the forward-pass. That way, S-RNN non-linearly combines the node and edge features associated with the nodes in order to predict the node labels.\nFigure 3c shows the forward-pass through S-RNN for the human node. Figure 4 shows a detailed architecture lay- out of the same forward-pass. The forward-pass involves the edgeRNNs R E1 (human-object edge) and R E3 (humanhuman edge). Since the human node v interacts with two object nodes {u,w}, we pass the summation of the two edge features as input to R E1 . The summation of features, as opposed to concatenation, is important to handle variable number of object nodes with a fixed architecture. Since the object count varies with environment, it is challenging to represent variable context with a fixed length feature vector. Empirically, adding features works better than mean pooling. We conjecture that addition retains the object count and the structure of the st-graph, while mean pooling averages out the number of edges. The nodeRNN R V1 concatenates the (human) node features with the outputs from edgeRNNs, and predicts the activity at each time step.\nHuman + x x x , + 1 \u2192 Sum Features Concatenate Features +1 H nodeRNN H-O edgeRNN H-H edgeRNN Human activity label x , x , x , +1 x Object Object [ ] [ ] + 1 1 1 1 3 3\nParameter sharing and structured feature space. An important aspect of S-RNN is sharing of parameters across the node labels. Parameter sharing between node labels happen when an RNN is common in their forward-pass. For example in Figure 3c and 3d, the edgeRNN R E1 is common in the forward-pass for the human node and the object nodes. Furthermore, the parameters of R E1 gets updated through back-propagated gradients from both the object and human nodeRNNs. In this way, R E1 affects both the human and object node labels.\nSince the human node is connected to multiple object nodes, the input into edgeRNN R E1 is always a linear combination of human-object edge features. This imposes an structure on the features processed by R E1 . More formally, the input into R E1 is the inner product s T F, where F is the feature matrix storing the edge features x e s.t. e \u2208 E 1 . Vector s captures the structured feature space. Its entries are in {0,1} depending on the node being forward-passed. In the example above F = [x v,u x v,w ] T . For the human node v, s = [1 1] T , while for the object node u, s = [1 0] T .", "publication_ref": [], "figure_ref": ["fig_3", "fig_4", "fig_3"], "table_ref": []}, {"heading": "Experiment", "text": "We present results on three diverse spatio-temporal problems to ensure generic applicability of S-RNN, shown in  Figure 5. The applications include: (i) modeling human motion [14] from motion capture data [21]; (ii) human activity detection and anticipation [29,31]; and (iii) maneuver anticipation from real-world driving data [22].", "publication_ref": ["b13", "b20", "b28", "b30", "b21"], "figure_ref": ["fig_6"], "table_ref": []}, {"heading": "Human motion modeling and forecasting", "text": "Human body is a good example of separate but well related components. Its motion involves complex spatiotemporal interactions between the components (arms, legs, spine), resulting in sensible motion styles like walking, eating etc. In this experiment, we represent the complex motion of humans over st-graphs and learn to model them with S-RNN. We show that our structured approach outperforms the state-of-the-art unstructured deep architecture [14] on motion forecasting from motion capture (mocap) data. Several approaches based on Gaussian processes [59,63], Restricted Boltzmann Machines (RBMs) [57,56,51], and RNNs [14] have been proposed to model human motion. Recently, Fragkiadaki et al. [14] proposed an encoder-RNN-decoder (ERD) which gets state-of-the-art forecasting results on H3.6m mocap data set [21]. S-RNN architecture for human motion. Our S-RNN architecture follows the st-graph shown in Figure 5a. According to the st-graph, the spine interacts with all the body parts, and the arms and legs interact with each other. The st-graph is automatically transformed to S-RNN following Section 3.2. The resulting S-RNN have three nodeRNNs, one for each type of body part (spine, arm, and leg), four edgeRNNs for modeling the spatio-temporal interactions between them, and three edgeRNNs for their temporal connections. For edgeRNNs and nodeRNNs we use FC(256)-FC(256)-LSTM(512) and LSTM(512)-FC(256)-FC(100)-FC(\u2022) architectures, respectively, with skip input and output connections [18]. The outputs of nodeRNNs are skeleton joints of different body parts, which are concatenated to reconstruct the complete skeleton. In order to model human motion, we train S-RNN to predict the mocap frame at time t + 1 given the frame at time t. Similar to [14], we gradually add noise to the mocap frames during training. This simulates curriculum learning [2] and helps in keeping the forecasted motion close to the manifold of human motion. As node features we use the raw joint values expressed as exponential map [14], and edge features are concatenation of the node features. We train all RNNs jointly to minimize the Euclidean loss between the predicted mocap frame and the ground truth. See supplementary material on the project web page [24] for training details. Evaluation setup. We compare S-RNN with the stateof-the-art ERD architecture [14] on H3.6m mocap data set [21]. We also compare with a 3 layer LSTM architecture (LSTM-3LR) which [14] use as a baseline. 3 For motion forecasting we follow the experimental setup of [14]. We downsample H3.6m by two and train on 6 subjects and test on subject S5. To forecast, we first feed the architectures with (50) seed mocap frames, and then forecast the future (100) frames. Following [14], we consider walking, eating, and smoking activities. In addition to these three, we also consider discussion activity.\nForecasting is specially challenging on activities with complex aperiodic human motion. In H3.6m data set, significant parts of eating, smoking, and discussion activities are aperiodic, while walking activity is mostly periodic. Our evaluation demonstrates the benefits of having an underlying structure in three important ways: (i) We present visualizations and quantitative results on complex aperiodic activities ( [14] evaluates only on periodic walking motion); (ii) We forecast human motion for almost twice longer than state-of-the-art [14]. This is very challenging for aperiodic activities; and finally (iii) We show S-RNN interestingly  [14] does not offer such modularity.\nQualitative results on motion forecasting. Figure 6 shows forecasting 1000ms of human motion on \"eating\" activity -the subject drinks while walking. S-RNN stays close to the ground-truth in the short-term and generates human like motion in the long-term. On removing edgeRNNs, the parts of human body become independent and stops interacting through parameters. Hence without edgeRNNs the skeleton freezes to some mean position. LSTM-3LR suffers with a drifting problem. On many test examples it drifts to the mean position of walking human ( [14] made similar observations about LSTM-3LR). The motion generated by ERD [14] stays human-like in the short-term but it drifts away to non-human like motion in the long-term. This was a common outcome of ERD on complex aperiodic activities, unlike S-RNN. Furthermore, ERD produced human motion was non-smooth on many test examples. See the video on the project web page for more examples [24]. Quantitative evaluation. We follow the evaluation metric of Fragkiadaki et al. [14] and present the 3D angle error between the forecasted mocap frame and the ground truth in Table 1. Qualitatively, ERD models human motion better than LSTM-3LR. However, in the short-term, it does not mimic the ground-truth as well as LSTM-3LR. Fragkiadaki et al. [14] also note this trade-off between ERD and LSTM-3LR. On the other hand, S-RNN outperforms both LSTM-3LR and ERD on short-term motion forecasting on all activities. S-RNN therefore mimics the ground truth in the short-term and generates human like motion in the long term. In this way it well handles both short and long term forecasting. Due to stochasticity in human motion, longterm forecasts (> 500ms) can significantly differ from the ground truth but still depict human-like motion. For this reason, the long-term forecast numbers in Table 1 are not a fair representative of algorithms modeling capabilities. We also observe that discussion is one of the most challenging  aperiodic activity for all algorithms. User study. We asked users to rate the motions on a Likert scale of 1 to 3. S-RNN performed best according to the user study. See supplementary material for the results. To summarize, unstructured approaches like LSTM-3LR and ERD struggles to model long-term human motion on complex activities. S-RNN's good performance is attributed to its structural modeling of human motion through the underlying st-graph. S-RNN models each body part separately with nodeRNNs and captures interactions between them with edgeRNNs in order to produce coherent motions.", "publication_ref": ["b13", "b58", "b62", "b56", "b55", "b50", "b13", "b13", "b20", "b17", "b13", "b1", "b13", "b23", "b13", "b20", "b13", "b2", "b13", "b13", "b13", "b13", "b13", "b13", "b13", "b23", "b13", "b13"], "figure_ref": ["fig_6", "fig_7"], "table_ref": ["tab_1", "tab_1"]}, {"heading": "Going deeper into structural-RNN", "text": "We now present several insights into S-RNN architecture and demonstrate the modularity of the architecture which enables it to generate hybrid human motions.\nVisualization of memory cells. We investigated if S-RNN memory cells represent meaningful semantic submotions. Semantic cells were earlier studied on other problems [27], we are the first to present it on a vision task and human motion. In Figure 7 (left) we show a cell in the leg nodeRNN learns the semantic motion of moving the leg forward. The cell fires positive (red color) on the forward movement of the leg and negative (blue color) on its backward movement. As the subject walks, the cell alternatively fires for the right and the left leg. Longer activations in the right leg corresponds to the longer steps taken by the subject with the right leg. Similarly, a cell in the arm nodeRNN learns the concept of moving hand close to the face, as shown in Figure 7 (right). The same cell fires whenever the subject moves the hand closer to the face during eating or smoking. The cell remains active as long as the hand stays close to the face. See the video [24].\nGenerating hybrid human motion. We now demonstrate the flexibility of our modular architecture by generating novel yet meaningful motions which are not in the data set. Such modularity is of interest and has been explored to generate diverse motion styles [55]. As a result of having an underlying high-level structure, our approach allows us to exchange RNNs between the S-RNN architectures trained on different motion styles. We leverage this to create a novel S-RNN architecture which generates a hybrid   [24]). We demonstrate flexibility of S-RNN by generating a hybrid motion of a \"human jumping forward on one leg\". (Right) Train and test error. S-RNN generalizes better than ERD with a smaller test error. motion of a human jumping forward on one leg, as shown in Figure 8 (Left). For this experiment we modeled the left and right leg with different nodeRNNs. We trained two independent S-RNN models -a slower human and a faster human (by down sampling data) -and swapped the left leg nodeRNN of the trained models. The resulting faster human, with a slower left leg, jumps forward on the left leg to keep up with its twice faster right leg. 4 Unstructured architectures like ERD [14] does not offer this kind of flexibility.\nFigure 8 (Right) examines the test and train error with iterations. Both S-RNN and ERD converge to similar training error, however S-RNN generalizes better with a smaller test error for next step prediction. Discussion in supplementary.", "publication_ref": ["b26", "b23", "b54", "b23", "b3", "b13"], "figure_ref": ["fig_9", "fig_9", "fig_11", "fig_11"], "table_ref": []}, {"heading": "Human activity detection and anticipation", "text": "In this section we present S-RNN for modeling human activities. We consider the CAD-120 [29] data set where the activities involve rich human-object interactions. Each activity consist of a sequence of sub-activities (e.g. moving, drinking etc.) and objects affordance (e.g., reachable, drinkable etc.), which evolves as the activity progresses. Detecting and anticipating the sub-activities and affordance enables personal robots to assist humans. However, the problem is challenging as it involves complex interactions -humans interact with multiple objects during an activity, and objects also interact with each other (e.g. pouring water from \"glass\" into a \"container\"), which makes it a particularly good fit for evaluating our method. Koppula et al. [31,29] represents such rich spatio-temporal interactions with the st-graph shown in Figure 5b, and models it with a spatio-temporal CRF. In this experiment, we show that modeling the same st-graph with S-RNN yields superior results. We use the node and edges features from [29].\nFigure 3b shows our S-RNN architecture to model the st-graph. Since the number of objects varies with environment, factor sharing between the object nodes and the human-object edges becomes crucial. In S-RNN, R V2 and R E1 handles all the object nodes and the human-object edges respectively. This allows our fixed S-RNN architecture to handle varying size st-graphs. For edgeRNNs we use a single layer LSTM of size 128, and for nodeRNNs we use LSTM(256)-softmax(\u2022). At each time step, the human nodeRNN outputs the sub-activity label (10 classes), and the object nodeRNN outputs the affordance (12 classes).  5c. Jain et al. [22] use the same st-graph but models it in a probabilistic frame with AIO-HMM. The table shows average precision, recall and time-to-maneuver. Time-to-maneuver is the interval between the time of algorithm's prediction and the start of the maneuver. Algorithms are compared on the features from [22].  Having observed the st-graph upto time t, the goal is to detect the sub-activity and affordance labels at the current time t, and also anticipate their future labels of the time step t+1. For detection we train S-RNN on the labels of the current time step. For anticipation we train the architecture to predict the labels of the next time step, given the observations upto the current time. We also train a multi-task version of S-RNN, where we add two softmax layers to each nodeRNN and jointly train for anticipation and detection. Table 3 shows the detection and anticipation F1-scores averaged over all the classes. S-RNN significantly improves over Koppula et al. on both anticipation [31] and detection [29]. On anticipating object affordance S-RNN F1-score is 44% more than [31], and 7% more on detection. S-RNN does not have any Markov assumptions like spatio-temporal CRF, and therefore, it better models the long-time dependencies needed for anticipation. The table also shows the importance of edgeRNNs in handling spatio-temporal components. EdgeRNN transfers the information from the human to objects, which helps is predicting the object labels. Therefore, S-RNN without the edgeRNNs poorly models the objects. This signifies the importance of edgeRNNs and also validates our design. Finally, training S-RNN in a multi-task manner works best in majority of the cases. In Figure 9 we show the visualization of an eating activity. We show one representative frame from each sub-activity and our corresponding predictions. S-RNN complexity. In terms of complexity, we discuss two aspects as a function of the underlying st-graph: (i) the number of RNNs in the mixture; and (ii) the complexity of forward-pass. The number of RNNs depends on the number of semantically similar nodes in the st-graph. The overall S-RNN architecture is compact because the edgeRNNs are shared between the nodeRNNs, and the number of semantic categories are usually few in context-rich applications. Furthermore, because of factor sharing the number of RNNs does not increase if more semantically similar nodes are added to the st-graph. The forward-pass complexity  depends on the number of RNNs. Since the forward-pass through all edgeRNNs and nodeRNNs can happen in parallel, in practice, the complexity only depends on the cascade of two neural networks (edgeRNN followed by nodeRNN).", "publication_ref": ["b28", "b30", "b28", "b28", "b21", "b21", "b30", "b28", "b30"], "figure_ref": ["fig_6", "fig_3", "fig_6", "fig_12"], "table_ref": ["tab_4"]}, {"heading": "Driver maneuver anticipation", "text": "We finally present S-RNN for another application which involves anticipating maneuvers several seconds before they happen. Jain et al. [22] represent this problem with the stgraph shown in Figure 5c. They model the st-graph as a probabilistic Bayesian network (AIO-HMM [22]). The stgraph represents the interactions between the observations outside the vehicle (eg. the road features), the driver's maneuvers, and the observations inside the vehicle (eg. the driver's facial features). We model the same st-graph with S-RNN architecture using the node and edge features from Jain et al. [22]. Table 2 shows the performance of different algorithms on this task. S-RNN performs better than the state-of-the-art AIO-HMM [22] in every setting. See supplementary material for the discussion and details [24].", "publication_ref": ["b21", "b21", "b21", "b21", "b23"], "figure_ref": ["fig_6"], "table_ref": ["tab_2"]}, {"heading": "Conclusion", "text": "We proposed a generic and principled approach for combining high-level spatio-temporal graphs with sequence modeling success of RNNs. We make use of factor graph, and factor sharing in order to obtain an RNN mixture that is scalable and applicable to any problem expressed over st-graphs. Our RNN mixture captures the rich interactions in the underlying st-graph. We demonstrated significant improvements with S-RNN on three diverse spatiotemporal problems including: (i) human motion modeling; (ii) human-object interaction; and (iii) driver maneuver anticipation. By visualizing the memory cells we showed that S-RNN learns certain semantic sub-motions, and demonstrated its modularity by generating novel human motion. 5 ", "publication_ref": ["b4"], "figure_ref": [], "table_ref": []}], "references": [{"ref_id": "b0", "title": "Globally trained handwritten word recognizer using spatial representation, convolutional neural networks, and hidden markov models", "journal": "", "year": "1994", "authors": "Y Bengio; Y Lecun; D Henderson"}, {"ref_id": "b1", "title": "Curriculum learning", "journal": "", "year": "2009", "authors": "Y Bengio; J Louradour; R Collobert; J Weston"}, {"ref_id": "b2", "title": "Global training of document processing systems using graph transformer networks", "journal": "", "year": "1997", "authors": "L Bottou; Y Bengio; Y Lecun"}, {"ref_id": "b3", "title": "Learning spatiotemporal graphs of human activities", "journal": "", "year": "2011", "authors": "W Brendel; S Todorovic"}, {"ref_id": "b4", "title": "Scene labeling with lstm recurrent neural networks. In CVPR", "journal": "", "year": "2015", "authors": "W Byeon; T Breuel; F Raue; M Liwicki"}, {"ref_id": "b5", "title": "Semantic image segmentation with deep convolutional nets and fully connected crfs", "journal": "", "year": "2014", "authors": "L C Chen; G Papandreou; I Kokkinos; K M A L Yuille"}, {"ref_id": "b6", "title": "Learning deep structured models", "journal": "", "year": "2015", "authors": "L C Chen; A Schwing; A L Yuille; R Urtasun"}, {"ref_id": "b7", "title": "Mosift: Recognizing human actions in surveillance videos", "journal": "", "year": "2009", "authors": "M Chen; A Hauptmann"}, {"ref_id": "b8", "title": "Mind's eye: A recurrent visual representation for image caption generation", "journal": "", "year": "2015", "authors": "X Chen; C L Zitnick"}, {"ref_id": "b9", "title": "Long-term recurrent convolutional networks for visual recognition and description", "journal": "", "year": "2015", "authors": "J Donahue; L A Hendricks; S Guadarrama; M Rohrbach; S Venugopalan; K Saenko; T Darrell"}, {"ref_id": "b10", "title": "A spatio-temporal probabilistic model for multi-sensor multi-class object recognition", "journal": "", "year": "2011", "authors": "B Douillard; D Fox; F Ramos"}, {"ref_id": "b11", "title": "Hierarchical recurrent neural network for skeleton based action recognition", "journal": "", "year": "2015", "authors": "Y Du; W Wang; L Wang"}, {"ref_id": "b12", "title": "A discriminatively trained, multiscale, deformable part model", "journal": "", "year": "2008", "authors": "P Felzenszwalb; D Mcallester; D Ramanan"}, {"ref_id": "b13", "title": "Recurrent network models for human dynamics", "journal": "", "year": "2015", "authors": "K Fragkiadaki; S Levine; P Felsen; J Malik"}, {"ref_id": "b14", "title": "Fully connected deep structured networks", "journal": "", "year": "2015", "authors": "A G S ; R Urtasun"}, {"ref_id": "b15", "title": "Fast r-cnn", "journal": "", "year": "2015", "authors": "R Girshick"}, {"ref_id": "b16", "title": "Learning task-dependent distributed representations by backpropagation through structure", "journal": "IEEE", "year": "1996", "authors": "C Goller; A Kuchler"}, {"ref_id": "b17", "title": "Generating sequences with recurrent neural networks", "journal": "", "year": "2013", "authors": "A Graves"}, {"ref_id": "b18", "title": "Towards end-to-end speech recognition with recurrent neural networks", "journal": "", "year": "2014", "authors": "A Graves; N Jaitly"}, {"ref_id": "b19", "title": "Observing humanobject interactions: Using spatial and functional compatibility for recognition", "journal": "IEEE PAMI", "year": "2009", "authors": "A Gupta; A Kembhavi; L S Davis"}, {"ref_id": "b20", "title": "Hu-man3.6m: Large scale datasets and predictive methods for 3d human sensing in natural environments", "journal": "IEEE PAMI", "year": "2014", "authors": "C Ionescu; D Papava; V Olaru; C Sminchisescu"}, {"ref_id": "b21", "title": "Car that knows before you do: Anticipating maneuvers via learning temporal driving models", "journal": "", "year": "2015", "authors": "A Jain; H S Koppula; B Raghavan; S Soh; A Saxena"}, {"ref_id": "b22", "title": "Beyond geometric path planning: Learning context-driven user preferences via suboptimal feedback", "journal": "", "year": "2013", "authors": "A Jain; S Sharma; A Saxena"}, {"ref_id": "b23", "title": "S-rnn supplementary video and material", "journal": "", "year": "", "authors": "A Jain; A R Zamir; S Savarese; A Saxena"}, {"ref_id": "b24", "title": "Ob-jects2action: Classifying and localizing actions without any video example", "journal": "", "year": "2015", "authors": "M Jain; J C Van Gemert; T Mensink; C Snoek"}, {"ref_id": "b25", "title": "Cutting-plane training of structural svms", "journal": "", "year": "2009", "authors": "T Joachims; T Finley; C.-N J Yu"}, {"ref_id": "b26", "title": "Visualizing and understanding recurrent networks", "journal": "", "year": "2015", "authors": "A Karpathy; J Johnson; F F Li"}, {"ref_id": "b27", "title": "Probabilistic graphical models: principles and techniques", "journal": "MIT press", "year": "2009", "authors": "D Koller; N Friedman"}, {"ref_id": "b28", "title": "Learning human activities and object affordances from rgb-d videos", "journal": "IJRR", "year": "2013", "authors": "H Koppula; R Gupta; A Saxena"}, {"ref_id": "b29", "title": "Anticipatory planning for humanrobot teams", "journal": "", "year": "2014", "authors": "H Koppula; A Jain; A Saxena"}, {"ref_id": "b30", "title": "Anticipating human activities using object affordances for reactive robotic response", "journal": "", "year": "2013", "authors": "H Koppula; A Saxena"}, {"ref_id": "b31", "title": "Learning spatio-temporal structure from rgb-d videos for human activity detection and anticipation", "journal": "", "year": "2013", "authors": "H Koppula; A Saxena"}, {"ref_id": "b32", "title": "Anticipating human activities using object affordances for reactive robotic response", "journal": "IEEE PAMI", "year": "2015", "authors": "H Koppula; A Saxena"}, {"ref_id": "b33", "title": "Efficient inference in fully connected crfs with gaussian edge potentials", "journal": "", "year": "2012", "authors": "P Kr\u00e4henb\u00fchl; V Koltun"}, {"ref_id": "b34", "title": "Factor graphs and the sum-product algorithm. Information Theory", "journal": "IEEE", "year": "2001", "authors": "F R Kschischang; B J Frey; H.-A Loeliger"}, {"ref_id": "b35", "title": "Learning realistic human actions from movies", "journal": "", "year": "2008", "authors": "I Laptev; M Marsza\u0142ek; C Schmid; B Rozenfeld"}, {"ref_id": "b36", "title": "Track to the future: Spatio-temporal video segmentation with long-range motion cues", "journal": "", "year": "2011", "authors": "J Lezama; K Alahari; J Sivic; I Laptev"}, {"ref_id": "b37", "title": "Maximum-margin structured learning with deep networks for 3d human pose estimation", "journal": "", "year": "2015", "authors": "S Li; W Zhang; A B Chan"}, {"ref_id": "b38", "title": "Key object driven multi-category object recognition, localization and tracking using spatio-temporal context", "journal": "", "year": "2008", "authors": "Y Li; R Nevatia"}, {"ref_id": "b39", "title": "Efficient piecewise training of deep structured models for semantic segmentation", "journal": "", "year": "2015", "authors": "G Lin; C Shen; I Reid"}, {"ref_id": "b40", "title": "Semantic image segmentation via deep parsing network", "journal": "", "year": "2015", "authors": "Z Liu; X Li; P Luo; C C Loy; X Tang"}, {"ref_id": "b41", "title": "Factorie: Probabilistic programming via imperatively defined factor graphs", "journal": "", "year": "2009", "authors": "A Mccallum; K Schultz; S Singh"}, {"ref_id": "b42", "title": "Learning longer memory in recurrent neural networks", "journal": "", "year": "2014", "authors": "T Mikolov; A Joulin; S Chopra; M Mathieu; M A Ranzato"}, {"ref_id": "b43", "title": "Recognizing object affordances in terms of spatio-temporal object-object relationships", "journal": "", "year": "2014", "authors": "A Pieropan; C H Ek; H Kjellstr\u00f6m"}, {"ref_id": "b44", "title": "Conditional random fields for object recognition", "journal": "", "year": "2004", "authors": "A Quattoni; M Collins; T Darrell"}, {"ref_id": "b45", "title": "Markov logic networks. ML", "journal": "", "year": "2006", "authors": "M Richardson; P Domingos"}, {"ref_id": "b46", "title": "Human action segmentation and recognition using discriminative semi-markov models", "journal": "IJCV", "year": "2011", "authors": "Q Shi; L Cheng; L Wang; A Smola"}, {"ref_id": "b47", "title": "Parsing Natural Scenes and Natural Language with Recursive Neural Networks", "journal": "", "year": "2011", "authors": "R Socher; C C Lin; A Y Ng; C D Manning"}, {"ref_id": "b48", "title": "Unsupervised learning of video representations using lstms", "journal": "", "year": "2015", "authors": "N Srivastava; E Mansimov; R Salakhutdinov"}, {"ref_id": "b49", "title": "Active: Activity concept transitions in video event classification", "journal": "", "year": "2013", "authors": "C Sun; R Nevatia"}, {"ref_id": "b50", "title": "The recurrent temporal restricted boltzmann machine", "journal": "", "year": "2009", "authors": "I Sutskever; G Hinton; G Taylor"}, {"ref_id": "b51", "title": "Sequence to sequence learning with neural networks", "journal": "In NIPS", "year": "2014", "authors": "I Sutskever; O Vinyals; Q V Le"}, {"ref_id": "b52", "title": "An introduction to conditional random fields", "journal": "", "year": "2011", "authors": "C Sutton; A Mccallum"}, {"ref_id": "b53", "title": "Discriminative probabilistic models for relational data", "journal": "", "year": "2002", "authors": "B Taskar; P Abbeel; D Koller"}, {"ref_id": "b54", "title": "Factored conditional restricted boltzmann machines for modeling motion style", "journal": "", "year": "2009", "authors": "G Taylor; G E Hinton"}, {"ref_id": "b55", "title": "Dynamical binary latent variable models for 3d human pose tracking", "journal": "", "year": "2010", "authors": "G Taylor; L Sigal; D J Fleet; G E Hinton"}, {"ref_id": "b56", "title": "Modeling human motion using binary latent variables", "journal": "", "year": "2006", "authors": "G W Taylor; G E Hinton; S T Roweis"}, {"ref_id": "b57", "title": "Real-time continuous pose recovery of human hands using convolutional networks", "journal": "ACM TOG", "year": "2014", "authors": "J Tompson; M Stein; Y Lecun; K Perlin"}, {"ref_id": "b58", "title": "Topologically-constrained latent variable models", "journal": "", "year": "2008", "authors": "R Urtasun; D J Fleet; A Geiger; J Popovi\u0107; T J Darrell; N D Lawrence"}, {"ref_id": "b59", "title": "Conditional random fields for activity recognition", "journal": "", "year": "2007", "authors": "D L Vail; M M Veloso; J D Lafferty"}, {"ref_id": "b60", "title": "Translating videos to natural language using deep recurrent neural networks", "journal": "", "year": "2014", "authors": "S Venugopalan; H Xu; J Donahue; M Rohrbach; R Mooney; K Saenko"}, {"ref_id": "b61", "title": "Action recognition with improved trajectories", "journal": "", "year": "2013", "authors": "H Wang; C Schmid"}, {"ref_id": "b62", "title": "Gaussian process dynamical models for human motion", "journal": "IEEE PAMI", "year": "2008", "authors": "J M Wang; D J Fleet; A Hertzmann"}, {"ref_id": "b63", "title": "Panda: Pose aligned networks for deep attribute modeling", "journal": "", "year": "2014", "authors": "N Zhang; M Paluri; M A Ranzato; T Darrell; L Bourdev"}, {"ref_id": "b64", "title": "Overtaking vehicle detection using a spatio-temporal crf", "journal": "IEEE", "year": "2014", "authors": "X Zhang; P Jiang; F Wang"}, {"ref_id": "b65", "title": "Conditional random fields as recurrent neural networks. In ICCV", "journal": "", "year": "2015", "authors": "S Zheng; S Jayasumana; B Romera-Paredes; V Vineet; Z Su; D Du; C Huang; P Torr"}], "figures": [{"figure_label": "1", "figure_type": "figure", "figure_id": "fig_0", "figure_caption": "Figure 1 :1Figure 1: From st-graph to S-RNN for an example problem. (Bottom) Shows an example activity (human microwaving food). Modeling such problems requires both spatial and temporal reasoning. (Middle) Stgraph capturing spatial and temporal interactions between the human and the objects. (Top) Schematic representation of our structural-RNN architecture automatically derived from st-graph. It captures the structure and interactions of st-graph in a rich yet scalable manner.", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_1", "figure_caption": "use a similar approach for image classification with general MRF. Recently several works Spatio-temporal graph representing an activity (b) Unrolled through time (c) Factor graph parameterization x ,", "figure_data": ""}, {"figure_label": "2", "figure_type": "figure", "figure_id": "fig_2", "figure_caption": "Figure 2 :2Figure 2: An example spatio-temporal graph (st-graph) of a human activity. (a) st-graph capturing human-object interaction. (b) Unrolling the st-graph through edges E T . The nodes and edges are labelled with the feature vectors associated with them. (c) Our factor graph parameterization of the st-graph. Each node and edge in the st-graph has a corresponding factor.", "figure_data": ""}, {"figure_label": "3", "figure_type": "figure", "figure_id": "fig_3", "figure_caption": "Figure 3 :3Figure 3: An example of st-graph to S-RNN. (a) The st-graph from Figure 2 is redrawn with colors to indicate sharing of nodes and edge factors. Nodes and edges with same color share factors. Overall there are six distinct factors: 2 node factors and 4 edge factors. (b) S-RNN architecture has one RNN for each factor. EdgeRNNs and nodeRNNs are connected to form a bipartite graph. Parameter sharing between the human and object nodes happen through edgeRNN R E 1 . (c) The forward-pass for human node v involve RNNs R E 1 , R E 3 and R V 1 . In Figure 4 we show the detailed layout of this forward-pass. Input features into R E 1 is sum of human-object edge features xu,v + xv,w. (d) The forward-pass for object node w involve RNNs R E 1 , R E 2 , R E 4 and R V 2 . In this forward-pass, the edgeRNN R E 1 only processes the edge feature xv,w. (Best viewed in color)", "figure_data": ""}, {"figure_label": "4", "figure_type": "figure", "figure_id": "fig_4", "figure_caption": "Figure 4 :4Figure 4: Forward-pass for human node v. Shows the architecture layout corresponding to the Figure 3c on unrolled st-graph. (View in color)", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_5", "figure_caption": "Human motion modeling (b) Activity detection and anticipation (c) Maneuver anticipation", "figure_data": ""}, {"figure_label": "5", "figure_type": "figure", "figure_id": "fig_6", "figure_caption": "Figure 5 :5Figure 5: Diverse spatio-temporal tasks. We apply S-RNN to the following three diverse spatio-temporal problems. (View in color)", "figure_data": ""}, {"figure_label": "6", "figure_type": "figure", "figure_id": "fig_7", "figure_caption": "Figure 6 :6Figure 6: Forecasting eating activity on test subject. On aperiodic activities, ERD and LSTM-3LR struggle to model human motion. S-RNN, on the other hand, mimics the ground truth in the short-term and generates human like motion in the long term. Without (w/o) edgeRNNs the motion freezes to some mean standing position. See the video [24].", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_8", "figure_caption": "(A) Cell #496 fires in response to \"moving the leg forward\" Cell #419 fires in response to \"moving arm close to the face\" One quick puff of smoke with right arm", "figure_data": ""}, {"figure_label": "7", "figure_type": "figure", "figure_id": "fig_9", "figure_caption": "Figure 7 :7Figure 7: S-RNN memory cell visualization. (Left) A cell of the leg nodeRNN fires (red) when \"putting the leg forward\". (Right) A cell of the arm nodeRNN fires for \"moving the hand close to the face\". We visualize the same cell for eating and smoking activities. (See the video [24])", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_10", "figure_caption": "Iterations", "figure_data": ""}, {"figure_label": "8", "figure_type": "figure", "figure_id": "fig_11", "figure_caption": "Figure 8 :8Figure 8: (Left) Generating hybrid motions (See the video[24]). We", "figure_data": ""}, {"figure_label": "9", "figure_type": "figure", "figure_id": "fig_12", "figure_caption": "Figure 9 :9Figure 9: Qualitative result on eating activity on CAD-120. Shows multi-task S-RNN detection and anticipation results. For the sub-activity at time t, the labels are anticipated at time t\u22121. (Zoom in to see the image)", "figure_data": ""}, {"figure_label": "1", "figure_type": "table", "figure_id": "tab_1", "figure_caption": "Motion forecasting angle error. {80, 160, 320, 560, 1000} msecs after the seed motion. The results are averaged over 8 seed motion sequences for each activity on the test subject.", "figure_data": "MethodsShort-term forecast 80ms 160ms 320ms 560ms Long-term forecast 1000msWalking activityERD [14] 1.301.561.842.002.38LSTM-3LR 1.181.501.671.812.20S-RNN 1.081.341.601.902.13Eating activityERD [14] 1.661.932.282.362.41LSTM-3LR 1.361.792.292.492.82S-RNN 1.351.712.122.282.58Smoking activityERD [14] 2.342.743.733.683.82LSTM-3LR 2.052.343.103.243.42S-RNN 1.902.302.903.213.23Discussion activityERD [14] 2.672.973.233.472.92LSTM-3LR 2.252.332.452.482.93S-RNN 1.672.032.202.392.43learns semantic concepts, and demonstrate its modularityby generating hybrid human motion. Unstructured deep ar-chitectures like"}, {"figure_label": "2", "figure_type": "table", "figure_id": "tab_2", "figure_caption": "Maneuver Anticipation on 1100 miles of real-world driving data. S-RNN is derived from the st-graph shown in Figure", "figure_data": ""}, {"figure_label": "3", "figure_type": "table", "figure_id": "tab_4", "figure_caption": "Results on CAD-120[29]. S-RNN architecture derived from the st-graph in Figure5boutperforms Koppula et al.[31,29] which models the same st-graph in a probabilistic framework. S-RNN in multi-task setting (joint detection and anticipation) further improves the performance.", "figure_data": "Detection F1-scoreAnticipation F1-scoreMethodSub-activity (%) Affordance (%) activity (%) Affordance (%) Object Sub-ObjectKoppula et al. [31, 29]80.481.537.936.7S-RNN w/o edgeRNN82.282.164.872.4S-RNN83.288.762.380.7S-RNN (multi-task)82.491.165.680.9"}], "formulas": [{"formula_id": "formula_1", "formula_text": "E E G = (V, E , E ) Spatio-temporal edge Temporal edge + 1 \u03a8 \u03a8 \u03a8 ,\u03a8 , \u03a8 \u03a8 , \u03a8 , \u03a8 , \u03a8 , Human Object Object", "formula_coordinates": [3.0, 51.97, 87.55, 492.83, 72.74]}, {"formula_id": "formula_2", "formula_text": "C E = {E 1 , .., E M },", "formula_coordinates": [3.0, 464.99, 588.15, 80.12, 9.65]}, {"formula_id": "formula_3", "formula_text": "Input G = (V, E S , E T ), C V = {V 1 , ..., V P } Output S-RNN graph G R = ({R Em }, {R Vp }, E R ) 1: Semantically partition edges C E = {E 1 , ..., E M } 2: Find factor components {\u03a8 Vp , \u03a8 Em } of G 3: Represent each \u03a8", "formula_coordinates": [4.0, 318.83, 255.74, 208.46, 54.46]}, {"formula_id": "formula_4", "formula_text": "(R Em , R Vp ) \u2208 E R iff \u2203v \u2208 V p , u \u2208 V s.t. (u, v) \u2208 E m Return G R = ({R Em }, {R Vp }, E R )", "formula_coordinates": [4.0, 318.83, 335.28, 225.15, 21.04]}, {"formula_id": "formula_5", "formula_text": "Human + x x x , + 1 \u2192 Sum Features Concatenate Features +1 H nodeRNN H-O edgeRNN H-H edgeRNN Human activity label x , x , x , +1 x Object Object [ ] [ ] + 1 1 1 1 3 3", "formula_coordinates": [5.0, 60.93, 71.71, 212.34, 157.19]}], "doi": ""}