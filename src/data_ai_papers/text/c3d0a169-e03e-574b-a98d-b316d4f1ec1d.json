{"title": "Efficient Inference in Fully Connected CRFs with Gaussian Edge Potentials", "authors": "Philipp Kr\u00e4henb\u00fchl; Vladlen Koltun", "pub_date": "2012-10-20", "abstract": "Most state-of-the-art techniques for multi-class image segmentation and labeling use conditional random fields defined over pixels or image regions. While regionlevel models often feature dense pairwise connectivity, pixel-level models are considerably larger and have only permitted sparse graph structures. In this paper, we consider fully connected CRF models defined on the complete set of pixels in an image. The resulting graphs have billions of edges, making traditional inference algorithms impractical. Our main contribution is a highly efficient approximate inference algorithm for fully connected CRF models in which the pairwise edge potentials are defined by a linear combination of Gaussian kernels. Our experiments demonstrate that dense connectivity at the pixel level substantially improves segmentation and labeling accuracy.", "sections": [{"heading": "Introduction", "text": "Multi-class image segmentation and labeling is one of the most challenging and actively studied problems in computer vision. The goal is to label every pixel in the image with one of several predetermined object categories, thus concurrently performing recognition and segmentation of multiple object classes. A common approach is to pose this problem as maximum a posteriori (MAP) inference in a conditional random field (CRF) defined over pixels or image patches [8,12,18,19,9]. The CRF potentials incorporate smoothness terms that maximize label agreement between similar pixels, and can integrate more elaborate terms that model contextual relationships between object classes.\nBasic CRF models are composed of unary potentials on individual pixels or image patches and pairwise potentials on neighboring pixels or patches [19,23,7,5]. The resulting adjacency CRF structure is limited in its ability to model long-range connections within the image and generally results in excessive smoothing of object boundaries. In order to improve segmentation and labeling accuracy, researchers have expanded the basic CRF framework to incorporate hierarchical connectivity and higher-order potentials defined on image regions [8,12,9,13]. However, the accuracy of these approaches is necessarily restricted by the accuracy of unsupervised image segmentation, which is used to compute the regions on which the model operates. This limits the ability of region-based approaches to produce accurate label assignments around complex object boundaries, although significant progress has been made [9,13,14].\nIn this paper, we explore a different model structure for accurate semantic segmentation and labeling. We use a fully connected CRF that establishes pairwise potentials on all pairs of pixels in the image. Fully connected CRFs have been used for semantic image labeling in the past [18,22,6,17], but the complexity of inference in fully connected models has restricted their application to sets of hundreds of image regions or fewer. The segmentation accuracy achieved by these approaches is again limited by the unsupervised segmentation that produces the regions. In contrast, our model connects all pairs of individual pixels in the image, enabling greatly refined segmentation and labeling. The main challenge is the size of the model, which has tens of thousands of nodes and billions of edges even on low-resolution images.\nOur main contribution is a highly efficient inference algorithm for fully connected CRF models in which the pairwise edge potentials are defined by a linear combination of Gaussian kernels in an arbitrary feature space. The algorithm is based on a mean field approximation to the CRF distribution. This approximation is iteratively optimized through a series of message passing steps, each of which updates a single variable by aggregating information from all other variables. We show that a mean field update of all variables in a fully connected CRF can be performed using Gaussian filtering in feature space. This allows us to reduce the computational complexity of message passing from quadratic to linear in the number of variables by employing efficient approximate high-dimensional filtering [16,2,1]. The resulting approximate inference algorithm is sublinear in the number of edges in the model. Figure 1 demonstrates the benefits of the presented algorithm on two images from the MSRC-21 dataset for multi-class image segmentation and labeling. Figure 1(d) shows the results of approximate MCMC inference in fully connected CRFs on these images [17]. The MCMC procedure was run for 36 hours and only partially converged for the bottom image. We have also experimented with graph cut inference in the fully connected models [11], but it did not converge within 72 hours. In contrast, a single-threaded implementation of our algorithm produces a detailed pixel-level labeling in 0.2 seconds, as shown in Figure 1(e). A quantitative evaluation on the MSRC-21 and the PAS-CAL VOC 2010 datasets is provided in Section 6. To the best of our knowledge, we are the first to demonstrate efficient inference in fully connected CRF models at the pixel level.", "publication_ref": ["b7", "b11", "b17", "b18", "b8", "b18", "b22", "b6", "b4", "b7", "b11", "b8", "b12", "b8", "b12", "b13", "b17", "b21", "b5", "b16", "b15", "b1", "b0", "b16", "b10"], "figure_ref": ["fig_0", "fig_0", "fig_0"], "table_ref": []}, {"heading": "The Fully Connected CRF Model", "text": "Consider a random field X defined over a set of variables {X 1 , . . . , X N }. The domain of each variable is a set of labels L = {l 1 , l 2 , . . . , l k }. Consider also a random field I defined over variables {I 1 , . . . , I N }. In our setting, I ranges over possible input images of size N and X ranges over possible pixel-level image labelings. I j is the color vector of pixel j and X j is the label assigned to pixel j.\nA conditional random field (I, X) is characterized by a Gibbs distribution\nP (X|I) = 1 Z(I) exp(\u2212 c\u2208C G \u03c6 c (X c |I)),\nwhere G = (V, E) is a graph on X and each clique c in a set of cliques C G in G induces a potential \u03c6 c [15]. The Gibbs energy of a labeling x \u2208 L N is E(x|I) = c\u2208C G \u03c6 c (x c |I). The maximum a posteriori (MAP) labeling of the random field is x * = arg max x\u2208L N P (x|I). For notational convenience we will omit the conditioning in the rest of the paper and use \u03c8 c (x c ) to denote \u03c6 c (x c |I).\nIn the fully connected pairwise CRF model, G is the complete graph on X and C G is the set of all unary and pairwise cliques. The corresponding Gibbs energy is\nE(x) = i \u03c8 u (x i ) + i<j \u03c8 p (x i , x j ),(1)\nwhere i and j range from 1 to N . The unary potential \u03c8 u (x i ) is computed independently for each pixel by a classifier that produces a distribution over the label assignment x i given image features.\nThe unary potential used in our implementation incorporates shape, texture, location, and color descriptors and is described in Section 5. Since the output of the unary classifier for each pixel is produced independently from the outputs of the classifiers for other pixels, the MAP labeling produced by the unary classifiers alone is generally noisy and inconsistent, as shown in Figure 1(b).\nThe pairwise potentials in our model have the form\n\u03c8 p (x i , x j ) = \u00b5(x i , x j ) K m=1 w (m) k (m) (f i , f j ) k(fi,fj ) ,(2)\nwhere each\nk (m) is a Gaussian kernel k (m) (f i , f j ) = exp(\u2212 1 2 (f i \u2212 f j ) T \u039b (m) (f i \u2212 f j ))\n, the vectors f i and f j are feature vectors for pixels i and j in an arbitrary feature space, w (m) are linear combination weights, and \u00b5 is a label compatibility function. Each kernel k (m) is characterized by a symmetric, positive-definite precision matrix \u039b (m) , which defines its shape.\nFor multi-class image segmentation and labeling we use contrast-sensitive two-kernel potentials, defined in terms of the color vectors I i and I j and positions p i and p j :\nk(f i , f j ) = w (1) exp \u2212 |p i \u2212 p j | 2 2\u03b8 2 \u03b1 \u2212 |I i \u2212 I j | 2 2\u03b8 2 \u03b2 appearance kernel +w (2) exp \u2212 |p i \u2212 p j | 2 2\u03b8 2 \u03b3 smoothness kernel .(3)\nThe appearance kernel is inspired by the observation that nearby pixels with similar color are likely to be in the same class. The degrees of nearness and similarity are controlled by parameters \u03b8 \u03b1 and \u03b8 \u03b2 . The smoothness kernel removes small isolated regions [19]. The parameters are learned from data, as described in Section 4.\nA simple label compatibility function \u00b5 is given by the Potts model, \u00b5(x i , x j ) = [x i = x j ]. It introduces a penalty for nearby similar pixels that are assigned different labels. While this simple model works well in practice, it is insensitive to compatibility between labels. For example, it penalizes a pair of nearby pixels labeled \"sky\" and \"bird\" to the same extent as pixels labeled \"sky\" and \"cat\". We can instead learn a general symmetric compatibility function \u00b5(x i , x j ) that takes interactions between labels into account, as described in Section 4.", "publication_ref": ["b14", "b18"], "figure_ref": ["fig_0"], "table_ref": []}, {"heading": "Efficient Inference in Fully Connected CRFs", "text": "Our algorithm is based on a mean field approximation to the CRF distribution. This approximation yields an iterative message passing algorithm for approximate inference. Our key observation is that message passing in the presented model can be performed using Gaussian filtering in feature space. This enables us to utilize highly efficient approximations for high-dimensional filtering, which reduce the complexity of message passing from quadratic to linear, resulting in an approximate inference algorithm for fully connected CRFs that is linear in the number of variables N and sublinear in the number of edges in the model.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Mean Field Approximation", "text": "Instead of computing the exact distribution P (X), the mean field approximation computes a distribution Q(X) that minimizes the KL-divergence D(Q P ) among all distributions Q that can be expressed as a product of independent marginals, Q(X) = i Q i (X i ) [10].\nMinimizing the KL-divergence, while constraining Q(X) and Q i (X i ) to be valid distributions, yields the following iterative update equation:\nQ i (x i = l) = 1 Z i exp \uf8f1 \uf8f2 \uf8f3 \u2212\u03c8 u (x i ) \u2212 l \u2208L \u00b5(l, l ) K m=1 w (m) j =i k (m) (f i , f j )Q j (l ) \uf8fc \uf8fd \uf8fe .(4)\nA detailed derivation of Equation 4 is given in the supplementary material. This update equation leads to the following inference algorithm:\nAlgorithm 1 Mean field in fully connected CRFs Initialize Q Q i (x i ) \u2190 1 Zi exp{\u2212\u03c6 u (x i )} while not converged do\nSee Section 6 for convergence analysis Q\n(m) i (l) \u2190 j =i k (m) (f i , f j )Q j (l) for all m\nMessage passing from all X j to all X \u00ee\nQ i (x i ) \u2190 l\u2208L \u00b5 (m) (x i , l) m w (m)Q (m) i (l) Compatibility transform Q i (x i ) \u2190 exp{\u2212\u03c8 u (x i ) \u2212Q i (x i )} Local update normalize Q i (x i ) end while\nEach iteration of Algorithm 1 performs a message passing step, a compatibility transform, and a local update. Both the compatibility transform and the local update run in linear time and are highly efficient. The computational bottleneck is message passing. For each variable, this step requires evaluating a sum over all other variables. A naive implementation thus has quadratic complexity in the number of variables N . Next, we show how approximate high-dimensional filtering can be used to reduce the computational cost of message passing to linear.", "publication_ref": ["b9"], "figure_ref": [], "table_ref": []}, {"heading": "Efficient Message Passing Using High-Dimensional Filtering", "text": "From a signal processing standpoint, the message passing step can be expressed as a convolution with a Gaussian kernel G \u039b (m) in feature space:\nQ (m) i (l) = j\u2208V k (m) (f i , f j )Q j (l) \u2212 Q i (l) message passing = [G \u039b (m) \u2297 Q(l)] (f i ) Q (m) i (l) \u2212Q i (l).(5)\nWe subtract Q i (l) from the convolved function Q\n(m) i (l) because the convolution sums over all variables, while message passing does not sum over Q i . This convolution performs a low-pass filter, essentially band-limiting Q (m) i (l). By the sampling theorem, this function can be reconstructed from a set of samples whose spacing is proportional to the standard deviation of the filter [20]. We can thus perform the convolution by downsampling Q(l), convolving the samples with G \u039b (m) , and upsampling the result at the feature points [16].\nAlgorithm 2 Efficient message passing: Q (m) i (l) = j\u2208V k (m) (f i , f j )Q j (l) Q \u2193 (l) \u2190 downsample(Q(l)) Downsample \u2200 i\u2208V \u2193 Q (m) \u2193i (l) \u2190 j\u2208V \u2193 k (m) (f \u2193i , f \u2193j )Q \u2193j (l) Convolution on samples f \u2193 Q (m) (l) \u2190 upsample(Q (m) \u2193(", "publication_ref": ["b19", "b15"], "figure_ref": [], "table_ref": []}, {"heading": "l)) Upsample", "text": "A common approximation to the Gaussian kernel is a truncated Gaussian, where all values beyond two standard deviations are set to zero. Since the spacing of the samples is proportional to the standard deviation, the support of the truncated kernel contains only a constant number of sample points.\nThus the convolution can be approximately computed at each sample by aggregating values from only a constant number of neighboring samples. This implies that approximate message passing can be performed in O(N ) time [16].\nHigh-dimensional filtering algorithms that follow this approach can still have computational complexity exponential in d. However, a clever filtering scheme can reduce the complexity of the convolution operation to O(N d). We use the permutohedral lattice, a highly efficient convolution data structure that tiles the feature space with simplices arranged along d+1 axes [1]. The permutohedral lattice exploits the separability of unit variance Gaussian kernels. Thus we need to apply a whitening transformf = U f to the feature space in order to use it. The whitening transformation is found using the Cholesky decomposition of \u039b (m) into U U T . In the transformed space, the high-dimensional convolution can be separated into a sequence of one-dimensional convolutions along the axes of the lattice. The resulting approximate message passing procedure is highly efficient even with a fully sequential implementation that does not make use of parallelism or the streaming capabilities of graphics hardware, which can provide further acceleration if desired.", "publication_ref": ["b15", "b0"], "figure_ref": [], "table_ref": []}, {"heading": "Learning", "text": "We learn the parameters of the model by piecewise training. First, the boosted unary classifiers are trained using the JointBoost algorithm [21], using the features described in Section 5. Next we learn the appearance kernel parameters w (1) , \u03b8 \u03b1 , and \u03b8 \u03b2 for the Potts model. w (1) can be found efficiently by a combination of expectation maximization and high-dimensional filtering. Unfortunately, the kernel widths \u03b8 \u03b1 and \u03b8 \u03b2 cannot be computed effectively with this approach, since their gradient involves a sum of non-Gaussian kernels, which are not amenable to the same acceleration techniques.\nWe found it to be more efficient to use grid search on a holdout validation set for all three kernel parameters w (1) , \u03b8 \u03b1 and \u03b8 \u03b2 .\nThe smoothness kernel parameters w (2) and \u03b8 \u03b3 do not significantly affect classification accuracy, but yield a small visual improvement. We found w (2) = \u03b8 \u03b3 = 1 to work well in practice.\nThe compatibility parameters \u00b5(a, b) = \u00b5(b, a) are learned using L-BFGS to maximize the loglikelihood (\u00b5 : I, T ) of the model for a validation set of images I with corresponding ground truth labelings T . L-BFGS requires the computation of the gradient of , which is intractable to estimate exactly, since it requires computing the gradient of the partition function Z. Instead, we use the mean field approximation described in Section 3 to estimate the gradient of Z. This leads to a simple approximation of the gradient for each training image:\n\u2202 \u2202\u00b5(a, b) (\u00b5 : I (n) , T (n) ) \u2248 \u2212 i T (n) i (a) j =i k(f i , f j )T (n) j (b) + i Q i (a) j =i k(f i , f j )Q i (b),(6)\nwhere (I (n) , T (n) ) is a single training image with its ground truth labeling and T (n) (a) is a binary image in which the ith pixel T\n(n) i\n(a) has value 1 if the ground truth label at the ith pixel of T (n) is a and 0 otherwise. A detailed derivation of Equation 6 is given in the supplementary material.\nThe sums j =i k(f i , f j )T j (b) and j =i k(f i , f j )Q i (b) are both computationally expensive to evaluate directly. As in Section 3.2, we use high-dimensional filtering to compute both sums efficiently. The runtime of the final learning algorithm is linear in the number of variables N .", "publication_ref": ["b20", "b0", "b0", "b0", "b1", "b1"], "figure_ref": [], "table_ref": []}, {"heading": "Implementation", "text": "The unary potentials used in our implementation are derived from TextonBoost [19,13]. We use the 17-dimensional filter bank suggested by Shotton et al. [19], and follow Ladick\u00fd et al. [13] by adding color, histogram of oriented gradients (HOG), and pixel location features. Our evaluation on the MSRC-21 dataset uses this extended version of TextonBoost for the unary potentials. For the VOC 2010 dataset we include the response of bounding box object detectors [4] for each object class as 20 additional features. This increases the performance of the unary classifiers on the VOC 2010 from 13% to 22%. We gain an additional 5% by training a logistic regression classifier on the responses of the boosted classifier.\nFor efficient high-dimensional filtering, we use a publicly available implementation of the permutohedral lattice [1]. We found a downsampling rate of one standard deviation to work best for all our experiments. Sampling-based filtering algorithms underestimate the edge strength k(f i , f j ) for very similar feature points. Proper normalization can cancel out most of this error. The permutohedral lattice allows for two types of normalizations. A global normalization by the average kernel strength k = 1 N i,j k(f i , f j ) can correct for constant error. A pixelwise normalization byk i = j k(f i , f j ) handles regional errors as well, but violates the CRF symmetry assumption \u03c8 p (x i , x j ) = \u03c8 p (x j , x i ). We found the pixelwise normalization to work better in practice.", "publication_ref": ["b18", "b12", "b18", "b12", "b3", "b0"], "figure_ref": [], "table_ref": []}, {"heading": "Evaluation", "text": "We evaluate the presented algorithm on two standard benchmarks for multi-class image segmentation and labeling. The first is the MSRC-21 dataset, which consists of 591 color images of size 320 \u00d7 213 with corresponding ground truth labelings of 21 object classes [19]. The second is the PASCAL VOC 2010 dataset, which contains 1928 color images of size approximately 500 \u00d7 400, with a total of 20 object classes and one background class [3]. The presented approach was evaluated alongside the adjacency (grid) CRF of Shotton et al. [19] and the Robust P n CRF of Kohli et al. [9], using publicly available reference implementations. To ensure a fair comparison, all models used the unary potentials described in Section 5. All experiments were conducted on an Intel i7-930 processor clocked at 2.80GHz. Eight CPU cores were used for training; all other experiments were performed on a single core. The inference algorithm was implemented in a single CPU thread.\nConvergence. We first evaluate the convergence of the mean field approximation by analyzing the KL-divergence between Q and P . Figure 2 shows the KL-divergence between Q and P over successive iterations of the inference algorithm. The KL-divergence was estimated up to a constant as described in supplementary material. Results are shown for different standard deviations \u03b8 \u03b1 and \u03b8 \u03b2 of the kernels. The graphs were aligned at 20 iterations for visual comparison. The number of iterations was set to 10 in all subsequent experiments. MSRC-21 dataset. We use the standard split of the dataset into 45% training, 10% validation and 45% test images [19]. The unary potentials were learned on the training set, while the parameters of all CRF models were learned using holdout validation. The total CRF training time was 40 minutes. The learned label compatibility function performed on par with the Potts model on this dataset. Figure 3 provides qualitative and quantitative results on the dataset. We report the standard measures of multi-class segmentation accuracy: \"global\" denotes the overall percentage of correctly classified image pixels and \"average\" is the unweighted average of per-category classification accuracy [19,9]. The presented inference algorithm on the fully connected CRF significantly outperforms the other models, evaluated against the standard ground truth data provided with the dataset.\nThe ground truth labelings provided with the MSRC-21 dataset are quite imprecise. In particular, regions around object boundaries are often left unlabeled. This makes it difficult to quantitatively evaluate the performance of algorithms that strive for pixel-level accuracy. Following Kohli et al. [9], we manually produced accurate segmentations and labelings for a set of images from the MSRC-21 dataset. Each image was fully annotated at the pixel level, with careful labeling around complex boundaries. This labeling was performed by hand for 94 representative images from the MSRC-21 dataset. Labeling a single image took 30 minutes on average. A number of images from this \"accurate ground truth\" set are shown in Figure 3. Figure 3 reports segmentation accuracy against this ground truth data alongside the evaluation against the standard ground truth. The results were obtained using 5-fold cross validation, where 4 5 of the 94 images were used to train the CRF pa-   rameters. The unary potentials were learned on a separate training set that did not include the 94 accurately annotated images.\nWe also adopt the methodology proposed by Kohli et al. [9] for evaluating segmentation accuracy around boundaries. Specifically, we count the relative number of misclassified pixels within a narrow band (\"trimap\") surrounding actual object boundaries, obtained from the accurate ground truth images. As shown in Figure 4, our algorithm outperforms previous work across all trimap widths.    Long-range connections. We have examined the value of long-range connections in our model by varying the spatial and color ranges \u03b8 \u03b1 and \u03b8 \u03b2 of the appearance kernel and analyzing the resulting classification accuracy. For this experiment, w (1) was held constant and w (2) was set to 0. The results are shown in Figure 6. Accuracy steadily increases as longer-range connections are added, peaking at spatial standard deviation of \u03b8 \u03b1 = 61 pixels and color standard deviation \u03b8 \u03b2 = 11. At this setting, more than 50% of the pairwise potential energy in the model was assigned to edges of length 35 pixels or higher. However, long-range connections can also propagate misleading information, as shown in Figure 7. Discussion. We have presented a highly efficient approximate inference algorithm for fully connected CRF models. Our results demonstrate that dense pixel-level connectivity leads to significantly more accurate pixel-level classification performance. Our single-threaded implementation processes benchmark images in a fraction of a second and the algorithm can be parallelized for further performance gains.", "publication_ref": ["b18", "b2", "b18", "b8", "b18", "b18", "b8", "b8", "b3", "b8", "b0", "b1"], "figure_ref": ["fig_1", "fig_2", "fig_2", "fig_2", "fig_4", "fig_6"], "table_ref": []}, {"heading": "", "text": "Acknowledgements. Philipp Kr\u00e4henb\u00fchl was supported in part by a Stanford Graduate Fellowship. We are grateful to Daphne Koller, Andrew Adams and Jongmin Baek for helpful discussions. Sergey Levine and Vangelis Kalogerakis provided comments on a draft of this paper.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Image", "text": "Our approach Ground truth Image Our approach Ground truth ", "publication_ref": [], "figure_ref": [], "table_ref": []}], "references": [{"ref_id": "b0", "title": "Fast high-dimensional filtering using the permutohedral lattice", "journal": "Computer Graphics Forum", "year": "2010", "authors": "A Adams; J Baek; M A Davis"}, {"ref_id": "b1", "title": "Gaussian kd-trees for fast high-dimensional filtering", "journal": "ACM Transactions on Graphics", "year": "2009", "authors": "A Adams; N Gelfand; J Dolson; M Levoy"}, {"ref_id": "b2", "title": "The PASCAL Visual Object Classes (VOC) challenge", "journal": "IJCV", "year": "2010", "authors": "M Everingham; L Van Gool; C K I Williams; J Winn; A Zisserman"}, {"ref_id": "b3", "title": "Cascade object detection with deformable part models", "journal": "", "year": "2010", "authors": "P F Felzenszwalb; R B Girshick; D A Mcallester"}, {"ref_id": "b4", "title": "Class segmentation and object localization with superpixel neighborhoods", "journal": "", "year": "2009", "authors": "B Fulkerson; A Vedaldi; S Soatto"}, {"ref_id": "b5", "title": "Object categorization using co-occurrence, location and appearance", "journal": "", "year": "2008", "authors": "C Galleguillos; A Rabinovich; S Belongie"}, {"ref_id": "b6", "title": "Multi-class segmentation with relative location prior", "journal": "IJCV", "year": "2008", "authors": "S Gould; J Rodgers; D Cohen; G Elidan; D Koller"}, {"ref_id": "b7", "title": "Multiscale conditional random fields for image labeling", "journal": "", "year": "2004", "authors": "X He; R S Zemel; M A Carreira-Perpinan"}, {"ref_id": "b8", "title": "Robust higher order potentials for enforcing label consistency", "journal": "IJCV", "year": "2007", "authors": "P Kohli; L Ladick\u00fd; P H S Torr"}, {"ref_id": "b9", "title": "Probabilistic Graphical Models: Principles and Techniques", "journal": "MIT Press", "year": "2009", "authors": "D Koller; N Friedman"}, {"ref_id": "b10", "title": "What energy functions can be minimized via graph cuts?", "journal": "PAMI", "year": "2004", "authors": "V Kolmogorov; R Zabih"}, {"ref_id": "b11", "title": "A hierarchical field framework for unified context-based classification", "journal": "", "year": "2005", "authors": "S Kumar; M Hebert"}, {"ref_id": "b12", "title": "Associative hierarchical crfs for object class image segmentation", "journal": "", "year": "2009", "authors": "L Ladick\u00fd; C Russell; P Kohli; P H S Torr"}, {"ref_id": "b13", "title": "Graph cut based inference with co-occurrence statistics", "journal": "", "year": "2010", "authors": "L Ladick\u00fd; C Russell; P Kohli; P H S Torr"}, {"ref_id": "b14", "title": "Conditional random fields: Probabilistic models for segmenting and labeling sequence data", "journal": "", "year": "2001", "authors": "J D Lafferty; A Mccallum; F C N Pereira"}, {"ref_id": "b15", "title": "A fast approximation of the bilateral filter using a signal processing approach", "journal": "IJCV", "year": "2009", "authors": "S Paris; F Durand"}, {"ref_id": "b16", "title": "RF) 2 -random forest random field", "journal": "", "year": "", "authors": "N Payet; S Todorovic"}, {"ref_id": "b17", "title": "Objects in context", "journal": "", "year": "2007", "authors": "A Rabinovich; A Vedaldi; C Galleguillos; E Wiewiora; S Belongie"}, {"ref_id": "b18", "title": "Textonboost for image understanding: Multi-class object recognition and segmentation by jointly modeling texture, layout, and context. IJCV", "journal": "", "year": "2006", "authors": "J Shotton; J M Winn; C Rother; A Criminisi"}, {"ref_id": "b19", "title": "The scientist and engineer's guide to digital signal processing. California Technical Publishing", "journal": "", "year": "1997", "authors": "S W Smith"}, {"ref_id": "b20", "title": "Sharing visual features for multiclass and multiview object detection", "journal": "PAMI", "year": "2007", "authors": "A Torralba; K P Murphy; W T Freeman"}, {"ref_id": "b21", "title": "Random field model for integration of local information and global information. PAMI, 30", "journal": "", "year": "2008", "authors": "T Toyoda; O Hasegawa"}, {"ref_id": "b22", "title": "Scene segmentation with crfs learned from partially labeled images", "journal": "", "year": "2007", "authors": "J J Verbeek; B Triggs"}], "figures": [{"figure_label": "1", "figure_type": "figure", "figure_id": "fig_0", "figure_caption": "Figure 1 :1Figure 1: Pixel-level classification with a fully connected CRF. (a) Input image from the MSRC-21 dataset. (b) The response of unary classifiers used by our models. (c) Classification produced by the Robust P n CRF [9]. (d) Classification produced by MCMC inference [17] in a fully connected pixel-level CRF model; the algorithm was run for 36 hours and only partially converged for the bottom image. (e) Classification produced by our inference algorithm in the fully connected model in 0.2 seconds.", "figure_data": ""}, {"figure_label": "2", "figure_type": "figure", "figure_id": "fig_1", "figure_caption": "Figure 2 :2Figure 2: Convergence analysis. (a) KL-divergence of the mean field approximation during successive iterations of the inference algorithm, averaged across 94 images from the MSRC-21 dataset. (b) Visualization of convergence on distributions for two class labels over an image from the dataset.", "figure_data": ""}, {"figure_label": "3", "figure_type": "figure", "figure_id": "fig_2", "figure_caption": "Figure 3 :3Figure 3: Qualitative and quantitative results on the MSRC-21 dataset.", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_3", "figure_caption": "(b) Segmentation accuracy within trimap", "figure_data": ""}, {"figure_label": "4", "figure_type": "figure", "figure_id": "fig_4", "figure_caption": "Figure 4 :4Figure 4: Segmentation accuracy around object boundaries. (a) Visualization of the \"trimap\" measure. (b) Percent of misclassified pixels within trimaps of different widths.", "figure_data": ""}, {"figure_label": "5", "figure_type": "figure", "figure_id": "fig_5", "figure_caption": "Figure 5 :5Figure 5: Qualitative results on the PASCAL VOC 2010 dataset. Average segmentation accuracy was 30.2%. fully connected model with Potts potentials yielded an average classification accuracy of 29.1%. The label compatibility function, learned on the validation set, further increased the classification accuracy to 30.2%. For comparison, the grid CRF achieves 28.3%. Training time was 2.5 hours and inference time is 0.5 seconds. Qualitative results are provided in Figure 5.", "figure_data": ""}, {"figure_label": "6", "figure_type": "figure", "figure_id": "fig_6", "figure_caption": "Figure 6 :6Figure 6: Influence of long-range connections on classification accuracy. (a) Global classification accuracy on the 94 MSRC images with accurate ground truth, as a function of kernel parameters \u03b8\u03b1 and \u03b8 \u03b2 . (b) Results for one image across two slices in parameter space, shown as black lines in (a).", "figure_data": ""}, {"figure_label": "", "figure_type": "table", "figure_id": "tab_1", "figure_caption": "PASCAL VOC 2010. Due to the lack of a publicly available ground truth labeling for the test set in the PASCAL VOC 2010, we use the training and validation data for all our experiments. We randomly partitioned the images into 3 groups: 40% training, 15% validation, and 45% test set. Segmentation accuracy was measured using the standard VOC measure[3]. The unary potentials were learned on the training set and yielded an average classification accuracy of 27.6%. The parameters for the Potts potentials in the fully connected CRF model were learned on the validation set. The", "figure_data": "Pixelwise Classifiaction Error [%]20 30 40 50Unary classifiers Grid CRF Robust P n CRF Fully connected CRF048121620ImageGround truthTrimap (4px)Trimap (8px)Trimap Width [Pixels](a) Trimaps of different widths"}], "formulas": [{"formula_id": "formula_0", "formula_text": "P (X|I) = 1 Z(I) exp(\u2212 c\u2208C G \u03c6 c (X c |I)),", "formula_coordinates": [2.0, 108.0, 720.98, 167.5, 13.64]}, {"formula_id": "formula_1", "formula_text": "E(x) = i \u03c8 u (x i ) + i<j \u03c8 p (x i , x j ),(1)", "formula_coordinates": [3.0, 229.66, 163.6, 274.34, 19.91]}, {"formula_id": "formula_2", "formula_text": "\u03c8 p (x i , x j ) = \u00b5(x i , x j ) K m=1 w (m) k (m) (f i , f j ) k(fi,fj ) ,(2)", "formula_coordinates": [3.0, 209.01, 272.29, 294.99, 28.18]}, {"formula_id": "formula_3", "formula_text": "k (m) is a Gaussian kernel k (m) (f i , f j ) = exp(\u2212 1 2 (f i \u2212 f j ) T \u039b (m) (f i \u2212 f j ))", "formula_coordinates": [3.0, 154.47, 305.45, 292.58, 13.47]}, {"formula_id": "formula_4", "formula_text": "k(f i , f j ) = w (1) exp \u2212 |p i \u2212 p j | 2 2\u03b8 2 \u03b1 \u2212 |I i \u2212 I j | 2 2\u03b8 2 \u03b2 appearance kernel +w (2) exp \u2212 |p i \u2212 p j | 2 2\u03b8 2 \u03b3 smoothness kernel .(3)", "formula_coordinates": [3.0, 148.11, 388.38, 355.89, 42.67]}, {"formula_id": "formula_5", "formula_text": "Q i (x i = l) = 1 Z i exp \uf8f1 \uf8f2 \uf8f3 \u2212\u03c8 u (x i ) \u2212 l \u2208L \u00b5(l, l ) K m=1 w (m) j =i k (m) (f i , f j )Q j (l ) \uf8fc \uf8fd \uf8fe .(4)", "formula_coordinates": [4.0, 138.23, 109.57, 365.77, 34.16]}, {"formula_id": "formula_6", "formula_text": "Algorithm 1 Mean field in fully connected CRFs Initialize Q Q i (x i ) \u2190 1 Zi exp{\u2212\u03c6 u (x i )} while not converged do", "formula_coordinates": [4.0, 108.0, 179.36, 396.0, 38.27]}, {"formula_id": "formula_7", "formula_text": "(m) i (l) \u2190 j =i k (m) (f i , f j )Q j (l) for all m", "formula_coordinates": [4.0, 140.78, 219.1, 172.29, 14.28]}, {"formula_id": "formula_8", "formula_text": "Q i (x i ) \u2190 l\u2208L \u00b5 (m) (x i , l) m w (m)Q (m) i (l) Compatibility transform Q i (x i ) \u2190 exp{\u2212\u03c8 u (x i ) \u2212Q i (x i )} Local update normalize Q i (x i ) end while", "formula_coordinates": [4.0, 117.96, 234.84, 386.04, 47.89]}, {"formula_id": "formula_9", "formula_text": "Q (m) i (l) = j\u2208V k (m) (f i , f j )Q j (l) \u2212 Q i (l) message passing = [G \u039b (m) \u2297 Q(l)] (f i ) Q (m) i (l) \u2212Q i (l).(5)", "formula_coordinates": [4.0, 154.71, 423.31, 349.29, 31.95]}, {"formula_id": "formula_10", "formula_text": "Algorithm 2 Efficient message passing: Q (m) i (l) = j\u2208V k (m) (f i , f j )Q j (l) Q \u2193 (l) \u2190 downsample(Q(l)) Downsample \u2200 i\u2208V \u2193 Q (m) \u2193i (l) \u2190 j\u2208V \u2193 k (m) (f \u2193i , f \u2193j )Q \u2193j (l) Convolution on samples f \u2193 Q (m) (l) \u2190 upsample(Q (m) \u2193(", "formula_coordinates": [4.0, 108.0, 545.48, 396.0, 66.1]}, {"formula_id": "formula_11", "formula_text": "\u2202 \u2202\u00b5(a, b) (\u00b5 : I (n) , T (n) ) \u2248 \u2212 i T (n) i (a) j =i k(f i , f j )T (n) j (b) + i Q i (a) j =i k(f i , f j )Q i (b),(6)", "formula_coordinates": [5.0, 114.58, 417.01, 389.42, 38.7]}, {"formula_id": "formula_12", "formula_text": "(n) i", "formula_coordinates": [5.0, 228.62, 478.07, 13.68, 14.07]}], "doi": ""}