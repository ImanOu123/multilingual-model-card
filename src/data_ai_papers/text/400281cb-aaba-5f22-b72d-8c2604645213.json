{"title": "Fully Convolutional Networks for Semantic Segmentation", "authors": "Jonathan Long; Evan Shelhamer; Trevor Darrell; U C Berkeley", "pub_date": "2015-03-08", "abstract": "Convolutional networks are powerful visual models that yield hierarchies of features. We show that convolutional networks by themselves, trained end-to-end, pixelsto-pixels, exceed the state-of-the-art in semantic segmentation. Our key insight is to build \"fully convolutional\" networks that take input of arbitrary size and produce correspondingly-sized output with efficient inference and learning. We define and detail the space of fully convolutional networks, explain their application to spatially dense prediction tasks, and draw connections to prior models. We adapt contemporary classification networks (AlexNet [19], the VGG net [31], and GoogLeNet [32]) into fully convolutional networks and transfer their learned representations by fine-tuning [4] to the segmentation task. We then define a novel architecture that combines semantic information from a deep, coarse layer with appearance information from a shallow, fine layer to produce accurate and detailed segmentations. Our fully convolutional network achieves state-of-the-art segmentation of PASCAL VOC (20% relative improvement to 62.2% mean IU on 2012), NYUDv2, and SIFT Flow, while inference takes less than one fifth of a second for a typical image.", "sections": [{"heading": "Introduction", "text": "Convolutional networks are driving advances in recognition. Convnets are not only improving for whole-image classification [19,31,32], but also making progress on local tasks with structured output. These include advances in bounding box object detection [29,12,17], part and keypoint prediction [39,24], and local correspondence [24,9].\nThe natural next step in the progression from coarse to fine inference is to make a prediction at every pixel. Prior approaches have used convnets for semantic segmentation [27,2,8,28,16,14,11], in which each pixel is labeled with the class of its enclosing object or region, but with shortcomings that this work addresses. We show that a fully convolutional network (FCN), trained end-to-end, pixels-to-pixels on semantic segmentation exceeds the state-of-the-art without further machinery. To our knowledge, this is the first work to train FCNs end-to-end (1) for pixelwise prediction and (2) from supervised pre-training. Fully convolutional versions of existing networks predict dense outputs from arbitrary-sized inputs. Both learning and inference are performed whole-image-ata-time by dense feedforward computation and backpropagation. In-network upsampling layers enable pixelwise prediction and learning in nets with subsampled pooling. This method is efficient, both asymptotically and absolutely, and precludes the need for the complications in other works. Patchwise training is common [27,2,8,28,11], but lacks the efficiency of fully convolutional training. Our approach does not make use of pre-and post-processing complications, including superpixels [8,16], proposals [16,14], or post-hoc refinement by random fields or local classifiers [8,16]. Our model transfers recent success in classification [19,31,32] to dense prediction by reinterpreting classification nets as fully convolutional and fine-tuning from their learned representations. In contrast, previous works have applied small convnets without supervised pre-training [8,28,27].\nSemantic segmentation faces an inherent tension between semantics and location: global information resolves what while local information resolves where. Deep feature hierarchies jointly encode location and semantics in a localto-global pyramid. We define a novel \"skip\" architecture to combine deep, coarse, semantic information and shallow, fine, appearance information in Section 4.2 (see Figure 3).\nIn the next section, we review related work on deep classification nets, FCNs, and recent approaches to semantic segmentation using convnets. The following sections explain FCN design and dense prediction tradeoffs, introduce our architecture with in-network upsampling and multilayer combinations, and describe our experimental framework. Finally, we demonstrate state-of-the-art results on PASCAL VOC 2011-2, NYUDv2, and SIFT Flow.", "publication_ref": ["b18", "b30", "b31", "b28", "b11", "b16", "b38", "b23", "b23", "b8", "b26", "b1", "b7", "b27", "b15", "b13", "b10", "b26", "b1", "b7", "b27", "b10", "b7", "b15", "b15", "b13", "b7", "b15", "b18", "b30", "b31", "b7", "b27", "b26"], "figure_ref": [], "table_ref": []}, {"heading": "Related work", "text": "Our approach draws on recent successes of deep nets for image classification [19,31,32] and transfer learning [4,38]. Transfer was first demonstrated on various visual recognition tasks [4,38], then on detection, and on both instance and semantic segmentation in hybrid proposalclassifier models [12,16,14]. We now re-architect and finetune classification nets to direct, dense prediction of semantic segmentation. We chart the space of FCNs and situate prior models, both historical and recent, in this framework.\nFully convolutional networks To our knowledge, the idea of extending a convnet to arbitrary-sized inputs first appeared in Matan et al. [25], which extended the classic LeNet [21] to recognize strings of digits. Because their net was limited to one-dimensional input strings, Matan et al. used Viterbi decoding to obtain their outputs. Wolf and Platt [37] expand convnet outputs to 2-dimensional maps of detection scores for the four corners of postal address blocks. Both of these historical works do inference and learning fully convolutionally for detection. Ning et al. [27] define a convnet for coarse multiclass segmentation of C. elegans tissues with fully convolutional inference.\nFully convolutional computation has also been exploited in the present era of many-layered nets. Sliding window detection by Sermanet et al. [29], semantic segmentation by Pinheiro and Collobert [28], and image restoration by Eigen et al. [5] do fully convolutional inference. Fully convolutional training is rare, but used effectively by Tompson et al. [35] to learn an end-to-end part detector and spatial model for pose estimation, although they do not exposit on or analyze this method.\nAlternatively, He et al. [17] discard the nonconvolutional portion of classification nets to make a feature extractor. They combine proposals and spatial pyramid pooling to yield a localized, fixed-length feature for classification. While fast and effective, this hybrid model cannot be learned end-to-end.\nDense prediction with convnets Several recent works have applied convnets to dense prediction problems, including semantic segmentation by Ning et al. [27], Farabet et al. [8], and Pinheiro and Collobert [28]; boundary prediction for electron microscopy by Ciresan et al. [2] and for natural images by a hybrid neural net/nearest neighbor model by Ganin and Lempitsky [11]; and image restoration and depth estimation by Eigen et al. [5,6]. Common elements of these approaches include\n\u2022 small models restricting capacity and receptive fields;\n\u2022 patchwise training [27,2,8,28,11];\n\u2022 post-processing by superpixel projection, random field regularization, filtering, or local classification [8,2,11]; \u2022 input shifting and output interlacing for dense output [28,11] as introduced by OverFeat [29]; \u2022 multi-scale pyramid processing [8,28,11];\n\u2022 saturating tanh nonlinearities [8,5,28]; and \u2022 ensembles [2,11], whereas our method does without this machinery. However, we do study patchwise training 3.4 and \"shift-and-stitch\" dense output 3.2 from the perspective of FCNs. We also discuss in-network upsampling 3.3, of which the fully connected prediction by Eigen et al. [6] is a special case.\nUnlike these existing methods, we adapt and extend deep classification architectures, using image classification as supervised pre-training, and fine-tune fully convolutionally to learn simply and efficiently from whole image inputs and whole image ground thruths.\nHariharan et al. [16] and Gupta et al. [14] likewise adapt deep classification nets to semantic segmentation, but do so in hybrid proposal-classifier models. These approaches fine-tune an R-CNN system [12] by sampling bounding boxes and/or region proposals for detection, semantic segmentation, and instance segmentation. Neither method is learned end-to-end.\nThey achieve state-of-the-art results on PASCAL VOC segmentation and NYUDv2 segmentation respectively, so we directly compare our standalone, end-to-end FCN to their semantic segmentation results in Section 5.", "publication_ref": ["b18", "b30", "b31", "b3", "b37", "b3", "b37", "b11", "b15", "b13", "b24", "b20", "b36", "b26", "b28", "b27", "b4", "b34", "b16", "b26", "b7", "b27", "b1", "b10", "b4", "b5", "b26", "b1", "b7", "b27", "b10", "b7", "b1", "b10", "b27", "b10", "b7", "b27", "b10", "b7", "b4", "b27", "b1", "b10", "b5", "b15", "b13", "b11"], "figure_ref": [], "table_ref": []}, {"heading": "Fully convolutional networks", "text": "Each layer of data in a convnet is a three-dimensional array of size h \u00d7 w \u00d7 d, where h and w are spatial dimensions, and d is the feature or channel dimension. The first layer is the image, with pixel size h \u00d7 w, and d color channels. Locations in higher layers correspond to the locations in the image they are path-connected to, which are called their receptive fields.\nConvnets are built on translation invariance. Their basic components (convolution, pooling, and activation functions) operate on local input regions, and depend only on relative spatial coordinates. Writing x ij for the data vector at location (i, j) in a particular layer, and y ij for the follow-ing layer, these functions compute outputs y ij by\ny ij = f ks ({x si+\u03b4i,sj+\u03b4j } 0\u2264\u03b4i,\u03b4j\u2264k )\nwhere k is called the kernel size, s is the stride or subsampling factor, and f ks determines the layer type: a matrix multiplication for convolution or average pooling, a spatial max for max pooling, or an elementwise nonlinearity for an activation function, and so on for other types of layers.\nThis functional form is maintained under composition, with kernel size and stride obeying the transformation rule\nf ks \u2022 g k s = (f \u2022 g) k +(k\u22121)s ,ss .\nWhile a general deep net computes a general nonlinear function, a net with only layers of this form computes a nonlinear filter, which we call a deep filter or fully convolutional network. An FCN naturally operates on an input of any size, and produces an output of corresponding (possibly resampled) spatial dimensions.\nA real-valued loss function composed with an FCN defines a task. If the loss function is a sum over the spatial dimensions of the final layer, (x; \u03b8) = ij (x ij ; \u03b8), its gradient will be a sum over the gradients of each of its spatial components. Thus stochastic gradient descent on computed on whole images will be the same as stochastic gradient descent on , taking all of the final layer receptive fields as a minibatch.\nWhen these receptive fields overlap significantly, both feedforward computation and backpropagation are much more efficient when computed layer-by-layer over an entire image instead of independently patch-by-patch.\nWe next explain how to convert classification nets into fully convolutional nets that produce coarse output maps. For pixelwise prediction, we need to connect these coarse outputs back to the pixels. Section 3.2 describes a trick that OverFeat [29] introduced for this purpose. We gain insight into this trick by reinterpreting it as an equivalent network modification. As an efficient, effective alternative, we introduce deconvolution layers for upsampling in Section 3.3. In Section 3.4 we consider training by patchwise sampling, and give evidence in Section 4.3 that our whole image training is faster and equally effective.", "publication_ref": ["b28"], "figure_ref": [], "table_ref": []}, {"heading": "Adapting classifiers for dense prediction", "text": "Typical recognition nets, including LeNet [21], AlexNet [19], and its deeper successors [31,32], ostensibly take fixed-sized inputs and produce nonspatial outputs. The fully connected layers of these nets have fixed dimensions and throw away spatial coordinates. However, these fully connected layers can also be viewed as convolutions with kernels that cover their entire input regions. Doing so casts them into fully convolutional networks that take input of any size and output classification maps. This transformation`t abby cat\" Furthermore, while the resulting maps are equivalent to the evaluation of the original net on particular input patches, the computation is highly amortized over the overlapping regions of those patches. For example, while AlexNet takes 1.2 ms (on a typical GPU) to produce the classification scores of a 227 \u00d7 227 image, the fully convolutional version takes 22 ms to produce a 10 \u00d7 10 grid of outputs from a 500 \u00d7 500 image, which is more than 5 times faster than the na\u00efve approach 1 .\nThe spatial output maps of these convolutionalized models make them a natural choice for dense problems like semantic segmentation. With ground truth available at every output cell, both the forward and backward passes are straightforward, and both take advantage of the inherent computational efficiency (and aggressive optimization) of convolution.\nThe corresponding backward times for the AlexNet example are 2.4 ms for a single image and 37 ms for a fully convolutional 10 \u00d7 10 output map, resulting in a speedup similar to that of the forward pass. This dense backpropagation is illustrated in Figure 1.\nWhile our reinterpretation of classification nets as fully convolutional yields output maps for inputs of any size, the output dimensions are typically reduced by subsampling. The classification nets subsample to keep filters small and computational requirements reasonable. This coarsens the output of a fully convolutional version of these nets, reducing it from the size of the input by a factor equal to the pixel stride of the receptive fields of the output units.", "publication_ref": ["b20", "b18", "b30", "b31"], "figure_ref": ["fig_0"], "table_ref": []}, {"heading": "Shift-and-stitch is filter rarefaction", "text": "Input shifting and output interlacing is a trick that yields dense predictions from coarse outputs without interpolation, introduced by OverFeat [29]. If the outputs are downsampled by a factor of f , the input is shifted (by left and top padding) x pixels to the right and y pixels down, once for every value of (x, y) \u2208 {0, . . . , f \u2212 1} \u00d7 {0, . . . , f \u2212 1}. These f 2 inputs are each run through the convnet, and the outputs are interlaced so that the predictions correspond to the pixels at the centers of their receptive fields.\nChanging only the filters and layer strides of a convnet can produce the same output as this shift-and-stitch trick. Consider a layer (convolution or pooling) with input stride s, and a following convolution layer with filter weights f ij (eliding the feature dimensions, irrelevant here). Setting the lower layer's input stride to 1 upsamples its output by a factor of s, just like shift-and-stitch. However, convolving the original filter with the upsampled output does not produce the same result as the trick, because the original filter only sees a reduced portion of its (now upsampled) input. To reproduce the trick, rarefy the filter by enlarging it as f ij = f i/s,j/s if s divides both i and j; 0 otherwise, (with i and j zero-based). Reproducing the full net output of the trick involves repeating this filter enlargement layerby-layer until all subsampling is removed.\nSimply decreasing subsampling within a net is a tradeoff: the filters see finer information, but have smaller receptive fields and take longer to compute. We have seen that the shift-and-stitch trick is another kind of tradeoff: the output is made denser without decreasing the receptive field sizes of the filters, but the filters are prohibited from accessing information at a finer scale than their original design.\nAlthough we have done preliminary experiments with shift-and-stitch, we do not use it in our model. We find learning through upsampling, as described in the next section, to be more effective and efficient, especially when combined with the skip layer fusion described later on.", "publication_ref": ["b28"], "figure_ref": [], "table_ref": []}, {"heading": "Upsampling is backwards strided convolution", "text": "Another way to connect coarse outputs to dense pixels is interpolation. For instance, simple bilinear interpolation computes each output y ij from the nearest four inputs by a linear map that depends only on the relative positions of the input and output cells.\nIn a sense, upsampling with factor f is convolution with a fractional input stride of 1/f . So long as f is integral, a natural way to upsample is therefore backwards convolution (sometimes called deconvolution) with an output stride of f . Such an operation is trivial to implement, since it simply reverses the forward and backward passes of convolution.\nThus upsampling is performed in-network for end-to-end learning by backpropagation from the pixelwise loss.\nNote that the deconvolution filter in such a layer need not be fixed (e.g., to bilinear upsampling), but can be learned. A stack of deconvolution layers and activation functions can even learn a nonlinear upsampling.\nIn our experiments, we find that in-network upsampling is fast and effective for learning dense prediction. Our best segmentation architecture uses these layers to learn to upsample for refined prediction in Section 4.2.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Patchwise training is loss sampling", "text": "In stochastic optimization, gradient computation is driven by the training distribution. Both patchwise training and fully-convolutional training can be made to produce any distribution, although their relative computational efficiency depends on overlap and minibatch size. Whole image fully convolutional training is identical to patchwise training where each batch consists of all the receptive fields of the units below the loss for an image (or collection of images). While this is more efficient than uniform sampling of patches, it reduces the number of possible batches. However, random selection of patches within an image may be recovered simply. Restricting the loss to a randomly sampled subset of its spatial terms (or, equivalently applying a DropConnect mask [36] between the output and the loss) excludes patches from the gradient computation.\nIf the kept patches still have significant overlap, fully convolutional computation will still speed up training. If gradients are accumulated over multiple backward passes, batches can include patches from several images. 2 Sampling in patchwise training can correct class imbalance [27,8,2] and mitigate the spatial correlation of dense patches [28,16]. In fully convolutional training, class balance can also be achieved by weighting the loss, and loss sampling can be used to address spatial correlation.\nWe explore training with sampling in Section 4.3, and do not find that it yields faster or better convergence for dense prediction. Whole image training is effective and efficient.", "publication_ref": ["b35", "b1", "b26", "b7", "b1", "b27", "b15"], "figure_ref": [], "table_ref": []}, {"heading": "Segmentation Architecture", "text": "We cast ILSVRC classifiers into FCNs and augment them for dense prediction with in-network upsampling and a pixelwise loss. We train for segmentation by fine-tuning. Next, we build a novel skip architecture that combines coarse, semantic and local, appearance information to refine prediction.\nFor this investigation, we train and validate on the PAS-CAL VOC 2011 segmentation challenge [7]. We train with a per-pixel multinomial logistic loss and validate with the standard metric of mean pixel intersection over union, with the mean taken over all classes, including background. The training ignores pixels that are masked out (as ambiguous or difficult) in the ground truth.", "publication_ref": ["b6"], "figure_ref": [], "table_ref": []}, {"heading": "From classifier to dense FCN", "text": "We begin by convolutionalizing proven classification architectures as in Section 3. We consider the AlexNet 3 architecture [19] that won ILSVRC12, as well as the VGG nets [31] and the GoogLeNet 4 [32] which did exceptionally well in ILSVRC14. We pick the VGG 16-layer net 5 , which we found to be equivalent to the 19-layer net on this task. For GoogLeNet, we use only the final loss layer, and improve performance by discarding the final average pooling layer. We decapitate each net by discarding the final classifier layer, and convert all fully connected layers to convolutions. We append a 1 \u00d7 1 convolution with channel dimension 21 to predict scores for each of the PAS-CAL classes (including background) at each of the coarse output locations, followed by a deconvolution layer to bilinearly upsample the coarse outputs to pixel-dense outputs as described in Section 3.3. Table 1 compares the preliminary validation results along with the basic characteristics of each net. We report the best results achieved after convergence at a fixed learning rate (at least 175 epochs).\nFine-tuning from classification to segmentation gave reasonable predictions for each net. Even the worst model achieved \u223c 75% of state-of-the-art performance. The segmentation-equippped VGG net (FCN-VGG16) already appears to be state-of-the-art at 56.0 mean IU on val, compared to 52.6 on test [16]. Training on extra data raises performance to 59.4 mean IU on a subset of val 7 . Training details are given in Section 4.3.\nDespite similar classification accuracy, our implementation of GoogLeNet did not match this segmentation result.", "publication_ref": ["b18", "b30", "b3", "b31", "b4", "b15", "b6"], "figure_ref": [], "table_ref": []}, {"heading": "Combining what and where", "text": "We define a new fully convolutional net (FCN) for segmentation that combines layers of the feature hierarchy and refines the spatial precision of the output. See Figure 3.\nWhile fully convolutionalized classifiers can be finetuned to segmentation as shown in 4.1, and even score highly on the standard metric, their output is dissatisfyingly coarse (see Figure 4). The 32 pixel stride at the final prediction layer limits the scale of detail in the upsampled output.\nWe address this by adding links that combine the final prediction layer with lower layers with finer strides. This Table 1. We adapt and extend three classification convnets to segmentation. We compare performance by mean intersection over union on the validation set of PASCAL VOC 2011 and by inference time (averaged over 20 trials for a 500 \u00d7 500 input on an NVIDIA Tesla K40c). We detail the architecture of the adapted nets as regards dense prediction: number of parameter layers, receptive field size of output units, and the coarsest stride within the net. (These numbers give the best performance obtained at a fixed learning rate, not best performance possible.) turns a line topology into a DAG, with edges that skip ahead from lower layers to higher ones (Figure 3). As they see fewer pixels, the finer scale predictions should need fewer layers, so it makes sense to make them from shallower net outputs. Combining fine layers and coarse layers lets the model make local predictions that respect global structure. By analogy to the multiscale local jet of Florack et al. [10], we call our nonlinear local feature hierarchy the deep jet.", "publication_ref": ["b9"], "figure_ref": [], "table_ref": []}, {"heading": "FCN-", "text": "We first divide the output stride in half by predicting from a 16 pixel stride layer. We add a 1 \u00d7 1 convolution layer on top of pool4 to produce additional class predictions. We fuse this output with the predictions computed on top of conv7 (convolutionalized fc7) at stride 32 by adding a 2\u00d7 upsampling layer and summing 6 both predictions. (See Figure 3). We initialize the 2\u00d7 upsampling to bilinear interpolation, but allow the parameters to be learned as described in Section 3.3. Finally, the stride 16 predictions are upsampled back to the image. We call this net FCN-16s. FCN-16s is learned end-to-end, initialized with the parameters of the last, coarser net, which we now call FCN-32s. The new parameters acting on pool4 are zero-initialized so that the net starts with unmodified predictions. The learning rate is decreased by a factor of 100.\nLearning this skip net improves performance on the validation set by 3.0 mean IU to 62.4. Figure 4 shows improvement in the fine structure of the output. We compared this fusion with learning only from the pool4 layer (which resulted in poor performance), and simply decreasing the learning rate without adding the extra link (which results in an insignificant performance improvement, without improving the quality of the output).\nWe continue in this fashion by fusing predictions from pool3 with a 2\u00d7 upsampling of predictions fused from pool4 and conv7, building the net FCN-8s. We obtain FCN-32s FCN-16s FCN-8s Ground truth Figure 4. Refining fully convolutional nets by fusing information from layers with different strides improves segmentation detail.\nThe first three images show the output from our 32, 16, and 8 pixel stride nets (see Figure 3). a minor additional improvement to 62.7 mean IU, and find a slight improvement in the smoothness and detail of our output. At this point our fusion improvements have met diminishing returns, both with respect to the IU metric which emphasizes large-scale correctness, and also in terms of the improvement visible e.g. in Figure 4, so we do not continue fusing even lower layers.\nRefinement by other means Decreasing the stride of pooling layers is the most straightforward way to obtain finer predictions. However, doing so is problematic for our VGG16-based net. Setting the pool5 layer to have stride 1 requires our convolutionalized fc6 to have a kernel size of 14 \u00d7 14 in order to maintain its receptive field size. In addition to their computational cost, we had difficulty learning such large filters. We made an attempt to re-architect the layers above pool5 with smaller filters, but were not successful in achieving comparable performance; one possible explanation is that the initialization from ImageNet-trained weights in the upper layers is important.\nAnother way to obtain finer predictions is to use the shiftand-stitch trick described in Section 3.2. In limited experiments, we found the cost to improvement ratio from this method to be worse than layer fusion.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Experimental framework", "text": "Optimization We train by SGD with momentum. We use a minibatch size of 20 images and fixed learning rates of 10 \u22123 , 10 \u22124 , and 5 \u22125 for FCN-AlexNet, FCN-VGG16, and FCN-GoogLeNet, respectively, chosen by line search. We use momentum 0.9, weight decay of 5 \u22124 or 2 \u22124 , and doubled the learning rate for biases, although we found training to be insensitive to these parameters (but sensitive to the learning rate). We zero-initialize the class scoring convolution layer, finding random initialization to yield neither better performance nor faster convergence. Dropout was included where used in the original classifier nets.\nFine-tuning We fine-tune all layers by backpropagation through the whole net.\nFine-tuning the output classifier alone yields only 70% of the full finetuning performance as compared in Table 2. Training from scratch is not feasible considering the time required to learn the base classification nets. (Note that the VGG net is trained in stages, while we initialize from the full 16-layer version.) Fine-tuning takes three days on a single GPU for the coarse FCN-32s version, and about one day each to upgrade to the FCN-16s and FCN-8s versions.\nPatch Sampling As explained in Section 3. lar grid of large, overlapping patches. By contrast, prior work randomly samples patches over a full dataset [27,2,8,28,11], potentially resulting in higher variance batches that may accelerate convergence [22]. We study this tradeoff by spatially sampling the loss in the manner described earlier, making an independent choice to ignore each final layer cell with some probability 1\u2212p. To avoid changing the effective batch size, we simultaneously increase the number of images per batch by a factor 1/p. Note that due to the efficiency of convolution, this form of rejection sampling is still faster than patchwise training for large enough values of p (e.g., at least for p > 0.2 according to the numbers in Section 3.1). Figure 5 shows the effect of this form of sampling on convergence. We find that sampling does not have a significant effect on convergence rate compared to whole image training, but takes significantly more time due to the larger number of images that need to be considered per batch. We therefore choose unsampled, whole image training in our other experiments.\nClass Balancing Fully convolutional training can balance classes by weighting or sampling the loss. Although our labels are mildly unbalanced (about 3/4 are background), we find class balancing unnecessary.\nDense Prediction The scores are upsampled to the input dimensions by deconvolution layers within the net. Final layer deconvolutional filters are fixed to bilinear interpolation, while intermediate upsampling layers are initialized to bilinear upsampling, and then learned. Shift-andstitch (Section 3.2), or the filter rarefaction equivalent, are not used.\nAugmentation We tried augmenting the training data by randomly mirroring and \"jittering\" the images by translating them up to 32 pixels (the coarsest scale of prediction) in each direction. This yielded no noticeable improvement.\nMore Training Data The PASCAL VOC 2011 segmentation challenge training set, which we used for Table 1, labels 1112 images. Hariharan et al. [15] have collected labels for a much larger set of 8498 PASCAL training images, which was used to train the previous state-of-the-art system, SDS [16]. This training data improves the FCN-VGG16 validation score 7 by 3.4 points to 59.4 mean IU.\nImplementation All models are trained and tested with Caffe [18] on a single NVIDIA Tesla K40c. The models and code will be released open-source on publication.", "publication_ref": ["b26", "b1", "b7", "b27", "b10", "b21", "b14", "b15", "b17"], "figure_ref": [], "table_ref": ["tab_1"]}, {"heading": "Results", "text": "We test our FCN on semantic segmentation and scene parsing, exploring PASCAL VOC, NYUDv2, and SIFT Flow. Although these tasks have historically distinguished between objects and regions, we treat both uniformly as pixel prediction. We evaluate our FCN skip architecture 8 on each of these datasets, and then extend it to multi-modal input for NYUDv2 and multi-task prediction for the semantic and geometric labels of SIFT Flow.\nMetrics We report four metrics from common semantic segmentation and scene parsing evaluations that are variations on pixel accuracy and region intersection over union (IU). Let n ij be the number of pixels of class i predicted to belong to class j, where there are n cl different classes, and let t i = j n ij be the total number of pixels of class i. We compute:\n\u2022 pixel accuracy:\ni n ii / i t i \u2022 mean accuraccy: (1/n cl ) i n ii /t i \u2022 mean IU: (1/n cl ) i n ii / t i + j n ji \u2212 n ii\n\u2022 frequency weighted IU:\n( k t k ) \u22121 i t i n ii / t i + j n ji \u2212 n ii\nPASCAL VOC Table 3 gives the performance of our FCN-8s on the test sets of PASCAL VOC 2011 and 2012, and compares it to the previous state-of-the-art, SDS [16], and the well-known R-CNN [12]. We achieve the best results on mean IU 9 by a relative margin of 20%. Inference time is reduced 114\u00d7 (convnet only, ignoring proposals and refinement) or 286\u00d7 (overall).   4 gives the performance of our model in several variations. First we train our unmodified coarse model (FCN-32s) on RGB images. To add depth information, we train on a model upgraded to take four-channel RGB-D input (early fusion). This provides little benefit, perhaps due to the difficultly of propagating meaningful gradients all the way through the model. Following the success of Gupta et al. [14], we try the three-dimensional HHA encoding of depth, training nets on just this information, as well as a \"late fusion\" of RGB and HHA where the predictions from both nets are summed at the final layer, and the resulting two-stream net is learned end-to-end. Finally we upgrade this late fusion net to a 16-stride version.\nSIFT Flow is a dataset of 2,688 images with pixel labels for 33 semantic categories (\"bridge\", \"mountain\", \"sun\"), as well as three geometric categories (\"horizontal\", \"vertical\", and \"sky\"). An FCN can naturally learn a joint representation that simultaneously predicts both types of labels. We learn a two-headed version of FCN-16s with semantic and geometric prediction layers and losses. The learned model performs as well on both tasks as two independently trained models, while learning and inference are essentially as fast as each independent model by itself. The results in Table 5, computed on the standard split into 2,488 training and 200 test images, 10 show state-of-the-art performance on both tasks. 10 Three of the SIFT Flow categories are not present in the test set. We made predictions across all 33 categories, but only included categories actually present in the test set in our evaluation. (An earlier version of this paper reported a lower mean IU, which included all categories either present or predicted in the evaluation.) Table 5. Results on SIFT Flow 10 with class segmentation (center) and geometric segmentation (right). Tighe [33] is a non-parametric transfer method. Tighe 1 is an exemplar SVM while 2 is SVM + MRF. Farabet is a multi-scale convnet trained on class-balanced samples (1) or natural frequency samples (2). Pinheiro is a multi-scale, recurrent convnet, denoted RCNN3 (\u2022 3 ). The metric for geometry is pixel accuracy. ", "publication_ref": ["b7", "b15", "b11", "b13", "b9", "b9", "b32", "b1"], "figure_ref": [], "table_ref": ["tab_2", "tab_3"]}, {"heading": "FCN-8s", "text": "SDS [16] Ground Truth Image Figure 6. Fully convolutional segmentation nets produce stateof-the-art performance on PASCAL. The left column shows the output of our highest performing net, FCN-8s. The second shows the segmentations produced by the previous state-of-the-art system by Hariharan et al. [16]. Notice the fine structures recovered (first row), ability to separate closely interacting objects (second row), and robustness to occluders (third row). The fourth row shows a failure case: the net sees lifejackets in a boat as people.", "publication_ref": ["b15", "b15"], "figure_ref": [], "table_ref": []}, {"heading": "Conclusion", "text": "Fully convolutional networks are a rich class of models, of which modern classification convnets are a special case. Recognizing this, extending these classification nets to segmentation, and improving the architecture with multi-resolution layer combinations dramatically improves the state-of-the-art, while simultaneously simplifying and speeding up learning and inference.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "", "text": "gratefully acknowledge NVIDIA for GPU donation. We thank Bharath Hariharan and Saurabh Gupta for their advice and dataset tools. We thank Sergio Guadarrama for reproducing GoogLeNet in Caffe. We thank Jitendra Malik for his helpful comments. Thanks to Wei Liu for pointing out an issue wth our SIFT Flow mean IU computation and an error in our frequency weighted mean IU formula.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "A. Upper Bounds on IU", "text": "In this paper, we have achieved good performance on the mean IU segmentation metric even with coarse semantic prediction. To better understand this metric and the limits of this approach with respect to it, we compute approximate upper bounds on performance with prediction at various scales. We do this by downsampling ground truth images and then upsampling them again to simulate the best results obtainable with a particular downsampling factor. The following table gives  Pixel-perfect prediction is clearly not necessary to achieve mean IU well above state-of-the-art, and, conversely, mean IU is a not a good measure of fine-scale accuracy.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "B. More Results", "text": "We further evaluate our FCN for semantic segmentation. PASCAL-Context [26] provides whole scene annotations of PASCAL VOC 2010. While there are over 400 distinct classes, we follow the 59 class task defined by [26] that picks the most frequent classes. We train and evaluate on the training and val sets respectively. In Table 6, we compare to the joint object + stuff variation of Convolutional Feature Masking [3] which is the previous state-of-the-art on this task. FCN-8s scores 35.1 mean IU for an 11% relative improvement.", "publication_ref": ["b25", "b25", "b2"], "figure_ref": [], "table_ref": []}, {"heading": "Changelog", "text": "The arXiv version of this paper is kept up-to-date with corrections and additional relevant material. The following gives a brief history of changes. Table 6. Results on PASCAL-Context. CFM is the best result of [3] by convolutional feature masking and segment pursuit with the VGG net. O2P is the second order pooling method [1] as reported in the errata of [26]. The 59 class task includes the 59 most frequent classes while the 33 class task consists of an easier subset identified by [26]. (previously, some val images were included in train), SIFT Flow mean IU (which used an inappropriately strict metric), and an error in the frequency weighted mean IU formula. Add link to models and update timing numbers to reflect improved implementation (which is publicly available).", "publication_ref": ["b2", "b0", "b25", "b25"], "figure_ref": [], "table_ref": []}], "references": [{"ref_id": "b0", "title": "Semantic segmentation with second-order pooling", "journal": "", "year": "2012", "authors": "J Carreira; R Caseiro; J Batista; C Sminchisescu"}, {"ref_id": "b1", "title": "Deep neural networks segment neuronal membranes in electron microscopy images", "journal": "", "year": "2007", "authors": "D C Ciresan; A Giusti; L M Gambardella; J Schmidhuber"}, {"ref_id": "b2", "title": "Convolutional feature masking for joint object and stuff segmentation", "journal": "", "year": "2014", "authors": "J Dai; K He; J Sun"}, {"ref_id": "b3", "title": "DeCAF: A deep convolutional activation feature for generic visual recognition", "journal": "", "year": "2014", "authors": "J Donahue; Y Jia; O Vinyals; J Hoffman; N Zhang; E Tzeng; T Darrell"}, {"ref_id": "b4", "title": "Restoring an image taken through a window covered with dirt or rain", "journal": "", "year": "2013", "authors": "D Eigen; D Krishnan; R Fergus"}, {"ref_id": "b5", "title": "Depth map prediction from a single image using a multi-scale deep network", "journal": "", "year": "2014", "authors": "D Eigen; C Puhrsch; R Fergus"}, {"ref_id": "b6", "title": "The PASCAL Visual Object Classes Challenge", "journal": "", "year": "2011", "authors": "M Everingham; L Van Gool; C K I Williams; J Winn; A Zisserman"}, {"ref_id": "b7", "title": "Learning hierarchical features for scene labeling. Pattern Analysis and Machine Intelligence", "journal": "IEEE Transactions on", "year": "2008", "authors": "C Farabet; C Couprie; L Najman; Y Lecun"}, {"ref_id": "b8", "title": "Descriptor matching with convolutional neural networks: a comparison to SIFT. CoRR, abs/1405", "journal": "", "year": "2014", "authors": "P Fischer; A Dosovitskiy; T Brox"}, {"ref_id": "b9", "title": "The gaussian scale-space paradigm and the multiscale local jet", "journal": "International Journal of Computer Vision", "year": "1996", "authors": "L Florack; B T H Romeny; M Viergever; J Koenderink"}, {"ref_id": "b10", "title": "N 4 -fields: Neural network nearest neighbor fields for image transforms", "journal": "", "year": "2007", "authors": "Y Ganin; V Lempitsky"}, {"ref_id": "b11", "title": "Rich feature hierarchies for accurate object detection and semantic segmentation", "journal": "", "year": "2007", "authors": "R Girshick; J Donahue; T Darrell; J Malik"}, {"ref_id": "b12", "title": "Perceptual organization and recognition of indoor scenes from RGB-D images", "journal": "", "year": "2013", "authors": "S Gupta; P Arbelaez; J Malik"}, {"ref_id": "b13", "title": "Learning rich features from RGB-D images for object detection and segmentation", "journal": "Springer", "year": "2008", "authors": "S Gupta; R Girshick; P Arbelaez; J Malik"}, {"ref_id": "b14", "title": "Semantic contours from inverse detectors", "journal": "", "year": "2011", "authors": "B Hariharan; P Arbelaez; L Bourdev; S Maji; J Malik"}, {"ref_id": "b15", "title": "Simultaneous detection and segmentation", "journal": "", "year": "2008", "authors": "B Hariharan; P Arbel\u00e1ez; R Girshick; J Malik"}, {"ref_id": "b16", "title": "Spatial pyramid pooling in deep convolutional networks for visual recognition", "journal": "", "year": "2014", "authors": "K He; X Zhang; S Ren; J Sun"}, {"ref_id": "b17", "title": "Caffe: Convolutional architecture for fast feature embedding", "journal": "", "year": "2014", "authors": "Y Jia; E Shelhamer; J Donahue; S Karayev; J Long; R Girshick; S Guadarrama; T Darrell"}, {"ref_id": "b18", "title": "Imagenet classification with deep convolutional neural networks", "journal": "", "year": "2005", "authors": "A Krizhevsky; I Sutskever; G E Hinton"}, {"ref_id": "b19", "title": "Building high-level features using large scale unsupervised learning", "journal": "", "year": "2012", "authors": "Q V Le; R Monga; M Devin; K Chen; G S Corrado; J Dean; A Y Ng"}, {"ref_id": "b20", "title": "Backpropagation applied to hand-written zip code recognition", "journal": "", "year": "1989", "authors": "Y Lecun; B Boser; J Denker; D Henderson; R E Howard; W Hubbard; L D "}, {"ref_id": "b21", "title": "Efficient backprop", "journal": "Springer", "year": "1998", "authors": "Y A Lecun; L Bottou; G B Orr; K.-R M\u00fcller"}, {"ref_id": "b22", "title": "Sift flow: Dense correspondence across scenes and its applications. Pattern Analysis and Machine Intelligence", "journal": "IEEE Transactions on", "year": "2011", "authors": "C Liu; J Yuen; A Torralba"}, {"ref_id": "b23", "title": "Do convnets learn correspondence", "journal": "", "year": "2014", "authors": "J Long; N Zhang; T Darrell"}, {"ref_id": "b24", "title": "Multidigit recognition using a space displacement neural network", "journal": "", "year": "1991", "authors": "O Matan; C J Burges; Y Lecun; J S Denker"}, {"ref_id": "b25", "title": "The role of context for object detection and semantic segmentation in the wild", "journal": "IEEE", "year": "2014", "authors": "R Mottaghi; X Chen; X Liu; N.-G Cho; S.-W Lee; S Fidler; R Urtasun; A Yuille"}, {"ref_id": "b26", "title": "Toward automatic phenotyping of developing embryos from videos. Image Processing", "journal": "IEEE Transactions on", "year": "2005", "authors": "F Ning; D Delhomme; Y Lecun; F Piano; L Bottou; P E Barbano"}, {"ref_id": "b27", "title": "Recurrent convolutional neural networks for scene labeling", "journal": "", "year": "2008", "authors": "P H Pinheiro; R Collobert"}, {"ref_id": "b28", "title": "Overfeat: Integrated recognition, localization and detection using convolutional networks", "journal": "", "year": "2004", "authors": "P Sermanet; D Eigen; X Zhang; M Mathieu; R Fergus; Y Lecun"}, {"ref_id": "b29", "title": "Indoor segmentation and support inference from rgbd images", "journal": "", "year": "2012", "authors": "N Silberman; D Hoiem; P Kohli; R Fergus"}, {"ref_id": "b30", "title": "Very deep convolutional networks for large-scale image recognition. CoRR, abs/1409.1556", "journal": "", "year": "2005", "authors": "K Simonyan; A Zisserman"}, {"ref_id": "b31", "title": "Going deeper with convolutions. CoRR, abs/1409", "journal": "", "year": "2005", "authors": "C Szegedy; W Liu; Y Jia; P Sermanet; S Reed; D Anguelov; D Erhan; V Vanhoucke; A Rabinovich"}, {"ref_id": "b32", "title": "Superparsing: scalable nonparametric image parsing with superpixels", "journal": "Springer", "year": "2010", "authors": "J Tighe; S Lazebnik"}, {"ref_id": "b33", "title": "Finding things: Image parsing with regions and per-exemplar detectors", "journal": "", "year": "2013", "authors": "J Tighe; S Lazebnik"}, {"ref_id": "b34", "title": "", "journal": "", "year": "2014", "authors": "J Tompson; A Jain; Y Lecun; C Bregler"}, {"ref_id": "b35", "title": "Regularization of neural networks using dropconnect", "journal": "", "year": "2013", "authors": "L Wan; M Zeiler; S Zhang; Y L Cun; R Fergus"}, {"ref_id": "b36", "title": "Postal address block location using a convolutional locator network", "journal": "", "year": "1994", "authors": "R Wolf; J C Platt"}, {"ref_id": "b37", "title": "Visualizing and understanding convolutional networks", "journal": "Springer", "year": "2014", "authors": "M D Zeiler; R Fergus"}, {"ref_id": "b38", "title": "Partbased r-cnns for fine-grained category detection", "journal": "Springer", "year": "2014", "authors": "N Zhang; J Donahue; R Girshick; T Darrell"}], "figures": [{"figure_label": "1", "figure_type": "figure", "figure_id": "fig_0", "figure_caption": "Figure 1 .1Figure1. Fully convolutional networks can efficiently learn to make dense predictions for per-pixel tasks like semantic segmentation.", "figure_data": ""}, {"figure_label": "2", "figure_type": "figure", "figure_id": "fig_1", "figure_caption": "Figure 2 .2Figure2. Transforming fully connected layers into convolution layers enables a classification net to output a heatmap. Adding layers and a spatial loss (as in Figure1) produces an efficient machine for end-to-end dense learning.", "figure_data": ""}, {"figure_label": "35", "figure_type": "figure", "figure_id": "fig_2", "figure_caption": "Figure 3 .Figure 5 .35Figure 3. Our DAG nets learn to combine coarse, high layer information with fine, low layer information. Layers are shown as grids that reveal relative spatial coarseness. Only pooling and prediction layers are shown; intermediate convolution layers (including our converted fully connected layers) are omitted. Solid line (FCN-32s): Our single-stream net, described in Section 4.1, upsamples stride 32 predictions back to pixels in a single step. Dashed line (FCN-16s): Combining predictions from both the final layer and the pool4 layer, at stride 16, lets our net predict finer details, while retaining high-level semantic information. Dotted line (FCN-8s): Additional predictions from pool3, at stride 8, provide further precision.", "figure_data": ""}, {"figure_label": "2", "figure_type": "table", "figure_id": "tab_1", "figure_caption": "", "figure_data": "Comparison of skip FCNs on a subset of PASCALVOC2011 validation 7 . Learning is end-to-end, except for FCN-32s-fixed, where only the last layer is fine-tuned. Note that FCN-32s is FCN-VGG16, renamed to highlight stride.pixelmeanmeanf.w.acc.acc.IUIUFCN-32s-fixed 83.0 59.7 45.4 72.0FCN-32s 89.1 73.3 59.4 81.4FCN-16s 90.0 75.7 62.4 83.0FCN-8s 90.3 75.9 62.7 83.2"}, {"figure_label": "3", "figure_type": "table", "figure_id": "tab_2", "figure_caption": "Our fully convolutional net gives a 20% relative improvement over the state-of-the-art on the PASCAL VOC 2011 and 2012 test sets, and reduces inference time. There are training images from[15] included in the PASCAL VOC 2011 val set, so we validate on the non-intersecting set of 736 images. An earlier version of this paper mistakenly evaluated on the entire val set.", "figure_data": "mean IUmean IUinferenceVOC2011 test VOC2012 testtimeR-CNN [12]47.9--SDS [16]52.651.6\u223c 50 sFCN-8s62.762.2\u223c 175 msNYUDv2 [30] is an RGB-D dataset collected using theOurmodelsandcodearepubliclyavailableathttps://github.com/BVLC/caffe/wiki/Model-Zoo#fcn."}, {"figure_label": "4", "figure_type": "table", "figure_id": "tab_3", "figure_caption": "Results on NYUDv2. RGBD is early-fusion of the RGB and depth channels at the input. HHA is the depth embedding of[14] as horizontal disparity, height above ground, and the angle of the local surface normal with the inferred gravity direction. RGB-HHA is the jointly trained late fusion model that sums RGB and HHA predictions.Microsoft Kinect. It has 1449 RGB-D images, with pixelwise labels that have been coalesced into a 40 class semantic segmentation task by Gupta et al.[13]. We report results on the standard split of 795 training images and 654 testing images. (Note: all model selection is performed on PAS-CAL 2011 val.) Table", "figure_data": "pixelmeanmeanf.w.acc.acc.IUIUGupta et al. [14] 60.3-28.6 47.0FCN-32s RGB 60.0 42.2 29.2 43.9FCN-32s RGBD 61.5 42.4 30.5 45.5FCN-32s HHA 57.1 35.2 24.2 40.4FCN-32s RGB-HHA 64.3 44.9 32.8 48.0FCN-16s RGB-HHA 65.4 46.1 34.0 49.5"}], "formulas": [{"formula_id": "formula_0", "formula_text": "y ij = f ks ({x si+\u03b4i,sj+\u03b4j } 0\u2264\u03b4i,\u03b4j\u2264k )", "formula_coordinates": [3.0, 94.9, 97.22, 146.67, 9.68]}, {"formula_id": "formula_1", "formula_text": "f ks \u2022 g k s = (f \u2022 g) k +(k\u22121)s ,ss .", "formula_coordinates": [3.0, 98.44, 213.25, 139.6, 9.96]}, {"formula_id": "formula_2", "formula_text": "i n ii / i t i \u2022 mean accuraccy: (1/n cl ) i n ii /t i \u2022 mean IU: (1/n cl ) i n ii / t i + j n ji \u2212 n ii", "formula_coordinates": [7.0, 318.83, 373.07, 164.48, 36.81]}, {"formula_id": "formula_3", "formula_text": "( k t k ) \u22121 i t i n ii / t i + j n ji \u2212 n ii", "formula_coordinates": [7.0, 328.79, 425.51, 132.04, 11.29]}], "doi": ""}