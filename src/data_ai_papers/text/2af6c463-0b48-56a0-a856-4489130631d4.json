{"title": "ANALYTIC-DPM: AN ANALYTIC ESTIMATE OF THE OPTIMAL REVERSE VARIANCE IN DIFFUSION PROB-ABILISTIC MODELS", "authors": "Fan Bao; Chongxuan Li; Jun Zhu; Bo Zhang", "pub_date": "2022-05-03", "abstract": "Diffusion probabilistic models (DPMs) represent a class of powerful generative models. Despite their success, the inference of DPMs is expensive since it generally needs to iterate over thousands of timesteps. A key problem in the inference is to estimate the variance in each timestep of the reverse process. In this work, we present a surprising result that both the optimal reverse variance and the corresponding optimal KL divergence of a DPM have analytic forms w.r.t. its score function. Building upon it, we propose Analytic-DPM, a training-free inference framework that estimates the analytic forms of the variance and KL divergence using the Monte Carlo method and a pretrained score-based model. Further, to correct the potential bias caused by the score-based model, we derive both lower and upper bounds of the optimal variance and clip the estimate for a better result. Empirically, our analytic-DPM improves the log-likelihood of various DPMs, produces high-quality samples, and meanwhile enjoys a 20\u00d7 to 80\u00d7 speed up.", "sections": [{"heading": "INTRODUCTION", "text": "A diffusion process gradually adds noise to a data distribution over a series of timesteps. By learning to reverse it, diffusion probabilistic models (DPMs) (Sohl-Dickstein et al., 2015;Ho et al., 2020;Song et al., 2020b) define a data generative process. Recently, it is shown that DPMs are able to produce high-quality samples (Ho et al., 2020;Song et al., 2020b;, which are comparable or even superior to the current state-of-the-art GAN models (Goodfellow et al., 2014;Brock et al., 2018;Wu et al., 2019;Karras et al., 2020b).\nDespite their success, the inference of DPMs (e.g., sampling and density evaluation) often requires to iterate over thousands of timesteps, which is two or three orders of magnitude slower (Song et al., 2020a) than other generative models such as GANs. A key problem in the inference is to estimate the variance in each timestep of the reverse process. Most of the prior works use a handcrafted value for all timesteps, which usually run a long chain to obtain a reasonable sample and density value .  attempt to improve the efficiency of sampling by learning a variance network in the reverse process. However, it still needs a relatively long trajectory to get a reasonable log-likelihood (see Appendix E in ).\nIn this work, we present a surprising result that both the optimal reverse variance and the corresponding optimal KL divergence of a DPM have analytic forms w.r.t. its score function (i.e., the gradient of a log density). Building upon it, we propose Analytic-DPM, a training-free inference framework to improve the efficiency of a pretrained DPM while achieving comparable or even superior performance. Analytic-DPM estimates the analytic forms of the variance and KL divergence using the Monte Carlo method and the score-based model in the pretrained DPM. The corresponding trajectory is calculated via a dynamic programming algorithm (Watson et al., 2021). Further, to correct the potential bias caused by the score-based model, we derive both lower and upper bounds of the optimal variance and clip its estimate for a better result. Finally, we reveal an interesting relationship between the score function and the data covariance matrix.\nAnalytic-DPM is applicable to a variety of DPMs (Ho et al., 2020;Song et al., 2020a; in a plug-and-play manner. Empirically, Analytic-DPM consistently improves the log-likelihood of these DPMs and meanwhile enjoys a 20\u00d7 to 40\u00d7 speed up. Besides, Analytic-DPM also consistently improves the sample quality of DDIMs (Song et al., 2020a) and requires up to 50 timesteps (which is a 20\u00d7 to 80\u00d7 speed up compared to the full timesteps) to achieve a comparable FID to the corresponding baseline.", "publication_ref": ["b34", "b9", "b37", "b9", "b37", "b7", "b0", "b43", "b12", "b35", "b42", "b9", "b35", "b35"], "figure_ref": [], "table_ref": []}, {"heading": "BACKGROUND", "text": "Diffusion probabilistic models (DPMs) firstly construct a forward process q(x 1:N |x 0 ) that injects noise to a data distribution q(x 0 ), and then reverse the forward process to recover it. Given a forward noise schedule \u03b2 n \u2208 (0, 1), n = 1, \u2022 \u2022 \u2022 , N , denoising diffusion probabilistic models (DDPMs) (Ho et al., 2020) consider a Markov forward process:\nq M (x 1:N |x 0 ) = N n=1 q M (x n |x n\u22121 ), q M (x n |x n\u22121 ) = N (x n | \u221a \u03b1 n x n\u22121 , \u03b2 n I),(1)\nwhere I is the identity matrix, \u03b1 n and \u03b2 n are scalars and \u03b1 n := 1\u2212\u03b2 n . Song et al. (2020a) introduce a more general non-Markov process indexed by a non-negative vector \u03bb = (\u03bb 1 , \u2022 \u2022 \u2022 , \u03bb N ) \u2208 R N \u22650 :\nq \u03bb (x 1:N |x 0 ) = q \u03bb (x N |x 0 ) N n=2 q \u03bb (x n\u22121 |x n , x 0 ),(2)\nq \u03bb (x N |x 0 ) = N (x N | \u221a \u03b1 N x 0 , \u03b2 N I), q \u03bb (x n\u22121 |x n , x 0 ) = N (x n\u22121 |\u03bc n (x n , x 0 ), \u03bb 2 n I), \u00b5 n (x n , x 0 ) = \u03b1 n\u22121 x 0 + \u03b2 n\u22121 \u2212 \u03bb 2 n \u2022 x n \u2212 \u221a \u03b1 n x 0 \u03b2 n .\nHere \u03b1 n := n i=1 \u03b1 i and \u03b2 n := 1 \u2212 \u03b1 n . Indeed, Eq. (2) includes the DDPM forward process as a special case when \u03bb 2 n =\u03b2 n , where\u03b2 n :=\n\u03b2 n\u22121 \u03b2 n \u03b2 n .\nAnother special case of Eq. (2) is the denoising diffusion implicit model (DDIM) forward process, where \u03bb 2 n = 0. Besides, we can further derive q \u03bb (x n |x 0 ) = N (x n | \u221a \u03b1 n x 0 , \u03b2 n I), which is independent of \u03bb. In the rest of the paper, we will focus on the forward process in Eq. (2) since it is more general, and we will omit the index \u03bb and denote it as q(x 1:N |x 0 ) for simplicity.\nThe reverse process for Eq. (2) is defined as a Markov process aimed to approximate q(x 0 ) by gradually denoising from the standard Gaussian distribution p(x N ) = N (x N |0, I):\np(x 0:N ) = p(x N ) N n=1 p(x n\u22121 |x n ), p(x n\u22121 |x n ) = N (x n\u22121 |\u00b5 n (x n ), \u03c3 2 n I),\nwhere \u00b5 n (x n ) is generally parameterized 1 by a time-dependent score-based model s n (x n ) (Song & Ermon, 2019;Song et al., 2020b):\n\u00b5 n (x n ) =\u03bc n x n , 1 \u221a \u03b1 n (x n + \u03b2 n s n (x n )) .(3)\nThe reverse process can be learned by optimizing a variational bound L vb on negative log-likelihood: which is equivalent to optimizing the KL divergence between the forward and the reverse process:\nL vb = E\nmin {\u00b5n,\u03c3 2 n } N n=1 L vb \u21d4 min {\u00b5n,\u03c3 2 n } N n=1\nD KL (q(x 0:N )||p(x 0:N )).\nTo improve the sample quality in practice, instead of directly optimizing L vb , Ho et al. (2020) consider a reweighted variant of L vb to learn s n (x n ):\nmin {sn} N n=1 E n \u03b2 n E qn(xn) ||s n (x n ) \u2212 \u2207 xn log q n (x n )|| 2 = E n,x0, || + \u03b2 n s n (x n )|| 2 + c, (5\n)\nwhere n is uniform between 1 and N , q n (x n ) is the marginal distribution of the forward process at timestep n, is a standard Gaussian noise, x n on the right-hand side is reparameterized by\nx n = \u221a \u03b1 n x 0 + \u03b2 n and c is a constant only related to q. Indeed, Eq. ( 5) is exactly a weighted sum of score matching objectives (Song & Ermon, 2019), which admits an optimal solution s * n (x n ) = \u2207 xn log q n (x n ) for all n \u2208 {1, 2 \u2022 \u2022 \u2022 , N }.\nNote that Eq. (5) provides no learning signal for the variance \u03c3 2 n . Indeed, \u03c3 2 n is generally handcrafted in most of prior works. In DDPMs (Ho et al., 2020), two commonly used settings are \u03c3 2 n = \u03b2 n and \u03c3 2 n =\u03b2 n . In DDIMs, Song et al. (2020a) consistently use \u03c3 2 n = \u03bb 2 n . We argue that these handcrafted values are not the true optimal solution of Eq. (4) in general, leading to a suboptimal performance.", "publication_ref": ["b9", "b35", "b36", "b37", "b9", "b36", "b9", "b35"], "figure_ref": [], "table_ref": []}, {"heading": "ANALYTIC ESTIMATE OF THE OPTIMAL REVERSE VARIANCE", "text": "For a DPM, we first show that both the optimal mean \u00b5 * n (x n ) and the optimal variance \u03c3 * 2 n to Eq. (4) have analytic forms w.r.t. the score function, which is summarized in the following Theorem 1. Theorem 1. (Score representation of the optimal solution to Eq. (4), proof in Appendix A.2)\nThe optimal solution \u00b5 * n (x n ) and \u03c3 * 2 n to Eq. (4) are\n\u00b5 * n (x n ) =\u03bc n x n , 1 \u221a \u03b1 n (x n + \u03b2 n \u2207 xn log q n (x n )) ,(6)\n\u03c3 * 2 n = \u03bb 2 n + \uf8eb \uf8ed \u03b2 n \u03b1 n \u2212 \u03b2 n\u22121 \u2212 \u03bb 2 n \uf8f6 \uf8f8 2 1 \u2212 \u03b2 n E qn(xn) ||\u2207 xn log q n (x n )|| 2 d ,(7)\nwhere q n (x n ) is the marginal distribution of the forward process at the timestep n and d is the dimension of the data.\nThe proof of Theorem 1 consists of three key steps:\n\u2022 The first step (see Lemma 9) is known as the moment matching (Minka, 2013), which states that approximating arbitrary density by a Gaussian density under the KL divergence is equivalent to setting the first two moments of the two densities as the same. To our knowledge, the connection of moment matching and DPMs has not been revealed before. \u2022 In the second step (see Lemma 13), we carefully use the law of total variance conditioned on x 0 and convert the second moment of q(x n\u22121 |x n ) to that of q(x 0 |x n ). \u2022 In the third step (see Lemma 11), we surprisingly find that the second moment of q(x 0 |x n ) can be represented by the score function, and we plug the score representation into the second moment of q(x n\u22121 |x n ) to get the final results in Theorem 1.\nThe results in Theorem 1 (and other results to appear later) can be further simplified for the DDPM forward process (i.e., \u03bb 2 n =\u03b2 n , see Appendix D for details). Besides, we can also extend Theorem 1 to DPMs with continuous timesteps (Song et al., 2020b;Kingma et al., 2021), where their corresponding optimal mean and variance are also determined by the score function in an analytic form (see Appendix E.1 for the extension).\nNote that our analytic form of the optimal mean \u00b5 * n (x n ) in Eq. ( 6) and the previous parameterization of \u00b5 n (x n ) (Ho et al., 2020) in Eq. (3) coincide. The only difference is that Eq. (3) replaces the  score function \u2207 xn log q n (x n ) in Eq. ( 6) with the score-based model s n (x n ). This result explicitly shows that Eq. (5) essentially shares the same optimal mean solution to the L vb objective, providing a simple and alternative perspective to prior works.\nIn contrast to the handcrafted strategies used in (Ho et al., 2020;Song et al., 2020a), Theorem 1 shows that the optimal reverse variance \u03c3 * 2 n can also be estimated without any extra training process given a pretrained score-based model s n (x n ). In fact, we first estimate the expected mean squared norm of \u2207 xn log q n (x n ) by \u0393 = (\u0393 1 , ..., \u0393 N ), where\n\u0393 n = 1 M M m=1 ||s n (x n,m )|| 2 d , x n,m iid \u223c q n (x n ).(8)\nM is the number of Monte Carlo samples. We only need to calculate \u0393 once for a pretrained model and reuse it in downstream computations (see Appendix H.1 for a detailed discussion of the computation cost of \u0393). Then, according to Eq. (7), we estimate \u03c3 * 2 n as follows:\n\u03c3 2 n = \u03bb 2 n + \uf8eb \uf8ed \u03b2 n \u03b1 n \u2212 \u03b2 n\u22121 \u2212 \u03bb 2 n \uf8f6 \uf8f8 2 1 \u2212 \u03b2 n \u0393 n .(9)\nWe empirically validate Theorem 1. In Figure 1 (a), we plot our analytic estimate\u03c3 2 n of a DDPM trained on CIFAR10, as well as the baselines \u03b2 n and\u03b2 n used by Ho et al. (2020). At small timesteps, these strategies behave differently. Figure 1 (b) shows that our\u03c3 2 n outperforms the baselines for each term of L vb , especially at the small timesteps. We also obtain similar results on other datasets (see Appendix G.1). Besides, we show that only a small number of Monte Carlo (MC) samples (e.g., M =10, 100) is required to achieve a sufficiently small variance caused by MC and get a similar performance to that with a large M (see Appendix G.2). We also discuss the stochasticity of L vb after plugging\u03c3 2 n in Appendix H.2.", "publication_ref": ["b37", "b15", "b9", "b9", "b35", "b9"], "figure_ref": ["fig_1", "fig_1"], "table_ref": []}, {"heading": "BOUNDING THE OPTIMAL REVERSE VARIANCE TO REDUCE BIAS", "text": "According to Eq. (7) and Eq. (9), the bias of the analytic estimate\u03c3 2 n is\n|\u03c3 * 2 n \u2212\u03c3 2 n | = \uf8eb \uf8ed \u03b2 n \u03b1 n \u2212 \u03b2 n\u22121 \u2212 \u03bb 2 n \uf8f6 \uf8f8 2 \u03b2 n Coefficient |\u0393 n \u2212 E qn(xn) ||\u2207 xn log q n (x n )|| 2 d | Approximation error . (10\n)\nOur estimate of the variance employs a score-based model s n (x n ) to approximate the true score function \u2207 xn log q n (x n ). Thus, the approximation error in Eq. ( 10) is irreducible given a pretrained model. Meanwhile, the coefficient in Eq. ( 10) can be large if we use a shorter trajectory to sample (see details in Section 4), potentially resulting in a large bias.\nTo reduce the bias, we derive bounds of the optimal reverse variance \u03c3 * 2 n and clip our estimate based on the bounds. Importantly, these bounds are unrelated to the data distribution q(x 0 ) and hence can be efficiently calculated. We firstly derive both upper and lower bounds of \u03c3 * 2 n without any assumption about the data. Then we show another upper bound of \u03c3 * 2 n if the data distribution is bounded. We formalize these bounds in Theorem 2. Theorem 2. (Bounds of the optimal reverse variance, proof in Appendix A.3) \u03c3 * 2 n has the following lower and upper bounds:\n\u03bb 2 n \u2264 \u03c3 * 2 n \u2264 \u03bb 2 n + \uf8eb \uf8ed \u03b2 n \u03b1 n \u2212 \u03b2 n\u22121 \u2212 \u03bb 2 n \uf8f6 \uf8f8 2 . (11\n)\nIf we further assume q(x 0 ) is a bounded distribution in [a, b] d , where d is the dimension of data, then \u03c3 * 2 n can be further upper bounded by\n\u03c3 * 2 n \u2264 \u03bb 2 n + \u03b1 n\u22121 \u2212 \u03b2 n\u22121 \u2212 \u03bb 2 n \u2022 \u03b1 n \u03b2 n 2 b \u2212 a 2 2 . (12\n)\nTheorem 2 states that the handcrafted reverse variance \u03bb 2 n in prior works (Ho et al., 2020;Song et al., 2020a) underestimates \u03c3 * 2 n . For instance, \u03bb 2 n =\u03b2 n in DDPM. We compare it with our estimate in Figure 1 (a) and the results agree with Theorem 2. Besides, the boundedness assumption of q(x 0 ) is satisfied in many scenarios including generative modelling of images, and which upper bound among Eq. (11) and Eq. ( 12) is tighter depends on n. Therefore, we clip our estimate based on the minimum one. Further, we show theses bounds are tight numerically in Appendix G.3.", "publication_ref": ["b9", "b35"], "figure_ref": ["fig_1"], "table_ref": []}, {"heading": "ANALYTIC ESTIMATION OF THE OPTIMAL TRAJECTORY", "text": "The number of full timesteps N can be large, making the inference slow in practice. Thereby, we can construct a shorter forward process q( (Song et al., 2020a;Watson et al., 2021), and K can be much smaller than N to speed up the inference. Formally, the shorter process is defined as\nx \u03c41 , \u2022 \u2022 \u2022 , x \u03c4 K |x 0 ) constrained on a trajectory 1 = \u03c4 1 < \u2022 \u2022 \u2022 < \u03c4 K = N of K timesteps\nq(x \u03c41 , \u2022 \u2022 \u2022 , x \u03c4 K |x 0 ) = q(x \u03c4 K |x 0 ) K k=2 q(x \u03c4 k\u22121 |x \u03c4 k , x 0 ), where q(x \u03c4 k\u22121 |x \u03c4 k , x 0 ) = N (x \u03c4 k\u22121 |\u03bc \u03c4 k\u22121 |\u03c4 k (x \u03c4 k , x 0 ), \u03bb 2 \u03c4 k\u22121 |\u03c4 k I),(13)\n\u00b5 \u03c4 k\u22121 |\u03c4 k (x \u03c4 k , x 0 ) = \u03b1 \u03c4 k\u22121 x 0 + \u03b2 \u03c4 k\u22121 \u2212 \u03bb 2 \u03c4 k\u22121 |\u03c4 k \u2022 x \u03c4 k \u2212 \u221a \u03b1 \u03c4 k x 0 \u03b2 \u03c4 k .\nThe corresponding reverse process is\np(x 0 , x \u03c41 , \u2022 \u2022 \u2022 , x \u03c4 K ) = p(x \u03c4 K ) K k=1 p(x \u03c4 k\u22121 |x \u03c4 k ), where p(x \u03c4 k\u22121 |x \u03c4 k ) = N (x \u03c4 k\u22121 |\u00b5 \u03c4 k\u22121 |\u03c4 k (x \u03c4 k ), \u03c3 2 \u03c4 k\u22121 |\u03c4 k I).\nAccording to Theorem 1, the mean and variance of the optimal p * (x \u03c4 k\u22121 |x \u03c4 k ) in the sense of KL minimization is\n\u00b5 * \u03c4 k\u22121 |\u03c4 k (x \u03c4 k ) =\u03bc \u03c4 k\u22121 |\u03c4 k x \u03c4 k , 1 \u221a \u03b1 \u03c4 k (x \u03c4 k + \u03b2 \u03c4 k \u2207 x\u03c4 k log q(x \u03c4 k )) , \u03c3 * 2 \u03c4 k\u22121 |\u03c4 k = \u03bb 2 \u03c4 k\u22121 |\u03c4 k + \uf8eb \uf8ed \u03b2 \u03c4 k \u03b1 \u03c4 k |\u03c4 k\u22121 \u2212 \u03b2 \u03c4 k\u22121 \u2212\u03bb 2 \u03c4 k\u22121 |\u03c4 k \uf8f6 \uf8f8 2 (1\u2212\u03b2 \u03c4 k E q(x\u03c4 k ) ||\u2207 x\u03c4 k log q(x \u03c4 k )|| 2 d ),\nwhere \u03b1 \u03c4 k |\u03c4 k\u22121 := \u03b1 \u03c4 k /\u03b1 \u03c4 k\u22121 . According to Theorem 2, we can derive similar bounds for \u03c3 * 2 \u03c4 k\u22121 |\u03c4 k (see details in Appendix C). Similarly to Eq. ( 9), the estimate of \u03c3 * 2\n\u03c4 k\u22121 |\u03c4 k i\u015d \u03c3 2 \u03c4 k\u22121 |\u03c4 k = \u03bb 2 \u03c4 k\u22121 |\u03c4 k + \uf8eb \uf8ed \u03b2 \u03c4 k \u03b1 \u03c4 k |\u03c4 k\u22121 \u2212 \u03b2 \u03c4 k\u22121 \u2212\u03bb 2 \u03c4 k\u22121 |\u03c4 k \uf8f6 \uf8f8 2 (1\u2212\u03b2 \u03c4 k \u0393 \u03c4 k ),\nwhere \u0393 is defined in Eq. (8) and can be shared across different selections of trajectories. Based on the optimal reverse process p * above, we further optimize the trajectory:\nmin \u03c41,\u2022\u2022\u2022 ,\u03c4 K D KL (q(x 0 , x \u03c41 , \u2022 \u2022 \u2022 , x \u03c4 K )||p * (x 0 , x \u03c41 , \u2022 \u2022 \u2022 , x \u03c4 K )) = d 2 K k=2 J(\u03c4 k\u22121 , \u03c4 k ) + c,(14)\nwhere\nJ(\u03c4 k\u22121 , \u03c4 k ) = log(\u03c3 * 2 \u03c4 k\u22121 |\u03c4 k /\u03bb 2 \u03c4 k\u22121 |\u03c4 k )\nand c is a constant unrelated to the trajectory \u03c4 (see proof in Appendix A.4). The KL in Eq. ( 14) can be decomposed into K \u2212 1 terms and each term has an analytic form w.r.t. the score function. We view each term as a cost function J evaluated at (\u03c4 k\u22121 , \u03c4 k ), and it can be efficiently estimated by\nJ(\u03c4 k\u22121 , \u03c4 k ) \u2248 log(\u03c3 2 \u03c4 k\u22121 |\u03c4 k /\u03bb 2 \u03c4 k\u22121 |\u03c4 k )\n, which doesn't require any neural network computation once \u0393 is given. While the logarithmic function causes bias even when the correct score function is known, it can be reduced by increasing M .\nAs a result, Eq. ( 14) is reduced to a canonical least-cost-path problem (Watson et al., 2021) on a directed graph, where the nodes are {1, 2, \u2022 \u2022 \u2022 , N } and the edge from s to t has cost J(s, t). We want to find a least-cost path of K nodes starting from 1 and terminating at N . This problem can be solved by the dynamic programming (DP) algorithm introduced by Watson et al. (2021). We present this algorithm in Appendix B. Besides, we can also extend Eq. ( 14) to DPMs with continuous timesteps (Song et al., 2020b;Kingma et al., 2021), where their corresponding optimal KL divergences are also decomposed to terms determined by score functions. Thereby, the DP algorithm is also applicable. See Appendix E.2 for the extension.", "publication_ref": ["b35", "b42", "b42", "b42", "b37", "b15"], "figure_ref": [], "table_ref": []}, {"heading": "RELATIONSHIP BETWEEN THE SCORE FUNCTION AND THE DATA COVARIANCE MATRIX", "text": "In this part, we further reveal a relationship between the score function and the data covariance matrix. Indeed, the data covariance matrix can be decomposed to the sum of\nE q(xn) Cov q(x0|xn) [x 0 ] and Cov q(xn) E q(x0|xn) [x 0 ]\n, where the first term can be represented by the score function. Further, the second term is negligible when n is sufficiently large because x 0 and x n are almost independent.\nIn such cases, the data covariance matrix is almost determined by the score function. Currently, the relationship is purely theoretical and its practical implication is unclear. See details in Appendix A.5.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "EXPERIMENTS", "text": "We consider the DDPM forward process (\u03bb 2 n =\u03b2 n ) and the DDIM forward process (\u03bb 2 n = 0), which are the two most commonly used special cases of Eq. (2). We denote our method, which uses the analytic estimate \u03c3 2 n =\u03c3 2 n , as Analytic-DPM, and explicitly call it Analytic-DDPM or Analytic-DDIM according to which forward process is used. We compare our Analytic-DPM with the original DDPM (Ho et al., 2020), where the reverse variance is either \u03c3 2 n =\u03b2 n or \u03c3 2 n = \u03b2 n , as well as the original DDIM (Song et al., 2020a), where the reverse variance is \u03c3 2 n = \u03bb 2 n = 0. We adopt two methods to get the trajectory for both the analytic-DPM and baselines. The first one is even trajectory (ET) , where the timesteps are determined according to a fixed stride (see details in Appendix F.4). The second one is optimal trajectory (OT) (Watson et al., 2021), where the timesteps are calculated via dynamic programming (see Section 4). Note that the baselines calculate the OT based on the L vb with their handcrafted variances (Watson et al., 2021).\nWe apply our Analytic-DPM to three pretrained score-based models provided by prior works (Ho et al., 2020;Song et al., 2020a;, as well as two score-based models trained by ourselves. The pretrained score-based models are trained on CelebA 64x64 (Liu et al., 2015), ImageNet 64x64 (Deng et al., 2009) and LSUN Bedroom (Yu et al., 2015) respectively. Our score-based models are trained on CIFAR10 (Krizhevsky et al., 2009) with two different forward noise schedules: the linear schedule (LS) (Ho et al., 2020) and the cosine schedule (CS) . We denote them as CIFAR10 (LS) and CIFAR10 (CS) respectively. The number of the full timesteps N is 4000 for ImageNet 64x64 and 1000 for other datasets. During sampling, we only display the mean of p(x 0 |x 1 ) and discard the noise following Ho et al. (2020), and we additionally clip the noise scale \u03c3 2 of p(x 1 |x 2 ) for all methods compared in Table 2 (see details in Appendix F.2 and its ablation study in Appendix G.4). See more experimental details in Appendix F. We conduct extensive experiments to demonstrate that analytic-DPM can consistently improve the inference efficiency of a pretrained DPM while achieving a comparable or even superior performance. Specifically, Section 6.1 and Section 6.2 present the likelihood and sample quality results respectively. Additional experiments such as ablation studies can be found in Appendix G.", "publication_ref": ["b9", "b35", "b42", "b42", "b9", "b35", "b20", "b4", "b45", "b17", "b9", "b9"], "figure_ref": [], "table_ref": ["tab_2"]}, {"heading": "LIKELIHOOD RESULTS", "text": "Since \u03bb 2 n = 0 in the DDIM forward process, its variational bound L vb is infinite. Thereby, we only consider the likelihood results under the DDPM forward process. As shown in Table 1, on all three datasets, our Analytic-DPM consistently improves the likelihood results of the original DDPM using both ET and OT. Remarkably, using a much shorter trajectory (i.e., a much less inference time), Analytic-DPM with OT can still outperform the baselines. In Table 1, we select the minimum K such that analytic-DPM can outperform the baselines with full timesteps and underline the corresponding results. Specifically, analytic-DPM enjoys a 40\u00d7 speed up on CIFAR10 (LS) and ImageNet 64x64, and a 20\u00d7 speed up on CIFAR10 (CS) and CelebA 64x64.\nAlthough we mainly focus on learning-free strategies of choosing the reverse variance, we also compare to another strong baseline that predicts the variance by a neural network . With full timesteps, Analytic-DPM achieves a NLL of 3.61 on ImageNet 64x64, which is very close to 3.57 reported in . Besides, while  report that the ET drastically reduces the log-likelihood performance of their neural-networkparameterized variance, Analytic-DPM performs well with the ET. See details in Appendix G.6. ", "publication_ref": [], "figure_ref": [], "table_ref": ["tab_1", "tab_1"]}, {"heading": "SAMPLE QUALITY", "text": "As for the sample quality, we consider the commonly used FID score (Heusel et al., 2017), where a lower value indicates a better sample quality. As shown in Table 2, under trajectories of different K, our Analytic-DDIM consistently improves the sample quality of the original DDIM. This allows us to generate high-quality samples with less than 50 timesteps, which results in a 20\u00d7 to 80\u00d7 speed up compared to the full timesteps. Indeed, in most cases, Analytic-DDIM only requires up to 50 timesteps to get a similar performance to the baselines. Besides, Analytic-DDPM also improves the sample quality of the original DDPM in most cases. For fairness, we use the ET implementation in  for all results in Table 2. We also report the results on CelebA 64x64 using a slightly different implementation of the ET following Song et al. (2020a) in Appendix G.7, and our Analytic-DPM is still effective. We show generated samples in Appendix G.9.\nWe observe that Analytic-DDPM does not always outperform the baseline under the FID metric, which is inconsistent with the likelihood results in Table 1. Such a behavior essentially roots in the different natures of the two metrics and has been investigated in extensive prior works (Theis et al., 2015;Ho et al., 2020;Vahdat et al., 2021;Watson et al., 2021;Kingma et al., 2021). Similarly, using more timesteps doesn't necessarily yield a better FID. For instance, see the Analytic-DDPM results on CIFAR10 (LS) and the DDIM results on ImageNet 64x64 in Table 2. A similar phenomenon is observed in Figure 8 in . Moreover, a DPM (including Analytic-DPM) with OT does not necessarily lead to a better FID score (Watson et al., 2021) (see Appendix G.5 for a comparison of ET and OT in Analytic-DPM). We summarize the efficiency of different methods in Table 3, where we consider the least number of timesteps required to achieve a FID around 6 as the metric for a more direct comparison.", "publication_ref": ["b8", "b35", "b39", "b9", "b41", "b42", "b15", "b42"], "figure_ref": ["fig_12"], "table_ref": ["tab_2", "tab_2", "tab_1", "tab_2", "tab_3"]}, {"heading": "RELATED WORK", "text": "DPMs and their applications. The diffusion probabilistic model (DPM) is initially introduced by Sohl- Dickstein et al. (2015), where the DPM is trained by optimizing the variational bound L vb . Ho et al. (2020) propose the new parameterization of DPMs in Eq. ( 3) and learn DPMs with the reweighted variant of L vb in Eq. (5). Song et al. (2020b) model the noise adding forward process as a stochastic differential equation (SDE) and introduce DPMs with continuous timesteps. With these important improvements, DPMs show great potential in various applications, including speech synthesis (Chen et al., 2020;Kong et al., 2020;Popov et al., 2021;Lam et al., 2021), controllable generation (Choi et al., 2021;Sinha et al., 2021), image super-resolution (Saharia et al., 2021;, image-to-image translation (Sasaki et al., 2021), shape generation (Zhou et al., 2021) and time series forecasting (Rasul et al., 2021).\nFaster DPMs. Several works attempt to find short trajectories while maintaining the DPM performance. Chen et al. (2020) find an effective trajectory of only six timesteps by the grid search. However, the grid search is only applicable to very short trajectories due to its exponentially growing time complexity. Watson et al. (2021) model the trajectory searching as a least-cost-path problem and introduce a dynamic programming (DP) algorithm to solve this problem. Our work uses this DP algorithm, where the cost is defined as a term of the optimal KL divergence. In addition to these trajectory searching techniques, Luhman & Luhman (2021) 2021) introduce an advanced SDE solver to simulate the reverse process in a more efficient way. However, the log-likelihood computation based on this solver is not specified.\nVariance Learning in DPMs. In addition to the reverse variance, there are also works on learning the forward noise schedule (i.e., the forward variance). Kingma et al. (2021) propose variational diffusion models (VDMs) on continuous timesteps, which use a signal-to-noise ratio function to parameterize the forward variance and directly optimize the variational bound objective for a better log-likelihood. While we primarily apply our method to DDPMs and DDIMs, estimating the optimal reverse variance can also be applied to VDMs (see Appendix E).", "publication_ref": ["b34", "b9", "b37", "b2", "b16", "b27", "b18", "b3", "b33", "b30", "b32", "b46", "b28", "b2", "b42", "b22", "b15"], "figure_ref": [], "table_ref": []}, {"heading": "CONCLUSION", "text": "We present that both the optimal reverse variance and the corresponding optimal KL divergence of a DPM have analytic forms w.r.t. its score function. Building upon it, we propose Analytic-DPM, a training-free inference framework that estimates the analytic forms of the variance and KL divergence using the Monte Carlo method and a pretrained score-based model. We derive bounds of the optimal variance to correct potential bias and reveal a relationship between the score function and the data covariance matrix. Empirically, our analytic-DPM improves both the efficiency and performance of likelihood results, and generates high-quality samples efficiently in various DPMs.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "A PROOFS AND DERIVATIONS", "text": "A.1 LEMMAS Lemma 1. (Cross-entropy to Gaussian) Suppose q(x) is a probability density function with mean \u00b5 q and covariance matrix \u03a3 q and p(x) = N (x|\u00b5, \u03a3) is a Gaussian distribution, then the crossentropy between q and p is equal to the cross-entropy between N (x|\u00b5 q , \u03a3 q ) and p, i.e.,\nH(q, p) = H(N (x|\u00b5 q , \u03a3 q ), p) = 1 2 log((2\u03c0) d |\u03a3|) + 1 2 tr(\u03a3 q \u03a3 \u22121 ) + 1 2 (\u00b5 q \u2212 \u00b5) \u03a3 \u22121 (\u00b5 q \u2212 \u00b5).\nProof.\nH(q, p) = \u2212E q(x) log p(x) = \u2212E q(x) log 1 (2\u03c0) d |\u03a3| exp(\u2212 (x \u2212 \u00b5) \u03a3 \u22121 (x \u2212 \u00b5) 2 ) = 1 2 log((2\u03c0) d |\u03a3|) + 1 2 E q(x) (x \u2212 \u00b5) \u03a3 \u22121 (x \u2212 \u00b5) = 1 2 log((2\u03c0) d |\u03a3|) + 1 2 E q(x) tr((x \u2212 \u00b5)(x \u2212 \u00b5) \u03a3 \u22121 ) = 1 2 log((2\u03c0) d |\u03a3|) + 1 2 tr(E q(x) (x \u2212 \u00b5)(x \u2212 \u00b5) \u03a3 \u22121 ) = 1 2 log((2\u03c0) d |\u03a3|) + 1 2 tr(E q(x) (x \u2212 \u00b5 q )(x \u2212 \u00b5 q ) + (\u00b5 q \u2212 \u00b5)(\u00b5 q \u2212 \u00b5) \u03a3 \u22121 ) = 1 2 log((2\u03c0) d |\u03a3|) + 1 2 tr( \u03a3 q + (\u00b5 q \u2212 \u00b5)(\u00b5 q \u2212 \u00b5) \u03a3 \u22121 ) = 1 2 log((2\u03c0) d |\u03a3|) + 1 2 tr(\u03a3 q \u03a3 \u22121 ) + 1 2 tr((\u00b5 q \u2212 \u00b5)(\u00b5 q \u2212 \u00b5) \u03a3 \u22121 ) = 1 2 log((2\u03c0) d |\u03a3|) + 1 2 tr(\u03a3 q \u03a3 \u22121 ) + 1 2 (\u00b5 q \u2212 \u00b5) \u03a3 \u22121 (\u00b5 q \u2212 \u00b5) =H(N (x|\u00b5 q , \u03a3 q ), p).\nLemma 2. (KL to Gaussian) Suppose q(x) is a probability density function with mean \u00b5 q and covariance matrix \u03a3 q and p(x) = N (x|\u00b5, \u03a3) is a Gaussian distribution, then\nD KL (q||p) = D KL (N (x|\u00b5 q , \u03a3 q )||p) + H(N (x|\u00b5 q , \u03a3 q )) \u2212 H(q),\nwhere H(\u2022) denotes the entropy of a distribution.\nProof. According to Lemma 1, we have H(q, p) = H(N (x|\u00b5 q , \u03a3 q ), p). Thereby, \nD KL (q||p) = H(q, p) \u2212 H(q) = H(N (x|\u00b5 q , \u03a3 q ), p) \u2212 H(q) =H(N (x|\u00b5 q , \u03a3 q ), p) \u2212 H(N (x|\u00b5 q , \u03a3 q )) + H(N (x|\u00b5 q , \u03a3 q )) \u2212 H(q) =D KL (N (x|\u00b5 q , \u03a3 q )||p) + H(N (x|\u00b5 q , \u03a3 q )) \u2212 H(q).\n) = q(x N ) N n=1 q(x n\u22121 |x n ). Proof. q(x n\u22121 |x n , \u2022 \u2022 \u2022 , x N ) = q(x n\u22121 , x n , \u2022 \u2022 \u2022 , x N ) q(x n , \u2022 \u2022 \u2022 , x N ) = q(x n\u22121 , x n ) N i=n+1 q(x i |x i\u22121 ) q(x n ) N i=n+1 q(x i |x i\u22121 ) = q(x n\u22121 |x n ). Thereby, q(x 0:N ) = q(x N ) N n=1 q(x n\u22121 |x n ).\nLemma 4. (Entropy of a Markov chain) Suppose q(x 0:N ) is a Markov chain, then\nH(q(x 0:N )) = H(q(x N )) + N n=1 E q H(q(x n\u22121 |x n )) = H(q(x 0 )) + N n=1 E q H(q(x n |x n\u22121 )).\nProof. According to Lemma 3, we have\nH(q(x 0:N )) = \u2212 E q log q(x N ) N n=1 q(x n\u22121 |x n ) = \u2212E q log q(x N ) \u2212 N n=1 E q log q(x n\u22121 |x n ) =H(q(x N )) + N n=1 E q H(q(x n\u22121 |x n )).\nSimilarly, we also have H(q(x 0:\nN )) = H(q(x 0 )) + N n=1 E q H(q(x n |x n\u22121 )).\nLemma 5. (Entropy of a DDPM forward process) Suppose q(x 0:N ) is a Markov chain and\nq(x n |x n\u22121 ) = N (x n | \u221a \u03b1 n x n\u22121 , \u03b2 n I), then H(q(x 0:N )) = H(q(x 0 )) + d 2 N n=1 log(2\u03c0e\u03b2 n ).\nProof. According to Lemma 4, we have\nH(q(x 0:N )) = H(q(x 0 )) + N n=1 E q H(q(x n |x n\u22121 )) = H(q(x 0 )) + N n=1 d 2 log(2\u03c0e\u03b2 n ).\nLemma 6. (Entropy of a conditional Markov chain) Suppose q(x 1:N |x 0 ) is Markov, then\nH(q(x 0:N )) = H(q(x 0 )) + E q H(q(x N |x 0 )) + N n=2 E q H(q(x n\u22121 |x n , x 0 )).\nProof. According to Lemma 4, we have\nH(q(x 0:N )) =H(q(x 0 )) + E q H(q(x 1:N |x 0 )) =H(q(x 0 )) + E q H(q(x N |x 0 )) + N n=2 E q H(q(x n\u22121 |x n , x 0 )).\nLemma 7. (Entropy of a generalized DDPM forward process) Suppose q(x 1:N |x 0 ) is Markov, q(x N |x 0 ) is Gaussian with covariance \u03b2 N I and q(x n\u22121 |x n , x 0 ) is Gaussian with covariance \u03bb 2 n I, then\nH(q(x 0:N )) = H(q(x 0 )) + d 2 log(2\u03c0e\u03b2 N ) + d 2 N n=2 log(2\u03c0e\u03bb 2 n ).\nProof. Directly derived from Lemma 6.\nLemma 8. (KL to a Markov chain) Suppose q(x 0:N ) is a probability distribution and p(x\n0:N ) = p(x N ) N n=1 p(x n\u22121 |x n ) is a Markov chain, then we have E q D KL (q(x 0:N \u22121 |x N )||p(x 0:N \u22121 |x N )) = N n=1 E q D KL (q(x n\u22121 |x n )||p(x n\u22121 |x n )) + c, where c = N n=1 E q H(q(x n\u22121 |x n )) \u2212 E q H(q(x 0:N \u22121 |x N )) is only related to q. Particularly, if q(x 0:N ) is also a Markov chain, then c = 0.\nProof.\nE q D KL (q(x 0:N \u22121 |x N )||p(x 0:N \u22121 |x N )) = \u2212E q log p(x 0:N \u22121 |x N ) \u2212 E q H(q(x 0:N \u22121 |x N )) = \u2212 N n=1 E q log p(x n\u22121 |x n ) \u2212 E q H(q(x 0:N \u22121 |x N )) = N n=1 E q D KL (q(x n\u22121 |x n )||p(x n\u22121 |x n )) + N n=1 E q H(q(x n\u22121 |x n )) \u2212 E q H(q(x 0:N \u22121 |x N )). Let c = N n=1 E q H(q(x n\u22121 |x n )) \u2212 E q H(q(x 0:N \u22121 |x N )), then E q D KL (q(x 0:N \u22121 |x N )||p(x 0:N \u22121 |x N )) = N n=1 E q D KL (q(x n\u22121 |x n )||p(x n\u22121 |x n )) + c.\nIf q(x 0:N ) is also a Markov chain, according to Lemma 4, we have c = 0.\nLemma 9. (The optimal Markov reverse process with Gaussian transitions is equivalent to moment matching) Suppose q(x 0:N ) is probability density function and p(x\n0:N ) = N n=1 p(x n\u22121 |x n )p(x N ) is a Gaussian Markov chain with p(x n\u22121 |x n ) = N (x n\u22121 |\u00b5 n (x n ), \u03c3 2 n I), then the joint KL opti- mization min {\u00b5n,\u03c3 2 n } N n=1 D KL (q(x 0:N )||p(x 0:N ))\nhas an optimal solution\n\u00b5 * n (x n ) = E q(xn\u22121|xn) [x n\u22121 ], \u03c3 * 2 n = E qn(xn) tr(Cov q(xn\u22121|xn) [x n\u22121 ]) d ,\nwhich match the first two moments of q(x n\u22121 |x n ). The corresponding optimal KL is\nD KL (q(x 0:N )||p * (x 0:N )) = H(q(x N ), p(x N )) + d 2 N n=1 log(2\u03c0e\u03c3 * 2 n ) \u2212 H(q(x 0:N )).\nRemark. Lemma 9 doesn't assume the form of q(x 0:N ), thereby it can be applied to more general Gaussian models, such as multi-layer VAEs with Gaussian decoders (Rezende et al., 2014;Burda et al., 2015). In this case, q(x 1:N |x 0 ) is the hierarchical encoders of multi-layer VAEs.\nProof. According to Lemma 8, we have\nD KL (q(x 0:N )||p(x 0:N )) = D KL (q(x N )||p(x N )) + N n=1 E q D KL (q(x n\u22121 |x n )||p(x n\u22121 |x n )) + c, where c = N n=1 E q H(q(x n\u22121 |x n )) \u2212 E q H(q(x 0:N \u22121 |x N )). Since E q D KL (q(x n\u22121 |x n )||p(x n\u22121 |x n )\n) is only related to \u00b5 n (\u2022) and \u03c3 2 n , the joint KL optimization is decomposed into n independent optimization sub-problems:\nmin \u00b5n,\u03c3 2 n E q D KL (q(x n\u22121 |x n )||p(x n\u22121 |x n )), 1 \u2264 n \u2264 N.\nAccording to Lemma 2, we have\nE q D KL (q(x n\u22121 |x n )||p(x n\u22121 |x n )) =E q D KL (N (x n\u22121 |E q(xn\u22121|xn) [x n\u22121 ], Cov q(xn\u22121|xn) [x n\u22121 ])||p(x n\u22121 |x n )) + E q H(N (x n\u22121 |E q(xn\u22121|xn) [x n\u22121 ], Cov q(xn\u22121|xn) [x n\u22121 ])) \u2212 E q H(q(x n\u22121 |x n )) =F(\u03c3 2 n ) + G(\u03c3 2 n , \u00b5 n ) + cwhere\nF(\u03c3 2 n ) = 1 2 \u03c3 \u22122 n E q tr(Cov q(xn\u22121|xn) [x n\u22121 ]) + d log \u03c3 2 n , G(\u03c3 2 n , \u00b5 n ) = 1 2 \u03c3 \u22122 n E q ||E q(xn\u22121|xn) [x n\u22121 ] \u2212 \u00b5 n (x n )|| 2 , and c = d 2 log(2\u03c0) \u2212 E q H(q(x n\u22121 |x n )). The optimal \u00b5 * n (x n ) is achieved when ||E q(xn\u22121|xn) [x n\u22121 ] \u2212 \u00b5 n (x n )|| 2 = 0. Thereby, \u00b5 * n (x n ) = E q(xn\u22121|xn) [x n\u22121 ].\nIn this case, G(\u03c3 2 n , \u00b5 * n ) = 0 and we only need to consider F(\u03c3 2 n ) for the optimal \u03c3 * 2 n . By calculating the gradient of F, we know that F gets its minimum at\n\u03c3 * 2 n = E q tr(Cov q(xn\u22121|xn) [x n\u22121 ]) d .\nIn the optimal case, F(\u03c3\n* 2 n ) = d 2 (1 + log \u03c3 * 2 n ) and E q D KL (q(x n\u22121 |x n )||p * (x n\u22121 |x n )) = d 2 log(2\u03c0e\u03c3 * 2 n ) \u2212 E q H(q(x n\u22121 |x n )).\nAs a result,\nD KL (q(x 0:N )||p * (x 0:N )) =D KL (q(x N )||p(x N )) + N n=1 d 2 log(2\u03c0e\u03c3 * 2 n ) \u2212 N n=1 E q H(q(x n\u22121 |x n )) + N n=1 E q H(q(x n\u22121 |x n )) \u2212 (H(q(x 0:N )) \u2212 H(q(x N ))) =H(q(x N ), p(x N )) + N n=1 d 2 log(2\u03c0e\u03c3 * 2 n ) \u2212 H(q(x 0:N )).\nLemma 10. (Marginal score function) Suppose q(v, w) is a probability distribution, then \nE q(v|w) [v] = 1 \u221a \u03b1 (w + \u03b2\u2207 w log q(w)), E q(w) Cov q(v|w) [v] = \u03b2 \u03b1 I \u2212 \u03b2E q(w) \u2207 w log q(w)\u2207 w log q(w) , E q(w) tr(Cov q(v|w) [v]) d = \u03b2 \u03b1 1 \u2212 \u03b2E q(w) ||\u2207 w log q(w)|| 2 d .\nProof. According to Lemma 10, we have\n\u2207 w log q(w) = E q(v|w) \u2207 w log q(w|v) = \u2212E q(v|w) w \u2212 \u221a \u03b1v \u03b2 . Thereby, E q(v|w) [v] = 1 \u221a \u03b1 (w + \u03b2\u2207 w log q(w))\n. Furthermore, we have\nE q(w) Cov q(v|w) [v] = \u03b2 2 \u03b1 E q(w) Cov q(v|w) [ w \u2212 \u221a \u03b1v \u03b2 ] = \u03b2 2 \u03b1 E q(w) E q(v|w) ( w \u2212 \u221a \u03b1v \u03b2 )( w \u2212 \u221a \u03b1v \u03b2 ) \u2212 E q(v|w) [ w \u2212 \u221a \u03b1v \u03b2 ]E q(v|w) [ w \u2212 \u221a \u03b1v \u03b2 ] = \u03b2 2 \u03b1 1 \u03b2 2 E q(v) E q(w|v) (w \u2212 \u221a \u03b1v)(w \u2212 \u221a \u03b1v) \u2212 E q(w) \u2207 w log q(w)\u2207 w log q(w) = \u03b2 2 \u03b1 1 \u03b2 2 E q(v) Cov q(w|v) w \u2212 E q(w) \u2207 w log q(w)\u2207 w log q(w) = \u03b2 2 \u03b1 1 \u03b2 2 E q(v) \u03b2I \u2212 E q(w) \u2207 w log q(w)\u2207 w log q(w) = \u03b2 2 \u03b1 1 \u03b2 I \u2212 E q(w) \u2207 w log q(w)\u2207 w log q(w) = \u03b2 \u03b1 (I \u2212 \u03b2E q(w) \u2207 w log q(w)\u2207 w log q(w) ).\nTaking the trace, we have\nE q(w) tr(Cov q(v|w) [v]) d = \u03b2 \u03b1 (1 \u2212 \u03b2E q(w) ||\u2207 w log q(w)|| 2 d ). Lemma 12. (Bounded covariance of a bounded distribution) Suppose q(x) is a bounded distribution in [a, b] d , then tr(Cov q(x) [x]) d \u2264 ( b\u2212a 2 ) 2 .\nProof.\ntr(Cov q(x) [x]) d = tr(Cov q(x) [x \u2212 a+b 2 ]) d = E q(x) ||x \u2212 a+b 2 || 2 \u2212 ||Ex \u2212 a+b 2 || 2 d \u2264 E q(x) ||x \u2212 a+b 2 || 2 d \u2264 ( b \u2212 a 2 ) 2 .\nLemma 13. (Convert the moments of q(x n\u22121 |x n ) to moments of q(x 0 |x n )) The optimal solution \u00b5 * n (x n ) and \u03c3 * 2 n to Eq. (4) can be represented by the first two moments of q(x\n0 |x n ) \u00b5 * n (x n ) =\u03bc n (x n , E q(x0|xn) x 0 ) \u03c3 * 2 n = \u03bb 2 n + \u03b1 n\u22121 \u2212 \u03b2 n\u22121 \u2212 \u03bb 2 n \u2022 \u03b1 n \u03b2 n 2 E q(xn) tr(Cov q(x0|xn) [x 0 ]) d\nwhere q n (x n ) is the marginal distribution of the forward process at timestep n and d is the dimension of the data.\nProof. According to Lemma 9, the optimal \u00b5 * n and \u03c3 * 2 n under KL minimization is\n\u00b5 * n (x n ) = E q(xn\u22121|xn) [x n\u22121 ], \u03c3 * 2 n = E qn(xn) tr(Cov q(xn\u22121|xn) [x n\u22121 ]) d .\nWe further derive\n\u00b5 * n . Since\u03bc n (x n , x 0 ) is linear w.r.t. x 0 , we have \u00b5 * n (x n ) = E q(xn\u22121|xn) [x n\u22121 ] = E q(x0|xn) E q(xn\u22121|xn,x0) [x n\u22121 ] =E q(x0|xn)\u03bcn (x n , x 0 ) =\u03bc n (x n , E q(x0|xn) x 0 ).\nThen we consider \u03c3 * 2 n . According to the law of total variance, we have\nCov q(xn\u22121|xn) [x n\u22121 ] = E q(x0|xn) Cov q(xn\u22121|xn,x0) [x n\u22121 ] + Cov q(x0|xn) E q(xn\u22121|xn,x0) [x n\u22121 ] =\u03bb 2 n I + Cov q(x0|xn)\u03bcn (x n , x 0 ) = \u03bb 2 n I + ( \u03b1 n\u22121 \u2212 \u03b2 n\u22121 \u2212 \u03bb 2 n \u2022 \u03b1 n \u03b2 n ) 2 Cov q(x0|xn) [x 0 ].\nThereby,\n\u03c3 * 2 n = E qn(xn) tr(Cov q(xn\u22121|xn) [x n\u22121 ]) d =\u03bb 2 n + ( \u03b1 n\u22121 \u2212 \u03b2 n\u22121 \u2212 \u03bb 2 n \u2022 \u03b1 n \u03b2 n ) 2 E q(xn) tr(Cov q(x0|xn) [x 0 ]) d .", "publication_ref": ["b29", "b1"], "figure_ref": [], "table_ref": []}, {"heading": "A.2 PROOF OF THEOREM 1", "text": "Theorem 1. (Score representation of the optimal solution to Eq. (4), proof in Appendix A.\n2)\nThe optimal solution \u00b5 * n (x n ) and \u03c3 * 2 n to Eq. (4) are\n\u00b5 * n (x n ) =\u03bc n x n , 1 \u221a \u03b1 n (x n + \u03b2 n \u2207 xn log q n (x n )) ,(6)\n\u03c3 * 2 n = \u03bb 2 n + \uf8eb \uf8ed \u03b2 n \u03b1 n \u2212 \u03b2 n\u22121 \u2212 \u03bb 2 n \uf8f6 \uf8f8 2 1 \u2212 \u03b2 n E qn(xn) ||\u2207 xn log q n (x n )|| 2 d ,(7)\nwhere q n (x n ) is the marginal distribution of the forward process at the timestep n and d is the dimension of the data.\nProof. According to Lemma 11 and Lemma 13, we have\n\u00b5 * n (x n ) =\u03bc n (x n , E q(x0|xn) x 0 ) =\u03bc n (x n , 1 \u221a \u03b1 n (x n + \u03b2 n \u2207 xn log q(x n ))),and\n\u03c3 * 2 n = \u03bb 2 n + ( \u03b1 n\u22121 \u2212 \u03b2 n\u22121 \u2212 \u03bb 2 n \u2022 \u03b1 n \u03b2 n ) 2 E q(xn) tr(Cov q(x0|xn) [x 0 ]) d =\u03bb 2 n + ( \u03b1 n\u22121 \u2212 \u03b2 n\u22121 \u2212 \u03bb 2 n \u2022 \u03b1 n \u03b2 n ) 2 \u03b2 n \u03b1 n (1 \u2212 \u03b2 n E q(xn) ||\u2207 xn log q(x n )|| 2 d ) =\u03bb 2 n + ( \u03b2 n \u03b1 n \u2212 \u03b2 n\u22121 \u2212 \u03bb 2 n ) 2 (1 \u2212 \u03b2 n E q(xn) ||\u2207 xn log q(x n )|| 2 d ).", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "A.3 PROOF OF THEOREM 2", "text": "Theorem 2. (Bounds of the optimal reverse variance, proof in Appendix A.3) \u03c3 * 2 n has the following lower and upper bounds:\n\u03bb 2 n \u2264 \u03c3 * 2 n \u2264 \u03bb 2 n + \uf8eb \uf8ed \u03b2 n \u03b1 n \u2212 \u03b2 n\u22121 \u2212 \u03bb 2 n \uf8f6 \uf8f8 2 . (11\n)\nIf we further assume q(x 0 ) is a bounded distribution in [a, b] d , where d is the dimension of data, then \u03c3 * 2 n can be further upper bounded by\n\u03c3 * 2 n \u2264 \u03bb 2 n + \u03b1 n\u22121 \u2212 \u03b2 n\u22121 \u2212 \u03bb 2 n \u2022 \u03b1 n \u03b2 n 2 b \u2212 a 2 2 . (12\n)\nProof. According to Lemma 13 and Theorem 1, we have\n\u03bb 2 n \u2264 \u03c3 * 2 n \u2264 \u03bb 2 n + ( \u03b2 n \u03b1 n \u2212 \u03b2 n\u22121 \u2212 \u03bb 2 n ) 2 .\nIf we further q(x 0 ) assume is a bounded distribution in [a, b] d , then q(x 0 |x n ) is also a bounded distribution in [a, b] d . According to Lemma 12, we have\nE q(xn) tr(Cov q(x0|xn) [x 0 ]) d \u2264 ( b \u2212 a 2 ) 2 .\nCombining with Lemma 13, we have\n\u03c3 * 2 n =\u03bb 2 n + ( \u03b1 n\u22121 \u2212 \u03b2 n\u22121 \u2212 \u03bb 2 n \u2022 \u03b1 n \u03b2 n ) 2 E q(xn) tr(Cov q(x0|xn) [x 0 ]) d \u2264\u03bb 2 n + ( \u03b1 n\u22121 \u2212 \u03b2 n\u22121 \u2212 \u03bb 2 n \u2022 \u03b1 n \u03b2 n ) 2 ( b \u2212 a 2 ) 2 .", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "A.4 PROOF OF THE DECOMPOSED OPTIMAL KL", "text": "Theorem 3. (Decomposed optimal KL, proof in Appendix A.4)\nThe KL divergence between the shorter forward process and its optimal reverse process is\nD KL (q(x 0 , x \u03c41 , \u2022 \u2022 \u2022 , x \u03c4 K )||p * (x 0 , x \u03c41 , \u2022 \u2022 \u2022 , x \u03c4 K )) = d 2 K k=2 J(\u03c4 k\u22121 , \u03c4 k ) + c,\nwhere\nJ(\u03c4 k\u22121 , \u03c4 k ) = log \u03c3 * 2 \u03c4 k\u22121 |\u03c4 k \u03bb 2 \u03c4 k\u22121 |\u03c4 k\nand c is a constant unrelated to the trajectory \u03c4 .\nProof. According to Lemma 7 and Lemma 9, we have\nD KL (q(x 0 , x \u03c41 , \u2022 \u2022 \u2022 , x \u03c4 K )||p * (x 0 , x \u03c41 , \u2022 \u2022 \u2022 , x \u03c4 K )) =E q D KL (q(x 0 |x \u03c41 , \u2022 \u2022 \u2022 , x \u03c4 K )||p * (x 0 |x 1 )) + D KL (q(x \u03c41 , \u2022 \u2022 \u2022 , x \u03c4 K )||p * (x \u03c41 , \u2022 \u2022 \u2022 , x \u03c4 K )) =E q D KL (q(x 0 |x \u03c41 , \u2022 \u2022 \u2022 , x \u03c4 K )||p * (x 0 |x 1 )) + H(q(x N ), p(x N )) + d 2 K k=2 log(2\u03c0e\u03c3 * 2 \u03c4 k\u22121 |\u03c4 k ) \u2212 H(q(x \u03c41 , \u2022 \u2022 \u2022 , x \u03c4 N )) = \u2212 E q log p * (x 0 |x 1 ) + H(q(x N ), p(x N )) + d 2 K k=2 log(2\u03c0e\u03c3 * 2 \u03c4 k\u22121 |\u03c4 k ) \u2212 H(q(x 0 , x \u03c41 , \u2022 \u2022 \u2022 , x \u03c4 K )) = \u2212 E q log p * (x 0 |x 1 ) + H(q(x N ), p(x N )) + d 2 K k=2 log(2\u03c0e\u03c3 * 2 \u03c4 k\u22121 |\u03c4 k ) \u2212 H(q(x 0 )) \u2212 d 2 log(2\u03c0e\u03b2 N ) \u2212 d 2 K k=2 log(2\u03c0e\u03bb 2 \u03c4 k\u22121 |\u03c4 k ) = \u2212 E q log p * (x 0 |x 1 ) + H(q(x N ), p(x N )) + d 2 K k=2 log \u03c3 * 2 \u03c4 k\u22121 |\u03c4 k \u03bb 2 \u03c4 k\u22121 |\u03c4 k \u2212 H(q(x 0 )) \u2212 d 2 log(2\u03c0e\u03b2 N ). Let J(\u03c4 k\u22121 , \u03c4 k ) = log \u03c3 * 2 \u03c4 k\u22121 |\u03c4 k \u03bb 2 \u03c4 k\u22121 |\u03c4 k and c = \u2212E q log p * (x 0 |x 1 ) + H(q(x N ), p(x N )) \u2212 H(q(x 0 )) \u2212 d 2 log(2\u03c0e\u03b2 N )\n, then c is a constant unrelated to the trajectory \u03c4 and\nD KL (q(x 0 , x \u03c41 , \u2022 \u2022 \u2022 , x \u03c4 K )||p * (x 0 , x \u03c41 , \u2022 \u2022 \u2022 , x \u03c4 K )) = d 2 K k=2 J(\u03c4 k\u22121 , \u03c4 k ) + c.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "A.5 THE FORMAL RESULT FOR SECTION 5 AND ITS PROOF", "text": "Here we present the formal result of the relationship between the score function and the data covariance matrix mentioned in Section 5. Proposition 1. (Proof in Appendix A.5) The expected conditional covariance matrix of the data distribution is determined by the score function \u2207 xn log q n (x n ) as follows:\nE q(xn) Cov q(x0|xn) [x 0 ] = \u03b2 n \u03b1 n I \u2212 \u03b2 n E qn(xn) \u2207 xn log q n (x n )\u2207 xn log q n (x n ) ,(15)\nwhich contributes to the data covariance matrix according to the law of total variance\nCov q(x0) [x 0 ] = E q(xn) Cov q(x0|xn) [x 0 ] + Cov q(xn) E q(x0|xn) [x 0 ]. (16\n)\nProof. Since q(x n |x 0 ) = N (x n | \u221a \u03b1 n x 0 , \u03b2 n I), according to Lemma 11, we have E q(xn) Cov q(x0|xn) [x 0 ] = \u03b2 n \u03b1 n (I \u2212 \u03b2 n E qn(xn) \u2207 xn log q n (x n )\u2207 xn log q n (x n ) ).\nThe law of total variance is a classical result in statistics. Here we prove it for completeness:\nE q(xn) Cov q(x0|xn) [x 0 ] + Cov q(xn) E q(x0|xn) [x 0 ] =E q(xn) E q(x0|xn) x 0 x 0 \u2212 E q(x0|xn) [x 0 ]E q(x0|xn) [x 0 ] + E q(xn) E q(x0|xn) [x 0 ]E q(x0|xn) [x 0 ] \u2212 E q(xn) E q(x0|xn) [x 0 ] E q(xn) E q(x0|xn) [x 0 ] =E q(x0) x 0 x 0 \u2212 E q(x0) [x 0 ]E q(x0) [x 0 ] = Cov q(x0) [x 0 ].\nAlgorithm 1 The DP algorithm for the least-cost-path problem (Watson et al., 2021) 1: Input: Cost function J(s, t) and integers K, N (1 \u2264 K \u2264 N ) 2: Output: The least-cost-trajectory Given a cost function J(s, t) with 1 \u2264 s < t and k, n \u2265 1, we want to find a trajectory 1 = \u03c4 1 < \u2022 \u2022 \u2022 < \u03c4 k = n of k nodes starting from 1 and terminating at n, s.t., the total cost J(\u03c4 1 , \u03c4 2 ) + J(\u03c4 2 , \u03c4 3 ) + \u2022 \u2022 \u2022 + J(\u03c4 k\u22121 , \u03c4 k ) is minimized. Such a problem can be solved by the DP algorithm proposed by Watson et al. (2021). Let C[k, n] be the minimized cost of the optimal trajectory, and D[k, n] be the \u03c4 k\u22121 of the optimal trajectory. For simplicity, we also let J(s, t) = \u221e for s \u2265 t \u2265 1.\n1 = \u03c4 1 < \u2022 \u2022 \u2022 < \u03c4 K = N 3: C \u2190 {\u221e} 1\u2264k,n\u2264N , D \u2190 {\u22121} 1\u2264k,n\u2264N 4: C[1, 1] \u2190 0 5: for k = 2 to K do Calculate C and D 6: CJ \u2190 {C[k \u2212 1, s] + J(s, n)} 1\u2264s\u2264N,k\u2264n\u2264N7\nThen for k = 1, we have C[1, n] = 0 n = 1 \u221e N \u2265 n > 1 and D[1, n] = \u22121 (here \u221e and \u22121 represent undefined values for simplicity). For N \u2265 k \u2265 2, we have C[k, n] = \u221e 1 \u2264 n < k min k\u22121\u2264s\u2264n\u22121 C[k \u2212 1, s] + J(s, n) = min 1\u2264s\u2264N C[k \u2212 1, s] + J(s, n) N \u2265 n \u2265 k, D[k, n] = \u22121 1 \u2264 n < k arg min k\u22121\u2264s\u2264n\u22121 C[k \u2212 1, s] + J(s, n) = arg min 1\u2264s\u2264N C[k \u2212 1, s] + J(s, n) N \u2265 n \u2265 k.\nAs long as D is calculated, we can get the optimal trajectory recursively by \u03c4 K = N and \u03c4 k\u22121 = D[k, \u03c4 k ]. We summarize the algorithm in Algorithm 1.", "publication_ref": ["b42", "b42"], "figure_ref": [], "table_ref": []}, {"heading": "C THE BOUNDS OF THE OPTIMAL REVERSE VARIANCE CONSTRAINED ON A TRAJECTORY", "text": "In Section 4, we derive the optimal reverse variance constrained on a trajectory. Indeed, the optimal reverse variance can also be bounded similar to Theorem 2. We formalize it in Corollary 1. Corollary 1. (Bounds of the optimal reverse variance constrained on a trajectory) \u03c3 * 2 \u03c4 k\u22121 |\u03c4 k has the following lower and upper bounds:\n\u03bb 2 \u03c4 k\u22121 |\u03c4 k \u2264 \u03c3 * 2 \u03c4 k\u22121 |\u03c4 k \u2264 \u03bb 2 \u03c4 k\u22121 |\u03c4 k + \uf8eb \uf8ed \u03b2 \u03c4 k \u03b1 \u03c4 k |\u03c4 k\u22121 \u2212 \u03b2 \u03c4 k\u22121 \u2212 \u03bb 2 \u03c4 k\u22121 |\u03c4 k \uf8f6 \uf8f8 2 .\nIf we further assume q(x 0 ) is a bounded distribution in [a, b] d , where d is the dimension of data, then \u03c3 * 2 n can be further upper bounded by\n\u03c3 * 2 \u03c4 k\u22121 |\u03c4 k \u2264 \u03bb 2 \u03c4 k\u22121 |\u03c4 k + \u03b1 \u03c4 k\u22121 \u2212 \u03b2 \u03c4 k\u22121 \u2212 \u03bb 2 \u03c4 k\u22121 |\u03c4 k \u2022 \u03b1 \u03c4 k \u03b2 \u03c4 k 2 ( b \u2212 a 2 ) 2 .", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "D SIMPLIFIED RESULTS FOR THE DDPM FORWARD PROCESS", "text": "The optimal solution \u00b5 * n (x n ) and \u03c3 * 2 n in Theorem 1 and the bounds of \u03c3 * 2 n in Theorem 2 can be directly simplified for the DDPM forward process by letting \u03bb 2 n =\u03b2 n . We list the simplified results in Corollary 2 and Corollary 3. Corollary 2. (Simplified score representation of the optimal solution) When \u03bb 2 n =\u03b2 n , the optimal solution \u00b5 * n (x n ) and \u03c3 * 2 n to Eq. (4) are\n\u00b5 * n (x n ) = 1 \u221a \u03b1 n (x n + \u03b2 n \u2207 xn log q n (x n )), \u03c3 * 2 n = \u03b2 n \u03b1 n (1 \u2212 \u03b2 n E qn(xn) ||\u2207 xn log q n (x n )|| 2 d ).\nCorollary 3. (Simplified bounds of the optimal reverse variance)\nWhen \u03bb 2 n =\u03b2 n , \u03c3 * 2 n has the following lower and upper bounds:\n\u03b2 n \u2264 \u03c3 * 2 n \u2264 \u03b2 n \u03b1 n .\nIf we further assume q(x 0 ) is a bounded distribution in [a, b] d , where d is the dimension of data, then \u03c3 * 2 n can be further upper bounded by\n\u03c3 * 2 n \u2264\u03b2 n + \u03b1 n\u22121 \u03b2 2 n \u03b2 2 n b \u2212 a 2 2 .\nAs for the shorter forward process defined in Eq. ( 13), it also includes the DDPM as a special case when\n\u03bb 2 \u03c4 k\u22121 |\u03c4 k =\u03b2 \u03c4 k\u22121 |\u03c4 k , where\u03b2 \u03c4 k\u22121 |\u03c4 k := \u03b2 \u03c4 k\u22121 \u03b2 \u03c4 k \u03b2 \u03c4 k |\u03c4 k\u22121 .\nSimilar to Corollary 2, the optimal mean and variance of its reverse process can also be simplified for DDPMs by letting \u03bb 2 \u03c4 k\u22121 |\u03c4 k = \u03b2 \u03c4 k\u22121 |\u03c4 k . Formally, the simplified optimal mean and variance are\n\u00b5 * \u03c4 k\u22121 |\u03c4 k (x \u03c4 k ) = 1 \u221a \u03b1 \u03c4 k |\u03c4 k\u22121 (x \u03c4 k + \u03b2 \u03c4 k |\u03c4 k\u22121 \u2207 x\u03c4 k log q \u03c4 k (x \u03c4 k )), \u03c3 * 2 \u03c4 k\u22121 |\u03c4 k = \u03b2 \u03c4 k |\u03c4 k\u22121 \u03b1 \u03c4 k |\u03c4 k\u22121 (1 \u2212 \u03b2 \u03c4 k |\u03c4 k\u22121 E q\u03c4 k (x\u03c4 k ) ||\u2207 x\u03c4 k log q \u03c4 k (x \u03c4 k )|| 2 d ).\nBesides, Theorem 3 can also be simplified for DDPMs. We list the simplified result in Corollary 4. Corollary 4. (Simplified decomposed optimal KL) When \u03bb 2 n =\u03b2 n , the KL divergence between the subprocess and its optimal reverse process is\nD KL (q(x 0 , x \u03c41 , \u2022 \u2022 \u2022 , x \u03c4 K )||p * (x 0 , x \u03c41 , \u2022 \u2022 \u2022 , x \u03c4 K )) = d 2 K k=2 J(\u03c4 k\u22121 , \u03c4 k ) + c,\nwhere\nJ(\u03c4 k\u22121 , \u03c4 k ) = log(1 \u2212 \u03b2 \u03c4 k |\u03c4 k\u22121 E q\u03c4 k (x\u03c4 k ) ||\u2207 x\u03c4 k log q \u03c4 k (x \u03c4 k )|| 2 d ),\nand c is a constant unrelated to the trajectory \u03c4 . Song et al. (2020b) generalizes the diffusion process to continuous timesteps by introducing a stochastic differential equation (SDE) dz = f (t)zdt + g(t)dw. Without loss of generality, we consider the parameterization of f (t) and g(t) introduced by Kingma et al. ( 2021)", "publication_ref": ["b37"], "figure_ref": [], "table_ref": []}, {"heading": "E EXTENSION TO DIFFUSION PROCESS WITH CONTINUOUS TIMESTEPS", "text": "f (t) = 1 2 d log \u03b1 t dt , g(t) 2 = d\u03b2 t dt \u2212 d log \u03b1 t dt \u03b2 t ,\nwhere \u03b1 t and \u03b2 t are scalar-valued functions satisfying some regular conditions (Kingma et al., 2021) with domain t \u2208 [0, 1]. Such a parameterization induces a diffusion process on continuous timesteps\nq(x 0 , z [0,1] ), s.t., q(z t |x 0 ) = N (z t | \u221a \u03b1 t x 0 , \u03b2 t I), \u2200t \u2208 [0, 1], q(z t |z s ) = N (z t | \u221a \u03b1 t|s z s , \u03b2 t|s I), \u22000 \u2264 s < t \u2264 1,\nwhere \u03b1 t|s := \u03b1 t /\u03b1 s and \u03b2 t|s := \u03b2 t \u2212 \u03b1 t|s \u03b2 s . \u03b2 s|t . In contrast, we show that \u03c3 2 s|t also has an optimal solution in an analytic form of the score function under the sense of KL minimization. According to Lemma 9 and Lemma 11, we have\n\u00b5 * s|t (z t ) = E q(zs|zt) [z s ] = 1 \u221a \u03b1 t|s (z t + \u03b2 t|s \u2207 zt log q(z t )), \u03c3 * 2 s|t = E q tr(Cov q(zs|zt) [z s ]) d = \u03b2 t|s \u03b1 t|s (1 \u2212 \u03b2 t|s E q(zt) ||\u2207 zt log q(z t )|| 2 d ).\nThereby, both the optimal mean and variance have a closed form expression w.r.t. the score function.\nIn this case, we first estimate the expected mean squared norm of the score function by \u0393 t for t \u2208 [0, 1], where\n\u0393 t = E q(zt) ||s t (z t )|| 2 d .\nNotice that there are infinite timesteps in [0, 1]. In practice, we can only choose a finite number of timesteps 0 = t 1 < \u2022 \u2022 \u2022 < t N = 1 and calculate \u0393 tn . For a timestep t between t n\u22121 and t n , we can use a linear interpolation between \u0393 tn\u22121 and \u0393 tn . Then, we can estimate \u03c3 * 2 s|t b\u0177\n\u03c3 2 s|t = \u03b2 t|s \u03b1 t|s (1 \u2212 \u03b2 t|s \u0393 t ).", "publication_ref": ["b15"], "figure_ref": [], "table_ref": []}, {"heading": "E.2 ANALYTIC ESTIMATION OF THE OPTIMAL REVERSE TRAJECTORY", "text": "Now we consider optimize the trajectory\n0 = \u03c4 1 < \u2022 \u2022 \u2022 < \u03c4 K = 1 in the sense of KL minimization min \u03c41,\u2022\u2022\u2022 ,\u03c4 K D KL (q(x 0 , z \u03c41 , \u2022 \u2022 \u2022 , z \u03c4 K )||p * (x 0 , z \u03c41 , \u2022 \u2022 \u2022 , z \u03c4 K )).\nSimilar to Theorem 3, the optimal KL is\nD KL (q(x 0 , z \u03c41 , \u2022 \u2022 \u2022 , z \u03c4 K )||p * (x 0 , z \u03c41 , \u2022 \u2022 \u2022 , z \u03c4 K )) = d 2 K k=2 J(\u03c4 k\u22121 , \u03c4 k ) + c,\nwhere\nJ(\u03c4 k\u22121 , \u03c4 k ) = log(1 \u2212 \u03b2 \u03c4 k |\u03c4 k\u22121 E q ||\u2207z \u03c4 k log q(z\u03c4 k )|| 2 d\n) and c is unrelated to \u03c4 . The difference is that J(s, t) is defined on a continuous range 0 \u2264 s < t \u2264 1 and the DP algorithm is not directly applicable. However, we can restrict J(s, t) on a finite number of timesteps 0 = t 1 < \u2022 \u2022 \u2022 < t N = 1. Then we can apply the DP algorithm (see Algorithm 1) to the restricted J(s, t).", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "F EXPERIMENTAL DETAILS F.1 DETAILS OF SCORE-BASED MODELS", "text": "The CelebA 64x64 pretrained score-based model is provided in the official code (https:// github.com/ermongroup/ddim) of Song et al. (2020a). The LSUN Bedroom pretrained score-based model is provided in the official code (https://github.com/hojonathanho/ diffusion) of Ho et al. (2020). Both of them have a total of N = 1000 timesteps and use the linear schedule (Ho et al., 2020) as the forward noise schedule.\nThe ImageNet 64x64 pretrained score-based model is the unconditional L hybrid model provided in the official code (https://github.com/openai/improved-diffusion) of . The model includes both the mean and variance networks, where the mean network is trained with Eq. (5) as the standard DDPM (Ho et al., 2020) and the variance network is trained with the L vb objective. We only use the mean network. The model has a total of N = 4000 timesteps and its forward noise schedule is the cosine schedule .\nThe CIFAR10 score-based models are trained by ourselves. They have a total of N = 1000 timesteps and are trained with the linear forward noise schedule and the cosine forward noise schedule respectively. We use the same U-Net model architecture to . Following , we train 500K iterations with a batch size of 128, use a learning rate of 0.0001 with the AdamW optimizer (Loshchilov & Hutter, 2017) and use an exponential moving average (EMA) with a rate of 0.9999. We save a checkpoint every 10K iterations and select the checkpoint according to the FID results on 1000 samples generated under the reverse variance \u03c3 2 n = \u03b2 n and full timesteps.", "publication_ref": ["b35", "b9", "b9", "b9", "b21"], "figure_ref": [], "table_ref": []}, {"heading": "F.2 LOG-LIKELIHOOD AND SAMPLING", "text": "Following Ho et al. (2020), we linearly scale the image data consisting of integers in {0, 1, \u2022 \u2022 \u2022 , 255} to [\u22121, 1], and discretize the last reverse Markov transition p(x 0 |x 1 ) to obtain discrete loglikelihoods for image data.\nFollowing Ho et al. (2020), at the end of sampling, we only display the mean of p(x 0 |x 1 ) and discard the noise. This is equivalent to setting a clipping threshold of zero for the noise scale \u03c3 1 . Inspired by this, when sampling, we also clip the noise scale \u03c3 2 of p(x 1 |x 2 ), such that E|\u03c3 2 | \u2264 2 255 y, where is the standard Gaussian noise and y is the maximum tolerated perturbation of a channel. It improves the sample quality, especially for our analytic estimate (see Appendix G.4). We clip \u03c3 2 for all methods compared in Table 2, and choose y \u2208 {1, 2} according to the FID score. We find y = 2 works better on CIFAR10 (LS) and CelebA 64x64 with Analytic-DDPM. For other cases, we find y = 1 works better.\nWe use the official implementation of FID to pytorch (https://github.com/mseitzer/ pytorch-fid). We calculate the FID score on 50K generated samples on all datasets. Following , the reference distribution statistics are computed on the full training set for CIFAR10 and ImageNet 64x64. For CelebA 64x64 and LSUN Bedroom, the reference distribution statistics is computed on 50K training samples.", "publication_ref": ["b9", "b9"], "figure_ref": [], "table_ref": ["tab_2"]}, {"heading": "F.3 CHOICE OF THE NUMBER OF MONTE CARLO SAMPLES AND CALCULATION OF \u0393", "text": "We use a maximal M without introducing too much computation. Specifically, we set M = 50000 on CIFAR10, M = 10000 on CelebA 64x64 and ImageNet 64x64 and M = 1000 on LSUN Bedroom by default without a sweep. All of the samples are from the training dataset. We use the default settings of M for all results in Table 1, Table 2 and Table 3. We only calculate \u0393 in Eq. ( 8) once for a pretrained model, and \u0393 is reused during inference under different settings (e.g., trajectories of smaller K) in Table 1, Table 2 and Table 3. ", "publication_ref": [], "figure_ref": [], "table_ref": ["tab_1", "tab_2", "tab_1", "tab_2"]}, {"heading": "F.4 IMPLEMENTATION OF THE EVEN TRAJECTORY", "text": "We follow  for the implementation of the even trajectory. Given the number of timesteps K of a trajectory, we firstly determine the stride a = N \u22121 K\u22121 . Then the kth timestep is determined as round(1 + a(k \u2212 1)).", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "F.5 EXPERIMENTAL DETAILS OF TABLE 3", "text": "In Table 3, the results of DDPM, DDIM and Analytic-DPM are based on the same scorebased models (i.e., those listed in Section F.1). We get the results of Improved DDPM by running its official code and unconditional L hybrid models (https://github.com/openai/ improved-diffusion). As shown in Table 4, on the same dataset, the sizes as well as the averaged time of a single function evaluation of these models are almost the same.  et al. (2020a), which gets better FID than the even trajectory. The Analytic-DPM result is based on the DDPM forward process on LSUN Bedroom, and based on the DDIM forward process on other datasets. These choices achieve better efficiency than their alternatives.\nG ADDITIONAL RESULTS", "publication_ref": [], "figure_ref": [], "table_ref": ["tab_3", "tab_5"]}, {"heading": "G.1 VISUALIZATION OF REVERSE VARIANCES AND VARIATIONAL BOUND TERMS", "text": "Figure 1 visualizes the reverse variances and L vb terms on CIFAR10 with the linear forward noise schedule (LS). In Figure 2, we show more DDPM results on CIFAR10 with the cosine forward noise schedule (CS), CelebA 64x64 and ImageNet 64x64.  \nn n 2 n (c) ImageNet 64x64 2 2 2 5 2 8 timestep n 0.1 0.2 0.3 0.4 L vb term (bits/dim) 2 2 0.1 n n 2 n (d) CIFAR10 (CS) 2 2 2 5 2 8 timestep n 0.1 0.2 0.3 L vb term (bits/dim) 2 2 0.1 n n 2 n (e) CelebA 64x64 2 2 2 5 2 8 2 11 timestep n 0.2 0.4 0.6 L vb term (bits/dim) 2 0 2 1 0.4 n n 2 n (f) ImageNet 64x64", "publication_ref": [], "figure_ref": ["fig_1", "fig_6"], "table_ref": []}, {"heading": "G.2 ABLATION STUDY ON THE NUMBER OF MONTE CARLO SAMPLES", "text": "We show that only a small number of Monte Carlo (MC) samples M in Eq. ( 8) is enough for a small MC variance. As shown in Figure 3, the values of \u0393 n with M = 100 and M = 50000 Monte Carlo samples are almost the same in a single trial. To explicitly see the variance, in Figure 4 and Figure 5, we plot the mean, the standard deviation and the relative standard deviation (RSD) (i.e., the ratio of the standard deviation to the mean) of a single Monte Carlo sample\n||sn(xn)|| 2 d , x n \u223c q n (x n\n) and \u0393 n with different M respectively on CIFAR10 (LS). In all cases, the RSD decays fast as n increases. When n is small (e.g., n = 1), using M = 10 Monte Carlo samples can ensure that the RSD of \u0393 n is below 0.1, and using M = 100 Monte Carlo samples can ensure that the RSD of \u0393 n is about 0.025. When n > 100, the RSD of a single Monte Carlo sample is below 0.05, and using only M = 1 Monte Carlo sample can ensure the RSD of \u0393 n is below 0.05. Overall, a small M like 10 and 100 is sufficient for a small Monte Carlo variance. Furthermore, we show that Analytic-DPM with a small M like 10 and 100 has a similar performance to that with a large M . As shown in Figure 6 (a), using M = 100 or M = 50000 almost does not affect the likelihood results on CIFAR10 (LS). In Table 5 ( ", "publication_ref": [], "figure_ref": ["fig_9", "fig_10"], "table_ref": []}, {"heading": "G.3 TIGHTNESS OF THE BOUNDS", "text": "In Section 3.1 and Appendix C, we derive upper and lower bounds of the optimal reverse variance.\nIn this section, we show these bounds are tight numerically in practice. In Figure 7, we plot the combined upper bound (i.e., the minimum of the upper bounds in Eq. (11) and Eq. ( 12)) and the lower bound on CIFAR10. As shown in Figure 7 (a,c), the two bounds almost overlap under the fulltimesteps (K=N ) trajectory. When the trajectory has a smaller number of timesteps (e.g., K=100), the two bounds also overlap when the timestep \u03c4 k is large. These results empirically validate that our bounds are tight, especially when the timestep is large.  In Figure 8, we also plot the two upper bounds in Eq. (11) and Eq. ( 12) individually. The upper bound in Eq. ( 11) is tighter when the timestep is small and the other one is tighter when the timestep is large. Thereby, both upper bounds contribute to the combined upper bound.  To see how these bounds work in practice, in Figure 9, we plot the probability that\u03c3 2 n is clipped by the bounds in Theorem 2 with different number of Monte Carlo samples M on CIFAR10 (LS). For all M , the curves of ratio v.s. n are similar and the estimate is clipped more frequently when n is large. This is as expected because when n is large, the gap between the upper bound in Eq. ( 12) and the lower bound in Eq. (11) tends to zero. The results also agree with the plot of the bounds in Figure 7. Besides, the similarity of results between different M implies that the clipping by bounds occurs mainly due to the error of the score-based model s n (x n ), instead of the randomness in Monte Carlo methods. This section validates the argument in Appendix F.2 that properly clipping the noise scale \u03c3 2 in p(x 1 |x 2 ) leads to a better sample quality. As shown in Figure 10 and Figure 11, it greatly improves the sample quality of our analytic estimate. The curves of clipping and no clipping overlap as K increases, since \u03c3 2 is below the threshold for a large K.\nIndeed, as shown in Table 7, the clipping threshold designed for sampling in Appendix F.2 is 1 to 3 orders of magnitude smaller than the combined upper bound in Theorem 2 (i.e., the minimum of the upper bounds in Eq. (11) and Eq. ( 12)) when K is small. As shown in Figure 12, clipping \u03c3 2 also slightly improves the sample quality of the handcrafted reverse variance \u03c3 2 n = \u03b2 n used in the original DDPM (Ho et al., 2020). As for the other two variances, i.e., \u03c3 2 n =\u03b2 n in the original DDPM and \u03c3 2 n = \u03bb 2 n = 0 in the original DDIM (Song et al., 2020a), their \u03c3 2 generally don't exceed the threshold and thereby clipping doesn't affect the result.   Table 7: Comparing the values of (i) the threshold in Appendix F.2 used to clip \u03c3 2 2 designed for sampling, (ii) the combined upper bound in Theorem 2 when n = 2, (iii) the lower bound in Theorem 2 when n = 2 and (iv) our analytic estimate\u03c3 2 2 . We show comparison results on different datasets and different forward processes when K is small. ", "publication_ref": ["b9", "b35"], "figure_ref": ["fig_11", "fig_11", "fig_12", "fig_13", "fig_11", "fig_1", "fig_1", "fig_1"], "table_ref": []}, {"heading": "G.5 SAMPLE QUALITY COMPARISON BETWEEN DIFFERENT TRAJECTORIES", "text": "While the optimal trajectory (OT) significantly improves the likelihood results, it doesn't lead to better FID results. As shown in Figure 13, the even trajectory (ET) has better FID results. Such a behavior essentially roots in the different natures of the two metrics and has been investigated in extensive prior works (Ho et al., 2020;Vahdat et al., 2021;Watson et al., 2021;Kingma et al., 2021). ", "publication_ref": ["b9", "b41", "b42", "b15"], "figure_ref": ["fig_1"], "table_ref": []}, {"heading": "G.6 ADDITIONAL LIKELIHOOD COMPARISON", "text": "We compare our Analytic-DPM to Improved DDPM ) that predicts the reverse variance by a neural network. The comparison is based on the ImageNet 64x64 model described in Appendix F.1. As shown in Table 8, with full timesteps, Analytic-DPM achieves a NLL of 3.61, which is very close to 3.57 achieved by predicting the reverse variance in Improved DDPM. Besides, we also notice that the ET reduces the log-likelihood performance of Improved DDPM when K is small, and this is consistent with what Nichol & Dhariwal (2021) report. In contrast, our Analytic-DPM performs well with the ET. ", "publication_ref": [], "figure_ref": [], "table_ref": ["tab_10"]}, {"heading": "G.8 COMPARISON TO OTHER CLASSES OF GENERATIVE MODELS", "text": "While DPMs and their variants serve as the most direct baselines to validate the effectiveness of our method, we also compare with other classes of generative models in Table 10. Analytic-DPM achieves competitive sample quality results among various generative models, and meanwhile significantly reduces the efficiency gap between DPMs and other models.  In Figure 14-17, we show Analytic-DDIM constrained on a short trajectory of K = 50 timesteps can generate samples comparable to these under the best FID setting.\nIn Figure 18-21, we also show samples of both Analytic-DDPM and Analytic-DDIM constrained on trajectories of different number of timesteps K.    6.\nFurther, the additional calculation of the Monte Carlo estimate occurs only once given a pretrained model and training dataset, since we can save the results of \u0393 = (\u0393 1 , \u2022 \u2022 \u2022 , \u0393 N ) in Eq.( 8) and reuse it among different inference settings (e.g., trajectories of various K). The reuse is valid, because the marginal distribution of a shorter forward process q(x 0 , x \u03c41 , \u2022 \u2022 \u2022 , x \u03c4 K ) at timestep \u03c4 k is the same as that of the full-timesteps forward process q(x 0:N ) at timestep n = \u03c4 k . Indeed, in our experiments (e.g., Table 1,2), \u0393 is shared across different selections of K, trajectories and forward processes. Moreover, in practice, \u0393 can be calculated offline and deployed together with the pretrained model and the online inference cost of Analytic-DPM is exactly the same as DPM.", "publication_ref": [], "figure_ref": ["fig_1", "fig_1"], "table_ref": ["tab_1", "tab_7", "tab_1"]}, {"heading": "H.2 THE STOCHASTICITY OF THE VARIATIONAL BOUND AFTER PLUGGING THE ANALYTIC ESTIMATE", "text": "In this part, we write L vb as L vb (\u03c3 2 n ) to emphasize its dependence on the reverse variance \u03c3 2 n . When calculating the variational bound L vb (\u03c3 2 n ) (i.e., the negative ELBO) of Analytic-DPM, we will plug\u03c3 2 n into the variational bound and get L vb (\u03c3 2 n ). Since\u03c3 2 n is calculated by the Monte Carlo method, L vb (\u03c3 2 n ) is a stochastic variable. A natural question is that whether L vb (\u03c3 2 n ) is a stochastic bound of L vb (E[\u03c3 2 n ]), which can be judged by the Jensen's inequality if L vb is convex or concave. However, this is generally not guaranteed, as stated in Proposition 2. Proposition 2. L vb (\u03c3 2 n ) is neither convex nor concave w.r.t. \u03c3 2 n .\nProof. Since \u03c3 2 n only influences the n-th term L n in the variational bound L vb , where\nL n = E q D KL (q(x n\u22121 |x n , x 0 )||p(x n\u22121 |x n )) 2 \u2264 n \u2264 N \u2212E q log p(x 0 |x 1 ) n = 1 ,\nwe only need to study the convexity of L n w.r.t. \u03c3 2 n . When 2 \u2264 n \u2264 N ,\nL n = d 2 \u03bb 2 n \u03c3 2 n \u2212 1 + log \u03c3 2 n \u03bb 2 n + 1 \u03c3 2 n E q ||\u03bc(x n , x 0 ) \u2212 \u00b5 n (x n )|| 2 d . Let A = \u03bb 2 n + E q ||\u03bc(xn,x0)\u2212\u00b5n(xn)|| 2 d\n, then L n as a function of \u03c3 2 n is convex when 0 < \u03c3 2 n < 2A and concave when 2A < \u03c3 2 n . Thereby, L vb (\u03c3 2 n ) is neither convex nor concave w.r.t. \u03c3 2 n .\nNevertheless, in this paper, L vb (\u03c3 2 n ) is a stochastic upper bound of L vb (\u03c3 * 2 n ) because L vb (\u03c3 * 2 n ) is the optimal. The bias of L vb (\u03c3 2 n ) w.r.t. L vb (\u03c3 * 2 n ) is due to the Monte Carlo method as well as the error of the score-based model. The former can be reduced by increasing the number of Monte Carlo samples. The latter is irreducible if the pretrained model is fixed, which motivates us to clip the estimate, as discussed in Section 3.1.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "H.3 COMPARISON TO OTHER GAUSSIAN MODELS AND THEIR RESULTS", "text": "The reverse process of DPMs is a Markov process with Gaussian transitions. Thereby, it is interesting to compare it with other Gaussian models, e.g., the expectation propagation (EP) with the Gaussian process (GP) (Kim & Ghahramani, 2006).\nBoth EP and Analytic-DPM use moment matching as a key step to find analytic solutions of D KL (p target ||p opt ) terms. However, to our knowledge, the relation between moment matching and DPMs has not been revealed in prior literature. Further, compared to EP, we emphasize that it is highly nontrivial to calculate the second moment of p target in DPMs because p target involves an unknown and potentially complicated data distribution.\nIn EP with GP (Kim & Ghahramani, 2006), p target is the product of a single likelihood factor and all other approximate factors for tractability. In fact, the form of the likelihood factor is chosen such that the first two moments of p target can be easily computed or approximated. For instance, the original EP (Minka, 2001) considers Gaussian mixture likelihood (or Bernoulli likelihood for classification) and the moments can be directed obtained by the properties of Gaussian (or integration by parts). Besides, at the cost of the tractability, there is no converge guarantee of EP in general.\nIn contrast, p target in this paper is the conditional distribution q(x n\u22121 |x n ) of the corresponding joint distribution q(x 0:N ) defined by the forward process. Note that the moments of q(x n\u22121 |x n ) are nontrivial to calculate because it involves an unknown and potentially complicated data distribution. Technically, in Lemma 13, we carefully use the law of total variance conditioned on x 0 and convert the second moment of q(x n\u22121 |x n ) to that of q(x 0 |x n ), which surprisingly can be expressed as the score function as proven in Lemma 11.", "publication_ref": ["b13", "b13", "b24"], "figure_ref": [], "table_ref": []}, {"heading": "H.4 FUTURE WORKS", "text": "In our work, we mainly focus on image data. It would be interesting to apply Analytic-DPM to other data modalities, e.g. speech data (Chen et al., 2020). As presented in Appendix E, our method can be applied to continuous DPMs, e.g., variational diffusion models (Kingma et al., 2021) that learn the forward noise schedule. It is appealing to see how Analytic-DPM works on these continuous DPMs. Finally, it is also interesting to incorporate the optimal reverse variance in the training process of DPMs.", "publication_ref": ["b2", "b15"], "figure_ref": [], "table_ref": []}, {"heading": "ACKNOWLEDGMENTS", "text": "", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "ETHICS STATEMENT", "text": "This work proposes an analytic estimate of the optimal variance in the reverse process of diffusion probabilistic models. As a fundamental research in machine learning, the negative consequences are not obvious. Though in theory any technique can be misused, it is not likely to happen at the current stage.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "REPRODUCIBILITY STATEMENT", "text": "We provide our codes and links to pretrained models in https://github.com/baofff/ Analytic-DPM. We provide details of these pretrained models in Appendix F.1. We provide details of data processing, log-likelihood evaluation, sampling and FID computation in Appendix F.2. We provide complete proofs of all theoretical results in Appendix A.", "publication_ref": [], "figure_ref": [], "table_ref": []}], "references": [{"ref_id": "b0", "title": "Large scale gan training for high fidelity natural image synthesis", "journal": "", "year": "2018", "authors": "Andrew Brock; Jeff Donahue; Karen Simonyan"}, {"ref_id": "b1", "title": "", "journal": "", "year": "2015", "authors": "Yuri Burda; Roger Grosse; Ruslan Salakhutdinov"}, {"ref_id": "b2", "title": "Wavegrad: Estimating gradients for waveform generation", "journal": "", "year": "2020", "authors": "Nanxin Chen; Yu Zhang; Heiga Zen; Ron J Weiss; Mohammad Norouzi; William Chan"}, {"ref_id": "b3", "title": "Ilvr: Conditioning method for denoising diffusion probabilistic models", "journal": "", "year": "2021", "authors": "Jooyoung Choi; Sungwon Kim; Yonghyun Jeong; Youngjune Gwon; Sungroh Yoon"}, {"ref_id": "b4", "title": "Imagenet: A large-scale hierarchical image database", "journal": "Ieee", "year": "2009", "authors": "Jia Deng; Wei Dong; Richard Socher; Li-Jia Li; Kai Li; Li Fei-Fei"}, {"ref_id": "b5", "title": "Diffusion models beat gans on image synthesis", "journal": "", "year": "2021", "authors": "Prafulla Dhariwal; Alex Nichol"}, {"ref_id": "b6", "title": "Implicit generation and generalization in energy-based models", "journal": "", "year": "2019", "authors": "Yilun Du; Igor Mordatch"}, {"ref_id": "b7", "title": "Generative adversarial nets", "journal": "", "year": "2014", "authors": "Ian Goodfellow; Jean Pouget-Abadie; Mehdi Mirza; Bing Xu; David Warde-Farley; Sherjil Ozair; Aaron Courville; Yoshua Bengio"}, {"ref_id": "b8", "title": "Gans trained by a two time-scale update rule converge to a local nash equilibrium. Advances in neural information processing systems", "journal": "", "year": "2017", "authors": "Martin Heusel; Hubert Ramsauer; Thomas Unterthiner; Bernhard Nessler; Sepp Hochreiter"}, {"ref_id": "b9", "title": "Denoising diffusion probabilistic models", "journal": "", "year": "2020", "authors": "Jonathan Ho; Ajay Jain; Pieter Abbeel"}, {"ref_id": "b10", "title": "Gotta go fast when generating data with score-based models", "journal": "", "year": "2021", "authors": "Alexia Jolicoeur-Martineau; Ke Li; R\u00e9mi Pich\u00e9-Taillefer; Tal Kachman; Ioannis Mitliagkas"}, {"ref_id": "b11", "title": "Training generative adversarial networks with limited data", "journal": "", "year": "2020", "authors": "Tero Karras; Miika Aittala; Janne Hellsten; Samuli Laine; Jaakko Lehtinen; Timo Aila"}, {"ref_id": "b12", "title": "Analyzing and improving the image quality of stylegan", "journal": "", "year": "2020", "authors": "Tero Karras; Samuli Laine; Miika Aittala; Janne Hellsten; Jaakko Lehtinen; Timo Aila"}, {"ref_id": "b13", "title": "Bayesian gaussian process classification with the em-ep algorithm", "journal": "IEEE Transactions on Pattern Analysis and Machine Intelligence", "year": "2006", "authors": "Hyun-Chul Kim; Zoubin Ghahramani"}, {"ref_id": "b14", "title": "Glow: Generative flow with invertible 1x1 convolutions", "journal": "", "year": "2018", "authors": "P Diederik; Prafulla Kingma;  Dhariwal"}, {"ref_id": "b15", "title": "", "journal": "", "year": "2021", "authors": "P Diederik; Tim Kingma; Ben Salimans; Jonathan Poole;  Ho"}, {"ref_id": "b16", "title": "Diffwave: A versatile diffusion model for audio synthesis", "journal": "", "year": "2020", "authors": "Zhifeng Kong; Wei Ping; Jiaji Huang; Kexin Zhao; Bryan Catanzaro"}, {"ref_id": "b17", "title": "Learning multiple layers of features from tiny images", "journal": "", "year": "2009", "authors": "Alex Krizhevsky; Geoffrey Hinton"}, {"ref_id": "b18", "title": "", "journal": "", "year": "2021", "authors": "W Y Max; Jun Lam; Rongjie Wang; Dan Huang; Dong Su;  Yu"}, {"ref_id": "b19", "title": "Srdiff: Single image super-resolution with diffusion probabilistic models", "journal": "", "year": "2021", "authors": "Haoying Li; Yifan Yang; Meng Chang; Huajun Feng; Zhihai Xu; Qi Li; Yueting Chen"}, {"ref_id": "b20", "title": "Deep learning face attributes in the wild", "journal": "IEEE Computer Society", "year": "2015", "authors": "Ziwei Liu; Ping Luo; Xiaogang Wang; Xiaoou Tang"}, {"ref_id": "b21", "title": "", "journal": "", "year": "2017", "authors": "Ilya Loshchilov; Frank Hutter"}, {"ref_id": "b22", "title": "Knowledge distillation in iterative generative models for improved sampling speed", "journal": "", "year": "2021", "authors": "Eric Luhman; Troy Luhman"}, {"ref_id": "b23", "title": "Expectation propagation for approximate bayesian inference", "journal": "", "year": "2013", "authors": "P Thomas;  Minka"}, {"ref_id": "b24", "title": "A family of algorithms for approximate Bayesian inference", "journal": "", "year": "2001", "authors": "Thomas Peter Minka"}, {"ref_id": "b25", "title": "Spectral normalization for generative adversarial networks", "journal": "", "year": "2018", "authors": "Takeru Miyato; Toshiki Kataoka; Masanori Koyama; Yuichi Yoshida"}, {"ref_id": "b26", "title": "Improved denoising diffusion probabilistic models", "journal": "", "year": "2021", "authors": "Alex Nichol; Prafulla Dhariwal"}, {"ref_id": "b27", "title": "Grad-tts: A diffusion probabilistic model for text-to-speech", "journal": "", "year": "2021", "authors": "Vadim Popov; Ivan Vovk; Vladimir Gogoryan; Tasnima Sadekova; Mikhail Kudinov"}, {"ref_id": "b28", "title": "Autoregressive denoising diffusion models for multivariate probabilistic time series forecasting", "journal": "", "year": "2021", "authors": "Kashif Rasul; Calvin Seward; Ingmar Schuster; Roland Vollgraf"}, {"ref_id": "b29", "title": "Stochastic backpropagation and approximate inference in deep generative models", "journal": "PMLR", "year": "2014", "authors": "Danilo Jimenez Rezende; Shakir Mohamed; Daan Wierstra"}, {"ref_id": "b30", "title": "Image super-resolution via iterative refinement", "journal": "", "year": "2021", "authors": "Chitwan Saharia; Jonathan Ho; William Chan; Tim Salimans; J David; Mohammad Fleet;  Norouzi"}, {"ref_id": "b31", "title": "Noise estimation for generative diffusion models", "journal": "", "year": "2021", "authors": "Robin San-Roman; Eliya Nachmani; Lior Wolf"}, {"ref_id": "b32", "title": "Unit-ddpm: Unpaired image translation with denoising diffusion probabilistic models", "journal": "", "year": "2021", "authors": "Hiroshi Sasaki; Chris G Willcocks; Toby P Breckon"}, {"ref_id": "b33", "title": "D2c: Diffusion-denoising models for few-shot conditional generation", "journal": "", "year": "2021", "authors": "Abhishek Sinha; Jiaming Song; Chenlin Meng; Stefano Ermon"}, {"ref_id": "b34", "title": "Deep unsupervised learning using nonequilibrium thermodynamics", "journal": "PMLR", "year": "2015", "authors": "Jascha Sohl-Dickstein; Eric Weiss; Niru Maheswaranathan; Surya Ganguli"}, {"ref_id": "b35", "title": "", "journal": "", "year": "2020", "authors": "Jiaming Song; Chenlin Meng; Stefano Ermon"}, {"ref_id": "b36", "title": "Generative modeling by estimating gradients of the data distribution", "journal": "", "year": "2019", "authors": "Yang Song; Stefano Ermon"}, {"ref_id": "b37", "title": "Score-based generative modeling through stochastic differential equations", "journal": "", "year": "2020", "authors": "Yang Song; Jascha Sohl-Dickstein; P Diederik; Abhishek Kingma; Stefano Kumar; Ben Ermon;  Poole"}, {"ref_id": "b38", "title": "Maximum likelihood training of scorebased diffusion models", "journal": "", "year": "2021", "authors": "Yang Song; Conor Durkan; Iain Murray; Stefano Ermon"}, {"ref_id": "b39", "title": "A\u00e4ron van den Oord, and Matthias Bethge. A note on the evaluation of generative models", "journal": "", "year": "2015", "authors": "Lucas Theis"}, {"ref_id": "b40", "title": "Nvae: A deep hierarchical variational autoencoder", "journal": "", "year": "2020", "authors": "Arash Vahdat; Jan Kautz"}, {"ref_id": "b41", "title": "Score-based generative modeling in latent space", "journal": "", "year": "2021", "authors": "Arash Vahdat; Karsten Kreis; Jan Kautz"}, {"ref_id": "b42", "title": "Learning to efficiently sample from diffusion probabilistic models", "journal": "", "year": "2021", "authors": "Daniel Watson; Jonathan Ho; Mohammad Norouzi; William Chan"}, {"ref_id": "b43", "title": "Latent optimisation for generative adversarial networks", "journal": "", "year": "2019", "authors": "Yan Wu; Jeff Donahue; David Balduzzi; Karen Simonyan; Timothy Lillicrap Logan"}, {"ref_id": "b44", "title": "Vaebm: A symbiosis between variational autoencoders and energy-based models", "journal": "", "year": "2020", "authors": "Zhisheng Xiao; Karsten Kreis; Jan Kautz; Arash Vahdat"}, {"ref_id": "b45", "title": "Construction of a large-scale image dataset using deep learning with humans in the loop", "journal": "", "year": "2015", "authors": "Fisher Yu; Yinda Zhang; Shuran Song; Ari Seff; Jianxiong Xiao;  Lsun"}, {"ref_id": "b46", "title": "3d shape generation and completion through point-voxel diffusion", "journal": "", "year": "2021", "authors": "Linqi Zhou; Yilun Du; Jiajun Wu"}], "figures": [{"figure_label": "", "figure_type": "figure", "figure_id": "fig_0", "figure_caption": "q \u2212log p(x 0 |x 1 )+ N n=2 D KL (q(x n\u22121 |x 0 , x n )||p(x n\u22121 |x n ))+D KL (q(x N |x 0 )||p(x N )) ,1 Ho et al. (2020); Song et al. (2020a) parameterize \u00b5n(xn) with\u03bcn(xn, 1 \u221a \u03b1n (xn \u2212 \u03b2 n n(xn))), which is equivalent to Eq. (3) by letting sn(xn) = \u2212 1 \u221a \u03b2 n n(xn).", "figure_data": ""}, {"figure_label": "1", "figure_type": "figure", "figure_id": "fig_1", "figure_caption": "Figure 1 :1Figure 1: Comparing our analytic estimate\u03c3 2 n and prior works with handcrafted variances \u03b2 n and \u03b2 n . (a) compares the values of the variance for different timesteps. (b) compares the term in L vb corresponding to each timestep. The value of L vb is the area under the corresponding curve.", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_2", "figure_caption": "compress the reverse denoising process into a single step model; San-Roman et al. (2021) dynamically adjust the trajectory during inference. Both of them need extra training after getting a pretrained DPM. As for DPMs with continuous timesteps (Song et al., 2020b), Song et al. (2020b) introduce an ordinary differential equation (ODE), which improves sampling efficiency and enables exact likelihood computation. However, the likelihood computation involves a stochastic trace estimator, which requires a multiple number of runs for accurate computation. Jolicoeur-Martineau et al. (", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_3", "figure_caption": "Lemma 3. (Equivalence between the forward and reverse Markov property) Suppose q(x 0:N ) = q(x 0 ) N n=1 q(x n |x n\u22121 ) is a Markov chain, then q is also a Markov chain in the reverse direction, i.e., q(x 0:N", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_4", "figure_caption": "\u2207w log q(w) =E q(v|w) \u2207 w log q(w|v) Proof. According to E q(v|w) \u2207 w log q(v|w) = \u2207 w q(v|w)dv = \u2207 w q(v|w)dv = 0, we have \u2207 w log q(w) =\u2207 w log q(w) + E q(v|w) \u2207 w log q(v|w) =E q(v|w) \u2207 w log q(v, w) = E q(v|w) \u2207 w log q(w|v). Lemma 11. (Score representation of conditional expectation and covariance) Suppose q(v, w) = q(v)q(w|v), where q(w|v) = N (w| \u221a \u03b1v, \u03b2I), then", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_5", "figure_caption": ": C[k, k :] \u2190 (min(CJ[:, k]), min(CJ[:, k + 1]), \u2022 \u2022 \u2022 , min(CJ[:, N ])) 8: D[k, k :] \u2190 (arg min(CJ[:, k]), arg min(CJ[:, k + 1]), \u2022 \u2022 \u2022 , arg min(CJ[:, N ])) 9: end for 10: \u03c4 K = N 11: for k = K to 2 do Calculate \u03c4 12: \u03c4 k\u22121 \u2190 D[k, \u03c4 k ] 13: end for 14: return \u03c4 B THE DP ALGORITHM FOR THE LEAST-COST-PATH PROBLEM", "figure_data": ""}, {"figure_label": "2", "figure_type": "figure", "figure_id": "fig_6", "figure_caption": "Figure 2 :2Figure 2: Comparing our analytic estimate\u03c3 2 n and prior works with handcrafted variances \u03b2 n and \u03b2 n . (a-c) compare the values of the variance of different timesteps. (d-e) compare the term in L vb corresponding to each timestep. The value of L vb is the area under the corresponding curve.", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_7", "figure_caption": "a), we show results with even smaller M (e.g., M = 1, 3, 10). Under both the NLL and FID metrics, M = 10 achieves a similar result to that of M = 50000. The results are similar on ImageNet 64x64, as shown in Figure 6 (b) and Table 5 (b). Notably, the expected performance of FID is almost not influenced by the choice of M .As a result, Analytic-DPM consistently improves the baselines using a much smaller M (e.g., M = 10), as shown in Table6.", "figure_data": ""}, {"figure_label": "34", "figure_type": "figure", "figure_id": "fig_8", "figure_caption": "Figure 3 :Figure 4 :34Figure 3: The value of \u0393 n in a single trial with different number of Monte Carlo samples M .", "figure_data": ""}, {"figure_label": "5", "figure_type": "figure", "figure_id": "fig_9", "figure_caption": "Figure 5 :5Figure 5: The mean, the standard deviation and the relative standard deviation (RSD) (i.e., the ratio of the standard deviation to the mean) of \u0393 n with different number of Monte Carlo samples M at different n on CIFAR10 (LS). These values are directly calculated from the mean, the standard deviation and the RSD of ||sn(xn)|| 2 d", "figure_data": ""}, {"figure_label": "6", "figure_type": "figure", "figure_id": "fig_10", "figure_caption": "Figure 6 :6Figure 6: The curves of NLL v.s. the number of timesteps K in a trajectory with different number of Monte Carlo samples M , evaluated under \u03c3 2 n =\u03c3 2 n and the even trajectory.", "figure_data": ""}, {"figure_label": "7", "figure_type": "figure", "figure_id": "fig_11", "figure_caption": "Figure 7 :7Figure 7: The combined upper bound (UB) and the lower bound (LB) under full-timesteps (K=N ) and 100-timesteps (K=100) trajectories on CIFAR10 (LS) and CIFAR10 (CS).", "figure_data": ""}, {"figure_label": "8", "figure_type": "figure", "figure_id": "fig_12", "figure_caption": "Figure 8 :8Figure8: The upper bounds (UB) in Eq. (11) and Eq. (12) under full-timesteps (K=N ) and 100timesteps (K=100) trajectories on CIFAR10 (LS) and CIFAR10 (CS).", "figure_data": ""}, {"figure_label": "9", "figure_type": "figure", "figure_id": "fig_13", "figure_caption": "Figure 9 :9Figure 9: The probability that\u03c3 2 n is clipped by the bounds in Theorem 2 with different number of Monte Carlo samples M on CIFAR10 (LS). The probability is estimated by the ratio of\u03c3 2 n being clipped in 100 independent trials. The results are evaluated with full timesteps K = N .", "figure_data": ""}, {"figure_label": "10", "figure_type": "figure", "figure_id": "fig_14", "figure_caption": "Figure 10 :10Figure 10: Ablation study on clipping \u03c3 2 , evaluated under Analytic-DDPM.", "figure_data": ""}, {"figure_label": "11", "figure_type": "figure", "figure_id": "fig_15", "figure_caption": "Figure 11 :11Figure 11: Ablation study on clipping \u03c3 2 , evaluated under Analytic-DDIM.", "figure_data": ""}, {"figure_label": "12", "figure_type": "figure", "figure_id": "fig_16", "figure_caption": "Figure 12 :12Figure 12: Ablation study on clipping \u03c3 2 , evaluated under DDPM with \u03c3 2 n = \u03b2 n .", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_17", "figure_caption": "ModelModel) 3.87 \u00d7 10 \u22124 3.87 \u00d7 10 \u22124 3.87 \u00d7 10 \u22124 3.87 \u00d7 10 \u22124 Upper bound 1.45 \u00d7 10 \u22121 2.24 \u00d7 10 \u22122 6.20 \u00d7 10 \u22123 2.10 \u00d7 10 \u22123 Lower bound 9.99 \u00d7 10 \u22125 9.96 \u00d7 10 \u22125 9.84 \u00d7 10 \u22125 9.55 \u00d7 10 \u22125 \u03c3 2 2 8.70 \u00d7 10 \u22123 2.99 \u00d7 10 \u22123 1.32 \u00d7 10 \u22123 6.54 \u00d7 10 \u22124 DDIM Threshold (y=1) 9.66 \u00d7 10 \u22125 9.66 \u00d7 10 \u22125 9.66 \u00d7 10 \u22125 9.66 \u00d7 10 \u22125 Upper bound 1.37 \u00d7 10 \u22121 1.96 \u00d7 10 \u22122 4.82 \u00d7 10 \u22123 1.36 \u00d7 10 \u2212\u00d7 10 \u22123 2.54 \u00d7 10 \u22123 9.66 \u00d7 10\u22124 3.73 \u00d7 10 \u22124 CIFAR10 (CS) DDPM Threshold (y=1) 9.66 \u00d7 10 \u22125 9.66 \u00d7 10 \u22125 9.66 \u00d7 10 \u22125 9.66 \u00d7 10 \u22125 Upper bound 3.56 \u00d7 10 \u22122 6.15 \u00d7 10 \u22123 1.85 \u00d7 10 \u22123 6.80 \u00d7 10 \u22124 Lower bound 4.12 \u00d7 10 \u22125 4.10 \u00d7 10 \u22125 4.04 \u00d7 10 \u22125 3.89 \u00d7 10 \u22125 \u03c3 2 2 3.90 \u00d7 10 \u22123 1.28 \u00d7 10 \u22123 5.61 \u00d7 10 \u22124 2.75 \u00d7 10 \u22124 DDIM Threshold (y=1) 9.66 \u00d7 10 \u22125 9.66 \u00d7 10 \u22125 9.66 \u00d7 10 \u22125 9.66 \u00d7 10 \u22125 Upper bound 3.33 \u00d7 10 \u22122 5.22 \u00d7 10 \u22123 1.37 \u00d7 10 \u22123 4.18 \u00d7 10 \u2212\u00d7 10 \u22123 1.06 \u00d7 10 \u22123 3.95 \u00d7 10 \u22124 1.53 \u00d7 10 \u22124 CelebA 64x64 DDPM Threshold (y=2) 3.87 \u00d7 10 \u22124 3.87 \u00d7 10 \u22124 3.87 \u00d7 10 \u22124 3.87 \u00d7 10 \u22124Upper bound 1.45 \u00d7 10 \u22121 2.24 \u00d7 10 \u22122 6.20 \u00d7 10 \u22123 2.10 \u00d7 10 \u22123 Lower bound 9.99 \u00d7 10 \u22125 9.96 \u00d7 10 \u22125 9.84 \u00d7 10 \u22125 9.55 \u00d7 10 \u22125 \u03c3 2 2 4.04 \u00d7 10 \u22123 1.54 \u00d7 10 \u22123 7.54 \u00d7 10 \u22124 4.06 \u00d7 10 \u22124 DDIM Threshold (y=1) 9.66 \u00d7 10 \u22125 9.66 \u00d7 10 \u22125 9.66 \u00d7 10 \u22125 9.66 \u00d7 10 \u22125 Upper bound 1.37 \u00d7 10 \u22121 1.96 \u00d7 10 \u22122 4.82 \u00d7 10 \u22123 1.36 \u00d7 10 \u2212\u00d7 10 \u22123 1.26 \u00d7 10 \u22123 5.17 \u00d7 10 \u22124 2.11 \u00d7 10 \u22124 ) 9.66 \u00d7 10 \u22125 9.66 \u00d7 10 \u22125 9.66 \u00d7 10 \u22125 9.66 \u00d7 10 \u22125 Upper bound 5.93 \u00d7 10 \u22123 1.84 \u00d7 10 \u22123 6.44 \u00d7 10 \u22124 2.61 \u00d7 10 \u22124 Lower bound 9.85 \u00d7 10 \u22126 9.81 \u00d7 10 \u22126 9.72 \u00d7 10 \u22126 9.51 \u00d7 10 \u22126 \u03c3 2 2 1.40 \u00d7 10 \u22123 6.05 \u00d7 10 \u22124 2.77 \u00d7 10 \u22124 1.39 \u00d7 10 \u22124 DDIM Threshold (y=1) 9.66 \u00d7 10 \u22125 9.66 \u00d7 10 \u22125 9.66 \u00d7 10 \u22125 9.66 \u00d7 10 \u22125 Upper bound 5.46 \u00d7 10 \u22123 1.59 \u00d7 10 \u22123 5.03 \u00d7 10 \u22124 1.77 \u00d7 10 \u2212\u00d7 10 \u22123 5.17 \u00d7 10 \u22124 2.12 \u00d7 10 \u22124 9.11 \u00d7 10 \u22125", "figure_data": ""}, {"figure_label": "13", "figure_type": "figure", "figure_id": "fig_18", "figure_caption": "Figure 13 :13Figure 13: FID results with ET and OT, evaluated under Analytic-DDPM.", "figure_data": ""}, {"figure_label": "14", "figure_type": "figure", "figure_id": "fig_20", "figure_caption": "Figure 14 :14Figure 14: Generated samples on CIFAR10 (LS).", "figure_data": ""}, {"figure_label": "15171820", "figure_type": "figure", "figure_id": "fig_21", "figure_caption": "Figure 15 :Figure 17 :Figure 18 :Figure 20 :15171820Figure 15: Generated samples on CIFAR10 (CS).", "figure_data": ""}, {"figure_label": "1", "figure_type": "table", "figure_id": "tab_1", "figure_caption": "Negative log-likelihood (bits/dim) \u2193 under the DDPM forward process. We show results under trajectories of different number of timesteps K. We select the minimum K such that analytic-DPM can outperform the baselines with full timesteps and underline the corresponding results.", "figure_data": "Model \\ # timesteps K102550 100 200 400 1000CIFAR10 (LS)ETDDPM, \u03c3 2 n =\u03b2 n 74.95 24.98 12.01 7.08 5.03 4.29 3.73 DDPM, \u03c3 2 n = \u03b2 n 6.99 6.11 5.44 4.86 4.39 4.07 3.75Analytic-DDPM5.474.794.38 4.07 3.84 3.71 3.59OTDDPM, \u03c3 2 n = \u03b2 n Analytic-DDPM5.38 4.114.34 3.683.97 3.82 3.77 3.75 3.75 3.61 3.59 3.59 3.59 3.59CIFAR10 (CS)ETDDPM, \u03c3 2 n =\u03b2 n 75.96 24.94 11.96 7.04 4.95 4.19 3.60 DDPM, \u03c3 2 n = \u03b2 n 6.51 5.55 4.92 4.41 4.03 3.78 3.54Analytic-DDPM5.084.454.09 3.83 3.64 3.53 3.42OTDDPM, \u03c3 2 n = \u03b2 n Analytic-DDPM5.51 3.994.30 3.563.86 3.65 3.57 3.54 3.54 3.47 3.44 3.43 3.42 3.42CelebA 64x64ETDDPM, \u03c3 2 n =\u03b2 n 33.42 13.09 DDPM, \u03c3 2 n = \u03b2 n 6.67 5.727.14 4.60 3.45 3.03 2.71 4.98 4.31 3.74 3.34 2.93Analytic-DDPM4.543.893.48 3.16 2.92 2.79 2.66OTDDPM, \u03c3 2 n = \u03b2 n Analytic-DDPM4.76 2.973.58 2.713.16 2.99 2.94 2.93 2.93 2.67 2.66 2.66 2.66 2.66Model \\ # timesteps K2550100200 400 1000 4000ImageNet 64x64ETDDPM, \u03c3 2 n =\u03b2 n 105.87 46.25 22.02 12.10 7.59 5.04 3.89 DDPM, \u03c3 2 n = \u03b2 n 5.81 5.20 4.70 4.31 4.04 3.81 3.65Analytic-DDPM4.784.424.153.95 3.81 3.69 3.61OTDDPM, \u03c3 2 n = \u03b2 n Analytic-DDPM4.56 3.834.09 3.703.84 3.643.73 3.68 3.65 3.65 3.62 3.62 3.61 3.61"}, {"figure_label": "2", "figure_type": "table", "figure_id": "tab_2", "figure_caption": "FID \u2193 under the DDPM and DDIM forward processes. All are evaluated under the even trajectory (ET). The result with \u2020 is slightly better than 3.17 reported byHo et al. (2020), because we use an improved model architecture following.", "figure_data": "Model \\ # timesteps K102550100200 400 1000CIFAR10 (LS)DDPM, \u03c3 2 n =\u03b2 n DDPM, \u03c3 2 n = \u03b2 n44.45 233.41 125.05 66.28 31.36 12.96 4.86  \u2020 3.04 21.83 15.21 10.94 8.23 6.43 5.11Analytic-DDPM34.2611.607.255.404.01 3.624.03DDIM21.3110.707.746.085.07 4.614.13Analytic-DDIM14.005.814.043.553.39 3.503.74CIFAR10 (CS)DDPM, \u03c3 2 n =\u03b2 n DDPM, \u03c3 2 n = \u03b2 n34.76 205.3116.18 11.11 84.71 37.35 14.81 8.386.66 5.65 5.74 3.404.92 3.34Analytic-DDPM22.948.505.504.454.04 3.964.31DDIM34.3416.68 10.487.946.69 5.784.89Analytic-DDIM26.439.966.024.884.92 5.004.66CelebA 64x64DDPM, \u03c3 2 n =\u03b2 n DDPM, \u03c3 2 n = \u03b2 n36.69 294.79 115.69 53.39 25.65 24.46 18.96 14.31 10.48 8.09 9.72 3.955.95 3.16Analytic-DDPM28.9916.01 11.238.086.51 5.875.21DDIM20.5413.459.336.604.96 4.153.40Analytic-DDIM15.629.226.134.293.46 3.383.13Model \\ # timesteps K2550100200400 1000 4000ImageNet 64x64DDPM, \u03c3 2 n =\u03b2 n DDPM, \u03c3 229.21 21.71 19.12 17.81 17.48 16.84 16.55"}, {"figure_label": "3", "figure_type": "table", "figure_id": "tab_3", "figure_caption": "Efficiency comparison, based on the least number of timesteps \u2193 required to achieve a FID around 6 (with the corresponding FID). To get the strongest baseline, the results with \u2020 are achieved by using the quadratic trajectorySong et al. (2020a) instead of the default even trajectory.", "figure_data": "MethodCIFAR10 CelebA 64x64 LSUN BedroomDDPM (Ho et al., 2020)\u2020 90 (6.12)> 200130 (6.06)DDIM (Song et al., 2020a)\u2020 30 (5.85)> 100Best FID > 6Improved DDPM (Nichol & Dhariwal, 2021)45 (5.96) Missing model90 (6.02)Analytic-DPM (ours)25 (5.81)55 (5.98)100 (6.05)"}, {"figure_label": "4", "figure_type": "table", "figure_id": "tab_5", "figure_caption": "Model size and the averaged time to run a model function evaluation with a batch size of 10 on one GeForce RTX 2080 Ti.", "figure_data": "CIFAR10CelebA 64x64LSUN BedroomDDPM, DDIM, Analytic-DPM 200.44 MB / 29 ms 300.22 MB / 50 ms 433.63 MB / 438 msImproved DDPM200.45 MB / 30 msMissing model433.64 MB / 439 ms"}, {"figure_label": "6", "figure_type": "table", "figure_id": "tab_7", "figure_caption": "The NLL and FID comparison between Analytic-DDPM with M = 10 Monte Carlo samples and DDPM. Results are evaluated under the even trajectory on CIFAR10 (LS).", "figure_data": "# timesteps K102550100 200 400NLL \u2193Analytic-DDPM (M = 10)5.474.804.384.07 3.85 3.71DDPM6.996.115.444.86 4.39 4.07FID \u2193Analytic-DDPM (M = 10) 33.69 11.997.245.39 4.19 3.58DDPM44.45 21.83 15.21 10.94 8.23 4.86"}, {"figure_label": "8", "figure_type": "table", "figure_id": "tab_10", "figure_caption": "Negative log-likelihood (bits/dim) \u2193 under the DDPM forward process on ImageNet 64x64. All are evaluated under the even trajectory (ET). and the kth timestep is determined as 1 + a(k \u2212 1). As shown in Table9, under the setting ofSong et al. (2020a) on CelebA 64x64, our Analytic-DPM still improves the original DDIM consistently and improves the original DDPM in most cases.", "figure_data": "Model \\ # timesteps K2550 100 200 400 1000 4000Improved DDPM18.91 8.46 5.27 4.24 3.86 3.68 3.57Analytic-DDPM4.78 4.42 4.15 3.95 3.81 3.69 3.61G.7 CELEBA 64X64 RESULTS WITH A SLIGHTLY DIFFERENT IMPLEMENTATION OF THEEVEN TRAJECTORYSong et al. (2020a) use a slightly different implementation of the even trajectory on CelebA 64x64.They choose a different stride a = int( N K ),"}, {"figure_label": "9", "figure_type": "table", "figure_id": "tab_11", "figure_caption": "FID \u2193 on CelebA 64x64, following the even trajectory implementation ofSong et al. (2020a). \u2020 Original results inSong et al. (2020a). \u2021 Our reproduced results.", "figure_data": "Model \\ # timesteps K102050100 1000CelebA 64x64DDPM, \u03c3 2 n =\u03b2 n\u202033.1226.03 18.48 13.93 5.98DDPM, \u03c3 2 n =\u03b2 n DDPM, \u03c3 2 n = \u03b2 n DDPM, \u03c3 2 n = \u03b2 n\u2021  \u2020  \u202133.13 299.71 183.83 71.71 45.20 3.26 25.95 18.61 13.92 5.95 299.88 185.21 71.86 45.15 3.21Analytic-DDPM25.8817.40 10.987.95 5.21DDIM, \u03c3 2 n = \u03bb 2 n = 0  \u2020 DDIM, \u03c3 2 n = \u03bb 2 n = 0  \u202117.33 17.3813.73 13.729.17 9.176.53 3.51 6.51 3.40Analytic-DDIM12.749.505.964.14 3.13"}, {"figure_label": "10", "figure_type": "table", "figure_id": "tab_12", "figure_caption": "Comparison to other classes of generative models on CIFAR10. We show the FID results, the number of model function evaluations (NFE) to generate a single sample and the time to generate 10 samples with a batch size of 10 on one GeForce RTX 2080 Ti.", "figure_data": "Method"}], "formulas": [{"formula_id": "formula_0", "formula_text": "q M (x 1:N |x 0 ) = N n=1 q M (x n |x n\u22121 ), q M (x n |x n\u22121 ) = N (x n | \u221a \u03b1 n x n\u22121 , \u03b2 n I),(1)", "formula_coordinates": [2.0, 144.1, 276.87, 359.9, 30.2]}, {"formula_id": "formula_1", "formula_text": "q \u03bb (x 1:N |x 0 ) = q \u03bb (x N |x 0 ) N n=2 q \u03bb (x n\u22121 |x n , x 0 ),(2)", "formula_coordinates": [2.0, 186.5, 338.01, 317.5, 30.2]}, {"formula_id": "formula_2", "formula_text": "q \u03bb (x N |x 0 ) = N (x N | \u221a \u03b1 N x 0 , \u03b2 N I), q \u03bb (x n\u22121 |x n , x 0 ) = N (x n\u22121 |\u03bc n (x n , x 0 ), \u03bb 2 n I), \u00b5 n (x n , x 0 ) = \u03b1 n\u22121 x 0 + \u03b2 n\u22121 \u2212 \u03bb 2 n \u2022 x n \u2212 \u221a \u03b1 n x 0 \u03b2 n .", "formula_coordinates": [2.0, 186.5, 366.04, 363.5, 68.57]}, {"formula_id": "formula_3", "formula_text": "\u03b2 n\u22121 \u03b2 n \u03b2 n .", "formula_coordinates": [2.0, 278.12, 460.93, 33.29, 18.0]}, {"formula_id": "formula_4", "formula_text": "p(x 0:N ) = p(x N ) N n=1 p(x n\u22121 |x n ), p(x n\u22121 |x n ) = N (x n\u22121 |\u00b5 n (x n ), \u03c3 2 n I),", "formula_coordinates": [2.0, 147.29, 556.93, 317.43, 30.2]}, {"formula_id": "formula_5", "formula_text": "\u00b5 n (x n ) =\u03bc n x n , 1 \u221a \u03b1 n (x n + \u03b2 n s n (x n )) .(3)", "formula_coordinates": [2.0, 210.19, 617.52, 293.81, 23.52]}, {"formula_id": "formula_6", "formula_text": "L vb = E", "formula_coordinates": [2.0, 111.67, 675.25, 32.47, 9.65]}, {"formula_id": "formula_7", "formula_text": "min {\u00b5n,\u03c3 2 n } N n=1 L vb \u21d4 min {\u00b5n,\u03c3 2 n } N n=1", "formula_coordinates": [3.0, 194.69, 102.3, 120.28, 17.4]}, {"formula_id": "formula_9", "formula_text": "min {sn} N n=1 E n \u03b2 n E qn(xn) ||s n (x n ) \u2212 \u2207 xn log q n (x n )|| 2 = E n,x0, || + \u03b2 n s n (x n )|| 2 + c, (5", "formula_coordinates": [3.0, 121.52, 165.27, 378.61, 19.47]}, {"formula_id": "formula_10", "formula_text": ")", "formula_coordinates": [3.0, 500.13, 167.66, 3.87, 8.64]}, {"formula_id": "formula_11", "formula_text": "\u00b5 * n (x n ) =\u03bc n x n , 1 \u221a \u03b1 n (x n + \u03b2 n \u2207 xn log q n (x n )) ,(6)", "formula_coordinates": [3.0, 141.67, 408.64, 362.33, 23.52]}, {"formula_id": "formula_12", "formula_text": "\u03c3 * 2 n = \u03bb 2 n + \uf8eb \uf8ed \u03b2 n \u03b1 n \u2212 \u03b2 n\u22121 \u2212 \u03bb 2 n \uf8f6 \uf8f8 2 1 \u2212 \u03b2 n E qn(xn) ||\u2207 xn log q n (x n )|| 2 d ,(7)", "formula_coordinates": [3.0, 141.67, 435.37, 362.33, 32.4]}, {"formula_id": "formula_13", "formula_text": "\u0393 n = 1 M M m=1 ||s n (x n,m )|| 2 d , x n,m iid \u223c q n (x n ).(8)", "formula_coordinates": [4.0, 206.06, 363.14, 297.94, 30.2]}, {"formula_id": "formula_14", "formula_text": "\u03c3 2 n = \u03bb 2 n + \uf8eb \uf8ed \u03b2 n \u03b1 n \u2212 \u03b2 n\u22121 \u2212 \u03bb 2 n \uf8f6 \uf8f8 2 1 \u2212 \u03b2 n \u0393 n .(9)", "formula_coordinates": [4.0, 197.6, 440.23, 306.4, 32.4]}, {"formula_id": "formula_15", "formula_text": "|\u03c3 * 2 n \u2212\u03c3 2 n | = \uf8eb \uf8ed \u03b2 n \u03b1 n \u2212 \u03b2 n\u22121 \u2212 \u03bb 2 n \uf8f6 \uf8f8 2 \u03b2 n Coefficient |\u0393 n \u2212 E qn(xn) ||\u2207 xn log q n (x n )|| 2 d | Approximation error . (10", "formula_coordinates": [4.0, 131.06, 629.33, 368.79, 52.43]}, {"formula_id": "formula_16", "formula_text": ")", "formula_coordinates": [4.0, 499.85, 645.57, 4.15, 8.64]}, {"formula_id": "formula_17", "formula_text": "\u03bb 2 n \u2264 \u03c3 * 2 n \u2264 \u03bb 2 n + \uf8eb \uf8ed \u03b2 n \u03b1 n \u2212 \u03b2 n\u22121 \u2212 \u03bb 2 n \uf8f6 \uf8f8 2 . (11", "formula_coordinates": [5.0, 209.19, 175.65, 290.66, 32.41]}, {"formula_id": "formula_18", "formula_text": ")", "formula_coordinates": [5.0, 499.85, 191.89, 4.15, 8.64]}, {"formula_id": "formula_19", "formula_text": "\u03c3 * 2 n \u2264 \u03bb 2 n + \u03b1 n\u22121 \u2212 \u03b2 n\u22121 \u2212 \u03bb 2 n \u2022 \u03b1 n \u03b2 n 2 b \u2212 a 2 2 . (12", "formula_coordinates": [5.0, 180.21, 248.44, 319.64, 31.57]}, {"formula_id": "formula_20", "formula_text": ")", "formula_coordinates": [5.0, 499.85, 261.92, 4.15, 8.64]}, {"formula_id": "formula_21", "formula_text": "x \u03c41 , \u2022 \u2022 \u2022 , x \u03c4 K |x 0 ) constrained on a trajectory 1 = \u03c4 1 < \u2022 \u2022 \u2022 < \u03c4 K = N of K timesteps", "formula_coordinates": [5.0, 108.0, 414.35, 396.0, 20.64]}, {"formula_id": "formula_22", "formula_text": "q(x \u03c41 , \u2022 \u2022 \u2022 , x \u03c4 K |x 0 ) = q(x \u03c4 K |x 0 ) K k=2 q(x \u03c4 k\u22121 |x \u03c4 k , x 0 ), where q(x \u03c4 k\u22121 |x \u03c4 k , x 0 ) = N (x \u03c4 k\u22121 |\u03bc \u03c4 k\u22121 |\u03c4 k (x \u03c4 k , x 0 ), \u03bb 2 \u03c4 k\u22121 |\u03c4 k I),(13)", "formula_coordinates": [5.0, 108.0, 446.26, 702.6, 33.0]}, {"formula_id": "formula_23", "formula_text": "\u00b5 \u03c4 k\u22121 |\u03c4 k (x \u03c4 k , x 0 ) = \u03b1 \u03c4 k\u22121 x 0 + \u03b2 \u03c4 k\u22121 \u2212 \u03bb 2 \u03c4 k\u22121 |\u03c4 k \u2022 x \u03c4 k \u2212 \u221a \u03b1 \u03c4 k x 0 \u03b2 \u03c4 k .", "formula_coordinates": [5.0, 157.86, 477.1, 296.28, 36.33]}, {"formula_id": "formula_24", "formula_text": "p(x 0 , x \u03c41 , \u2022 \u2022 \u2022 , x \u03c4 K ) = p(x \u03c4 K ) K k=1 p(x \u03c4 k\u22121 |x \u03c4 k ), where p(x \u03c4 k\u22121 |x \u03c4 k ) = N (x \u03c4 k\u22121 |\u00b5 \u03c4 k\u22121 |\u03c4 k (x \u03c4 k ), \u03c3 2 \u03c4 k\u22121 |\u03c4 k I).", "formula_coordinates": [5.0, 198.05, 521.29, 298.5, 33.0]}, {"formula_id": "formula_25", "formula_text": "\u00b5 * \u03c4 k\u22121 |\u03c4 k (x \u03c4 k ) =\u03bc \u03c4 k\u22121 |\u03c4 k x \u03c4 k , 1 \u221a \u03b1 \u03c4 k (x \u03c4 k + \u03b2 \u03c4 k \u2207 x\u03c4 k log q(x \u03c4 k )) , \u03c3 * 2 \u03c4 k\u22121 |\u03c4 k = \u03bb 2 \u03c4 k\u22121 |\u03c4 k + \uf8eb \uf8ed \u03b2 \u03c4 k \u03b1 \u03c4 k |\u03c4 k\u22121 \u2212 \u03b2 \u03c4 k\u22121 \u2212\u03bb 2 \u03c4 k\u22121 |\u03c4 k \uf8f6 \uf8f8 2 (1\u2212\u03b2 \u03c4 k E q(x\u03c4 k ) ||\u2207 x\u03c4 k log q(x \u03c4 k )|| 2 d ),", "formula_coordinates": [5.0, 108.96, 586.62, 394.07, 60.14]}, {"formula_id": "formula_26", "formula_text": "\u03c4 k\u22121 |\u03c4 k i\u015d \u03c3 2 \u03c4 k\u22121 |\u03c4 k = \u03bb 2 \u03c4 k\u22121 |\u03c4 k + \uf8eb \uf8ed \u03b2 \u03c4 k \u03b1 \u03c4 k |\u03c4 k\u22121 \u2212 \u03b2 \u03c4 k\u22121 \u2212\u03bb 2 \u03c4 k\u22121 |\u03c4 k \uf8f6 \uf8f8 2 (1\u2212\u03b2 \u03c4 k \u0393 \u03c4 k ),", "formula_coordinates": [5.0, 158.9, 673.88, 479.72, 51.2]}, {"formula_id": "formula_27", "formula_text": "min \u03c41,\u2022\u2022\u2022 ,\u03c4 K D KL (q(x 0 , x \u03c41 , \u2022 \u2022 \u2022 , x \u03c4 K )||p * (x 0 , x \u03c41 , \u2022 \u2022 \u2022 , x \u03c4 K )) = d 2 K k=2 J(\u03c4 k\u22121 , \u03c4 k ) + c,(14)", "formula_coordinates": [6.0, 126.14, 113.5, 377.86, 30.55]}, {"formula_id": "formula_28", "formula_text": "J(\u03c4 k\u22121 , \u03c4 k ) = log(\u03c3 * 2 \u03c4 k\u22121 |\u03c4 k /\u03bb 2 \u03c4 k\u22121 |\u03c4 k )", "formula_coordinates": [6.0, 135.4, 150.98, 155.28, 13.61]}, {"formula_id": "formula_29", "formula_text": "J(\u03c4 k\u22121 , \u03c4 k ) \u2248 log(\u03c3 2 \u03c4 k\u22121 |\u03c4 k /\u03bb 2 \u03c4 k\u22121 |\u03c4 k )", "formula_coordinates": [6.0, 318.34, 185.8, 154.84, 13.61]}, {"formula_id": "formula_30", "formula_text": "E q(xn) Cov q(x0|xn) [x 0 ] and Cov q(xn) E q(x0|xn) [x 0 ]", "formula_coordinates": [6.0, 108.0, 382.2, 396.0, 21.97]}, {"formula_id": "formula_31", "formula_text": "H(q, p) = H(N (x|\u00b5 q , \u03a3 q ), p) = 1 2 log((2\u03c0) d |\u03a3|) + 1 2 tr(\u03a3 q \u03a3 \u22121 ) + 1 2 (\u00b5 q \u2212 \u00b5) \u03a3 \u22121 (\u00b5 q \u2212 \u00b5).", "formula_coordinates": [13.0, 172.07, 174.3, 267.87, 36.03]}, {"formula_id": "formula_32", "formula_text": "H(q, p) = \u2212E q(x) log p(x) = \u2212E q(x) log 1 (2\u03c0) d |\u03a3| exp(\u2212 (x \u2212 \u00b5) \u03a3 \u22121 (x \u2212 \u00b5) 2 ) = 1 2 log((2\u03c0) d |\u03a3|) + 1 2 E q(x) (x \u2212 \u00b5) \u03a3 \u22121 (x \u2212 \u00b5) = 1 2 log((2\u03c0) d |\u03a3|) + 1 2 E q(x) tr((x \u2212 \u00b5)(x \u2212 \u00b5) \u03a3 \u22121 ) = 1 2 log((2\u03c0) d |\u03a3|) + 1 2 tr(E q(x) (x \u2212 \u00b5)(x \u2212 \u00b5) \u03a3 \u22121 ) = 1 2 log((2\u03c0) d |\u03a3|) + 1 2 tr(E q(x) (x \u2212 \u00b5 q )(x \u2212 \u00b5 q ) + (\u00b5 q \u2212 \u00b5)(\u00b5 q \u2212 \u00b5) \u03a3 \u22121 ) = 1 2 log((2\u03c0) d |\u03a3|) + 1 2 tr( \u03a3 q + (\u00b5 q \u2212 \u00b5)(\u00b5 q \u2212 \u00b5) \u03a3 \u22121 ) = 1 2 log((2\u03c0) d |\u03a3|) + 1 2 tr(\u03a3 q \u03a3 \u22121 ) + 1 2 tr((\u00b5 q \u2212 \u00b5)(\u00b5 q \u2212 \u00b5) \u03a3 \u22121 ) = 1 2 log((2\u03c0) d |\u03a3|) + 1 2 tr(\u03a3 q \u03a3 \u22121 ) + 1 2 (\u00b5 q \u2212 \u00b5) \u03a3 \u22121 (\u00b5 q \u2212 \u00b5) =H(N (x|\u00b5 q , \u03a3 q ), p).", "formula_coordinates": [13.0, 128.72, 249.83, 354.55, 208.73]}, {"formula_id": "formula_33", "formula_text": "D KL (q||p) = D KL (N (x|\u00b5 q , \u03a3 q )||p) + H(N (x|\u00b5 q , \u03a3 q )) \u2212 H(q),", "formula_coordinates": [13.0, 170.81, 526.67, 270.38, 9.68]}, {"formula_id": "formula_34", "formula_text": "D KL (q||p) = H(q, p) \u2212 H(q) = H(N (x|\u00b5 q , \u03a3 q ), p) \u2212 H(q) =H(N (x|\u00b5 q , \u03a3 q ), p) \u2212 H(N (x|\u00b5 q , \u03a3 q )) + H(N (x|\u00b5 q , \u03a3 q )) \u2212 H(q) =D KL (N (x|\u00b5 q , \u03a3 q )||p) + H(N (x|\u00b5 q , \u03a3 q )) \u2212 H(q).", "formula_coordinates": [13.0, 160.14, 599.48, 291.72, 37.58]}, {"formula_id": "formula_35", "formula_text": ") = q(x N ) N n=1 q(x n\u22121 |x n ). Proof. q(x n\u22121 |x n , \u2022 \u2022 \u2022 , x N ) = q(x n\u22121 , x n , \u2022 \u2022 \u2022 , x N ) q(x n , \u2022 \u2022 \u2022 , x N ) = q(x n\u22121 , x n ) N i=n+1 q(x i |x i\u22121 ) q(x n ) N i=n+1 q(x i |x i\u22121 ) = q(x n\u22121 |x n ). Thereby, q(x 0:N ) = q(x N ) N n=1 q(x n\u22121 |x n ).", "formula_coordinates": [13.0, 154.03, 710.97, 114.15, 24.23]}, {"formula_id": "formula_36", "formula_text": "H(q(x 0:N )) = H(q(x N )) + N n=1 E q H(q(x n\u22121 |x n )) = H(q(x 0 )) + N n=1 E q H(q(x n |x n\u22121 )).", "formula_coordinates": [14.0, 118.26, 250.0, 375.47, 30.2]}, {"formula_id": "formula_37", "formula_text": "H(q(x 0:N )) = \u2212 E q log q(x N ) N n=1 q(x n\u22121 |x n ) = \u2212E q log q(x N ) \u2212 N n=1 E q log q(x n\u22121 |x n ) =H(q(x N )) + N n=1 E q H(q(x n\u22121 |x n )).", "formula_coordinates": [14.0, 118.66, 316.13, 374.68, 65.03]}, {"formula_id": "formula_38", "formula_text": "N )) = H(q(x 0 )) + N n=1 E q H(q(x n |x n\u22121 )).", "formula_coordinates": [14.0, 239.59, 390.81, 175.6, 24.23]}, {"formula_id": "formula_39", "formula_text": "q(x n |x n\u22121 ) = N (x n | \u221a \u03b1 n x n\u22121 , \u03b2 n I), then H(q(x 0:N )) = H(q(x 0 )) + d 2 N n=1 log(2\u03c0e\u03b2 n ).", "formula_coordinates": [14.0, 108.0, 431.21, 293.82, 56.57]}, {"formula_id": "formula_40", "formula_text": "H(q(x 0:N )) = H(q(x 0 )) + N n=1 E q H(q(x n |x n\u22121 )) = H(q(x 0 )) + N n=1 d 2 log(2\u03c0e\u03b2 n ).", "formula_coordinates": [14.0, 130.21, 523.71, 351.58, 30.2]}, {"formula_id": "formula_41", "formula_text": "H(q(x 0:N )) = H(q(x 0 )) + E q H(q(x N |x 0 )) + N n=2 E q H(q(x n\u22121 |x n , x 0 )).", "formula_coordinates": [14.0, 151.78, 603.07, 308.45, 30.2]}, {"formula_id": "formula_42", "formula_text": "H(q(x 0:N )) =H(q(x 0 )) + E q H(q(x 1:N |x 0 )) =H(q(x 0 )) + E q H(q(x N |x 0 )) + N n=2 E q H(q(x n\u22121 |x n , x 0 )).", "formula_coordinates": [14.0, 153.16, 669.21, 305.68, 45.28]}, {"formula_id": "formula_43", "formula_text": "H(q(x 0:N )) = H(q(x 0 )) + d 2 log(2\u03c0e\u03b2 N ) + d 2 N n=2 log(2\u03c0e\u03bb 2 n ).", "formula_coordinates": [15.0, 174.39, 122.71, 263.22, 30.2]}, {"formula_id": "formula_44", "formula_text": "0:N ) = p(x N ) N n=1 p(x n\u22121 |x n ) is a Markov chain, then we have E q D KL (q(x 0:N \u22121 |x N )||p(x 0:N \u22121 |x N )) = N n=1 E q D KL (q(x n\u22121 |x n )||p(x n\u22121 |x n )) + c, where c = N n=1 E q H(q(x n\u22121 |x n )) \u2212 E q H(q(x 0:N \u22121 |x N )) is only related to q. Particularly, if q(x 0:N ) is also a Markov chain, then c = 0.", "formula_coordinates": [15.0, 108.0, 184.14, 396.0, 115.07]}, {"formula_id": "formula_45", "formula_text": "E q D KL (q(x 0:N \u22121 |x N )||p(x 0:N \u22121 |x N )) = \u2212E q log p(x 0:N \u22121 |x N ) \u2212 E q H(q(x 0:N \u22121 |x N )) = \u2212 N n=1 E q log p(x n\u22121 |x n ) \u2212 E q H(q(x 0:N \u22121 |x N )) = N n=1 E q D KL (q(x n\u22121 |x n )||p(x n\u22121 |x n )) + N n=1 E q H(q(x n\u22121 |x n )) \u2212 E q H(q(x 0:N \u22121 |x N )). Let c = N n=1 E q H(q(x n\u22121 |x n )) \u2212 E q H(q(x 0:N \u22121 |x N )), then E q D KL (q(x 0:N \u22121 |x N )||p(x 0:N \u22121 |x N )) = N n=1 E q D KL (q(x n\u22121 |x n )||p(x n\u22121 |x n )) + c.", "formula_coordinates": [15.0, 108.0, 329.73, 388.27, 154.69]}, {"formula_id": "formula_46", "formula_text": "0:N ) = N n=1 p(x n\u22121 |x n )p(x N ) is a Gaussian Markov chain with p(x n\u22121 |x n ) = N (x n\u22121 |\u00b5 n (x n ), \u03c3 2 n I), then the joint KL opti- mization min {\u00b5n,\u03c3 2 n } N n=1 D KL (q(x 0:N )||p(x 0:N ))", "formula_coordinates": [15.0, 108.0, 525.79, 396.0, 70.94]}, {"formula_id": "formula_47", "formula_text": "\u00b5 * n (x n ) = E q(xn\u22121|xn) [x n\u22121 ], \u03c3 * 2 n = E qn(xn) tr(Cov q(xn\u22121|xn) [x n\u22121 ]) d ,", "formula_coordinates": [15.0, 154.28, 619.18, 303.44, 23.08]}, {"formula_id": "formula_48", "formula_text": "D KL (q(x 0:N )||p * (x 0:N )) = H(q(x N ), p(x N )) + d 2 N n=1 log(2\u03c0e\u03c3 * 2 n ) \u2212 H(q(x 0:N )).", "formula_coordinates": [15.0, 133.3, 664.18, 345.4, 30.2]}, {"formula_id": "formula_49", "formula_text": "D KL (q(x 0:N )||p(x 0:N )) = D KL (q(x N )||p(x N )) + N n=1 E q D KL (q(x n\u22121 |x n )||p(x n\u22121 |x n )) + c, where c = N n=1 E q H(q(x n\u22121 |x n )) \u2212 E q H(q(x 0:N \u22121 |x N )). Since E q D KL (q(x n\u22121 |x n )||p(x n\u22121 |x n )", "formula_coordinates": [16.0, 108.0, 103.11, 393.18, 80.77]}, {"formula_id": "formula_50", "formula_text": "min \u00b5n,\u03c3 2 n E q D KL (q(x n\u22121 |x n )||p(x n\u22121 |x n )), 1 \u2264 n \u2264 N.", "formula_coordinates": [16.0, 190.75, 203.28, 230.49, 16.63]}, {"formula_id": "formula_51", "formula_text": "E q D KL (q(x n\u22121 |x n )||p(x n\u22121 |x n )) =E q D KL (N (x n\u22121 |E q(xn\u22121|xn) [x n\u22121 ], Cov q(xn\u22121|xn) [x n\u22121 ])||p(x n\u22121 |x n )) + E q H(N (x n\u22121 |E q(xn\u22121|xn) [x n\u22121 ], Cov q(xn\u22121|xn) [x n\u22121 ])) \u2212 E q H(q(x n\u22121 |x n )) =F(\u03c3 2 n ) + G(\u03c3 2 n , \u00b5 n ) + cwhere", "formula_coordinates": [16.0, 108.0, 252.12, 371.59, 72.49]}, {"formula_id": "formula_52", "formula_text": "F(\u03c3 2 n ) = 1 2 \u03c3 \u22122 n E q tr(Cov q(xn\u22121|xn) [x n\u22121 ]) + d log \u03c3 2 n , G(\u03c3 2 n , \u00b5 n ) = 1 2 \u03c3 \u22122 n E q ||E q(xn\u22121|xn) [x n\u22121 ] \u2212 \u00b5 n (x n )|| 2 , and c = d 2 log(2\u03c0) \u2212 E q H(q(x n\u22121 |x n )). The optimal \u00b5 * n (x n ) is achieved when ||E q(xn\u22121|xn) [x n\u22121 ] \u2212 \u00b5 n (x n )|| 2 = 0. Thereby, \u00b5 * n (x n ) = E q(xn\u22121|xn) [x n\u22121 ].", "formula_coordinates": [16.0, 108.0, 330.34, 326.07, 105.1]}, {"formula_id": "formula_53", "formula_text": "\u03c3 * 2 n = E q tr(Cov q(xn\u22121|xn) [x n\u22121 ]) d .", "formula_coordinates": [16.0, 232.77, 455.64, 146.46, 23.08]}, {"formula_id": "formula_54", "formula_text": "* 2 n ) = d 2 (1 + log \u03c3 * 2 n ) and E q D KL (q(x n\u22121 |x n )||p * (x n\u22121 |x n )) = d 2 log(2\u03c0e\u03c3 * 2 n ) \u2212 E q H(q(x n\u22121 |x n )).", "formula_coordinates": [16.0, 148.85, 490.97, 314.3, 42.67]}, {"formula_id": "formula_55", "formula_text": "D KL (q(x 0:N )||p * (x 0:N )) =D KL (q(x N )||p(x N )) + N n=1 d 2 log(2\u03c0e\u03c3 * 2 n ) \u2212 N n=1 E q H(q(x n\u22121 |x n )) + N n=1 E q H(q(x n\u22121 |x n )) \u2212 (H(q(x 0:N )) \u2212 H(q(x N ))) =H(q(x N ), p(x N )) + N n=1 d 2 log(2\u03c0e\u03c3 * 2 n ) \u2212 H(q(x 0:N )).", "formula_coordinates": [16.0, 161.23, 561.82, 289.55, 117.01]}, {"formula_id": "formula_56", "formula_text": "E q(v|w) [v] = 1 \u221a \u03b1 (w + \u03b2\u2207 w log q(w)), E q(w) Cov q(v|w) [v] = \u03b2 \u03b1 I \u2212 \u03b2E q(w) \u2207 w log q(w)\u2207 w log q(w) , E q(w) tr(Cov q(v|w) [v]) d = \u03b2 \u03b1 1 \u2212 \u03b2E q(w) ||\u2207 w log q(w)|| 2 d .", "formula_coordinates": [17.0, 163.26, 189.24, 285.48, 74.94]}, {"formula_id": "formula_57", "formula_text": "\u2207 w log q(w) = E q(v|w) \u2207 w log q(w|v) = \u2212E q(v|w) w \u2212 \u221a \u03b1v \u03b2 . Thereby, E q(v|w) [v] = 1 \u221a \u03b1 (w + \u03b2\u2207 w log q(w))", "formula_coordinates": [17.0, 108.0, 293.94, 326.96, 52.03]}, {"formula_id": "formula_58", "formula_text": "E q(w) Cov q(v|w) [v] = \u03b2 2 \u03b1 E q(w) Cov q(v|w) [ w \u2212 \u221a \u03b1v \u03b2 ] = \u03b2 2 \u03b1 E q(w) E q(v|w) ( w \u2212 \u221a \u03b1v \u03b2 )( w \u2212 \u221a \u03b1v \u03b2 ) \u2212 E q(v|w) [ w \u2212 \u221a \u03b1v \u03b2 ]E q(v|w) [ w \u2212 \u221a \u03b1v \u03b2 ] = \u03b2 2 \u03b1 1 \u03b2 2 E q(v) E q(w|v) (w \u2212 \u221a \u03b1v)(w \u2212 \u221a \u03b1v) \u2212 E q(w) \u2207 w log q(w)\u2207 w log q(w) = \u03b2 2 \u03b1 1 \u03b2 2 E q(v) Cov q(w|v) w \u2212 E q(w) \u2207 w log q(w)\u2207 w log q(w) = \u03b2 2 \u03b1 1 \u03b2 2 E q(v) \u03b2I \u2212 E q(w) \u2207 w log q(w)\u2207 w log q(w) = \u03b2 2 \u03b1 1 \u03b2 I \u2212 E q(w) \u2207 w log q(w)\u2207 w log q(w) = \u03b2 \u03b1 (I \u2212 \u03b2E q(w) \u2207 w log q(w)\u2207 w log q(w) ).", "formula_coordinates": [17.0, 109.21, 349.3, 393.58, 170.29]}, {"formula_id": "formula_59", "formula_text": "E q(w) tr(Cov q(v|w) [v]) d = \u03b2 \u03b1 (1 \u2212 \u03b2E q(w) ||\u2207 w log q(w)|| 2 d ). Lemma 12. (Bounded covariance of a bounded distribution) Suppose q(x) is a bounded distribution in [a, b] d , then tr(Cov q(x) [x]) d \u2264 ( b\u2212a 2 ) 2 .", "formula_coordinates": [17.0, 108.0, 552.9, 396.0, 77.93]}, {"formula_id": "formula_60", "formula_text": "tr(Cov q(x) [x]) d = tr(Cov q(x) [x \u2212 a+b 2 ]) d = E q(x) ||x \u2212 a+b 2 || 2 \u2212 ||Ex \u2212 a+b 2 || 2 d \u2264 E q(x) ||x \u2212 a+b 2 || 2 d \u2264 ( b \u2212 a 2 ) 2 .", "formula_coordinates": [17.0, 139.08, 664.23, 332.14, 51.89]}, {"formula_id": "formula_61", "formula_text": "0 |x n ) \u00b5 * n (x n ) =\u03bc n (x n , E q(x0|xn) x 0 ) \u03c3 * 2 n = \u03bb 2 n + \u03b1 n\u22121 \u2212 \u03b2 n\u22121 \u2212 \u03bb 2 n \u2022 \u03b1 n \u03b2 n 2 E q(xn) tr(Cov q(x0|xn) [x 0 ]) d", "formula_coordinates": [18.0, 148.48, 95.98, 313.84, 64.86]}, {"formula_id": "formula_62", "formula_text": "\u00b5 * n (x n ) = E q(xn\u22121|xn) [x n\u22121 ], \u03c3 * 2 n = E qn(xn) tr(Cov q(xn\u22121|xn) [x n\u22121 ]) d .", "formula_coordinates": [18.0, 154.28, 230.11, 303.44, 23.08]}, {"formula_id": "formula_63", "formula_text": "\u00b5 * n . Since\u03bc n (x n , x 0 ) is linear w.r.t. x 0 , we have \u00b5 * n (x n ) = E q(xn\u22121|xn) [x n\u22121 ] = E q(x0|xn) E q(xn\u22121|xn,x0) [x n\u22121 ] =E q(x0|xn)\u03bcn (x n , x 0 ) =\u03bc n (x n , E q(x0|xn) x 0 ).", "formula_coordinates": [18.0, 171.49, 265.6, 269.02, 46.05]}, {"formula_id": "formula_64", "formula_text": "Cov q(xn\u22121|xn) [x n\u22121 ] = E q(x0|xn) Cov q(xn\u22121|xn,x0) [x n\u22121 ] + Cov q(x0|xn) E q(xn\u22121|xn,x0) [x n\u22121 ] =\u03bb 2 n I + Cov q(x0|xn)\u03bcn (x n , x 0 ) = \u03bb 2 n I + ( \u03b1 n\u22121 \u2212 \u03b2 n\u22121 \u2212 \u03bb 2 n \u2022 \u03b1 n \u03b2 n ) 2 Cov q(x0|xn) [x 0 ].", "formula_coordinates": [18.0, 109.03, 347.83, 393.95, 43.68]}, {"formula_id": "formula_65", "formula_text": "\u03c3 * 2 n = E qn(xn) tr(Cov q(xn\u22121|xn) [x n\u22121 ]) d =\u03bb 2 n + ( \u03b1 n\u22121 \u2212 \u03b2 n\u22121 \u2212 \u03bb 2 n \u2022 \u03b1 n \u03b2 n ) 2 E q(xn) tr(Cov q(x0|xn) [x 0 ]) d .", "formula_coordinates": [18.0, 162.01, 426.67, 287.98, 54.4]}, {"formula_id": "formula_66", "formula_text": "\u00b5 * n (x n ) =\u03bc n x n , 1 \u221a \u03b1 n (x n + \u03b2 n \u2207 xn log q n (x n )) ,(6)", "formula_coordinates": [18.0, 141.67, 575.27, 362.33, 23.52]}, {"formula_id": "formula_67", "formula_text": "\u03c3 * 2 n = \u03bb 2 n + \uf8eb \uf8ed \u03b2 n \u03b1 n \u2212 \u03b2 n\u22121 \u2212 \u03bb 2 n \uf8f6 \uf8f8 2 1 \u2212 \u03b2 n E qn(xn) ||\u2207 xn log q n (x n )|| 2 d ,(7)", "formula_coordinates": [18.0, 141.67, 602.0, 362.33, 32.4]}, {"formula_id": "formula_68", "formula_text": "\u00b5 * n (x n ) =\u03bc n (x n , E q(x0|xn) x 0 ) =\u03bc n (x n , 1 \u221a \u03b1 n (x n + \u03b2 n \u2207 xn log q(x n ))),and", "formula_coordinates": [18.0, 150.93, 707.05, 310.14, 23.52]}, {"formula_id": "formula_69", "formula_text": "\u03c3 * 2 n = \u03bb 2 n + ( \u03b1 n\u22121 \u2212 \u03b2 n\u22121 \u2212 \u03bb 2 n \u2022 \u03b1 n \u03b2 n ) 2 E q(xn) tr(Cov q(x0|xn) [x 0 ]) d =\u03bb 2 n + ( \u03b1 n\u22121 \u2212 \u03b2 n\u22121 \u2212 \u03bb 2 n \u2022 \u03b1 n \u03b2 n ) 2 \u03b2 n \u03b1 n (1 \u2212 \u03b2 n E q(xn) ||\u2207 xn log q(x n )|| 2 d ) =\u03bb 2 n + ( \u03b2 n \u03b1 n \u2212 \u03b2 n\u22121 \u2212 \u03bb 2 n ) 2 (1 \u2212 \u03b2 n E q(xn) ||\u2207 xn log q(x n )|| 2 d ).", "formula_coordinates": [19.0, 141.21, 101.48, 329.59, 94.73]}, {"formula_id": "formula_70", "formula_text": "\u03bb 2 n \u2264 \u03c3 * 2 n \u2264 \u03bb 2 n + \uf8eb \uf8ed \u03b2 n \u03b1 n \u2212 \u03b2 n\u22121 \u2212 \u03bb 2 n \uf8f6 \uf8f8 2 . (11", "formula_coordinates": [19.0, 209.19, 280.15, 290.66, 32.4]}, {"formula_id": "formula_71", "formula_text": ")", "formula_coordinates": [19.0, 499.85, 296.39, 4.15, 8.64]}, {"formula_id": "formula_72", "formula_text": "\u03c3 * 2 n \u2264 \u03bb 2 n + \u03b1 n\u22121 \u2212 \u03b2 n\u22121 \u2212 \u03bb 2 n \u2022 \u03b1 n \u03b2 n 2 b \u2212 a 2 2 . (12", "formula_coordinates": [19.0, 180.21, 352.16, 319.64, 31.57]}, {"formula_id": "formula_73", "formula_text": ")", "formula_coordinates": [19.0, 499.85, 365.63, 4.15, 8.64]}, {"formula_id": "formula_74", "formula_text": "\u03bb 2 n \u2264 \u03c3 * 2 n \u2264 \u03bb 2 n + ( \u03b2 n \u03b1 n \u2212 \u03b2 n\u22121 \u2212 \u03bb 2 n ) 2 .", "formula_coordinates": [19.0, 214.86, 419.99, 182.28, 23.23]}, {"formula_id": "formula_75", "formula_text": "E q(xn) tr(Cov q(x0|xn) [x 0 ]) d \u2264 ( b \u2212 a 2 ) 2 .", "formula_coordinates": [19.0, 224.25, 484.66, 163.51, 23.0]}, {"formula_id": "formula_76", "formula_text": "\u03c3 * 2 n =\u03bb 2 n + ( \u03b1 n\u22121 \u2212 \u03b2 n\u22121 \u2212 \u03bb 2 n \u2022 \u03b1 n \u03b2 n ) 2 E q(xn) tr(Cov q(x0|xn) [x 0 ]) d \u2264\u03bb 2 n + ( \u03b1 n\u22121 \u2212 \u03b2 n\u22121 \u2212 \u03bb 2 n \u2022 \u03b1 n \u03b2 n ) 2 ( b \u2212 a 2 ) 2 .", "formula_coordinates": [19.0, 154.71, 530.33, 301.39, 60.11]}, {"formula_id": "formula_77", "formula_text": "D KL (q(x 0 , x \u03c41 , \u2022 \u2022 \u2022 , x \u03c4 K )||p * (x 0 , x \u03c41 , \u2022 \u2022 \u2022 , x \u03c4 K )) = d 2 K k=2 J(\u03c4 k\u22121 , \u03c4 k ) + c,", "formula_coordinates": [19.0, 150.74, 675.59, 310.52, 30.55]}, {"formula_id": "formula_78", "formula_text": "J(\u03c4 k\u22121 , \u03c4 k ) = log \u03c3 * 2 \u03c4 k\u22121 |\u03c4 k \u03bb 2 \u03c4 k\u22121 |\u03c4 k", "formula_coordinates": [19.0, 134.47, 711.71, 107.1, 23.27]}, {"formula_id": "formula_79", "formula_text": "D KL (q(x 0 , x \u03c41 , \u2022 \u2022 \u2022 , x \u03c4 K )||p * (x 0 , x \u03c41 , \u2022 \u2022 \u2022 , x \u03c4 K )) =E q D KL (q(x 0 |x \u03c41 , \u2022 \u2022 \u2022 , x \u03c4 K )||p * (x 0 |x 1 )) + D KL (q(x \u03c41 , \u2022 \u2022 \u2022 , x \u03c4 K )||p * (x \u03c41 , \u2022 \u2022 \u2022 , x \u03c4 K )) =E q D KL (q(x 0 |x \u03c41 , \u2022 \u2022 \u2022 , x \u03c4 K )||p * (x 0 |x 1 )) + H(q(x N ), p(x N )) + d 2 K k=2 log(2\u03c0e\u03c3 * 2 \u03c4 k\u22121 |\u03c4 k ) \u2212 H(q(x \u03c41 , \u2022 \u2022 \u2022 , x \u03c4 N )) = \u2212 E q log p * (x 0 |x 1 ) + H(q(x N ), p(x N )) + d 2 K k=2 log(2\u03c0e\u03c3 * 2 \u03c4 k\u22121 |\u03c4 k ) \u2212 H(q(x 0 , x \u03c41 , \u2022 \u2022 \u2022 , x \u03c4 K )) = \u2212 E q log p * (x 0 |x 1 ) + H(q(x N ), p(x N )) + d 2 K k=2 log(2\u03c0e\u03c3 * 2 \u03c4 k\u22121 |\u03c4 k ) \u2212 H(q(x 0 )) \u2212 d 2 log(2\u03c0e\u03b2 N ) \u2212 d 2 K k=2 log(2\u03c0e\u03bb 2 \u03c4 k\u22121 |\u03c4 k ) = \u2212 E q log p * (x 0 |x 1 ) + H(q(x N ), p(x N )) + d 2 K k=2 log \u03c3 * 2 \u03c4 k\u22121 |\u03c4 k \u03bb 2 \u03c4 k\u22121 |\u03c4 k \u2212 H(q(x 0 )) \u2212 d 2 log(2\u03c0e\u03b2 N ). Let J(\u03c4 k\u22121 , \u03c4 k ) = log \u03c3 * 2 \u03c4 k\u22121 |\u03c4 k \u03bb 2 \u03c4 k\u22121 |\u03c4 k and c = \u2212E q log p * (x 0 |x 1 ) + H(q(x N ), p(x N )) \u2212 H(q(x 0 )) \u2212 d 2 log(2\u03c0e\u03b2 N )", "formula_coordinates": [20.0, 108.0, 100.07, 396.28, 266.74]}, {"formula_id": "formula_80", "formula_text": "D KL (q(x 0 , x \u03c41 , \u2022 \u2022 \u2022 , x \u03c4 K )||p * (x 0 , x \u03c41 , \u2022 \u2022 \u2022 , x \u03c4 K )) = d 2 K k=2 J(\u03c4 k\u22121 , \u03c4 k ) + c.", "formula_coordinates": [20.0, 150.74, 373.62, 310.52, 30.55]}, {"formula_id": "formula_81", "formula_text": "E q(xn) Cov q(x0|xn) [x 0 ] = \u03b2 n \u03b1 n I \u2212 \u03b2 n E qn(xn) \u2207 xn log q n (x n )\u2207 xn log q n (x n ) ,(15)", "formula_coordinates": [20.0, 125.98, 511.39, 378.02, 23.22]}, {"formula_id": "formula_82", "formula_text": "Cov q(x0) [x 0 ] = E q(xn) Cov q(x0|xn) [x 0 ] + Cov q(xn) E q(x0|xn) [x 0 ]. (16", "formula_coordinates": [20.0, 171.91, 557.57, 327.94, 9.96]}, {"formula_id": "formula_83", "formula_text": ")", "formula_coordinates": [20.0, 499.85, 557.89, 4.15, 8.64]}, {"formula_id": "formula_84", "formula_text": "Proof. Since q(x n |x 0 ) = N (x n | \u221a \u03b1 n x 0 , \u03b2 n I), according to Lemma 11, we have E q(xn) Cov q(x0|xn) [x 0 ] = \u03b2 n \u03b1 n (I \u2212 \u03b2 n E qn(xn) \u2207 xn log q n (x n )\u2207 xn log q n (x n ) ).", "formula_coordinates": [20.0, 108.0, 576.47, 362.39, 49.22]}, {"formula_id": "formula_85", "formula_text": "E q(xn) Cov q(x0|xn) [x 0 ] + Cov q(xn) E q(x0|xn) [x 0 ] =E q(xn) E q(x0|xn) x 0 x 0 \u2212 E q(x0|xn) [x 0 ]E q(x0|xn) [x 0 ] + E q(xn) E q(x0|xn) [x 0 ]E q(x0|xn) [x 0 ] \u2212 E q(xn) E q(x0|xn) [x 0 ] E q(xn) E q(x0|xn) [x 0 ] =E q(x0) x 0 x 0 \u2212 E q(x0) [x 0 ]E q(x0) [x 0 ] = Cov q(x0) [x 0 ].", "formula_coordinates": [20.0, 116.39, 654.59, 367.92, 61.96]}, {"formula_id": "formula_86", "formula_text": "1 = \u03c4 1 < \u2022 \u2022 \u2022 < \u03c4 K = N 3: C \u2190 {\u221e} 1\u2264k,n\u2264N , D \u2190 {\u22121} 1\u2264k,n\u2264N 4: C[1, 1] \u2190 0 5: for k = 2 to K do Calculate C and D 6: CJ \u2190 {C[k \u2212 1, s] + J(s, n)} 1\u2264s\u2264N,k\u2264n\u2264N7", "formula_coordinates": [21.0, 112.98, 111.67, 390.74, 63.54]}, {"formula_id": "formula_87", "formula_text": "Then for k = 1, we have C[1, n] = 0 n = 1 \u221e N \u2265 n > 1 and D[1, n] = \u22121 (here \u221e and \u22121 represent undefined values for simplicity). For N \u2265 k \u2265 2, we have C[k, n] = \u221e 1 \u2264 n < k min k\u22121\u2264s\u2264n\u22121 C[k \u2212 1, s] + J(s, n) = min 1\u2264s\u2264N C[k \u2212 1, s] + J(s, n) N \u2265 n \u2265 k, D[k, n] = \u22121 1 \u2264 n < k arg min k\u22121\u2264s\u2264n\u22121 C[k \u2212 1, s] + J(s, n) = arg min 1\u2264s\u2264N C[k \u2212 1, s] + J(s, n) N \u2265 n \u2265 k.", "formula_coordinates": [21.0, 108.0, 358.24, 396.0, 103.24]}, {"formula_id": "formula_88", "formula_text": "\u03bb 2 \u03c4 k\u22121 |\u03c4 k \u2264 \u03c3 * 2 \u03c4 k\u22121 |\u03c4 k \u2264 \u03bb 2 \u03c4 k\u22121 |\u03c4 k + \uf8eb \uf8ed \u03b2 \u03c4 k \u03b1 \u03c4 k |\u03c4 k\u22121 \u2212 \u03b2 \u03c4 k\u22121 \u2212 \u03bb 2 \u03c4 k\u22121 |\u03c4 k \uf8f6 \uf8f8 2 .", "formula_coordinates": [21.0, 154.37, 619.08, 303.27, 33.38]}, {"formula_id": "formula_89", "formula_text": "\u03c3 * 2 \u03c4 k\u22121 |\u03c4 k \u2264 \u03bb 2 \u03c4 k\u22121 |\u03c4 k + \u03b1 \u03c4 k\u22121 \u2212 \u03b2 \u03c4 k\u22121 \u2212 \u03bb 2 \u03c4 k\u22121 |\u03c4 k \u2022 \u03b1 \u03c4 k \u03b2 \u03c4 k 2 ( b \u2212 a 2 ) 2 .", "formula_coordinates": [21.0, 149.57, 701.96, 312.87, 32.01]}, {"formula_id": "formula_90", "formula_text": "\u00b5 * n (x n ) = 1 \u221a \u03b1 n (x n + \u03b2 n \u2207 xn log q n (x n )), \u03c3 * 2 n = \u03b2 n \u03b1 n (1 \u2212 \u03b2 n E qn(xn) ||\u2207 xn log q n (x n )|| 2 d ).", "formula_coordinates": [22.0, 208.35, 179.52, 195.29, 52.03]}, {"formula_id": "formula_91", "formula_text": "\u03b2 n \u2264 \u03c3 * 2 n \u2264 \u03b2 n \u03b1 n .", "formula_coordinates": [22.0, 271.41, 270.05, 69.18, 23.23]}, {"formula_id": "formula_92", "formula_text": "\u03c3 * 2 n \u2264\u03b2 n + \u03b1 n\u22121 \u03b2 2 n \u03b2 2 n b \u2212 a 2 2 .", "formula_coordinates": [22.0, 238.03, 331.61, 135.93, 30.41]}, {"formula_id": "formula_93", "formula_text": "\u03bb 2 \u03c4 k\u22121 |\u03c4 k =\u03b2 \u03c4 k\u22121 |\u03c4 k , where\u03b2 \u03c4 k\u22121 |\u03c4 k := \u03b2 \u03c4 k\u22121 \u03b2 \u03c4 k \u03b2 \u03c4 k |\u03c4 k\u22121 .", "formula_coordinates": [22.0, 132.61, 384.42, 226.03, 21.49]}, {"formula_id": "formula_94", "formula_text": "\u00b5 * \u03c4 k\u22121 |\u03c4 k (x \u03c4 k ) = 1 \u221a \u03b1 \u03c4 k |\u03c4 k\u22121 (x \u03c4 k + \u03b2 \u03c4 k |\u03c4 k\u22121 \u2207 x\u03c4 k log q \u03c4 k (x \u03c4 k )), \u03c3 * 2 \u03c4 k\u22121 |\u03c4 k = \u03b2 \u03c4 k |\u03c4 k\u22121 \u03b1 \u03c4 k |\u03c4 k\u22121 (1 \u2212 \u03b2 \u03c4 k |\u03c4 k\u22121 E q\u03c4 k (x\u03c4 k ) ||\u2207 x\u03c4 k log q \u03c4 k (x \u03c4 k )|| 2 d ).", "formula_coordinates": [22.0, 168.52, 438.77, 274.96, 55.48]}, {"formula_id": "formula_95", "formula_text": "D KL (q(x 0 , x \u03c41 , \u2022 \u2022 \u2022 , x \u03c4 K )||p * (x 0 , x \u03c41 , \u2022 \u2022 \u2022 , x \u03c4 K )) = d 2 K k=2 J(\u03c4 k\u22121 , \u03c4 k ) + c,", "formula_coordinates": [22.0, 150.74, 554.94, 310.52, 30.55]}, {"formula_id": "formula_96", "formula_text": "J(\u03c4 k\u22121 , \u03c4 k ) = log(1 \u2212 \u03b2 \u03c4 k |\u03c4 k\u22121 E q\u03c4 k (x\u03c4 k ) ||\u2207 x\u03c4 k log q \u03c4 k (x \u03c4 k )|| 2 d ),", "formula_coordinates": [22.0, 177.21, 588.85, 265.33, 25.26]}, {"formula_id": "formula_97", "formula_text": "f (t) = 1 2 d log \u03b1 t dt , g(t) 2 = d\u03b2 t dt \u2212 d log \u03b1 t dt \u03b2 t ,", "formula_coordinates": [22.0, 207.59, 709.48, 196.82, 22.31]}, {"formula_id": "formula_98", "formula_text": "q(x 0 , z [0,1] ), s.t., q(z t |x 0 ) = N (z t | \u221a \u03b1 t x 0 , \u03b2 t I), \u2200t \u2208 [0, 1], q(z t |z s ) = N (z t | \u221a \u03b1 t|s z s , \u03b2 t|s I), \u22000 \u2264 s < t \u2264 1,", "formula_coordinates": [23.0, 108.0, 106.91, 306.53, 44.36]}, {"formula_id": "formula_99", "formula_text": "\u00b5 * s|t (z t ) = E q(zs|zt) [z s ] = 1 \u221a \u03b1 t|s (z t + \u03b2 t|s \u2207 zt log q(z t )), \u03c3 * 2 s|t = E q tr(Cov q(zs|zt) [z s ]) d = \u03b2 t|s \u03b1 t|s (1 \u2212 \u03b2 t|s E q(zt) ||\u2207 zt log q(z t )|| 2 d ).", "formula_coordinates": [23.0, 160.5, 265.86, 291.01, 53.41]}, {"formula_id": "formula_100", "formula_text": "\u0393 t = E q(zt) ||s t (z t )|| 2 d .", "formula_coordinates": [23.0, 258.85, 372.51, 94.29, 23.89]}, {"formula_id": "formula_101", "formula_text": "\u03c3 2 s|t = \u03b2 t|s \u03b1 t|s (1 \u2212 \u03b2 t|s \u0393 t ).", "formula_coordinates": [23.0, 256.16, 444.86, 99.69, 24.22]}, {"formula_id": "formula_102", "formula_text": "0 = \u03c4 1 < \u2022 \u2022 \u2022 < \u03c4 K = 1 in the sense of KL minimization min \u03c41,\u2022\u2022\u2022 ,\u03c4 K D KL (q(x 0 , z \u03c41 , \u2022 \u2022 \u2022 , z \u03c4 K )||p * (x 0 , z \u03c41 , \u2022 \u2022 \u2022 , z \u03c4 K )).", "formula_coordinates": [23.0, 187.78, 505.0, 311.62, 32.68]}, {"formula_id": "formula_103", "formula_text": "D KL (q(x 0 , z \u03c41 , \u2022 \u2022 \u2022 , z \u03c4 K )||p * (x 0 , z \u03c41 , \u2022 \u2022 \u2022 , z \u03c4 K )) = d 2 K k=2 J(\u03c4 k\u22121 , \u03c4 k ) + c,", "formula_coordinates": [23.0, 152.81, 569.93, 306.38, 30.55]}, {"formula_id": "formula_104", "formula_text": "J(\u03c4 k\u22121 , \u03c4 k ) = log(1 \u2212 \u03b2 \u03c4 k |\u03c4 k\u22121 E q ||\u2207z \u03c4 k log q(z\u03c4 k )|| 2 d", "formula_coordinates": [23.0, 134.91, 607.92, 208.41, 18.01]}, {"formula_id": "formula_105", "formula_text": "n n 2 n (c) ImageNet 64x64 2 2 2 5 2 8 timestep n 0.1 0.2 0.3 0.4 L vb term (bits/dim) 2 2 0.1 n n 2 n (d) CIFAR10 (CS) 2 2 2 5 2 8 timestep n 0.1 0.2 0.3 L vb term (bits/dim) 2 2 0.1 n n 2 n (e) CelebA 64x64 2 2 2 5 2 8 2 11 timestep n 0.2 0.4 0.6 L vb term (bits/dim) 2 0 2 1 0.4 n n 2 n (f) ImageNet 64x64", "formula_coordinates": [26.0, 106.85, 248.05, 391.51, 165.05]}, {"formula_id": "formula_106", "formula_text": "||sn(xn)|| 2 d , x n \u223c q n (x n", "formula_coordinates": [26.0, 384.81, 553.26, 97.5, 16.01]}, {"formula_id": "formula_107", "formula_text": "L n = E q D KL (q(x n\u22121 |x n , x 0 )||p(x n\u22121 |x n )) 2 \u2264 n \u2264 N \u2212E q log p(x 0 |x 1 ) n = 1 ,", "formula_coordinates": [38.0, 174.06, 481.05, 263.88, 20.64]}, {"formula_id": "formula_108", "formula_text": "L n = d 2 \u03bb 2 n \u03c3 2 n \u2212 1 + log \u03c3 2 n \u03bb 2 n + 1 \u03c3 2 n E q ||\u03bc(x n , x 0 ) \u2212 \u00b5 n (x n )|| 2 d . Let A = \u03bb 2 n + E q ||\u03bc(xn,x0)\u2212\u00b5n(xn)|| 2 d", "formula_coordinates": [38.0, 108.0, 537.5, 331.11, 50.5]}], "doi": ""}