{"title": "Viewing Graph Solvability via Cycle Consistency", "authors": "Federica Arrigoni; Andrea Fusiello; Elisa Ricci; Tomas Pajdla; Fondazione Bruno Kessler", "pub_date": "", "abstract": "In structure-from-motion the viewing graph is a graph where vertices correspond to cameras and edges represent fundamental matrices. We provide a new formulation and an algorithm for establishing whether a viewing graph is solvable, i.e. it uniquely determines a set of projective cameras. Known theoretical conditions either do not fully characterize the solvability of all viewing graphs, or are exceedingly hard to compute for they involve solving a system of polynomial equations with a large number of unknowns. The main result of this paper is a method for reducing the number of unknowns by exploiting the cycle consistency. We advance the understanding of the solvability by (i) finishing the classification of all previously undecided minimal graphs up to 9 nodes, (ii) extending the practical solvability testing up to minimal graphs with up to 90 nodes, and (iii) definitely answering an open research question by showing that the finite solvability is not equivalent to the solvability. Finally, we present an experiment on real data showing that unsolvable graphs are appearing in practical situations.", "sections": [{"heading": "Introduction", "text": "Solving structure-from-motion is important, e.g., for 3D reconstruction from images [33,34,29], image matching [26] and visual odometry and localization [22,1,28,35]. The basic problem in structure-from-motion is to determine which image sets can be reconstructed. This can be done, e.g., by analyzing the viewing graph.\nThe viewing graph [19] (also known as the epipolar graph) of a set of images is a graph where vertices correspond to cameras/images and edges correspond to fundamental matrices. In other terms, an edge is present between two vertices if and only if the fundamental matrix between such image pair is available, meaning that there exist enough corresponding points. In most practical scenarios such graph is not complete due to the fact that different cameras may view different portions of the scene.\nA relevant question is whether a viewing graph is solvable, i.e., if it uniquely determines a projective configura-Figure 1: Viewing graphs with eight vertices that were left undecided in [37] and that we determined to be solvable. tion of cameras, up to a single projective transformation. In other terms, for a non-solvable viewing graph there exist multiple transformations that can be applied to the cameras without affecting the fundamental matrices. An equivalent definition of solvability is given in [19], stating that a graph is solvable if and only if the available fundamental matrices uniquely determine the remaining ones, i.e., the input graph can be transformed into the complete graph.\nThe solvability is closely related to 3D reconstruction (see Tab. 1), since viewing graphs are used by a class of projective structure-from-motion methods [30,16] that recover the projective cameras starting from multiple fundamental matrices. The solvability of a viewing graph should be assessed before addressing the reconstruction, since if a problem is non-solvable, then no method based on fundamental matrices only will provide a useful reconstruction.\nConsidering calibrated cameras, i.e. using the essential matrices instead of the fundamental ones, the solvable graphs are exactly those that are parallel rigid [24,38]. The topic of parallel rigidity (also known as bearing rigidity) has been extensively studied in the literature (see [3] for a recent survey). Here we focus on the uncalibrated scenario, which has been much less understood.\nRelated Work. In [19], the solvability of graphs with at most six vertices is characterized, and some insights about how to analyze larger graphs are provided. A constructive method to actually complete such view graphs is discussed in [20]. Rudi et al. [27] studied conditions under which a viewing graph can be solved using a linear method. Further analysis is available in [36], where it is shown that some solvable graphs can be constructed starting from a triangle and adding vertices of degree two one at a time.\nIn a recent paper [37], some necessary conditions for calibrated uncalibrated solvability [3] [19, 27, 37]`ours reconstruction [25] [30, 16] Table 1: Problems taxonomy. We address the uncalibrated case. Surveys [3,25] address the calibrated situation.\nsolvability are reported in addition to a new sufficient condition. Thanks to these results, graphs with at most seven vertices can be completely characterized, but there exist some graphs with eight or nine vertices that could not be classified into solvable or non solvable (see Fig. 1). Larger graphs were not studied. The authors of [37] also show that -in principle -it is possible to classify any viewing graph via a system of polynomial equations. However, this observation has only a theoretical value: solving such system is computationally expensive for it is nonlinear and it involves a large number of unknowns. Thus, an effective test for solvability is still missing, which motivates our work.\nAnother open issue has to do with the concept of finite solvability, which is tightly related to the notion of solvability. A viewing graph is called finite solvable if it determines at most a finite number of projective configurations of cameras. Obviously, if a graph is not finite solvable (i.e., it determines an infinite number of camera configurations) then it is not solvable. In other terms, solvability implies finite solvability. The reverse implication -namely, does finite solvability imply solvability? -was left as an open research question by [37].\nContribution. We derive a new formulation of viewing graph solvability that is much simpler than [37] thanks to a substantial reduction of the number of unknowns involved. Our formulation is based on the cycle consistency property of a graph, namely that the composition of (invertible) transformations along any cycle should be the identity.\nThis leads to a new algorithm, which is based on computational algebraic geometry, that implements a characterization of solvability. Previous techniques could only test either some sufficient or necessary conditions. Using this algorithm, we provide a complete characterization of all the minimal graphs up to nine nodes, including those that were left undecided by [37].\nAs a matter of fact, we are able to decide the solvability of minimal graphs with up to 90 nodes. In practice, our approach can be used to detect interesting solvable sub-graphs of dense/large viewing graphs coming from real data sets.\nFinally, thanks to our algorithm, it is possible to exhibit concrete examples of graphs that are finite solvable but not solvable, thereby answering the open research question from [37]. In summary, we:\npropose a new simpler formulation of the solvability; build an effective algorithm for testing it; classify previously undecided viewing graphs; extend solvability testing up to graphs with 90 nodes; prove that finite solvability does not imply solvability.\nThe paper is organized as follows. We define the viewing graph solvability in Sec. 2, present theoretical results in Sec. 3, and describe our algorithm in Sec. 4. Sec. 5 shows some examples and presents experiments on real data.", "publication_ref": ["b32", "b33", "b28", "b25", "b21", "b0", "b27", "b34", "b18", "b36", "b18", "b29", "b15", "b23", "b37", "b2", "b18", "b19", "b26", "b35", "b36", "b2", "b24", "b36", "b36", "b36", "b36", "b36", "b4"], "figure_ref": [], "table_ref": []}, {"heading": "Background", "text": "Let us consider n uncalibrated cameras P 1 , . . . P n P R 3\u02c64 with centres c 1 , . . . , c n P R 4 . Let G \" pV, Eq be an undirected graph with vertex set V \" t1, . . . , nu and edge set E \u010e t1, . . . , nu\u02c6t1, . . . , nu. Let m \" |E| be the number of edges. Recall that for each edge pi, jq P E we can compute the fundamental matrix F ij relating cameras i and j in a closed-form [15]. Conversely, the fundamental matrix of edge pi, jq uniquely determines the cameras of vertices i and j, up to a projective transformation [15].\nIn the following, we shall use uppercase letters to denote matrices, lowercase bold letters to denote vectors and lowercase letters to denote scalars 1 . Projective quantities are represented as non-homogeneous variables and suitable scales are introduced to handle the scale ambiguity. Definition 1. Let G be a viewing graph and P \" tP 1 , . . . , P n u be a set of cameras. The pair pG, Pq is called solvable if all the camera configurations yielding the same fundamental matrices as P are projectively equivalent, i.e. they are related by the same projective transformation.", "publication_ref": ["b14", "b14", "b0"], "figure_ref": [], "table_ref": []}, {"heading": "Proposition 1 ([37]", "text": "). Let G be a viewing graph and P \" tP 1 , . . . , P n u be a set of cameras with centres c 1 , . . . , c n P R 4 . The solvability of the pair pG, Pq only depends on the graph G and on the camera centres c 1 , . . . , c n .\nAccording to the above result, if a problem is nonsolvable, then the cause can be either the topology of the graph or the actual coordinates of the centres. For instance, if the centres are all aligned, then the problem is not solvable (see [19] for more examples). The following conceptwhich is the main focus of this paper -permits to predicate the solvability of a problem based on the graph topology only. Definition 2. A graph G is called solvable if it is solvable for a generic configuration of cameras.\nNecessary conditions for viewing graph solvability [19,37] allow to quickly prune the solvability candidates. For instance, a solvable graph must satisfy: it has at least p11n\u00b415q{7 edges [37]; it is biconnected [37]; all the vertices have degree at least two and no two adjacent vertices have degree two (if n \u0105 3) [19].\nConcerning sufficient conditions, it is known that any chordal (or triangulated) graph is solvable [36]. Other constructive approaches are proposed in [27,36,37], where the idea is to check if the input graph can be transformed into a solvable one via suitable operations. The only condition that is both necessary and sufficient is derived in [37], and it will be reviewed next.", "publication_ref": ["b18", "b18", "b36", "b36", "b36", "b18", "b35", "b26", "b35", "b36", "b36"], "figure_ref": [], "table_ref": []}, {"heading": "Algebraic characterization", "text": "Trager et al. [37] linked viewing graph solvability to the characterization of the set of projective transformations that can be applied to all cameras without affecting the fundamental matrices. First of all, they identify the family of transformations that leave a camera matrix fixed.", "publication_ref": ["b36"], "figure_ref": [], "table_ref": []}, {"heading": "Proposition 2 ([37]", "text": "). Let P P R 3\u02c64 be a camera with centre c P R 4 . All the solutions to P G \" aP for G P GLp4, Rq and a P R \u20300 are described by\nG \" aI 4`c v T @a P R \u20300 , v P R 4\n(1)\nwhere I 4 denotes the 4\u02c64 identity matrix and GLp4, Rq denotes the group of real 4\u02c64 invertible matrices.\nLet us consider a viewing graph G \" pV, Eq and let us assign a projective transformation G ij P GLp4, Rq to every edge pi, jq P E. It is understood that this transformation is to be applied to the two adjacent cameras P i and P j . Clearly this does not change the fundamental matrix F ij , for it is invariant under projective transformations. If we were dealing with a single edge (i.e., a pair of cameras), we would be free to choose any G ij . However, when dealing with multiple edges (i.e., when considering the whole viewing graph), these matrices must satisfy global compatibility constraints. Specifically, let us consider two adjacent edges ph, iq P E and pi, jq P E that are both incident to vertex i P V and to which the two transformations G hi and G ij are assigned (see Fig. 2). Such transformations must leave the camera at the common vertex fixed, resulting in the following compatibility constraint:\nP j G hi G ij P h P i\nG hi G\u00b41 ij \" a hij I 4`ci v T hij (2)\nwhere a hij P R \u20300 and v hij P R 4 are unknown. Definition 3. Let G be a graph and let c 1 , . . . , c n P R 4 be n generic camera centres. Any assignment of transformations G ij P GLp4, Rq to the edges of the graph, such that Eq. (2) holds true for all adjacent edges, is called compatible.", "publication_ref": [], "figure_ref": ["fig_0"], "table_ref": []}, {"heading": "Proposition 3 ([37]", "text": "). Let G be a graph and let c 1 , . . . , c n P R 4 be n generic camera centres. G is solvable if and only if any compatible assignment is of the form\nG ij \" s ij H @pi, jq P E (3)\nwhere H P GLp4, Rq and s ij P R \u20300 .\nThe condition in Prop. 3 means that, for a solvable graph, the only way to act on all the cameras (without affecting the fixed fundamental matrices) is to apply a single projective transformation. Note that the centres can be sampled at random, in order to satisfy the assumption of generic cameras.\nFinding a compatible assignment of matrices, i.e., solving Eq. (2) for all adjacent edges simultaneously, is very challenging since it defines a non-linear algebraic system with a large number of unknowns. For this reason, Prop. 3 is given as a theoretical result in [37], without leading to a practical algorithm for checking viewing-graph solvability. The next section explains how we alleviate this drawback.", "publication_ref": ["b36"], "figure_ref": [], "table_ref": []}, {"heading": "Proposed Formulation", "text": "Given a graph G \" pV, Eq with n vertices and m edges, our task is to establish whether such a graph is solvable according to Def. 2. Throughout our discussion we assume that G is connected and n \u011b 3. The proposed formulation is inspired by the algebraic characterization detailed in Sec. 2.1. Specifically, we show how to reduce the number of unknowns in Eq. (2), thus providing a more practical way for checking viewing graph solvability.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Solvability on the Line Graph", "text": "Our formulation involves the line graph associated with G, which is constructed as in the following definition. Figure 3 shows an example. The number of vertices in the line graph coincides with the number of edges in the original graph, i.e., s n \" m, whereas the number of edges in the line graph is given by the following formula [14]: where d i denotes the degree of vertex i P V.\ns m \" 1 2 n \u00ff i\"1 d 2 i\u00b4m (4\n)\nLet us rewrite Eq. (2) in terms of the line graph LpGq \" p s V, s\nEq. Note that the edge ph, iq P E is a vertex \u03c4 P s V and similarly pi, jq P E represents a vertex \u03c5 P s V. Such vertices are connected by an edge p\u03c4, \u03c5q P s E by construction (as they share vertex i P V in the input graph). Hereafter we use Greek letters to denote vertices/edges in the line graph. Using this notation Eq. (2) becomes:\nG \u03c4 G\u00b41 \u03c5 \" Z \u03c4 \u03c5(5)\nwhere:\nZ \u03c4 \u03c5 \" a \u03c4 \u03c5 I 4`ci v T \u03c4 \u03c5(6)\nand the index i of the camera is defined as tiu\"\u03c4 X\u03c5.\nDefinition 5. Let G be a graph and let c 1 , . . . , c n P R 4 be n generic camera centres. Any assignment of transformations G \u03c4 P GLp4, Rq to the vertices of the line graph LpGq such that Eq. ( 5) holds for all the edges is called a consistent labelling.\nRemark 1. A consistent labelling of the line graph corresponds to a compatible assignment on the original graph (see Def. 3). We give this equivalent definition here to outline the link with the problem of synchronization [32,10,5] (see [4] for a recent survey), where the task is finding a consistent labelling (of vertices) starting from measured ratios on the edges. Specifically, with reference to Eq. (5), the task would be to compute G \u03c4 , G \u03c5 , . . . starting from known Z \u03c4 \u03c5 . In our case, however, the variables Z \u03c4 \u03c5 P GLp4q are unknown for all p\u03c4, \u03c5q P s E. Nevertheless, the framework of synchronization is useful to derive a new formulation of solvability, as it will be clarified in the next subsection (see the proof of Thm. 1).\nRemark 2. The problem of finding a consistent labelling involves an equation of the form (5) for each edge in the line graph, which in turn spawns 16 equations when considered entry-wise. Thus, using Eq. (4), the total number of equations is given by:\n16 s m \" 16`1 2 n \u00ff i\"1 d 2 i\u00b4m\u02d8.(7)\nObserve that there are 16 unknowns for each node in the line graph, representing a matrix G \u03c4 P GLp4, Rq. In addition, there are five unknowns for each edge in the line graph, representing a vector v \u03c4 \u03c5 P R 4 and a scale a \u03c4 \u03c5 P R \u20300 . Thus, the total number of unknowns is given by:\n16s n`5 s m \" 5 2 n \u00ff i\"1 d 2 i`1 1m(8)\nwhere s n \" m by construction and s m is given by Eq. (4). Recall that the camera centres are considered known as they are sampled at random in practice (see [37]).\nReasoning on the line graph, we are able to prove the following result, which gives a characterization of solvability in terms of the variables v \u03c4 \u03c5 P R 4 only. Proposition 4. Let G be a graph and let c 1 , . . . , c n P R 4 be n generic camera centres. The graph G is solvable if and only if any consistent labelling yields:\nv \u03c4 \u03c5 \" 0 @p\u03c4, \u03c5q P s E.(9)\nProof. If G is solvable, then, due to Prop. 3, all the matrices G \u03c4 represent the same projective transformation, or equivalently, they are all multiples of each other. Hence, the product G \u03c4 G\u00b41 \u03c5 is a multiple of the identity (which is denoted by b \u03c4 \u03c5 I 4 with b \u03c4 \u03c5 P R \u20300 ). Hence Eq. (6) becomes:\nb \u03c4 \u03c5 I 4 \" a \u03c4 \u03c5 I 4`ci v T \u03c4 \u03c5 \u00f4 pb \u03c4 \u03c5\u00b4a\u03c4 \u03c5 qI 4 \" c i v T \u03c4 \u03c5 . (10\n)\nSince the right term in the above equation is a rank-1 matrix, whereas I 4 is full rank, the only way to let the equation true is to set b \u03c4 \u03c5\u00b4a\u03c4 \u03c5 \" 0 and v \u03c4 \u03c5 \" 0, hence we get the result. In the opposite direction, if v \u03c4 \u03c5 \" 0 then Eq. (5) rewrites G \u03c4 G\u00b41 \u03c5 \" a \u03c4 \u03c5 I 4 or, in other terms, G \u03c4 \" a \u03c4 \u03c5 G \u03c5 . Such an equation can be propagated through all vertices \u03c4 P s V as soon as the line graph is connected (which is true if the original graph is connected [7]). This means that all matrices G \u03c4 are multiples of each other, hence the graph is solvable, thanks to Prop. 3.\nRemark 3. Observe that Prop. 3 gives a formulation of solvability in terms of the matrices G \u03c4 whereas Prop. 4 considers the variables v \u03c4 \u03c5 only. We will show in the next subsection that the problem of finding a consistent labelling can be expressed via a system of equations not involving the matrices G \u03c4 (but involving the variables v \u03c4 \u03c5 and a \u03c4 \u03c5 only). In this respect, a formulation of solvability in terms of v \u03c4 \u03c5 (as given by Prop. 4) is indeed essential.", "publication_ref": ["b13", "b31", "b9", "b4", "b3", "b36", "b6"], "figure_ref": ["fig_2"], "table_ref": []}, {"heading": "Cycle Consistency", "text": "To derive the main result of our paper, we introduce the notion of \"consistent cycle\". A cycle is a non-empty path in which the only repeated vertices are the first and last ones. A consistent cycle is a cycle satisfying an algebraic constraint, as given in the following definition. Definition 6. Let G be a graph and let c 1 , . . . , c n P R 4 be n generic camera centres. Let C \" t\u03c4 1 , \u03c4 2 , \u03c4 3 , . . . , \u03c4 \u2113 , \u03c4 1 u be a cycle in the line graph LpGq. We say that C is a consistent cycle (or a null cycle) if and only if the composition of the edge labels along the cycle returns the identity, namely\nZ \u03c41\u03c42 Z \u03c42\u03c43\u00a8\u00a8\u00a8\u00a8\u00a8Z\u03c4 \u2113 \u03c41 \" I 4 .(11)\nA cycle basis is a minimal set of cycles such that every cycle can be written as a sum of the cycles in the basis, where the sum of two cycles is a cycle where the common edges vanish. There exist several types of cycle bases (see [17] for a survey). We are interested here in a cycle consistency basis for the line graph, that is a cycle basis such that: if the cycles in the basis are consistent, then consistency also holds on all the other cycles (see [12] for details).\nTheorem 1. Let G be a graph and let c 1 , . . . , c n P R 4 be n generic camera centres. Let tC 1 , C 2 , . . . , C f u be a cycle consistency basis for the line graph LpGq. Let us collect in a unique system the equations of the form (11) for all the cycles in the basis. G is solvable if and only if the solution to such system yields v \u03c4 \u03c5 \" 0 for all p\u03c4, \u03c5q P s E.\nProof. It is known that there exists a consistent labelling if and only if all the cycles are null/consistent (see Lemma 8 in [13] and Corollary 1 in [4]). Clearly, if all cycles are consistent, then -in particular -the cycles in a basis are also consistent. The opposite does not hold in general [12]. However, if we consider a cycle consistency basis, then consistency on the basis implies consistency on all cycles by definition. Thus, there exists a consistent labelling if and only if all cycles in a cycle consistency basis are consistent. We now apply this general result to our problem: finding a consistent labelling, i.e., an assignment of transformations satisfying Eq. (5), is equivalent to imposing that all cycles in a cycle consistency basis of the line graph are consistent. In other terms, the system obtained by stacking equations of the form (5) for all the edges in LpGq, is equivalent to the system obtained by stacking equations of the form (11) for all the cycles in a cycle consistency basis of LpGq. According to Prop. 4, a graph is solvable if and only if the solution to the former yields v \u03c4 \u03c5 \" 0 for all p\u03c4, \u03c5q P s E, hence we get the thesis.\nRemark 4. The formulation of Thm. 1 comprises five unknowns for each edge p\u03c4, \u03c5q P s E in the line graph, representing a vector v \u03c4 \u03c5 P R 4 and a scale a \u03c4 P R \u20300 . Thus, using Eq. (4), the total number of unknowns is given by 5 s m \" 5`1 2\nn \u00ff i\"1 d 2 i\u00b4m\u02d8.(12)\nObserve also that each cycle originates an equation of the form (11), which in turn spawns 16 equations when considered entry-wise. Considering the fact that the cardinality of a cycle consistency basis is the number of edges minus the number of vertices plus one (see [12]), we get the total number of equations as 16p s m\u00b4s n`1q \" 16`1 2\nn \u00ff i\"1 d 2 i\u00b42 m`1\u02d8.(13)\nRecall that the number of vertices in the line graph satisfies s n \" m by construction, and the number of edges s m is given by Eq. (4). Note that Eq. ( 11) is still nonlinear, but it has the advantage of not involving the unknowns G \u03c4 for \u03c4 P s V, thus reducing the difficulty of the problem compared to Eq. (5), where the amount of unknowns is given in Eq. (8).\nRemark 5. Observe that the input graph G is an undirected graph. Indeed, given a pair of cameras, or, equivalently, an edge pi, jq P E, the projective transformation that fixes the fundamental matrix of that camera pair is independent of the order of the cameras. In other words, G ij \" G ji . When considering the line graph, instead, we are concerned with directed edges 2 . Indeed,\nZ \u03c4 \u03c5 \" G \u03c4 G\u00b41 \u03c5 \" G hi G\u00b41 ij and Z \u03c5\u03c4 \" G \u03c5 G\u00b41 \u03c4 \" G ij G\u00b41\nhi are different transformations (we are considering here \u03c4 \" ph, iq and \u03c5 \" pi, jq). However, from the practical point of view, it is convenient to reduce the number of unknowns. More precisely, for a given oriented edge p\u03c4, \u03c5q P s E we consider a \u03c4 \u03c5 P R \u20300 and v \u03c4 \u03c5 P R 4 as unknowns, and we use the relation Z \u03c5\u03c4 \" Z\u00b41 \u03c4 \u03c5 to handle the opposite edge p\u03c5, \u03c4 q P s E, where the inverse can be easily computed 3 .", "publication_ref": ["b16", "b11", "b12", "b3", "b11", "b10", "b11"], "figure_ref": [], "table_ref": []}, {"heading": "A Simplified Formulation", "text": "We now derive a simpler equivalent formulation by exploiting the change of variables. Proposition 5. Let G be a graph and let c 1 , . . . , c n P R 4 be n generic camera centres. Let tC 1 , C 2 , . . . , C f u be a cycle consistency basis for the line graph LpGq. For each cycle C k \" p\u03c4 1 , \u03c4 2 , . . . , \u03c4 \u2113 , \u03c4 1 q in the basis, let us form the following equation:\nW \u03c41\u03c42 W \u03c42\u03c43\u00a8\u00a8\u00a8\u00a8\u00a8W\u03c4 \u2113 \u03c41 \" b k I 4 (14\n)\nwhere b k P R \u20300 is an unknown scale and\nW \u03c4 \u03c5 \" I 4`ci u J \u03c4 \u03c5 (15\n)\nwhere u \u03c4 \u03c5 P R 4 is unknown and tiu \" \u03c4 X \u03c5. G is solvable if and only if the solution to the above system yields u \u03c4 \u03c5 \" 0 for all p\u03c4, \u03c5q P s E.\n#Eq. #Var.\n#Eq. #Var. #Eq. #Var. #Eq. #Var. #Eq. #Var. #Eq. #Var. Table 2: The number of equations and variables are reported on some minimal examples for our formulation (see Eq. ( 13), ( 17)) and the one proposed in [37] (see Eq. ( 7), ( 8)). Recall that the latter (described in Eq. ( 2) and ( 5)) is given as a theoretical result in [37] due to its computational complexity, without giving rise to an effective algorithm. Our formulation is more practical as it involves fewer unknowns.\nProof. The thesis derives from the following change of variables for each edge in the line graph:\nu \u03c4 \u03c5 \" v \u03c4 \u03c5 {a \u03c4 \u03c5 (16\n)\nwhich is well defined since a \u03c4 \u03c5 \u2030 0.\nRemark 6. Thanks to Prop. 5, we have four unknowns for each edge p\u03c4, \u03c5q P s E in the line graph, representing a vector u \u03c4 \u03c5 P R 4 , plus one unknown scale for each cycle. Thus, the total number of unknowns becomes 17) which is lower than the formulation related to Thm. 1 where the number of unknowns is 5 s m (see Eq. ( 12)). The number of equations remains unchanged and it is given by Eq. (13). Table 2 reports a comparison between our simplified formulation and the one in Eq. (5) for some examples.\n4 s m`1p s m\u00b4s n`1q \" 5 s m\u00b4m`1(", "publication_ref": ["b36", "b36", "b16"], "figure_ref": [], "table_ref": []}, {"heading": "Corollary 1.", "text": "Let G be a graph and let c 1 , . . . , c n P R 4 be n generic camera centres. Let tC 1 , C 2 , . . . , C f u be a cycle consistency basis for the line graph LpGq. Let us collect in a unique system the equations of the form (14) for all the cycles in the basis. G is solvable if and only if such a system admits exactly one solution.\nProof. In one direction. If G is solvable then u \u03c4 \u03c5 \" 0 (thanks to Prop. 5), hence Eq. ( 14) gives b k \" 1 for each cycle C k in the basis, i.e., there is exactly one solution. In the opposite direction. It is easy to see that if we set all the scales b k \" 1 and all the vectors u \u03c4 \u03c5 \" 0, then we always get a solution to Eq. ( 14). If we assume that there is a unique solution, then it must be equal to b k \" 1 and u \u03c4 \u03c5 \" 0, i.e., the graph is solvable thanks to Prop. 5. If the graph is nonsolvable, there will be also other solutions.\nRemark 7. Corollary 1 means that the formulation given in Eq. ( 14) permits to fix all ambiguities, so that the solution is exactly one (for a solvable graph). It also implies that one does not need to explicitly compute the solution(s) in practice, but it is enough to recover the number of solutions. Note that the formulation in Eq. (11), instead, is subject to scale ambiguity, for it involves an unknown scale a \u03c4 \u03c5 for each edge in LpGq: when considering a single cycle, for instance, the product of such scales is fixed but all of them are free. Concerning the global projective ambiguity (which is inherent to the problem), observe that a global change in the coordinate system affects the matrices G \u03c4 only, but it does not affect the product G \u03c4 G\u00b41 \u03c5 \" Z \u03c4 \u03c5 . Therefore, projective ambiguity is not present in the formulations given in Eq. ( 11) and ( 14) (that do not involve the matrices G \u03c4 ).", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Proposed Algorithm", "text": "Our algorithm (summarized in Alg. 1) is a direct consequence of the theoretical results from Sec. 3; in particular, we follow the simplified formulation derived in Sec. 3.3, which is based on Eq. (14). Some steps require additional explanations, which are given in the following remarks.", "publication_ref": ["b13"], "figure_ref": [], "table_ref": []}, {"heading": "Algorithm 1 Viewing Graph Solvability", "text": "Input: undirected graph G \" pV, Eq Output: solvable or not solvable 1. randomly sample the camera centres 2. compute the line graph LpGq 3. compute a cycle consistency basis for LpGq 4. set up equations of the form ( 14) and ( 20)\n5. compute the number s of real solutions 6. if s \" 1 then solvable; else not solvable Remark 8. Concerning Step 3, we focus on a particular type of cycle consistency basis [12], namely, we consider a fundamental cycle basis, due to its simplicity. In fact, this basis can be constructed starting from a spanning tree, which can be found in linear time by either depth-first search or breadth-first search. Let T be a spanning tree of LpGq \" p s V, s Eq, then adding any edge from s EzT to T generates a cycle; the set of such cycles constitutes the fundamental cycle basis [17].   [37], while our approach provides a complete characterization of all the minimal graphs up to 9 nodes. the following constraints:\nb k \u2030 0 (18) W \u03c4 \u03c5 \" I 4`ci u J \u03c4 \u03c5 P GLp4, Rq.(19)\nInstead of explicitly enforcing them, we add the following equation 20) for each edge in the line graph, where z \u03c4 \u03c5 P R is an auxiliary variable. Clearly, if detpI 4`ci u J \u03c4 \u03c5 q \" 0 then the above equation can not be satisfied over real numbers. In other words, this additional equation has the effect of automatically discarding non-invertible matrices. Observe also that if all matrices W \u03c4 \u03c5 are invertible, then the product of a subset of them is also invertible. In other terms, the left term in Eq. ( 14) is invertible for each cycle and hence b k \u2030 0. Thus equation (20) implies both (19) and (18).\nz \u03c4 \u03c5 detpI 4`ci u J \u03c4 \u03c5 q`1 \" 0(", "publication_ref": ["b11", "b16", "b36", "b19", "b19", "b18", "b17"], "figure_ref": [], "table_ref": []}, {"heading": "Remark 10.", "text": "Step 5 is based on computational algebraic geometry. In particular, we employ Gr\u00f6bner basis computation [8], that is one of the main practical tools for solving systems of polynomial equations with coefficients in a field. A Gr\u00f6bner basis can be viewed as a nonlinear generalization of the Gaussian elimination for linear systems [18].\nRemark 11. Although our problem is stated over R, for the sake of efficiency [2] we perform computations over Z p (i.e., the integers modulo a large prime number p), as customary in applied algebraic geometry. This yields the same number c of solutions as in C [31], which is greater or equal to the sought number s of solutions in R. Recall that s \u011b 1, since there always exists at least one trivial real solution (given by u \u03c4 \u03c5 \" 0, b k \" 1 and z \u03c4 \u03c5 \"\u00b41). Several cases are given: i) if c \" 8 then s \" 8 [37]; ii) if c \" 1 then s \" 1; iii) if c \u0105 1 then s \u011b 1. Note that if c is even then s \u011b 2 since the solutions must come in conjugated pairs.", "publication_ref": ["b7", "b17", "b1", "b30", "b36"], "figure_ref": [], "table_ref": []}, {"heading": "Experiments", "text": "In this section, we show that our method can be profitably used to check the viewing graph solvability on several examples. See also the supplementary material. Our algorithm is implemented in Macaulay2 [11] and the code is publicly available 4 . 4 https://github.com/federica-arrigoni/solvability\nWe follow the protocol used in [37] where graphs with minimal number of edges (i.e., m \" rp11n\u00b415q{7s) are analyzed. As already pointed out, there exist cases with eight and nine nodes that are left undecided in [37] (see Tab. 2 in [37]), as they satisfy the necessary but not sufficient conditions 5 . Our approach, instead, is an effective test for solvability, being based on a characterization of the problem (i.e., a condition, that is both necessary and sufficient); as such, it is able to classify all those undecided cases, as summarized in Tab. 3. In particular, the five cases with eight nodes (shown in Fig. 1) were found to be all solvable.  As for the minimal graphs with nine nodes, there are 22 undecided graphs in [37], which, in particular, are finite solvable (i.e., they identify a finite number of camera configurations). Finite solvability is a necessary condition for solvability, but it was unknown whether it is also sufficient, as all non-solvable graphs -studied so far -define an infinite number of solutions. Our algorithm is able to prove that a subset of those undecided cases are solvable graphs (see Fig. 4 for some examples). Surprisingly, there exist also some non-solvable graphs among those candidates (see Fig. 5 for some examples), where our algorithm finds two real solutions. Thus, it is possible for a graph to be finite solvable without being solvable (i.e., to have a finite number of real solutions strictly greater than one). This answers an open research question pointed out by Trager et al. [37].\nViewing graphs with more than nine nodes are not studied in [37]. Our approach, instead, is able to handle minimal graphs with up to 90 nodes. For instance, we can prove that the graphs reported in Fig. 6 are solvable. Larger/denser graphs would require too much computational effort to be characterized with the computer used in our experiments (2020 MacBook Pro with 1.4 GHz processor, 8 GB RAM). Nevertheless, we can use our approach as a probe to study their local structure. Table 4 reports the execution times of Alg. 1 on some minimal graphs with increasing number of nodes. The computational complexity is dominated by Gr\u00f6bner basis computation, whose worstcase complexity is doubly exponential in the number of variables [8]. In our experiment, we randomly sample small sub-graphs of large viewing graphs coming from real data sets. More precisely, we proceed as follows: i) we select at random one node of the graph; ii) we identify the first neighborhood of the sampled node, (if the first neighbors are not enough, we also consider the neighbors of neighbors and so on); iii) we randomly select 8 nodes within the neighborhood. This, in addition to the original node, yields a nine-node subgraph. Following this procedure, we sample 200 subgraphs from each real graph, without replacement. The results, reported in Tab. 5, tell us that most local subgraphs are solvable. This gives an indication about which sub-graphs could be used in practice as a starting point for an incremental pipeline for image-based 3D reconstruction.  ", "publication_ref": ["b10", "b3", "b36", "b36", "b36", "b4", "b36", "b36", "b36", "b7"], "figure_ref": ["fig_1", "fig_5", "fig_6"], "table_ref": ["tab_3"]}, {"heading": "Conclusions and future work", "text": "We investigated the solvability of viewing graphs, i.e. whether they uniquely determine projective cameras, and made several important advances in the theory and practical use of viewing graphs. Building upon [37], we proposed a new characterization that involves fewer unknowns by exploiting cycle consistency. The resulting algorithm is an effective test (necessary and sufficient conditions) for solvability, thanks to which we classified all the cases left undecided by [37], and proved that finite solvability does not imply solvability, thereby answering an open research question. Moreover, we were able to process minimal graphs with up to 90 vertices, which sets the state-of-the-art in the   [23,6,39]. Solvable by sufficiency means that the graph satisfies a sufficient condition, namely being chordal [36]. Unsolvable by necessity means that the graph fails to satisfy some necessary conditions [37]. All the other cases are resolved by our approach (Alg. 1).\nuncalibrated case. Although this is still far from the level of maturity of the calibrated case, a careful analysis of small graphs is important as they are the building blocks of larger graphs. The maximum size we can manage is a matter of designing clever solvers and exploiting computational power: we are working on pushing this limit forward. For example, we plan to investigate numerical algebraic geometry (e.g., [9]), which gives good grounds for expecting to make the computation tractable for large-scale scenarios.\nIn this paper, we considered the concept of solvability given in Def. 2, which is based solely on the topology of the viewing graph. Using additional information (e.g., points) would give rise to a different solvability notion [21], that would be interesting to explore in the future. Drawing the connection to the calibrated case (parallel rigidity [3]) would also be an interesting topic of prospective research.\nBesides being of theoretical interest, the solvability problem has a practical impact, for reconstruction methods such as [30,16] will benefit from knowing in advance whether the graph at hand is solvable or not: if the problem is illposed, then any method will fail to return a useful solution. In this case, finding a maximal subgraph that is solvable would be of great interest.", "publication_ref": ["b36", "b36", "b22", "b5", "b38", "b35", "b36", "b8", "b20", "b2", "b29", "b15"], "figure_ref": [], "table_ref": []}, {"heading": "", "text": "Acknowledgements. This work was supported by the European Regional Development Fund under the project IMPACT (No. CZ.02.1.01{0.0{0.0{15 003{0000468) and by the EU H2020 Programme under the project SPRING (No. 871245).", "publication_ref": [], "figure_ref": [], "table_ref": []}], "references": [{"ref_id": "b0", "title": "Evaluating pose estimation methods for stereo visual odometry on robots", "journal": "", "year": "2001", "authors": "H S Alismail; B Browning; M B Dias"}, {"ref_id": "b1", "title": "Modular algorithms for computing Gr\u00f6bner bases", "journal": "Journal of Symbolic Computation", "year": "2003", "authors": "E A Arnold"}, {"ref_id": "b2", "title": "Bearing-based network localizability: A unifying view", "journal": "IEEE Transactions on Pattern Analysis and Machine Intelligence", "year": "2008", "authors": "F Arrigoni; A Fusiello"}, {"ref_id": "b3", "title": "Synchronization problems in computer vision with closed-form solutions", "journal": "International Journal of Computer Vision", "year": "2020", "authors": "F Arrigoni; A Fusiello"}, {"ref_id": "b4", "title": "A solution for multi-alignment by transformation synchronisation", "journal": "", "year": "2015", "authors": "F Bernard; J Thunberg; P Gemmar; F Hertel; A Husch; J Goncalves"}, {"ref_id": "b5", "title": "Discrete-continuous optimization for large-scale structure from motion", "journal": "", "year": "2011", "authors": "D Crandall; A Owens; N Snavely; D P Huttenlocher"}, {"ref_id": "b6", "title": "Spectral Generalizations of Line Graphs: On Graphs with Least Eigenvalue -2", "journal": "Cambridge University Press", "year": "2004", "authors": "D Cvetkovic; P Rowlinson; S Simic"}, {"ref_id": "b7", "title": "The structure of polynomial ideals and Gr\u00f6bner bases", "journal": "SIAM Journal on Computing", "year": "1990", "authors": "T W Dub\u00e9"}, {"ref_id": "b8", "title": "Sommars. Solving polynomial systems via homotopy continuation and monodromy", "journal": "IMA Journal of Numerical Analysis", "year": "2018", "authors": "T Duff; C Hill; A Jensen; K Lee; A Leykin; J "}, {"ref_id": "b9", "title": "Lie-algebraic averaging for globally consistent motion estimation", "journal": "", "year": "2004", "authors": "V M Govindu"}, {"ref_id": "b10", "title": "Macaulay2, a software system for research in algebraic geometry", "journal": "", "year": "", "authors": "D R Grayson; M E Stillman"}, {"ref_id": "b11", "title": "A condition number for joint optimization of cycle-consistent networks", "journal": "", "year": "2019", "authors": "L J Guibas; Q Huang; Z Liang"}, {"ref_id": "b12", "title": "FPT algorithms for path-traversal and cycletraversal problems", "journal": "Discrete Optimization", "year": "2011", "authors": "S Guillemot"}, {"ref_id": "b13", "title": "Graph Theory", "journal": "Addison-Wesley", "year": "1972", "authors": "F Harary"}, {"ref_id": "b14", "title": "Multiple View Geometry in Computer Vision", "journal": "Cambridge University Press", "year": "2004", "authors": "R I Hartley; A Zisserman"}, {"ref_id": "b15", "title": "GPSfM: Global projective SFM using algebraic constraints on multiview fundamental matrices", "journal": "", "year": "2008", "authors": "Y Kasten; A Geifman; M Galun; R Basri"}, {"ref_id": "b16", "title": "Cycle bases in graphs: Characterization, algorithms, complexity, and applications", "journal": "Computer Scienze Review", "year": "2009", "authors": "T Kavitha; C Liebchen; K Mehlhorn; D Michail; R Rizzi; T Ueckerdt; K Zweig"}, {"ref_id": "b17", "title": "Gr\u00f6bner bases, Gaussian elimination and resolution of systems of algebraic equations", "journal": "Springer", "year": "1983", "authors": "D Lazard"}, {"ref_id": "b18", "title": "The viewing graph", "journal": "", "year": "2003", "authors": "N Levi; M Werman"}, {"ref_id": "b19", "title": "Augmented vision: Seeing beyond field of view and occlusions via uncalibrated visual transfer from multiple viewpoints", "journal": "", "year": "2011", "authors": "A Nardi; D Comanducci; C Colombo"}, {"ref_id": "b20", "title": "A generalized projective reconstruction theorem and depth constraints for projective factorization", "journal": "International Journal of Computer Vision", "year": "2015", "authors": "B Nasihatkon; R Hartley; J Trumpf"}, {"ref_id": "b21", "title": "Visual odometry", "journal": "", "year": "2004", "authors": "D Nist\u00e9r; O Naroditsky; J Bergen"}, {"ref_id": "b22", "title": "Stable structure from motion for unordered image collections", "journal": "Springer-Verlag", "year": "2011", "authors": "C Olsson; O Enqvist"}, {"ref_id": "b23", "title": "Robust camera location estimation by convex programming", "journal": "", "year": "2015", "authors": "O Ozyesil; A Singer"}, {"ref_id": "b24", "title": "A survey of structure from motion", "journal": "Acta Numerica", "year": "2017", "authors": "O Ozyesil; V Voroninski; R Basri; A Singer"}, {"ref_id": "b25", "title": "Neighbourhood consensus networks", "journal": "", "year": "2018", "authors": "I Rocco; M Cimpoi; R Arandjelovi\u0107; A Torii; T Pajdla; J Sivic"}, {"ref_id": "b26", "title": "Linear solvability in the viewing graph", "journal": "", "year": "2011", "authors": "A Rudi; M Pizzoli; F Pirri"}, {"ref_id": "b27", "title": "Efficient & effective prioritized matching for large-scale image-based localization", "journal": "IEEE Trans. Pattern Anal. Mach. Intell", "year": "2017", "authors": "T Sattler; B Leibe; L Kobbelt"}, {"ref_id": "b28", "title": "Structure-from-motion revisited", "journal": "", "year": "2016", "authors": "J L Sch\u00f6nberger; J.-M Frahm"}, {"ref_id": "b29", "title": "A new rank constraint on multiview fundamental matrices, and its application to camera location recovery", "journal": "", "year": "2008", "authors": "S Sengupta; T Amir; M Galun; T Goldstein; D W Jacobs; A Singer; R Basri"}, {"ref_id": "b30", "title": "Basic algebraic geometry", "journal": "Springer", "year": "1994", "authors": "I Shafarevich; K Hirsch"}, {"ref_id": "b31", "title": "Angular synchronization by eigenvectors and semidefinite programming", "journal": "", "year": "2011", "authors": "A Singer"}, {"ref_id": "b32", "title": "Photo tourism: exploring photo collections in 3D", "journal": "", "year": "2006", "authors": "N Snavely; S M Seitz; R Szeliski"}, {"ref_id": "b33", "title": "Modeling the world from internet photo collections", "journal": "International Journal of Computer Vision", "year": "2008", "authors": "N Snavely; S M Seitz; R Szeliski"}, {"ref_id": "b34", "title": "InLoc: Indoor visual localization with dense matching and view synthesis", "journal": "", "year": "2018", "authors": "H Taira; M Okutomi; T Sattler; M Cimpoi; M Pollefeys; J Sivic; T Pajdla; A Torii"}, {"ref_id": "b35", "title": "The joint image handbook", "journal": "", "year": "2008", "authors": "M Trager; M Hebert; J Ponce"}, {"ref_id": "b36", "title": "On the solvability of viewing graphs", "journal": "", "year": "2008", "authors": "M Trager; B Osserman; J Ponce"}, {"ref_id": "b37", "title": "Rigid components identification and rigidity enforcement in bearing-only localization using the graph cycle basis", "journal": "", "year": "2015", "authors": "R Tron; L Carlone; F Dellaert; K Daniilidis"}, {"ref_id": "b38", "title": "Robust global translations with 1DSfM", "journal": "", "year": "2014", "authors": "K Wilson; N Snavely"}], "figures": [{"figure_label": "2", "figure_type": "figure", "figure_id": "fig_0", "figure_caption": "Figure 2 :2Figure 2: Two adjacent edges in the viewing graph.", "figure_data": ""}, {"figure_label": "4", "figure_type": "figure", "figure_id": "fig_1", "figure_caption": "Definition 4 .4Given an undirected graph G, its line graph (also called edge-to-vertex dual graph) is denoted by LpGq \" p s V, s Eq and it is another undirected graph such that: each vertex of LpGq represents an edge of G; two vertices of LpGq are adjacent if and only if their corresponding edges are adjacent in G, i.e, they are incident to the same vertex.", "figure_data": ""}, {"figure_label": "3", "figure_type": "figure", "figure_id": "fig_2", "figure_caption": "Figure 3 :3Figure 3: Viewing graph with 4 vertices (left) and corresponding line graph (right). Please note that a vertex of the original graph (e.g., vertex 2) can appear multiple times as an edge of the line graph, as clarified by colors.", "figure_data": ""}, {"figure_label": "9", "figure_type": "figure", "figure_id": "fig_3", "figure_caption": "Remark 9 .9As forStep 4, recall that our unknowns comprise one scale b k P R for each cycle and one vector u \u03c4 \u03c5 P R 4 for each edge in the line graph. Such variables must satisfy Nodes 37] Alg. 1[37] Alg. 1[37] Alg. 1[37] Alg. 1[37] Alg. 1[37] Alg. 1", "figure_data": ""}, {"figure_label": "4", "figure_type": "figure", "figure_id": "fig_4", "figure_caption": "Figure 4 :4Figure 4: Some solvable minimal viewing graphs with 9 nodes.", "figure_data": ""}, {"figure_label": "5", "figure_type": "figure", "figure_id": "fig_5", "figure_caption": "Figure 5 :5Figure 5: Some unsolvable minimal viewing graphs with 9 nodes.", "figure_data": ""}, {"figure_label": "6", "figure_type": "figure", "figure_id": "fig_6", "figure_caption": "Figure 6 :6Figure 6: Examples of solvable minimal viewing graphs with 20 nodes (left) and 90 nodes (right).", "figure_data": ""}, {"figure_label": "3", "figure_type": "table", "figure_id": "tab_1", "figure_caption": "Solvability of minimal viewing graphs. Candidates are connected graphs which are finite solvable and satisfy necessary conditions. Some cases were left undecided by", "figure_data": ""}, {"figure_label": "4", "figure_type": "table", "figure_id": "tab_3", "figure_caption": "Execution times of Alg. 1 on some minimal graphs.", "figure_data": ""}, {"figure_label": "", "figure_type": "table", "figure_id": "tab_4", "figure_caption": "Solvable UnsolvableData set by suff. by Alg. 1 Tot. by nec. by Alg. 1 Tot.", "figure_data": "Alcatraz Courtyard2000200000Buddah Tooth17820198202Pumpkin16922191819Skansen Kronan179818713013Tsar Nikolai I1960196404Alamo1361615248048Ellis Island1363016634034Gendarmenmarkt1281113961061Madrid Metropolis882811684084Montreal Notre Dame1401215248048Notre Dame1651818317017NYC Library1101912971071Piazza del Popolo1052212773073Piccadilly1092313268068Roman Forum1142814258058Tower of London1231814159059Trafalgar861610298098Union Square7419931070107Vienna Cathedral122813070070Yorkminster1161413070070Cornell Arts Quad7623991010101"}, {"figure_label": "5", "figure_type": "table", "figure_id": "tab_5", "figure_caption": "Characterization of sub-graphs with nine nodes sampled from some real viewing graphs", "figure_data": ""}], "formulas": [{"formula_id": "formula_0", "formula_text": "G \" aI 4`c v T @a P R \u20300 , v P R 4", "formula_coordinates": [3.0, 97.05, 329.32, 141.87, 12.19]}, {"formula_id": "formula_1", "formula_text": "P j G hi G ij P h P i", "formula_coordinates": [3.0, 110.58, 462.65, 115.23, 64.63]}, {"formula_id": "formula_2", "formula_text": "G hi G\u00b41 ij \" a hij I 4`ci v T hij (2)", "formula_coordinates": [3.0, 112.43, 684.66, 173.94, 13.08]}, {"formula_id": "formula_3", "formula_text": "G ij \" s ij H @pi, jq P E (3)", "formula_coordinates": [3.0, 376.12, 174.19, 168.99, 9.65]}, {"formula_id": "formula_4", "formula_text": "s m \" 1 2 n \u00ff i\"1 d 2 i\u00b4m (4", "formula_coordinates": [3.0, 388.89, 687.01, 152.36, 29.33]}, {"formula_id": "formula_5", "formula_text": ")", "formula_coordinates": [3.0, 541.24, 697.24, 3.87, 8.64]}, {"formula_id": "formula_6", "formula_text": "G \u03c4 G\u00b41 \u03c5 \" Z \u03c4 \u03c5(5)", "formula_coordinates": [4.0, 137.76, 314.57, 148.6, 10.62]}, {"formula_id": "formula_7", "formula_text": "Z \u03c4 \u03c5 \" a \u03c4 \u03c5 I 4`ci v T \u03c4 \u03c5(6)", "formula_coordinates": [4.0, 123.36, 348.13, 163.0, 12.77]}, {"formula_id": "formula_8", "formula_text": "16 s m \" 16`1 2 n \u00ff i\"1 d 2 i\u00b4m\u02d8.(7)", "formula_coordinates": [4.0, 114.22, 687.01, 172.14, 29.33]}, {"formula_id": "formula_9", "formula_text": "16s n`5 s m \" 5 2 n \u00ff i\"1 d 2 i`1 1m(8)", "formula_coordinates": [4.0, 367.36, 139.85, 177.76, 29.33]}, {"formula_id": "formula_10", "formula_text": "v \u03c4 \u03c5 \" 0 @p\u03c4, \u03c5q P s E.(9)", "formula_coordinates": [4.0, 380.56, 301.94, 164.55, 9.68]}, {"formula_id": "formula_11", "formula_text": "b \u03c4 \u03c5 I 4 \" a \u03c4 \u03c5 I 4`ci v T \u03c4 \u03c5 \u00f4 pb \u03c4 \u03c5\u00b4a\u03c4 \u03c5 qI 4 \" c i v T \u03c4 \u03c5 . (10", "formula_coordinates": [4.0, 318.46, 386.9, 222.51, 12.77]}, {"formula_id": "formula_12", "formula_text": ")", "formula_coordinates": [4.0, 540.96, 389.37, 4.15, 8.64]}, {"formula_id": "formula_13", "formula_text": "Z \u03c41\u03c42 Z \u03c42\u03c43\u00a8\u00a8\u00a8\u00a8\u00a8Z\u03c4 \u2113 \u03c41 \" I 4 .(11)", "formula_coordinates": [5.0, 109.36, 141.59, 177.01, 10.32]}, {"formula_id": "formula_14", "formula_text": "n \u00ff i\"1 d 2 i\u00b4m\u02d8.(12)", "formula_coordinates": [5.0, 164.8, 643.67, 121.57, 29.33]}, {"formula_id": "formula_15", "formula_text": "n \u00ff i\"1 d 2 i\u00b42 m`1\u02d8.(13)", "formula_coordinates": [5.0, 430.69, 118.47, 114.42, 29.33]}, {"formula_id": "formula_16", "formula_text": "Z \u03c4 \u03c5 \" G \u03c4 G\u00b41 \u03c5 \" G hi G\u00b41 ij and Z \u03c5\u03c4 \" G \u03c5 G\u00b41 \u03c4 \" G ij G\u00b41", "formula_coordinates": [5.0, 308.86, 306.33, 235.75, 24.45]}, {"formula_id": "formula_17", "formula_text": "W \u03c41\u03c42 W \u03c42\u03c43\u00a8\u00a8\u00a8\u00a8\u00a8W\u03c4 \u2113 \u03c41 \" b k I 4 (14", "formula_coordinates": [5.0, 360.99, 548.54, 179.97, 10.32]}, {"formula_id": "formula_18", "formula_text": ")", "formula_coordinates": [5.0, 540.96, 548.86, 4.15, 8.64]}, {"formula_id": "formula_19", "formula_text": "W \u03c4 \u03c5 \" I 4`ci u J \u03c4 \u03c5 (15", "formula_coordinates": [5.0, 388.1, 591.31, 152.86, 12.18]}, {"formula_id": "formula_20", "formula_text": ")", "formula_coordinates": [5.0, 540.96, 593.19, 4.15, 8.64]}, {"formula_id": "formula_21", "formula_text": "u \u03c4 \u03c5 \" v \u03c4 \u03c5 {a \u03c4 \u03c5 (16", "formula_coordinates": [6.0, 136.16, 251.93, 146.05, 9.68]}, {"formula_id": "formula_22", "formula_text": ")", "formula_coordinates": [6.0, 282.21, 252.28, 4.15, 8.64]}, {"formula_id": "formula_23", "formula_text": "4 s m`1p s m\u00b4s n`1q \" 5 s m\u00b4m`1(", "formula_coordinates": [6.0, 94.35, 357.33, 179.57, 9.3]}, {"formula_id": "formula_24", "formula_text": "b k \u2030 0 (18) W \u03c4 \u03c5 \" I 4`ci u J \u03c4 \u03c5 P GLp4, Rq.(19)", "formula_coordinates": [7.0, 103.09, 202.98, 183.27, 27.13]}, {"formula_id": "formula_25", "formula_text": "z \u03c4 \u03c5 detpI 4`ci u J \u03c4 \u03c5 q`1 \" 0(", "formula_coordinates": [7.0, 109.05, 264.1, 164.87, 12.18]}], "doi": ""}