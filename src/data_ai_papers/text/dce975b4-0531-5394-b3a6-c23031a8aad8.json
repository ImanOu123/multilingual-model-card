{"title": "PLURALITYVETO: A Simple Voting Rule Achieving Optimal Metric Distortion", "authors": "Erdem Fatih;  Kizilkaya; David Kempe", "pub_date": "2023-06-30", "abstract": "The metric distortion framework posits that n voters and m candidates are jointly embedded in a metric space such that voters rank candidates that are closer to them higher. A voting rule's purpose is to pick a candidate with minimum total distance to the voters, given only the rankings, but not the actual distances. As a result, in the worst case, each deterministic rule picks a candidate whose total distance is at least three times larger than that of an optimal one, i.e., has distortion at least 3. A recent breakthrough result showed that achieving this bound of 3 is possible; however, the proof is non-constructive, and the voting rule itself is a complicated exhaustive search. Our main result is an extremely simple voting rule, called PLURALITYVETO, which achieves the same optimal distortion of 3. Each candidate starts with a score equal to his number of first-place votes. These scores are then gradually decreased via an n-round veto process in which a candidate drops out when his score reaches zero. One after the other, voters decrement the score of their bottom choice among the standing candidates, and the last standing candidate wins. We give a one-paragraph proof that this voting rule achieves distortion 3. This rule is also immensely practical, and it only makes two queries to each voter, so it has low communication overhead. We also show that a straightforward extension can be used to give a constructive proof of the more general Ranking-Matching Lemma of Gkatzelis et al. We also generalize PLURALITYVETO into a class of randomized voting rules in the following way: PLURALITYVETO is run only for k < n rounds; then, a candidate is chosen with probability proportional to his residual score. This general rule interpolates between RANDOMDICTATORSHIP (for k = 0) and PLURALITYVETO (for k = n \u2212 1), and k controls the variance of the output. We show that for all k, this rule has expected distortion at most 3.", "sections": [{"heading": "Introduction", "text": "Voting is a fundamental process for reaching consensus and plays a vital role in democracies, organizations and businesses. Even honeybees use a type of voting to decide among potential nest sites; each bee casts a numerical vote indicating the intensity of its preferences, and the site with the highest score wins [32]. Quantifying preference intensity is not so easy for complicated problems that humans face; thus, the predominant approach is to elicit, from each voter, a preference ranking over candidates. This creates a need for a voting rule that determines the winner from these preferences. Numerous rules have been proposed over the years, with no consensus on a \"best\" rule.\nA key contribution of computer science in this regard has been viewing the ranking of a voter as a proxy for the latent cost she 1 incurs if some candidate wins. Then, an optimal candidate can be defined as one minimizing the total cost, and vote aggregation can be interpreted as an optimization problem with missing information. Due to the missing information, a voting rule can be thought of as an approximation algorithm, whose worst-case performance is referred to as its distortion in this setting.\nWithout any structures on the costs, not much can be achieved in terms of distortion [11]. An important contribution due to Anshelevich et al. [2] (see also the journal version [3] and recent surveys [5,4]) was to assume that the n voters and m candidates are jointly embedded in a metric space, and voters rank candidates by increasing distance. 2 This viewpoint is motivated by observing that each candidate exhibits a standpoint on various issues that voters care about, and each voter also has a standpoint on these issues that is presumably reflected on her ballot. One would then expect that voters rank candidates whose standpoints are \"closer\" to theirs higher. Note that voting rules do not have access to this space; the only available information is the rankings, which serve as an ordinal proxy for the (cardinal) distances. The worst-case approximation specifically for metric costs is called metric distortion. (Formal definitions of all concepts are given in Section 2.)\nThe metric distortion framework has proved to be a fruitful analysis tool. In their initial work, Anshelevich et al. [2] established a lower bound of 3 on the distortion of any deterministic voting rule, and showed that the Copeland rule nearly matches the lower bound by achieving distortion 5. Several subsequent papers worked towards closing this gap. Initially, the Ranked Pairs rule was conjectured to achieve distortion 3. This was disproved by Goel et al. [20] who gave a lower bound of 5; Kempe [24] strengthened the lower bound to \u2126( \u221a m). The first improvement over the upper bound of 5 was due to Munagala and Wang [27], who achieved distortion 2 + \u221a 5 \u2248 4.23 using a novel asymmetric variant of the Copeland rule. The distortion-3 conjecture was recently resolved in a breakthrough result by Gkatzelis et al. [19], using a novel voting rule called PLURALITYMATCHING.\nOne of the main drawbacks of PLURALITYMATCHING is that it is unusually complex for a voting rule in the conventional sense. The winner is selected based on perfect matchings in certain bipartite graphs, which we will discuss shortly. Due to the complex nature of the voting rule, it is not even obvious that there always exists a winner in PLURALITYMATCHING; indeed, this existence proof was the main contribution of Gkatzelis et al. [19] over the prior work of Munagala and Wang [27] and Kempe [24]. The rule is also almost certainly too technical to be understood by the general public.\nOur main contribution is an extremely simple voting rule, called PLURALITYVETO, which achieves the same optimal metric distortion of 3.\nUnder PLURALITYVETO, each candidate starts with a score equal to his plurality score, i.e., the number of first-place votes he receives. These scores are then gradually decreased; when the score of a candidate reaches zero, he is eliminated. Voters are processed one by one in an arbitrary order: when it is the turn of a voter, she decrements the score of her bottom choice among uneliminated candidates. Since the initial scores add up to the number of voters, all of the candidates will be eliminated at the end. The last eliminated candidate wins. Notice that this rule does not even require access to the voters' full rankings. Aside from the top choices, it only requires from each voter her bottom choice among uneliminated candidates. Thus, when implemented via sequential queries to voters, PLURALITYVETO also has low communication overhead. We summarize our main result as follows. (A formal presentation and proof are given in Section 3.) Contribution 1. PLURALITYVETO has the optimal metric distortion of 3 and can be implemented to require each voter to communicate only O(log m) bits to the voting rule.\nA candidate with a strict majority of first-place votes wins under PLURALITYVETO, regardless of the order in which voters are processed. Thus, one can think of the elimination process (or, as we call it, multiround veto) as a runoff stage. This makes our rule conceptually simple as well; it is just plurality voting followed by multi-round veto. In this respect, it resembles instant runoff voting, which is used in national elections in several countries. As in instant runoff voting, PLURALITYVETO can be used by eliciting from each voter her full ranking, so that the runoff stage can be run instantly. Alternatively, it can be arranged as a two-stage election in which voters first cast a vote for their top choice, and in the following stage, each voter cancels the vote of another voter.\nPLURALITYMATCHING and its analysis are based on domination graphs, a family of bipartite graphs G(c) (one per candidate c) between voters and voters defined in Section 2. Munagala and Wang [27] and Kempe [24] had shown that if G(c) has a perfect matching, then c has distortion at most 3. The key contribution of Gkatzelis et al. [19] was to show that such a candidate c always exists. In fact, they proved a generalization, called the Ranking-Matching Lemma, which shows the existence of a graph with a weighted perfect bipartite matching in a more general class of bipartite graphs. We also give (in Section 4) a constructive one-paragraph proof of this more general Ranking-Matching Lemma, using a variant FRACTIONALVETO of PLURALITYVETO which decreases weights fractionally, rather than integrally, in each step.\nThen, we generalize PLURALITYVETO to a class of randomized voting rules that choose a candidate with probability proportional to his residual score at the k th round of PLURALITYVETO, which we refer to as k-ROUNDPLURALITYVETO. When k = 0, this more general rule specializes to the well-known rule RANDOMDICTATORSHIP, which chooses the top choice of a uniformly random voter. Hence, randomizing the outcome proportional to the scores achieves distortion 3\u22122/n when k = 0, as shown in [1]. In Section 5, we show that k-ROUNDPLURALITYVETO in fact achieves distortion at most 3 for all k. In that way, it interpolates between RANDOMDICTATORSHIP (for k = 0) and PLURALITYVETO (for k = n \u2212 1), and the parameter k controls the variance of the output, but does not affect the distortion. The intuition behind this is that PLURALITYVETO repeatedly decreases scores for \"extreme\" candidates, and thus is likely to end up with central ones. We elaborate on this intuition in the context of Peer Selection in Section 7.", "publication_ref": ["b31", "b0", "b10", "b1", "b2", "b4", "b3", "b1", "b1", "b19", "b23", "b26", "b18", "b18", "b26", "b23", "b26", "b23", "b18", "b0"], "figure_ref": [], "table_ref": []}, {"heading": "Contribution 2. k-ROUNDPLURALITYVETO has expected metric distortion at most 3 for any number of rounds k.", "text": "This upper bound is almost tight, since any rule that can only elect candidates who are the top choice of at least one voter must have distortion at least 3\u2212o(1) [19]. Also, since k controls the variance of the output, at a high level, this result relates to the work of Fain et al. [16] who are not only interested in the expected distortion of rules, but also in the expected squared distortion, essentially forcing randomized rules to have lower variance in their distortion.\nLastly, we turn our attention to multi-winner voting rules electing a committee of size k > 1, under an objective function defined in Section 6. Here, as a direct corollary of our analysis of PLURALITYVETO, we resolve the main open question of Caragiannis et al. [12]. Caragiannis et al. [12] had given a multi-winner voting rule of distortion 3 running in exponential time, as well as a multi-winner voting rule of distortion 9 running in polynomial time, but left open the existence of a rule with distortion 3 that runs in polynomial time. We resolve this open question positively by combining PLURALITYVETO with a reduction from Caragiannis et al. [12]. Contribution 3. A multi-winner voting rule that adapts PLURALITYVETO, achieves distortion 3, and runs in polynomial time.\nOther Related Work The utilitarian analysis of voting rules through the lens of approximation algorithms was first suggested in [9,10,29,30]. Boutilier and Rosenschein [8], Anshelevich et al. [2] were the first to clearly articulate the tension between the objective of maximizing utility (or minimizing cost) and the available information, which is only ordinal; they also termed the resulting gap distortion. In the earlier work, such as [9,10,29,30], the focus was on (positive) utilities, and no additional assumptions (such as metric costs) were placed on the utilities.\nThe role of randomization in reducing distortion has been studied in several prior papers. The fact that randomized voting rules can achieve expected distortion lower than 3 (the known lower bound for deterministic voting rules) was first shown by Anshelevich and Postl [1], who showed that RANDOMDICTATORSHIP achieves expected distortion 3 \u2212 2 n . A slightly improved distortion of 3 \u2212 2 m was achieved in [23] by randomizing between RANDOMDICTATORSHIP and PROPORTIONALTOSQUARES. This upper bound is best possible among rules that only have access to each candidate's plurality score [22] -in fact, Gross et al. [22] prove a more general lower bound, which establishes that when each voter only communicates her top k < n/2 candidates, every randomized voting rule has distortion at least 3 \u2212 2 \u230an/k\u230b . A lower bound of 2 on the distortion of any randomized voting rule is straightforward, and it had been conjectured that this bound may be achievable by some randomized voting rule. This conjecture was recently disproved in [13], which established a lower bound of 2.0261 for m = 3 candidates and 2.1126 as the number of candidates m \u2192 \u221e. Whether any randomized voting rule can achieve expected disortion 3 \u2212 \u2126(1) for arbitrary m remains an intriguing open question.\nRecall that PLURALITYVETO only requires very limited communication from each voter, albeit in an n-round sequential algorithm. In this way, our work relates generally to the study of communication in social choice rules (e.g., [8,15]), and more specifically to studies of the tradeoff between communication and metric distortion. The recent papers [16,23] establish related lower bounds: Fain et al. [16] show that any voting rule that only obtains the top k = O(1) candidates of each voter must have squared distortion \u2126(m), in particular implying a bound of \u2126(m) for the distortion of deterministic rules. Kempe [23] proves a slightly more general and stronger lower bound of \u2126(m/k) on the distortion of any deterministic voting rule that only obtains the candidates ranked by each voter in a set K of size k = |K| of positions. Our voting rule avoids these lower bounds by obtaining the bottom candidate from a specified set for each voter; thus, for different voters, the candidates in different positions are queried.\nUsing randomization, communication can be drastically reduced even compared to our voting rule. Fain et al. [16] present a RANDOMREFEREE mechanism: the mechanism asks two randomly chosen voters for their top choices, and then has a third voter choose between the two proposed candidates. This mechanism, which only requires access to the top choices of two voters plus one bit, achieves not only constant expected distortion, but constant expected squared distortion.\nSeveral other recent works have studied the tradeoff between communication and distortion. Mandal et al. [25] study tradeoffs between communication and distortion in the utilitarian model, i.e., without any metric constraints. They also assume that voters actually know their utilities. In this model, they obtain upper and lower bounds on the achievable distortion under communication complexity constraints. Pierczy\u0144ski and Skowron [28] consider the distortion (and a modified notion of distortion) for approval-based voting (which has reduced communication), in which voters approve all candidates within a certain distance of themselves. They show that under certain parameter settings, for a carefully chosen radius, approvalbased voting achieves constant distortion in their sense. Bentert and Skowron [6] consider the approximate implementation of score-based voting rules using low communication. In particular, their techniques in Section 3.2 show that constant distortion 5 + o(1) can be achieved when the number of voters is large, by asking each voter to compare two uniformly random candidates.", "publication_ref": ["b18", "b15", "b11", "b11", "b11", "b8", "b9", "b28", "b29", "b7", "b1", "b8", "b9", "b28", "b29", "b0", "b22", "b21", "b21", "b12", "b7", "b14", "b15", "b22", "b15", "b22", "b15", "b24", "b27", "b5"], "figure_ref": [], "table_ref": []}, {"heading": "Preliminaries", "text": "Throughout, we use bold face for vectors, and denote the i th component of a vector x by x i . Given a set S, let \u2206(S) denote the probability simplex over S, i.e., the set of non-negative weight vectors over S that add up to 1.\nAn election is a tuple E = (V, C, #-\u227b) consisting of a set of n voters V , a set of m candidates C and a ranked-choice profile #-\u227b = (\u227b v ) v\u2208V ; here, \u227b v is the ranking of voter v, i.e., a total order over C. We say that voter v ranks candidate c higher than candidate c \u2032 if c \u227b v c \u2032 . We also use c v c \u2032 when c \u227b v c \u2032 or c = c \u2032 , in which case we say that v ranks c weakly higher than c \u2032 .\nA voting rule f is an algorithm that returns a candidate f ( #-\u227b) \u2208 C given a ranked-choice profile #-\u227b. We refer to f ( #-\u227b) as the winner of the election E using the voting rule f , or just as the winner of f if E is clear from the context. For the most part, we will consider deterministic voting rules; in Section 5, we will also study randomized voting rules.\nWe refer to the candidate ranked highest by voter v as the top choice of v, and denote him by top(v). The candidate ranked lowest by voter v is likewise referred to as the bottom choice of v. We use plu(c) to denote the plurality score of candidate c, i.e., the number of voters whose top choice is c. Given an election E = (V, C, #-\u227b), we say that a metric d over 4 V \u222a C is consistent with the ranking ", "publication_ref": ["b3"], "figure_ref": [], "table_ref": []}, {"heading": "Metric Distortion", "text": "\u227b v of voter v if d(v, c) \u2264 d(v, c \u2032 ) for all c, c \u2032 \u2208 C such that c \u227b v c \u2032 . We say that d is consistent with the ranked-choice profile #- \u227b if it is consistent with the ranking \u227b v for all voters v \u2208 V . We use D( #- \u227b)\nd \u2208 D( #- \u227b). That is, dist(f ) = max #- \u227b sup d\u2208D( #- \u227b) cost(f ( #- \u227b), d) cost(c * d , d) .", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Domination Graphs", "text": "Domination graphs offer a conceptually simple approach for giving an upper bound of 3 on the distortion of a voting rule. Given an election\nE = (V, C, #- \u227b), the domination graph of a candidate c \u2208 C is the bipartite graph G E (c) = (V, V, E c ) where (v, v \u2032 ) \u2208 E c if and only if c v top(v \u2032 ).\nThe main use of these graphs is via the following lemma, due to [27,24,19].", "publication_ref": ["b26", "b23", "b18"], "figure_ref": [], "table_ref": []}, {"heading": "Lemma 1. Let f be a voting rule such that for every election", "text": "E = (V, C, #- \u227b), the domination graph G E (f ( #- \u227b)\n) has a perfect matching. Then, f has distortion 3.\nThroughout the remainder of the paper, we assume that an election E = (V, C, #-\u227b) is given, and we drop E from notation when it is clear from the context.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Optimal Distortion via PLURALITYVETO", "text": "We now introduce PLURALITYVETO and show that it has distortion 3. PLURALITYVETO requires very limited ordinal information; it only requires one each of the following two types of queries to every voter.\n-A top query to a voter v simply returns top(v).\n-A bottom-among query to a voter v regarding a subset of candidates A returns the bottom choice of v among candidates in A, denoted by bottom A (v).\nNotice that both can of course be easily derived when each voter's full ranking \u227b v is known.\nPLURALITYVETO assigns an initial score of plu(c) to each candidate c; doing so only requires making a top query to each voter. These scores are then gradually decreased; when the score of a candidate c reaches zero, we say that c is eliminated. Voters are processed one by one in an arbitrary order; this order can be fixed beforehand, or be adaptive and based on voters' preferences. When a voter v is processed, she decrements the score of her bottom choice among the not-yet-eliminated candidates; the bottom choice can be found by making a bottom-among query to v. The winner is the last eliminated candidate. Pseudo-code is given as Algorithm 1.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Algorithm 1 PLURALITYVETO", "text": "Input: An election E = (V, C, #-\u227b) Output: A winning candidate c \u2208 C 1: initialize score(c) = plu(c) for each c \u2208 C 2: let (v 1 , . . . , v n ) be an arbitrary ordering of V 3: for i = 1, 2, . . . , n do 4:\nA i = {c \u2208 C | score(c) > 0} 5: c i = bottom A i (v i ) 6: decrement score(c i ) by 1 7: return c n Theorem 1. The distortion of PLURALITYVETO is 3.\nProof. We show that G(c n ) has a perfect matching, which proves that PLURALITYVETO has distortion 3 by Lemma 1. Initially, the scores of candidates add up to n, and in each of the n iterations, a positive score is decremented by 1. Thus, the score of each candidate must be 0 at the end. This implies that, for each candidate c, there are plu(c) distinct voters v i such that c i = c. In other words, for each voter v i , we can define a unique voter v \u2032 i such that top(v \u2032 i ) = bottom A i (v i ). This means that v i ranks any candidate in A i weakly higher than top(v \u2032 i ). Since score(c n ) does not get to 0 until the end, note that c n \u2208 A i for all i. Hence, each voter v i ranks c n weakly higher than top(v \u2032 i ), i.e., (v i , v \u2032 i ) \u2208 E cn . Thereby, we have shown that G(c n ) has a perfect matching. Algorithm 1 is not only quite natural; it also requires only O(log m) bits of information from each voter v i , namely, top(v i ) and bottom A i (v i ). However, implementing the rule with these two queries comes with a trade-off: voters need to wait for possibly n rounds after reporting their top choice.\nNote that our proof of Theorem 1 also implies that there is always a candidate whose domination graph has a perfect matching. Indeed, all attempts to resolve the optimal metric distortion conjecture, in one way or another, boiled down to proving the existence of such a candidate. This was done in [19] by giving a stronger existence result, called the ranking-matching lemma. Our rule, as stated so far, does not require this stronger lemma, but in the next section, we show that a simple generalization also implies the general ranking-matching lemma.", "publication_ref": ["b18"], "figure_ref": [], "table_ref": []}, {"heading": "A Simple Proof of the Ranking-Matching Lemma via FRACTIONALVETO", "text": "Our proof of Theorem 1 implied that there always exists a candidate whose domination graph has a perfect matching. The Ranking-Matching Lemma in [19] is a stronger existence result based on an extension of domination graphs in which nodes have arbitrary weights. Given an election E = (V, C, #-\u227b) and weight vectors p \u2208 \u2206(V ) and q \u2208 \u2206(C), the (p, q)-domination graph of a candidate c \u2208 C is the bipartite graph\nG E p,q ( c) = (V, C, E c , p, q); the edge (v, c) \u2208 E c if and only if c v c. A fractional perfect matching of G E p,q ( c) is a weight function w : E c \u2192 R \u22650 such that c\u2208C:(v,c)\u2208E c w(v, c) = p v\nfor each voter v and v\u2208V :(v,c)\u2208E c w(v, c) = q c for each candidate c. That is, the total weight of edges incident to each node must be equal to the weight of the node.\nA candidate's domination graph has a perfect matching if and only if his (p uni , q plu )-domination graph has a fractional perfect matching; here,\np uni v = 1/n for all v \u2208 V and q plu c = plu(c)/n for all c \u2208 C.\nThe Ranking-Matching Lemma gives a stronger existence guarantee by asserting that, for any election E and any p \u2208 \u2206(V ) and q \u2208 \u2206(C), there is a candidate c \u2208 C whose (p, q)-domination graph G E p,q (c) has a fractional perfect matching. Gkatzelis et al. [19] give a proof by minimal counterexample for this lemma; thus, their proof is non-constructive. Moreover, it contains elaborate details for defining a minimal counterexample and intricate arguments involving smaller elections where some voters and candidates are removed. This makes the proof somewhat harder to grasp.\nWe provide a much simpler and constructive proof of the Ranking-Matching Lemma. We generalize PLURALITYVETO in a way that allows any p \u2208 \u2206(V ) and q \u2208 \u2206(C) to be given as input. We refer to this voting rule as FRACTIONALVETO, and give the pseudo-code as Algorithm 2. Notice that for the special case with weights p uni and q plu , FRACTIONALVETO specializes to PLURALITYVETO. Proof. We begin by observing that the while loop (lines 3-9) terminates in at most n + m iterations since in each iteration, the weight of either a voter v or a candidate c reaches 0. Next, we show that if a candidate, say c, wins, then G p,q ( c) has a fractional perfect matching w.\nFirst, note that, since c is the last candidate whose weight is decremented, c \u2208 A for all iterations. Let us now consider an arbitrary iteration of FRACTIONALVETO in which a voter v is chosen. By definition, v ranks any candidate in A weakly higher than the candidate c = bottom A (v); in particular, v ranks c weakly higher than c, i.e., (v, c) \u2208 E c . Let w assign a weight of \u01eb to the edge (v, c), i.e., w(v, c) = \u01eb. We now show that w is a fractional perfect matching of G p,q ( c).", "publication_ref": ["b18", "b18"], "figure_ref": [], "table_ref": []}, {"heading": "Algorithm 2 FRACTIONALVETO", "text": "Input: An election E = (V, C, #-\u227b) along with weight vectors p \u2208 \u2206(V ) and q \u2208 \u2206(C) Output: A candidate c \u2208 C whose (p, q)-domination graph has a fractional perfect matching 1: initialize weight(v) = p v for each v \u2208 V 2: initialize weight(c) = q c for each c \u2208 C 3: while there is a v \u2208 V with weight(v) > 0 do 4:\nlet v be such a voter For each edge (v, c) \u2208 E c to which w assigns positive weight, there exists an iteration where the weights of both v and c are decremented by w(v, c). Hence, the total weight of edges incident to each voter and candidate is equal to how much their weight is decremented until the end. All we need to show is that the weight of each voter v and candidate c reaches 0 at the end as they are initialized, respectively, to p v and q c . The total weights of voters and candidates are initially the same, and they stay so after each iteration since only a single voter's and candidate's weights are decremented, and by the same amount. Therefore, when the weight of each voter reaches 0, so does each candidate's. Thus, we have shown that w is a fractional perfect matching of G p,q ( c).", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "A Class of Randomized Voting Rules with Distortion 3", "text": "As shown in Theorem 1, PLURALITYVETO has distortion 3. Another voting rule that is well known to have distortion 3 (or 3 \u2212 2/n, to be precise) is RANDOMDICTATORSHIP, which returns the top choice of a voter chosen uniformly at random [1]. In the same vein, one can view PLURALITYVETO as choosing a voter deterministically and returning that voter's top choice; this voter is referred to as v \u2032 n in the proof of Theorem 1. This suggests a more general class of randomized voting rules, interpolating between RANDOMDICTATOR-SHIP and PLURALITYVETO: carefully rule out k voters, and return the top choice of a uniformly random voter among the remaining n \u2212 k voters. In this section, we introduce such a general rule and show that it achieves distortion at most 3 for every choice of k \u2208 {0, 1, . . . , n \u2212 1}.\nA randomized voting rule f is an algorithm which, given a ranked-choice profile #-\u227b, returns a probability distribution over candidates f ( #-\n\u227b) \u2208 \u2206(C). Writing w = f ( #- \u227b)\n, each candidate c is chosen as the winner by f with probability w c . We refer to w as the winner distribution of f . The cost of a winner distribution under a given metric d over V \u222a C is the expected cost of the winner, i.e., cost(w, d) = c\u2208C w c \u2022 cost(c, d). The distortion of a randomized voting rule is still the ratio of the rule's cost to the cost of the optimum solution.\nTo phrase our generalized voting rule precisely, we observe that a candidate c wins under RANDOM-DICTATORSHIP with probability proportional to his plurality score plu(c). When the score of candidate c i is decremented at the i th iteration of PLURALITYVETO, suppose that we rule out voter v \u2032 i , as defined in the proof of Theorem 1. Since top(v \u2032 i ) = c i , the current score of candidate c i can be viewed as his plurality score with respect to the remaining voters v \u2032 i+1 , . . . , v \u2032 n .\nOur generalized voting rule (Algorithm 3) therefore simply runs PLURALITYVETO for only k < n iterations, then chooses a candidate with probability proportional to the residual scores. The algorithm is formally given as Algorithm 3.", "publication_ref": ["b0"], "figure_ref": [], "table_ref": []}, {"heading": "Algorithm 3 k-ROUNDPLURALITYVETO", "text": "Input: An election E = (V, C, #-\u227b) Output: A winner distribution w \u2208 \u2206(C) 1: initialize score(c) = plu(c) for each c \u2208 C 2: let (v 1 , . . . , v n ) be an arbitrary ordering of V 3: for i = 1, 2, . . . , k do 4:\nA i = {c \u2208 C | score(c) > 0} 5: c i = bottom A i (v i ) 6: decrement score(c i ) by 1 7: return w c = score(c)/(n \u2212 k) for all c \u2208 C\nOur main result in this section is that k-ROUNDPLURALITYVETO has distortion at most 3 for any k.\nTheorem 3. The distortion of k-ROUNDPLURALITYVETO is at most 3 for any k \u2208 {0, 1, . . . , n \u2212 1}.\nOur proof is based on a generalization of the flow technique from [24] to randomized voting rules. It is encapsulated in Lemma 2 below; this lemma is a straightforward generalization of Lemma 3.1 from [24]. As in that paper, the proof is somewhat technical and long; thus, it is given in the appendix.\nThe key concept, adopted from [24], is the following flow network. Given an election E, let H E = (V \u00d7 C, E) be a directed graph with the the following edges:\n-For every voter v and any pair of candidates c and c \u2032 such that c \u227b v c \u2032 , there is a directed preference edge (v, c) \u2192 (v, c \u2032 ) in E.\n-For every candidate c and any pair v = v \u2032 of distinct voters, there is a (bi-directed) sideways edge\n(v, c) \u2194 (v \u2032 , c) in E.\nAn illustration of a flow network is given in Fig. 1.\nFor a winner distribution 5 w \u2208 \u2206(C) and a candidate c * , a (w, c * )-flow on H E is a circulation g (i.e., non-negative and conserving flow unless specified otherwise) in which -For each candidate c and voter v, exactly w c units of flow originate at the node (v, c).\n-Flow is only absorbed at nodes (v, c * ).\nThe cost of g at voter v is the total amount of flow absorbed at (v, c * ), plus the total flow on sideways edges into or out of nodes (v, c), for any candidate c. Formally,\ncost v (g) = e into (v,c * ) g e + c =c * v \u2032 =v g (v \u2032 ,c)\u2194(v,c) where g u\u2194u \u2032 = g u\u2192u \u2032 + g u \u2032 \u2192u .\nThe cost of g is cost(g) = max v\u2208V cost v (g). An illustration of flows and their costs is given in Fig. 2.\nThe key lemma showing how to use flows to upper-bound the distortion of a voting rule is the following. \nv 1 : c 1 \u227b c 2 \u227b c 3 \u227b c 4 ; v 2 : c 1 \u227b c 3 \u227b c 4 \u227b c 2 ; v 3 : c 2 \u227b c 3 \u227b c 4 \u227b c 1 ; v 4 : c 4 \u227b c 2 \u227b c 1 \u227b c 3 .\nPreference edges are shown in black, while sideways edges are shown in red. For legibility, we have omitted preference edges that could be replaced by a path of two or more other preference edges, e.g., the edge from\n(v 1 , c 1 ) \u2192 (v 1 , c 3 ).\nLemma 2. Let f be a randomized voting rule, with the following property: For every election E = (V, C, #-\u227b) and any candidate c * \u2208 C, on the flow network H E , there is a (w, c * )-flow g such that w = f ( #-\u227b) and cost(g) \u2264 \u03bb. Then, dist(f ) \u2264 \u03bb.\nWe are now ready to give the proof of Theorem 3.\nProof of Theorem 3. Fix an arbitrary candidate c * \u2208 C. We will describe a (w, c * )-flow g, and prove that it has cost at most 3. Theorem 3 then follows directly from Lemma 2.\nAs shown in the proof of Theorem 1, we can sort the voters as v \u2032 1 , . . . , v \u2032 n such that top(v \u2032 i ) = bottom A i (v i ) for all i in the execution of PLURALITYVETO, i.e., without stopping early. Define\nV k = {v 1 , . . . , v k } and V k = {v k+1 , . . . , v n }; also V \u2032 k = {v \u2032 1 , . . . , v \u2032 k } and V \u2032 k = {v \u2032 k+1 , . . . , v \u2032 n }.\nIn order to obtain a (w, c * )-flow, we must route flow such that for each candidate c and each voter v \u2208 V , exactly score(c)/(n \u2212 k) units of flow originate at the node (v, c). In particular, because score(c) = 0 for candidates c / \u2208 A k , no flow originates at any nodes (v, c) for c / \u2208 A k .\n1. First, consider a voter v i \u2208 V k , so that i \u2264 k. Since A k \u2286 A i , voter v i ranks all candidates in A k weakly higher than bottom A i (v i ). Therefore, g can route all the flow originating at nodes (v i , c) to (v i , bottom A i (v i )) along preference edges. At that point, there is one unit of flow at\n(v i , bottom A i (v i ))\n. This one unit of flow is next routed to (v\n\u2032 i , bottom A i (v i )) = (v \u2032 i , top(v \u2032 i )\n) using a sideways edge. Finally, since top(v \u2032 i ) is by definition the top choice of v \u2032 i , the unit can be routed to (v \u2032 i , c * ) using a preference edge, and is then absorbed.  2. Next, we (jointly) consider all voters v i \u2208 V k . Fix a candidate c \u2208 A k . Because score(c)/(n \u2212 k) units of flow originate at each node (v i , c) for v i \u2208 V k , and there are |V k | = n \u2212 k such nodes, in total, exactly score(c) units of flow originate at these nodes. On the other hand, score(c) is also the number of distinct voters v \u2032 j \u2208 V \u2032 k such that top(v \u2032 j ) = c. g distributes all the score(c) units of flow from nodes\n(v i , c) (for v i \u2208 V k ) to the score(c) nodes (v \u2032 j , c) with top(v \u2032 j ) = c, in a way that each voter v \u2032 j \u2208 V \u2032 k\nreceives one unit of flow. Then, for each voter v \u2032 j \u2208 V \u2032 k with top(v \u2032 j ) = c, the flow g routes the one unit of flow from (v \u2032 j , c) to (v \u2032 j , c * ) using a preference edge; there, it is absorbed. Because flow only originates at nodes (v i , c) with c \u2208 A k , all the flow is in fact routed to an absorbing node in this way.\nIn the flow g described above, for each voter v, exactly one unit is sent out on sideways edges, and one unit is received on sideways edges. For voters in V k , the unit sent is by the first case above; for voters in V \u2032 k , the unit received is by the first case. For voters in V k , the unit sent is by the second case; for voters in V \u2032 k , the unit received is by the second case. Finally, each voter v i absorbs the one received unit of flow at (v i , c * ). This proves that cost(g) = 3, completing the proof.\nThe committee K returned by the rule should still be \"representative\" of the set of all voters, in the same sense of being close to the voters in the metric space. While the distance of a voter from a single candidate is simply d(v, c), many natural notions of distance from a voter to a committee (i.e., set of candidates) suggest themselves, and indeed, have been studied in the literature. One natural notion, studied by Goel et al. [21] and Chen et al. [14], is the average distance of v to the members of C. However, this notion simply encourages the election of a very homogeneous committee consisting of candidates as close as possible to the median. An alternative notion was studied by Caragiannis et al. [12]; this notion aims to capture the intuition that every voter should be close to at least one, or several, of the committee members. To capture this intuition formally, Caragiannis et al. [12] define the q-cost of a voter v for a committee K under a given metric d over V \u222a C, denoted by q-cost v (K, d), as the distance of v from the q th closest candidate (to v) in K. The q-social cost of a committee K is then defined as the total q-cost of voters for K, i.e., q-cost(K, d) = v\u2208V q-cost v (K, d). The (q, k)-distortion of a multi-winner voting rule is the ratio of the rule's q-social cost to the q-social cost of the optimum committee of size k, just as in Section 2. 1 For small values of q, a low q-cost captures the intuition that each voter should be represented on the committee (i.e., close to) one or a few candidates. For large values of q, such as even q = k, all members of the committee must by close to most voters -as with the sum of distances, this encourages choosing committees of candidates all of whom are close to the median of the metric space of voters, resulting in homogeneity of the committee.\nCaragiannis et al. [12] showed an interesting trichotomy on the lowest achievable distortion for different regimes of q. When q \u2264 k/3, the lowest (q, k)-distortion of any multi-winner voting rule can be unbounded; when q \u2208 (k/3, k/2], the (q, k)-distortion of any voting rule is at least linear in the number of voters, and there exists a computationally efficient voting rule with (q, k)-distortion no worse than linear; finally, when q > k/2, there exists a voting rule with constant distortion. The analysis in the third regime (large q) is based on the following key insight: Lemma 3 (Lemma 2 of Caragiannis et al. [12]). For any election E = (V, C, #-\u227b), metric d consistent with #-\u227b and q > k/2, the q-cost is a metric over committees of size k.\nSince the q-costs form a metric, each voter v's ranking of candidates can be extended into a ranking by v of all committees of size k. Specifically, to decide whether voter v prefers a committee K over another committee K \u2032 , it suffices to compare her q th favorite candidates in K and K \u2032 (with ties broken arbitrarily). Given the rankings over the committees, any single-winner rule can be used to choose the winning committee, with the same distortion guarantee by Lemma 3; Caragiannis et al. [12] use PLURALITYMATCHING, achieving distortion 3. However, since the number of committees of size k is exponential in k, the naive approach of computing the full rankings over committees of size k requires exponential running time in k.\nCaragiannis et al. [12] show how to achieve polynomial running time at the cost of a loss of another factor of 3 in the distortion; i.e., they present a polynomial-time implementable voting rule with distortion no worse than 9. They do so by proving (see Lemma 3 of Caragiannis et al. [12]) that there always exists a committee composed of some voter's top k choices whose distortion is no worse than three times as large as that of the optimal committee. As a consequence of our analysis, we immediately obtain that this factor of 3 need not be lost. This is due to the following two key observations:\n1. In the proof of Theorem 1, we showed that the domination graph G(c n ) of the winning candidate c n has a perfect matching. Furthermore, under PLURALITYVETO, a candidate can only win if he starts with a positive plurality score -this is because a candidate is eliminated as soon as his score reaches 0. Thus, the proof showed the existence of a candidate c n who was the first choice of at least one voter, and for whom G(c n ) contains a perfect matching.\n2. If\u0108 is the set of all candidates ranked first by at least one voter, then the domination graph\u011c(c) of any candidate c \u2208\u0108 with respect to the candidate set\u0108 is the same as the domination graph G(c) of c with respect to the set of all candidates C. This is because the edge (v, v \u2032 ) \u2208 G(c) if and only if c v top(v \u2032 ), and because\u0108 = {c \u2032 | c \u2032 = top(v) for at last one voter v}, the top candidate top(v \u2032 ) is the same with respect to C and\u0108.\nAs a result of these two observations, a voting rule can consider just candidates in\u0108 (i.e., with at least one first-place vote), and still be assured that at least one of these candidates will have a perfect matching in G(c) = G(c), and hence achieve distortion 3. Such a candidate c can be found by running PLURALITYVETO or PLURALITYMATCHING on the set\u0108 of committees which are composed of the top-k candidates of some voter v. Because there are at most n such committees (one per voter), the resulting voting rule runs in polynomial time.", "publication_ref": ["b23", "b23", "b23", "b20", "b13", "b11", "b11", "b0", "b11", "b11", "b11", "b11", "b11"], "figure_ref": ["fig_2"], "table_ref": []}, {"heading": "Conclusion and Future Work", "text": "We showed that a simple deterministic voting rule, called PLURALITYVETO, achieves the optimal metric distortion of 3; the proof is short and simple. We used a generalization of PLURALITYVETO, called FRACTIONALVETO, to prove the Ranking-Matching Lemma of Gkatzelis et al. [19], and we also showed that a class of randomized rules interpolating between RANDOMDICTATORSHIP and PLURALITYVETO all achieve expected distortion at most 3.\nPLURALITYVETO is a very natural and potentially practical voting rule, and it would be of interest to understand which other properties it satisfies, including the standard axiomatic voting rule properties. One difficulty is that the outcome depends on the order in which the voters are queried in the multi-round veto process. On the other hand, this makes the structure of the set W \u2286 C of potential winners (i.e., candidates who will win for at least one processing order of the voters) an interesting object of study.\nNote that W is a subset of candidates whose domination graph has a perfect matching, i.e., potential winners of PLURALITYMATCHING. This has several immediate implications. First, it is possible that for all orderings of voters, the selected candidate fails to be a Condorcet winner, as shown for PLURALITY-MATCHING by Gkatzelis et al. [19]. Second, if the metric space is \u03b1-decisive (i.e., for each voter, the ratio between her distance to her top-ranked and second-ranked candidate is at most \u03b1 [1]) then the distortion bound improves to 2 + \u03b1.\nAdditional insights can be gleaned from the Peer Selection setting, in which the set of voters is the same as the set of candidates, so each voter/candidate ranks herself first; as a result, all such instances are 0-decisive. PLURALITYVETO can be even more easily described in the Peer Selection setting: in each round i, the voter v i eliminates from consideration the remaining candidate furthest from her.\nHere, we consider a slight variant of PLURALITYVETO: the order of voters is chosen adaptively, and the next voter v i+1 is always one whose first-place vote was canceled by v i . In addition, the vote of v 1 is always canceled, so the winner is the top choice of v n . A proof essentially identical 6 to the one of Theorem 1 shows that this rule returns a candidate whose domination graph has a perfect matching as well. In turn, we can use this insight to prove that there are at least two candidates who can win in Peer Selection, i.e., |W | \u2265 2. First, if the process is run from an arbitrary v 1 , then somev = v n wins. If the process is run starting from v 1 =v, the winner must be some other candidate\u1e7d =v, becausev is eliminated in the first step. So there are at least two potential winners.\nPeer selection also has interesting properties when the voters/candidates are embedded in Euclidean space R D . Since each voter, on her turn, eliminates the voter furthest from her, the eliminated voter is always located at a corner of the convex hull of all previously uneliminated ones. In this sense, PLURALITYVETO \"peels away\" extreme candidates one by one 7 : the convex hull of the voters in A k (who are not yet eliminated after k rounds) contains no voter from\u0100 k . A natural question is whether the set W of potential winners has the same convexity property, i.e., the convex hull of W contains no voter/candidate from C \\ W . 8 If true, this would show that the potential winners are in a sense \"cohesive.\"\nAnother compelling direction concerns the incentives under PLURALITYVETO. We described it as a sequential process in which voters are queried about their bottom choice one by one (although of course the process can be fully simulated if each voter's full ranking is known). In describing the sequential process, we assumed that all queries are answered truthfully. While no non-trivial voting rule can be truthful in general [18,31], truthfulness can be achieved in restricted settings [17]. An interesting direction here is to consider the \"Price of Anarchy:\" what is the worst distortion of PLURALITYVETO if agents play a subgame perfect equilibrium in the VETO stage instead of truthfully revealing their bottom choice?", "publication_ref": ["b18", "b18", "b0", "b5", "b6", "b7", "b17", "b30", "b16"], "figure_ref": [], "table_ref": []}, {"heading": "A Proof of Lemma 2", "text": "Here, we prove Lemma 2. We restate it for convenience.\nLemma 2 Let f be a randomized voting rule, with the following property: For every election E = (V, C, #-\u227b) and any candidate c * \u2208 C, on the flow network H E , there is a (w, c * )-flow g such that w = f ( #-\u227b) and cost(g) \u2264 \u03bb. Then, dist(f ) \u2264 \u03bb.\nProof. The proof idea is exactly the same as in [24]: we phrase an adversary's optimization problem of maximizing the expected distortion under w as a linear program. By weak duality, any feasible solution to the dual program provides an upper bound on the maximum distortion. We then show that flows directly give rise to such dual-feasible solutions.\nThe primal linear program is directly adapted from the linear program first given in [3,20] in the context of a deterministic winner. The variables x v,c of the linear program capture the distances between voters v and candidates c. As such, they must be non-negative and satisfy the triangle inequality; furthermore, they have to be consistent with the voters' preferences \u227b v . The adversary's objective is to maximize the expected distortion, compared to the optimal candidate c * with knowledge of the metric. (That is, c * is chosen with hindsight.) Since the distortion is a ratio, to ensure linearity, we phrase the LP as solving the optimization problem of maximizing the expected cost under the distribution w, subject to the (optimum) candidate c * having cost exactly 1. This is equivalent, as any distances can be normalized to ensure this property. The resulting linear program is the following.\nMaximize c w c \u2022 v x v,c subject to x v,c \u2264 x v \u2032 ,c + x v \u2032 ,c \u2032 + x v,c \u2032 for all c, c \u2032 , v, v \u2032 (\u25b3 Inequality) x v,c \u2264 x v,c \u2032 for all c, c \u2032 , v such that c \u227b v c \u2032 (consistency) v x v,c * = 1 (normalization) x v,c \u2265 0 for all c, v.(1)\nAfter some straightforward rearrangements, the dual linear program is given as LP (2).\nMinimize \u03b1 subject to \u03b1 + c \u2032 :c * \u227bvc \u2032 \u03c6 (v) c * ,c \u2032 \u2212 c \u2032 :c \u2032 \u227bvc * \u03c6 (v) c \u2032 ,c * + c \u2032 ,v \u2032 \u03c8 (v,v \u2032 ) c * ,c \u2032 \u2212 \u03c8 (v,v \u2032 ) c \u2032 ,c * \u2212 \u03c8 (v \u2032 ,v) c * ,c \u2032 \u2212 \u03c8 (v \u2032 ,v) c \u2032 ,c * \u2265 w c * for all v c \u2032 :c\u227bvc \u2032 \u03c6 (v) c,c \u2032 \u2212 c \u2032 :c \u2032 \u227bvc \u03c6 (v) c \u2032 ,c + c \u2032 ,v \u2032 \u03c8 (v,v \u2032 ) c,c \u2032 \u2212 \u03c8 (v,v \u2032 ) c \u2032 ,c \u2212 \u03c8 (v \u2032 ,v) c,c \u2032 \u2212 \u03c8 (v \u2032 ,v) c \u2032 ,c \u2265 w c for all c = c * , v \u03c8 (v,v \u2032 ) c,c \u2032 \u2265 0 for all v, v \u2032 , c, c \u2032 \u03c6 (v) c,c \u2032 \u2265 0 for all v, c, c \u2032 .(2)\nThe dual has three types of variables:\n-\u03c8 (v,v \u2032 ) c,c \u2032 for the triangle inequality constraints -\u03c6 (v)\nc,c \u2032 for the consistency constraints \u03b1 for the normalization constraint.\nBecause the normalization constraint is an equality constraint, \u03b1 is unconstrained. Now consider a candidate c * for whom the adversary can achieve the largest primal LP value, i.e., who is a witness for the maximum distortion. Fix such a candidate c * for the rest of the proof, and let g = g c * be a (w, c * )-flow on H E of cost at most \u03bb -such a flow g exists by assumption of the lemma. We use g to determine values for the dual variables, and show that the proposed dual solution is feasible. Furthermore, we show that the dual objective value is cost(g) \u2264 \u03bb. By weak LP duality, this implies that the primal is upper-bounded by cost(g), i.e., that the adversary cannot force expected distortion larger than cost(g) by using the candidate c * . Since c * gave the largest distortion bound, we obtain an upper bound on the expected distortion under w. This will complete the proof. The dual variables are set as follows:\n-For each voter v and candidates c, c \u2032 , we set \u03c6 First observe that the dual objective value is indeed \u03b1 = cost(g). Also, non-negativity of the dual variables is obviously satisfied. Next, we verify that both sets of dual constraints are satisfied by the dual variables values we assigned.\n-To verify the first set of constraints, fix a voter v, and rearrange the constraint to\nw c * + \uf8eb \uf8ed c \u2032 :c \u2032 \u227bvc * \u03c6 (v) c \u2032 ,c * + c \u2032 ,v \u2032 \u03c8 (v \u2032 ,v) c * ,c \u2032 \uf8f6 \uf8f8 \u2212 \uf8eb \uf8ed c \u2032 :c * \u227bvc \u2032 \u03c6 (v) c * ,c \u2032 + c \u2032 ,v \u2032 \u03c8 (v,v \u2032 ) c * ,c \u2032 \uf8f6 \uf8f8 + \uf8eb \uf8ed c \u2032 ,v \u2032 \u03c8 (v,v \u2032 ) c \u2032 ,c * + c \u2032 ,v \u2032 \u03c8 (v \u2032 ,v) c \u2032 ,c * \uf8f6 \uf8f8 \u2264 \u03b1. (3)\nWe now substitute the definitions of the dual variables. Note that whenever c \u2032 = c * , our definition implies that \u03c8\n(v \u2032 ,v)\nc * ,c \u2032 = 0. The left-hand side then becomes\nw c * + \uf8eb \uf8ed c \u2032 :c \u2032 \u227bvc * g (v,c \u2032 )\u2192(v,c * ) + v \u2032 g (v \u2032 ,c * )\u2192(v,c * ) \uf8f6 \uf8f8 \u2212 \uf8eb \uf8ed c \u2032 :c * \u227bvc \u2032 g (v,c * )\u2192(v,c \u2032 ) + v \u2032 g (v,c * )\u2192(v \u2032 ,c * ) \uf8f6 \uf8f8 + \uf8eb \uf8ed c \u2032 ,v \u2032 g (v,c \u2032 )\u2192(v \u2032 ,c \u2032 ) + c \u2032 ,v \u2032 g (v \u2032 ,c \u2032 )\u2192(v,c \u2032 ) \uf8f6 \uf8f8 . (4)\nHere, notice that the first term is the flow originating at (v, c * ). The second term is the total flow entering (v, c * ), and the third term is the total flow leaving (v, c * ). Thus, the combination of the first three terms is the total flow absorbed at (v, c * ). The final (fourth) term is the total flow along sideways edges entering or leaving nodes of the form (v, c) for the particular voter v fixed.\nThus, the left-hand side of the (rearranged) dual constraint is exactly the cost cost v (g). In particular, it is bounded by cost(g) = \u03b1, implying that the constraint is satisfied by the chosen dual variables.\n-Next, we consider the second set of dual constraints, and fix a voter v and candidate c = c * . We again rearrange the constraint to make the gist of the analysis clear:\nw c + \uf8eb \uf8ed c \u2032 :c \u2032 \u227bvc \u03c6 (v) c \u2032 ,c + c \u2032 ,v \u2032 \u03c8 (v \u2032 ,v) c,c \u2032 \uf8f6 \uf8f8 \u2212 \uf8eb \uf8ed c \u2032 :c\u227bvc \u2032 \u03c6 (v) c,c \u2032 + c \u2032 ,v \u2032 \u03c8 (v,v \u2032 ) c,c \u2032 \uf8f6 \uf8f8 + \uf8eb \uf8ed c \u2032 ,v \u2032 \u03c8 (v,v \u2032 ) c \u2032 ,c + c \u2032 ,v \u2032 \u03c8 (v \u2032 ,v) c \u2032 ,c \uf8f6 \uf8f8 \u2264 0.\nHere, we first notice that because c = c * , by definition, all the terms \u03c8 (v,v \u2032 ) c \u2032 ,c and \u03c8\n(v \u2032 ,v)\nc \u2032 ,c in the last two sums are 0. Similarly, in the second and fourth sums, all terms for c \u2032 = c * are 0. Substituting the definitions for the remaining dual variables, the left-hand side equals\nw c + \uf8eb \uf8ed c \u2032 :c \u2032 \u227bvc g (v,c \u2032 )\u2192(v,c) + v \u2032 g (v \u2032 ,c)\u2192(v,c) \uf8f6 \uf8f8 \u2212 \uf8eb \uf8ed c \u2032 :c\u227bvc \u2032 g (v,c)\u2192(v,c \u2032 ) + v \u2032 g (v,c)\u2192(v \u2032 ,c) \uf8f6 \uf8f8 .\nHere, observe that the first term w c is the amount of flow inserted at (v, c), the second term is the amount of flow entering the node (v, c) along preference or sideways edges, and the third term is the amount of flow leaving the node (v, c) along preference or sideways edges. Thus, the left-hand side is exactly the difference between incoming and outgoing flow at (v, c), and because g was assumed to be a valid (w, c * )-flow on H E (and c = c * ), this net flow must be 0. Therefore, the dual constraint is satisfied.\nThis completes the proof.", "publication_ref": ["b23", "b2", "b19", "b1"], "figure_ref": [], "table_ref": []}], "references": [{"ref_id": "b0", "title": "Randomized social choice functions under metric preferences", "journal": "", "year": "2016", "authors": "Elliot Anshelevich; John Postl"}, {"ref_id": "b1", "title": "Approximating optimal social choice under metric preferences", "journal": "", "year": "2015", "authors": "Elliot Anshelevich; Onkar Bhardwaj; John Postl"}, {"ref_id": "b2", "title": "Approximating optimal social choice under metric preferences", "journal": "Artificial Intelligence", "year": "2018", "authors": "Elliot Anshelevich; Onkar Bhardwaj; Edith Elkind; John Postl; Piotr Skowron"}, {"ref_id": "b3", "title": "Distortion in social choice problems: an annotated reading list", "journal": "SIGecom Exchanges", "year": "2021", "authors": "Elliot Anshelevich; Aris Filos-Ratsikas; Nisarg Shah; Alexandros A Voudouris"}, {"ref_id": "b4", "title": "Distortion in social choice problems: The first 15 years and beyond", "journal": "", "year": "2021", "authors": "Elliot Anshelevich; Aris Filos-Ratsikas; Nisarg Shah; Alexandros A Voudouris"}, {"ref_id": "b5", "title": "Comparing election methods where each voter ranks only few candidates", "journal": "", "year": "2020", "authors": "Matthias Bentert; Piotr Skowron"}, {"ref_id": "b6", "title": "On the rationale of group decision making", "journal": "J. Political Economy", "year": "1948", "authors": "Duncan Black"}, {"ref_id": "b7", "title": "Incomplete information and communication in voting", "journal": "Cambridge University Press", "year": "2016", "authors": "Craig Boutilier; Jeffrey S Rosenschein"}, {"ref_id": "b8", "title": "Optimal social choice functions: A utilitarian view", "journal": "Artificial Intelligence", "year": "2015", "authors": "Craig Boutilier; Ioannis Caragiannis; Simi Haber; Tyler Lu; Ariel D Procaccia; Or Sheffet"}, {"ref_id": "b9", "title": "Voting almost maximizes social welfare despite limited communication", "journal": "Artificial Intelligence", "year": "2011", "authors": "Ioannis Caragiannis; Ariel D Procaccia"}, {"ref_id": "b10", "title": "Subset selection via implicit utilitarian voting", "journal": "Journal of Artificial Intelligence Research", "year": "2017", "authors": "Ioannis Caragiannis; Swaprava Nath; Ariel D Procaccia; Nisarg Shah"}, {"ref_id": "b11", "title": "The metric distortion of multiwinner voting", "journal": "Artificial Intelligence", "year": "2022", "authors": "Ioannis Caragiannis; Nisarg Shah; Alexandros A Voudouris"}, {"ref_id": "b12", "title": "Metric distortion bounds for randomized social choice", "journal": "", "year": "2022", "authors": "Moses Charikar; Prasanna Ramakrishnan"}, {"ref_id": "b13", "title": "Favorite-candidate voting for eliminating the least popular candidate in a metric space", "journal": "", "year": "2020", "authors": "Xujin Chen; Minming Li; Chenhao Wang"}, {"ref_id": "b14", "title": "Vote elicitation: Complexity and strategy-proofness", "journal": "", "year": "2002", "authors": "Vincent Conitzer; Tuomas Sandholm"}, {"ref_id": "b15", "title": "Random dictators with a random referee: Constant sample complexity mechanisms for social choice", "journal": "", "year": "2019", "authors": "Brandon Fain; Ashish Goel; Kamesh Munagala; Nina Prabhu"}, {"ref_id": "b16", "title": "On voting and facility location", "journal": "", "year": "2016", "authors": "Michal Feldman; Amos Fiat; Iddan Golomb"}, {"ref_id": "b17", "title": "Manipulation of voting schemes: a general result", "journal": "Econometrica", "year": "1973", "authors": "Alan F Gibbard"}, {"ref_id": "b18", "title": "Resolving the optimal metric distortion conjecture", "journal": "", "year": "2020", "authors": "Vasilis Gkatzelis; Daniel Halpern; Nisarg Shah"}, {"ref_id": "b19", "title": "Metric distortion of social choice rules: Lower bounds and fairness properties", "journal": "", "year": "2017", "authors": "Ashish Goel; Anilesh Kollagunta Krishnaswamy; Kamesh Munagala"}, {"ref_id": "b20", "title": "Relating metric distortion and fairness of social choice rules", "journal": "", "year": "2018", "authors": "Ashish Goel; Reyna Hulett; Anilesh Kollagunta Krishnaswamy"}, {"ref_id": "b21", "title": "Vote until two of you agree: Mechanisms with small distortion and sample complexity", "journal": "", "year": "2017", "authors": "Stephen Gross; Elliot Anshelevich; Lirong Xia"}, {"ref_id": "b22", "title": "Communication, distortion, and randomness in metric voting", "journal": "", "year": "2020", "authors": "David Kempe"}, {"ref_id": "b23", "title": "An analysis framework for metric voting based on LP duality", "journal": "", "year": "2020", "authors": "David Kempe"}, {"ref_id": "b24", "title": "Efficient and thrifty voting by any means necessary", "journal": "", "year": "2019", "authors": "Debmalya Mandal; Ariel D Procaccia; Nisarg Shah; David P Woodruff"}, {"ref_id": "b25", "title": "On strategy-proofness and single peakedness", "journal": "Public Choice", "year": "1980", "authors": "Herv\u00e9 Moulin"}, {"ref_id": "b26", "title": "Improved metric distortion for deterministic social choice rules", "journal": "", "year": "2019", "authors": "Kamesh Munagala; Kangning Wang"}, {"ref_id": "b27", "title": "Approval-based elections and distortion of voting rules", "journal": "", "year": "2019", "authors": "Grzegorz Pierczy\u0144ski; Piotr Skowron"}, {"ref_id": "b28", "title": "Can approximation circumvent Gibbard-Satterthwaite?", "journal": "", "year": "2010", "authors": "Ariel D Procaccia"}, {"ref_id": "b29", "title": "The distortion of cardinal preferences in voting", "journal": "", "year": "2006", "authors": "Ariel D Procaccia; Jeffrey S Rosenschein"}, {"ref_id": "b30", "title": "Strategy-proofness and Arrow's conditions: Existence and correspondence theorems for voting procedures and social welfare functions", "journal": "Journal of Economic Theory", "year": "1975", "authors": "A Mark;  Satterthwaite"}, {"ref_id": "b31", "title": "Honeybee Democracy", "journal": "Princeton University Press", "year": "2010", "authors": "Thomas D Seeley"}], "figures": [{"figure_label": "", "figure_type": "figure", "figure_id": "fig_0", "figure_caption": "Ametric over a set S is a function d : S \u00d7 S \u2192 R \u22650 which satisfies the following conditions for all a, b, c \u2208 S: (1) Positive Definiteness: d(a, b) = 0 if and only 3 if a = b; (2) Symmetry: d(a, b) = d(b, a); (3) Triangle inequality: d(a, b) + d(b, c) \u2265 d(a, c).", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_1", "figure_caption": "to denote the domain of metrics consistent with #-\u227b. The (utilitarian) social cost of a candidate c with respect to a metric d is defined as the candidate's sum of distances to all voters: cost(c, d) = v\u2208V d(v, c). A candidate c * d is optimal with respect to the metric d if c * d \u2208 arg min c\u2208C cost(c, d). The distortion of a voting rule f , denoted by dist(f ), is the largest possible ratio between the cost of the winner of f and that of an optimal candidate c * d , with respect to the worst possible metric", "figure_data": ""}, {"figure_label": "2", "figure_type": "figure", "figure_id": "fig_2", "figure_caption": "Theorem 2 .2Given any election E = (V, C, #-\u227b), and any weight vectors p \u2208 \u2206(V ) and q \u2208 \u2206(C), FRACTIONALVETO returns a candidate c \u2208 C whose (p, q)-domination graph G E p,q (c) has a fractional perfect matching.", "figure_data": ""}, {"figure_label": "589", "figure_type": "figure", "figure_id": "fig_3", "figure_caption": "5 :A 8 : 9 :589= {c \u2208 C | weight(c) > 0} 6: c = bottom A (v) 7: \u01eb = min {weight(v), weight(c)} decrement weight(v) by \u01eb decrement weight(c) by \u01eb 10: return c (i.e., the last candidate whose weight is decremented)", "figure_data": ""}, {"figure_label": "41", "figure_type": "figure", "figure_id": "fig_4", "figure_caption": "4 Figure 1 :41Figure 1: An illustration of a flow network H E . In the example E, there are 4 voters and 4 candidates. The voter preferences are the following:v 1 : c 1 \u227b c 2 \u227b c 3 \u227b c 4 ; v 2 : c 1 \u227b c 3 \u227b c 4 \u227b c 2 ; v 3 : c 2 \u227b c 3 \u227b c 4 \u227b c 1 ; v 4 : c 4 \u227b c 2 \u227b c 1 \u227b c 3 .Preference edges are shown in black, while sideways edges are shown in red. For legibility, we have omitted preference edges that could be replaced by a path of two or more other preference edges, e.g., the edge from (v 1 , c 1 ) \u2192 (v 1 , c 3 ).", "figure_data": ""}, {"figure_label": "2", "figure_type": "figure", "figure_id": "fig_6", "figure_caption": "Figure 2 :2Figure 2: An illustration of a (w, c * )-flow on the flow network from Fig. 1, for w = (2/3, 1/3, 0, 0) and c * = c 4 .Edges are only shown when they are used by the flow. Incoming flow is shown in blue. Flow routed along preference edges is shown in black, while flow routed sideways is shown in red to emphasize that it contributes to the cost. The amount of flow is given numerically, and also shown using the width of the lines/arcs. The costs for each voter are shown at the bottom of the corresponding column. The overall cost is the maximum cost, i.e., 3.", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_7", "figure_caption": "(v) c,c \u2032 to be the flow on the preference edge (v, c) \u2192 (v, c \u2032 ), i.e., we set \u03c6(v) c,c \u2032 = g (v,c)\u2192(v,c \u2032 ) .-For each pair of voters v, v \u2032 and candidate c, we set \u03c8(v,v \u2032 ) c,c * to be the flow on the sideways edge (v, c) \u2192 (v \u2032 , c), i.e., we set \u03c8 (v,v \u2032 ) c,c * = g (v,c)\u2192(v \u2032 ,c) . Notice that \u03c8 (v,v \u2032 )c,c * has four arguments, and we choose c * for the fourth argument.-We set \u03b1 = cost(g) = max v cost v (g).-All other dual variables (in particular \u03c8 (v,v \u2032 ) c,c \u2032 for c \u2032 = c * ) are set to 0.", "figure_data": ""}], "formulas": [{"formula_id": "formula_0", "formula_text": "\u227b v of voter v if d(v, c) \u2264 d(v, c \u2032 ) for all c, c \u2032 \u2208 C such that c \u227b v c \u2032 . We say that d is consistent with the ranked-choice profile #- \u227b if it is consistent with the ranking \u227b v for all voters v \u2208 V . We use D( #- \u227b)", "formula_coordinates": [5.0, 72.0, 378.98, 467.92, 33.97]}, {"formula_id": "formula_1", "formula_text": "d \u2208 D( #- \u227b). That is, dist(f ) = max #- \u227b sup d\u2208D( #- \u227b) cost(f ( #- \u227b), d) cost(c * d , d) .", "formula_coordinates": [5.0, 141.12, 473.84, 248.66, 53.88]}, {"formula_id": "formula_2", "formula_text": "E = (V, C, #- \u227b), the domination graph of a candidate c \u2208 C is the bipartite graph G E (c) = (V, V, E c ) where (v, v \u2032 ) \u2208 E c if and only if c v top(v \u2032 ).", "formula_coordinates": [5.0, 72.0, 578.0, 467.68, 33.92]}, {"formula_id": "formula_3", "formula_text": "E = (V, C, #- \u227b), the domination graph G E (f ( #- \u227b)", "formula_coordinates": [6.0, 72.0, 73.04, 467.81, 33.92]}, {"formula_id": "formula_4", "formula_text": "A i = {c \u2208 C | score(c) > 0} 5: c i = bottom A i (v i ) 6: decrement score(c i ) by 1 7: return c n Theorem 1. The distortion of PLURALITYVETO is 3.", "formula_coordinates": [6.0, 72.0, 483.82, 237.45, 92.88]}, {"formula_id": "formula_5", "formula_text": "G E p,q ( c) = (V, C, E c , p, q); the edge (v, c) \u2208 E c if and only if c v c. A fractional perfect matching of G E p,q ( c) is a weight function w : E c \u2192 R \u22650 such that c\u2208C:(v,c)\u2208E c w(v, c) = p v", "formula_coordinates": [7.0, 72.0, 295.58, 467.91, 35.05]}, {"formula_id": "formula_6", "formula_text": "p uni v = 1/n for all v \u2208 V and q plu c = plu(c)/n for all c \u2208 C.", "formula_coordinates": [7.0, 252.72, 364.55, 287.37, 21.28]}, {"formula_id": "formula_7", "formula_text": "\u227b) \u2208 \u2206(C). Writing w = f ( #- \u227b)", "formula_coordinates": [8.0, 205.44, 565.76, 140.1, 20.48]}, {"formula_id": "formula_8", "formula_text": "A i = {c \u2208 C | score(c) > 0} 5: c i = bottom A i (v i ) 6: decrement score(c i ) by 1 7: return w c = score(c)/(n \u2212 k) for all c \u2208 C", "formula_coordinates": [9.0, 78.12, 217.78, 205.07, 65.09]}, {"formula_id": "formula_9", "formula_text": "Theorem 3. The distortion of k-ROUNDPLURALITYVETO is at most 3 for any k \u2208 {0, 1, . . . , n \u2212 1}.", "formula_coordinates": [9.0, 72.0, 314.02, 447.09, 18.65]}, {"formula_id": "formula_10", "formula_text": "(v, c) \u2194 (v \u2032 , c) in E.", "formula_coordinates": [9.0, 99.24, 460.82, 92.61, 20.41]}, {"formula_id": "formula_11", "formula_text": "cost v (g) = e into (v,c * ) g e + c =c * v \u2032 =v g (v \u2032 ,c)\u2194(v,c) where g u\u2194u \u2032 = g u\u2192u \u2032 + g u \u2032 \u2192u .", "formula_coordinates": [9.0, 83.52, 590.74, 456.44, 26.85]}, {"formula_id": "formula_12", "formula_text": "v 1 : c 1 \u227b c 2 \u227b c 3 \u227b c 4 ; v 2 : c 1 \u227b c 3 \u227b c 4 \u227b c 2 ; v 3 : c 2 \u227b c 3 \u227b c 4 \u227b c 1 ; v 4 : c 4 \u227b c 2 \u227b c 1 \u227b c 3 .", "formula_coordinates": [10.0, 72.0, 334.53, 468.01, 29.04]}, {"formula_id": "formula_13", "formula_text": "(v 1 , c 1 ) \u2192 (v 1 , c 3 ).", "formula_coordinates": [10.0, 115.2, 370.41, 78.45, 17.04]}, {"formula_id": "formula_14", "formula_text": "V k = {v 1 , . . . , v k } and V k = {v k+1 , . . . , v n }; also V \u2032 k = {v \u2032 1 , . . . , v \u2032 k } and V \u2032 k = {v \u2032 k+1 , . . . , v \u2032 n }.", "formula_coordinates": [10.0, 70.92, 519.94, 469.01, 32.21]}, {"formula_id": "formula_15", "formula_text": "(v i , bottom A i (v i ))", "formula_coordinates": [10.0, 99.24, 640.3, 81.58, 11.85]}, {"formula_id": "formula_16", "formula_text": "\u2032 i , bottom A i (v i )) = (v \u2032 i , top(v \u2032 i )", "formula_coordinates": [10.0, 377.16, 638.54, 141.5, 15.05]}, {"formula_id": "formula_17", "formula_text": "(v i , c) (for v i \u2208 V k ) to the score(c) nodes (v \u2032 j , c) with top(v \u2032 j ) = c, in a way that each voter v \u2032 j \u2208 V \u2032 k", "formula_coordinates": [11.0, 99.24, 460.34, 440.01, 20.41]}, {"formula_id": "formula_18", "formula_text": "Maximize c w c \u2022 v x v,c subject to x v,c \u2264 x v \u2032 ,c + x v \u2032 ,c \u2032 + x v,c \u2032 for all c, c \u2032 , v, v \u2032 (\u25b3 Inequality) x v,c \u2264 x v,c \u2032 for all c, c \u2032 , v such that c \u227b v c \u2032 (consistency) v x v,c * = 1 (normalization) x v,c \u2265 0 for all c, v.(1)", "formula_coordinates": [17.0, 88.2, 372.34, 451.71, 72.77]}, {"formula_id": "formula_19", "formula_text": "Minimize \u03b1 subject to \u03b1 + c \u2032 :c * \u227bvc \u2032 \u03c6 (v) c * ,c \u2032 \u2212 c \u2032 :c \u2032 \u227bvc * \u03c6 (v) c \u2032 ,c * + c \u2032 ,v \u2032 \u03c8 (v,v \u2032 ) c * ,c \u2032 \u2212 \u03c8 (v,v \u2032 ) c \u2032 ,c * \u2212 \u03c8 (v \u2032 ,v) c * ,c \u2032 \u2212 \u03c8 (v \u2032 ,v) c \u2032 ,c * \u2265 w c * for all v c \u2032 :c\u227bvc \u2032 \u03c6 (v) c,c \u2032 \u2212 c \u2032 :c \u2032 \u227bvc \u03c6 (v) c \u2032 ,c + c \u2032 ,v \u2032 \u03c8 (v,v \u2032 ) c,c \u2032 \u2212 \u03c8 (v,v \u2032 ) c \u2032 ,c \u2212 \u03c8 (v \u2032 ,v) c,c \u2032 \u2212 \u03c8 (v \u2032 ,v) c \u2032 ,c \u2265 w c for all c = c * , v \u03c8 (v,v \u2032 ) c,c \u2032 \u2265 0 for all v, v \u2032 , c, c \u2032 \u03c6 (v) c,c \u2032 \u2265 0 for all v, c, c \u2032 .(2)", "formula_coordinates": [17.0, 113.76, 496.9, 426.15, 124.49]}, {"formula_id": "formula_20", "formula_text": "-\u03c8 (v,v \u2032 ) c,c \u2032 for the triangle inequality constraints -\u03c6 (v)", "formula_coordinates": [18.0, 88.44, 91.08, 202.72, 40.88]}, {"formula_id": "formula_21", "formula_text": "w c * + \uf8eb \uf8ed c \u2032 :c \u2032 \u227bvc * \u03c6 (v) c \u2032 ,c * + c \u2032 ,v \u2032 \u03c8 (v \u2032 ,v) c * ,c \u2032 \uf8f6 \uf8f8 \u2212 \uf8eb \uf8ed c \u2032 :c * \u227bvc \u2032 \u03c6 (v) c * ,c \u2032 + c \u2032 ,v \u2032 \u03c8 (v,v \u2032 ) c * ,c \u2032 \uf8f6 \uf8f8 + \uf8eb \uf8ed c \u2032 ,v \u2032 \u03c8 (v,v \u2032 ) c \u2032 ,c * + c \u2032 ,v \u2032 \u03c8 (v \u2032 ,v) c \u2032 ,c * \uf8f6 \uf8f8 \u2264 \u03b1. (3)", "formula_coordinates": [18.0, 109.2, 495.88, 442.39, 70.67]}, {"formula_id": "formula_22", "formula_text": "(v \u2032 ,v)", "formula_coordinates": [18.0, 160.68, 578.76, 20.45, 9.07]}, {"formula_id": "formula_23", "formula_text": "w c * + \uf8eb \uf8ed c \u2032 :c \u2032 \u227bvc * g (v,c \u2032 )\u2192(v,c * ) + v \u2032 g (v \u2032 ,c * )\u2192(v,c * ) \uf8f6 \uf8f8 \u2212 \uf8eb \uf8ed c \u2032 :c * \u227bvc \u2032 g (v,c * )\u2192(v,c \u2032 ) + v \u2032 g (v,c * )\u2192(v \u2032 ,c * ) \uf8f6 \uf8f8 + \uf8eb \uf8ed c \u2032 ,v \u2032 g (v,c \u2032 )\u2192(v \u2032 ,c \u2032 ) + c \u2032 ,v \u2032 g (v \u2032 ,c \u2032 )\u2192(v,c \u2032 ) \uf8f6 \uf8f8 . (4)", "formula_coordinates": [18.0, 109.2, 600.16, 434.59, 90.07]}, {"formula_id": "formula_24", "formula_text": "w c + \uf8eb \uf8ed c \u2032 :c \u2032 \u227bvc \u03c6 (v) c \u2032 ,c + c \u2032 ,v \u2032 \u03c8 (v \u2032 ,v) c,c \u2032 \uf8f6 \uf8f8 \u2212 \uf8eb \uf8ed c \u2032 :c\u227bvc \u2032 \u03c6 (v) c,c \u2032 + c \u2032 ,v \u2032 \u03c8 (v,v \u2032 ) c,c \u2032 \uf8f6 \uf8f8 + \uf8eb \uf8ed c \u2032 ,v \u2032 \u03c8 (v,v \u2032 ) c \u2032 ,c + c \u2032 ,v \u2032 \u03c8 (v \u2032 ,v) c \u2032 ,c \uf8f6 \uf8f8 \u2264 0.", "formula_coordinates": [19.0, 99.24, 198.16, 443.78, 46.75]}, {"formula_id": "formula_25", "formula_text": "(v \u2032 ,v)", "formula_coordinates": [19.0, 455.04, 255.96, 20.45, 8.95]}, {"formula_id": "formula_26", "formula_text": "w c + \uf8eb \uf8ed c \u2032 :c \u2032 \u227bvc g (v,c \u2032 )\u2192(v,c) + v \u2032 g (v \u2032 ,c)\u2192(v,c) \uf8f6 \uf8f8 \u2212 \uf8eb \uf8ed c \u2032 :c\u227bvc \u2032 g (v,c)\u2192(v,c \u2032 ) + v \u2032 g (v,c)\u2192(v \u2032 ,c) \uf8f6 \uf8f8 .", "formula_coordinates": [19.0, 114.6, 302.68, 410.18, 46.75]}], "doi": ""}