{"title": "Analysis of Contour Motions", "authors": "Ce Liu; William T Freeman; Edward H Adelson", "pub_date": "", "abstract": "A reliable motion estimation algorithm must function under a wide range of conditions. One regime, which we consider here, is the case of moving objects with contours but no visible texture. Tracking distinctive features such as corners can disambiguate the motion of contours, but spurious features such as T-junctions can be badly misleading. It is difficult to determine the reliability of motion from local measurements, since a full rank covariance matrix can result from both real and spurious features. We propose a novel approach that avoids these points altogether, and derives global motion estimates by utilizing information from three levels of contour analysis: edgelets, boundary fragments and contours. Boundary fragment are chains of orientated edgelets, for which we derive motion estimates from local evidence. The uncertainties of the local estimates are disambiguated after the boundary fragments are properly grouped into contours. The grouping is done by constructing a graphical model and marginalizing it using importance sampling. We propose two equivalent representations in this graphical model, reversible switch variables attached to the ends of fragments and fragment chains, to capture both local and global statistics of boundaries. Our system is successfully applied to both synthetic and real video sequences containing high-contrast boundaries and textureless regions. The system produces good motion estimates along with properly grouped and completed contours.", "sections": [{"heading": "Introduction", "text": "Humans can reliably analyze visual motion under a diverse set of conditions, including textured as well as featureless objects. Computer vision algorithms have focussed on conditions of texture, where junction or corner-like image structures are assumed to be reliable features for tracking [5,4,17]. But under other conditions, these features can generate spurious motions. T-junctions caused by occlusion can move in an image very differently than either of the objects involved in the occlusion event [11]. To properly analyze motions of featureless objects requires a different approach.\nThe spurious matching of T-junctions has been explained in [18] and [9]. We briefly restate it using the simple two bar stimulus in Figure 1 (from [18]). The gray bar is moving rightward in front of the leftward moving black bar, (a). If we analyze the motion locally, i.e. match to the next frame in a local circular window, the flow vectors of the corner and line points are as displayed in Figure 1 (b). The T-junctions located at the intersections of the two bars move downwards, but there is no such a motion by the depicted objects.\nOne approach to handling the spurious motions of corners or T-junctions has been to detect such junctions and remove them from the motion analysis [18,12]. However, T-junctions are often very difficult to detect in a static image from local, bottom-up information [9]. Motion at occluding boundaries has been studied, for example in [1]. The boundary motion is typically analyzed locally, which can again lead to spurious junction trackings. We are not aware of an existing algorithm that can properly analyze the motions of featureless objects.\nIn this paper, we use a boundary-based approach which does not rely on motion estimates at corners or junctions. We develop a graphical model which integrates local information and assigns probabilities to candidate contour groupings in order to favor motion interpretations corresponding to the motions of the underlying objects. Boundary completion and discounting the motions of spurious features result from optimizing the graphical model states to explain the contours and their motions.\nOur system is able to automatically detect and group the boundary fragments, analyze the motion correctly, as well as exploit both static and dynamic cues to synthesize the illusory boundaries (c).\nWe represent the boundaries at three levels of grouping: edgelets, boundary fragments and contours, where a fragment is a chain of edgelets and a contour is a chain of fragments. Each edgelet within a boundary fragment has a position and an orientation and carries local evidence for motion. The main task of our model is then to group the boundary fragments into contours so that the local motion uncertainties associated with the edgelets are disambiguated and occlusion or other spurious feature events are properly explained. The result is a specialized motion tracking algorithm that properly analyzes the motions of textureless objects.\nOur system consists of four conceptual steps, discussed over the next three sections (the last two steps happen together while finding the optimal states in the graphical model): We restrict the problem to two-frame motion analysis though the algorithm can easily be extended to multiple frames.", "publication_ref": ["b4", "b3", "b17", "b10", "b18", "b8", "b18", "b18", "b12", "b8", "b0"], "figure_ref": ["fig_0", "fig_0"], "table_ref": []}, {"heading": "Boundary Fragment Extraction", "text": "Extracting boundaries from images is a nontrivial task by itself. We use a simple algorithm for boundary extraction, analyzing oriented energy using steerable filters [3] and tracking the boundary in a manner similar to that of the Canny edge detector [2]. A more sophisticated boundary detector can be found in [8]; occluding boundaries can also be detected using special cameras [13]. However, for our motion algorithm designed to handle the special case of textureless objects, we find that our simple boundary detection algorithm works well.\nMathematically, given an image I, we seek to obtain a set of fragments B = {b i }, where each fragment b i is a chain of edgelets b i = {e ik } ni k=1 . Each edgelet e ik = {p ik , \u03b8 ik } is a particle which embeds both location p ik \u2208 R 2 and orientation \u03b8 ik \u2208 [0, 2\u03c0) information. We use H4 and G4 steerable filters [3] to filter the image and obtain orientation energy per pixel. These filters are selected because they describe the orientation energies well even at corners. For each pixel we find the maximum energy orientation and check if it is local maximum within a slice perpendicular to this orientation. If that is true and the maximum energy is above a threshold T 1 we call this point a primary boundary point. We collect a pool of primary boundary points after running this test for all the pixels.\nWe find the primary boundary point with the maximum orientation energy from the pool and do bidirectional contour tracking, consisting of prediction and projection steps. In the prediction step, the current edgelet generates a new one by following its orientation with a certain step size. In the projection step, the orientation is locally maximized both in the orientation bands and within a small spatial window. The tracking is stopped if the energy is below a threshold T 2 or if the turning angle is above a threshold. The primary boundary points that are close to the tracked trajectory are removed from the pool. This process is repeated until the pool is empty. The two thresholds T 1 and T 2 play the same roles as those in Canny edge detection [2]. While the boundary tracker should stop at sharp corners, it can turn around and continue tracking. We run a postprocess to break the boundaries by detecting points of curvature local maxima which exceed a curvature threshold.", "publication_ref": ["b2", "b1", "b7", "b13", "b2", "b1"], "figure_ref": [], "table_ref": []}, {"heading": "Edgelet Tracking with Uncertainties", "text": "We next break the boundary contours into very short edgelets and obtain the probabilities, based on local motion of the boundary fragment, for the motion vector at each edgelet. We cannot use conventional algorithms, such as Lucas-Kanade [5], for local motion estimation since they rely on corners. The orientation \u03b8 ik for each edgelet was obtained during boundary fragment extraction. We obtain the motion vector by finding the spatial offsets of the edgelet which match the orientation energy along the boundary fragment in this orientation. We fit a Gaussian distribution N (\u03bc ik , \u03a3 ik ) of the flow weighted by the orientation energy in the window. The mean and covariance matrix is added to the edgelet: e ik = {p ik , \u03b8 ik , \u03bc ik , \u03a3 ik }. This procedure is illustrated in Figure 2.\nGrouping the boundary fragments allows the motion uncertainties to be resolved. We next discuss the mathematical model of grouping as well as the computational approach.", "publication_ref": ["b4"], "figure_ref": ["fig_2"], "table_ref": []}, {"heading": "Boundary Fragment Grouping and Motion Estimation 4.1 Two Equivalent Representations for Fragment Grouping", "text": "The essential part of our model is to find the connection between the boundary fragments. There are two possible representations for grouping. One representation is the connection of each end of the boundary fragment. We formulate the probability of this connection to model the local saliency of contours. The other equivalent representation is a chain of fragments that forms a contour, on which global statistics are formulated, e.g. structural saliency [16]. Similar local and global modeling of contour saliency was proposed in [14]; in [7], both edge saliency and curvilinear continuity were used to extract closed contours from static images. In [15], contour ends are grouped using loopy belief propagation to interpret contours.\nThe connections between fragment ends are modeled by switch variables. For each boundary fragment b i , we use a binary variable {0, 1} to denote the two ends of the fragment, i.e. b\ni = e i1 and b (1) i = e i,ni . Let switch variable S(i, t i ) = (j, t j ) denote the connection from b if S(i, t i ) = (j, t j ), then S(j, t j ) = (i, t i ), or in a more compact form S(S(i, t i )) = (i, t i ).\n(\n)1\nWhen there is no connection to b (ti) i , we simply set S(i, t i ) = (i, t i ). We use the binary function \u03b4[S(i, t i )\u2212(j, t j )] to indicate whether there is a connection between b (ti) i and b\n(tj ) j . The set of all the switches are denoted as S = {S(i, t i )|i = 1 : N, t i = 0, 1}. We say S is reversible if every switch variable satisfies Eqn. (1). The reversibility of switch variables is shown in Figure 3 (b) and (c).\nFrom the values of the switch variables we can obtain contours, which are chains of boundary fragments. A fragment chain is defined as a series of the end points c = {(b \n(x1) i1 , b (x1) i1 ), \u2022 \u2022 \u2022 , (b (xm) im , b (xm) im )}.", "publication_ref": ["b16", "b14", "b6", "b15", "b0", "b0"], "figure_ref": [], "table_ref": []}, {"heading": "The Graphical Model", "text": "Given the observation O, the two images, and the boundary fragments B, we want to estimate the flow vectors V = {v i } and v i = {v ik }, where each v ik associates with edgelet e ik , and the grouping variables S (switches) or equivalently C (fragment chains). Since the grouping variable S plays an essential role in the problem, we shall first infer S and then infer V based on S.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "The Graph for Boundary Fragment Grouping", "text": "We use two equivalent representations for boundary grouping, switch variables and chains. We use \u03b4[S(S(i, t i )) \u2212 (i, t i )] for each end to enforce the reversibility. Suppose otherwise S(i 1 , t i1 ) = S(i 2 , t i2 ) = (j, t j ) for i 1 = i 2 . Let S(j, t j ) = (i 1 , t i1 ) without loss of generality, then \u03b4[S(S(i 2 , t i2 )) \u2212 (i 2 , t i2 )] = 0, which means that the switch variables are not reversible.\nWe use a function \u03bb(S(i, t i ); B, O) to measure the distribution of S(i, t i ), i.e. how likely b (ti) i connects to the end of other fragments. Intuitively, two ends should be connected if Motion similarity the distributions of the motion of the two end edgelets are similar; Curve smoothness the illusory boundary to connect the two ends is smooth; Contrast consistency the brightness contrast at the two ends consistent with each other.\nWe write \u03bb(\u2022) as a product of three terms, one enforcing each criterion. We shall follow the example in Figure 4 \nwhere \u03b1 KL is a scaling factor. The second term is the local saliency measure on the illusory boundary \u03b3 that connects the two ends. The illusory boundary is simply generated by minimizing the energy of the curve. The saliency is defined as\nexp \u2212\u03b1 \u03b3 \u03b3 d\u03b8 ds 2 ds , (3\n)\nwhere \u03b8(s) is the slope along the curve, and d\u03b8 ds is local curvature [16]. \u03b1 \u03b3 is a scaling factor. The third term is computed by extracting the mean of local patches located at the two ends\nexp \u2212 d max 2\u03c3 2 max \u2212 d min 2\u03c3 2 min , (4\n)\nwhere\nd 1 = (h 11 \u2212 h 21 ) 2 , d 2 = (h 12 \u2212 h 22 ) 2 , and d max = max(d 1 , d 2 ), d min = min(d 1 , d 2 )\n. \u03c3 max > \u03c3 min are the scale parameters. h 11 , h 12 , h 21 , h 22 are the means of the pixel values of the four patches located at the two end points. For self connection we simply set a constant value:\n\u03bb(S(i, t i )= (i, t i )) = \u03c4 .\nWe use a function \u03c8(c i ; B, O) to model the structural saliency of contours. It was discovered in [10] that convex occluding contours are more salient, and additional T-junctions along the contour may increase or decrease the occlusion perception. Here we simply enforce that a contour should have no self-intersection. \u03c8(c i ; B, O)= 1 if there is no self intersection and \u03c8(c i ; B, O)= 0 otherwise.\nThus, the (discrete) graphical model favoring the desired fragment grouping is\nPr(S; B, O) = 1 Z S N i=1 1 ti=0 \u03bb(S(i, t i ); B, O)\u03b4[S(S(i, t i )) \u2212 (i, t i )] \u2022 M j=1 \u03c8(c j ; B, O),(5)\nwhere Z S is a normalization constant. Note that this model measures both the switch variables S(i, t i ) for local saliency and the fragment chains c i to enforce global structural saliency.", "publication_ref": ["b16", "b9"], "figure_ref": ["fig_5"], "table_ref": []}, {"heading": "Gaussian MRF on Flow Vectors", "text": "Given the fragment grouping, we model the flow vectors V as a Gaussian Markov random field (GMRF). The edgelet displacement within each boundary fragment should be smooth and match the observation along the fragment. The probability density is formulated as\n\u03d5(v i ; b i ) = ni k=1 exp{\u2212(v ik \u2212 \u03bc ik ) T \u03a3 \u22121 ik (v ik \u2212 \u03bc ik )} ni\u22121 k=1 exp{\u2212 1 2\u03c3 2 v ik \u2212 v i,k+1 2 }, (6\n)\nwhere \u03bc ik and \u03a3 ik are the motion parameters of each edgelet estimated in Sect 3.\nWe use V(i, t i ) to denote the flow vector of end t i of fragment b i . We define V(S(i, t i )) = V(j, t j ) if S(i, t i ) = (j, t j ). Intuitively the flow vectors of the two ends should be similar if they are connected, or mathematically\n\u03c6(V(i, t i ), V(S(i, t i ))) = 1 i f S(i, t i ) = (i, t i ), exp{\u2212 1 2\u03c3 2 V(i, t i )\u2212V(S(i, t i )) 2 } otherwise.(7)\nThe (continuous) graphical model of the flow vectors is therefore defined as\nPr(V|S; B) = 1 Z V N i=1 \u03d5(v i ; b i ) 1 ti=0 \u03c6(V(i, t i ), V(S(i, t i )))(8)\nwhere Z V is a normalization constant. When S is given it is a GMRF which can be solved by least squares.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Inference", "text": "Having defined the graphical model to favor the desired motion and grouping interpretations, we need to find the state parameters that best explain the image observations. The natural decomposition of S and V in our graphical model  5) and ( 8) respectively) lends itself to performing two-step inference. We first infer the boundary grouping B, and then infer V based on B. The second step is simply to solve least square problem since Pr(V|S; B, O) is a GMRF. This approach does not globally optimize Eqn. ( 9) but results in reasonable solution because V strongly depends on S. The density function Pr(S; B, O) is not a random field, so we use importance sampling [6] to obtain the marginal distribution Pr(S(i, t i ); B, O). The proposal density of each switch variable is set to be\nq (S(i, t i )= (j, t j )) \u221d 1 Z q \u03bb (S(i, t i )= (j, t j )) \u03bb (S(j, t j )= (i, t i ))(10)\nwhere \u03bb(\u2022) has been normalized to sum to 1 for each end. We found that this bidirectional measure is crucial to take valid samples. To sample the proposal density, we first randomly select a boundary fragment, and connect to other fragments based on q(S(i, t i )) to form a contour (a chain of boundary fragments). Each end is sampled only once, to ensure reversibility. This procedure is repeated until no fragment is left. In the importance step we run the binary function \u03c8(c i ) to check that each contour has no self-intersection. If \u03c8(c i ) = 0 then this sample is rejected. The marginal distributions are estimated from the samples. Lastly the optimal grouping is obtained by replacing random sampling with selecting the maximum-probability connection over the estimated marginal distributions. The number of samples needed depends on the number of the fragments. In practice we find that n 2 samples are sufficient for n fragments.", "publication_ref": ["b5"], "figure_ref": [], "table_ref": []}, {"heading": "Experimental Results", "text": "Figure 6 shows the boundary extraction, grouping, and motion estimation results of our system for both real and synthetic examples 1 . All the results are generated using the same parameter settings. The algorithm is implemented in MATLAB, and the running time varies from ten seconds to a few minutes, depending on the number of the boundary fragments found in the image. The second example is the Kanizsa square where the frontal white square moves to the right bottom. Twelve fragments are detected in (a) and five contours are grouped in (b). The estimated motion and generated illusory boundary also match the ground truth and human perception. Notice that the arcs tend to connect to other ones if we do not impose the structural saliency \u03c8(\u2022).\nWe apply our system to a video of a dancer (Figure 5 (a) and (b)). In this stimulus the right leg moves downwards, but there is weak occluding boundary at the intersection of the legs. Eleven To complete the occluded contours of this image would be nearly impossible working only from a static image. Exploiting motion as well as static information, our system is able to complete the contours properly.\nNote that the traditional motion analysis algorithms fail at estimating motion for these examples (see supplementary videos) and would thus also fail at correctly grouping the objects based on the motion cues.", "publication_ref": ["b0"], "figure_ref": [], "table_ref": []}, {"heading": "Conclusion", "text": "We propose a novel boundary-based representation to estimate motion under the challenging visual conditions of moving textureless objects. Ambiguous local motion measurements are resolved through a graphical model relating edgelets, boundary fragments, completed contours, and their motions. Contours are grouped and their motions analyzed simultaneously, leading to the correct handling of otherwise spurious occlusion and T-junction features. The motion cues help the contour completion task, allowing completion of contours that would be difficult or impossible using only low-level information in a static image. A motion analysis algorithm such as this one that correctly handles featureless contour motions is an essential element in a visual system's toolbox of motion analysis methods.", "publication_ref": [], "figure_ref": [], "table_ref": []}], "references": [{"ref_id": "b0", "title": "Probabilistic detection and tracking of motion boundaries", "journal": "International Journal of Computer Vision", "year": "2000", "authors": "M J Black; D J Fleet"}, {"ref_id": "b1", "title": "A computational approach to edge detection", "journal": "IEEE Trans. Pat. Anal. Mach. Intel", "year": "1986-11", "authors": "J Canny"}, {"ref_id": "b2", "title": "The design and use of steerable filters", "journal": "IEEE Trans. Pat. Anal. Mach. Intel", "year": "1991-09", "authors": "W T Freeman; E H Adelson"}, {"ref_id": "b3", "title": "Determing optical flow", "journal": "Artificial Intelligence", "year": "1981", "authors": "B K P Horn; B G Schunck"}, {"ref_id": "b4", "title": "An iterative image registration technique with an application to stereo vision", "journal": "", "year": "1981", "authors": "B Lucas; T Kanade"}, {"ref_id": "b5", "title": "Information Theory, Inference, and Learning Algorithms", "journal": "Cambridge University Press", "year": "2003", "authors": "D Mackay"}, {"ref_id": "b6", "title": "Segmentation of multiple salient closed contours from real images", "journal": "IEEE Trans. Pat. Anal. Mach. Intel", "year": "2003", "authors": "S Mahamud; L Williams; K Thornber; K Xu"}, {"ref_id": "b7", "title": "Learning to detect natural image boundaries using local brightness, color, and texture cues", "journal": "IEEE Trans. Pat. Anal. Mach. Intel", "year": "2004-05", "authors": "D Martin; C Fowlkes; J Malik"}, {"ref_id": "b8", "title": "Psychophysics with junctions in real images", "journal": "Perception", "year": "2004", "authors": "J Mcdermott"}, {"ref_id": "b9", "title": "The geometry of the occluding contour and its effect on motion interpretation", "journal": "Journal of Vision", "year": "2004", "authors": "J Mcdermott; E H Adelson"}, {"ref_id": "b10", "title": "Junctions and cost functions in motion interpretation", "journal": "Journal of Vision", "year": "2004", "authors": "J Mcdermott; E H Adelson"}, {"ref_id": "b11", "title": "Column (a): Boundary fragments are extracted using our boundary tracker. The red dots are the edgelets and the green ones are the boundary fragment ends. Column (b): Boundary fragments are grouped into contours and the flow vectors are estimated. Each contour is shown in its own color. Columns (c): the illusory boundaries are generated for the first and second frames. The gap between the fragments belonging to the same contour are linked exploiting both static and motion cues in Eq", "journal": "", "year": "", "authors": ""}, {"ref_id": "b12", "title": "A selection model for motion processing in area mt primates", "journal": "The Journal of Neuroscience", "year": "1995", "authors": "S J Nowlan; T J Sejnowski"}, {"ref_id": "b13", "title": "Non-photorealistic camera: depth edge detection and stylized rendering using multi-flash imaging", "journal": "ACM Trans. Graph. (SIGGRAPH)", "year": "2004", "authors": "R Raskar; K.-H Tan; R Feris; J Yu; M Turk"}, {"ref_id": "b14", "title": "Scale-invariant contour completion using conditional random fields", "journal": "", "year": "2005", "authors": "X Ren; C Fowlkes; J Malik"}, {"ref_id": "b15", "title": "Logic and MRF circuitry for labeling occluding and thinline visual contours", "journal": "", "year": "2006", "authors": "E Saund"}, {"ref_id": "b16", "title": "Structural saliency: the detection of globally salient structures using a locally connected network", "journal": "", "year": "1988", "authors": "A Shahua; S Ullman"}, {"ref_id": "b17", "title": "Good features to track", "journal": "", "year": "1994", "authors": "J Shi; C Tomasi"}, {"ref_id": "b18", "title": "Perceptually organized EM: A framework for motion segmentaiton that combines information about form and motion", "journal": "M.I.T Media Lab", "year": "1995", "authors": "Y Weiss; E H Adelson"}], "figures": [{"figure_label": "1", "figure_type": "figure", "figure_id": "fig_0", "figure_caption": "Figure 1 :1Figure 1: Illustration of the spurious T-junction motion. (a) The front gray bar is moving to the right and the black bar behind is moving to the left [18]. (b) Based on a local window matching, the eight corners of the bars show the correct motion, whereas the T-junctions show spurious downwards motion. (c) Using the boundarybased representation our system is able to correctly estimate the motion and generate the illusory boundary as well.", "figure_data": ""}, {"figure_label": "a", "figure_type": "figure", "figure_id": "fig_1", "figure_caption": "( a )aBoundary fragment extraction: Boundary fragments are detected in the first frame. (b) Edgelet tracking with uncertainties: Boundary fragments are broken into edgelets, and, based on local evidence, the probability distribution is found for the motion of each edgelet of each boundary fragment. (c) Grouping boundary fragments into contours: Boundary fragments are grouped, using both temporal and spatial cues. (d) Motion estimation: The final fragment groupings disambiguate motion uncertainties and specify the final inferred motions.", "figure_data": ""}, {"figure_label": "2", "figure_type": "figure", "figure_id": "fig_2", "figure_caption": "Figure 2 :2Figure 2: The local motion vector is estimated for each contour in isolation by selectively comparing orientation energies across frames. (a) A T-junction of the two bar example showing the contour orientation for this motion analysis. (b) The other frame. (c) The relevant orientation energy along the boundary fragment, both for the 2nd frame. A Gaussian pdf is fit to estimate flow, weighted by the oriented energy. (d) Visualization of the Gaussian pdf. The possible contour motions are unaffected by the occluding contour at a different orientation and no spurious motion is detected at this junction.", "figure_data": ""}, {"figure_label": "331", "figure_type": "figure", "figure_id": "fig_3", "figure_caption": "3 bFigure 3 : 1 ,331Figure 3: A simple example illustrating switch variables, reversibility and fragment chains. The color arrows show the switch variables. The empty circle indicates end 0 and the filled indicates end 1. (a) Shows three boundary fragments. Theoretically b (0) 1 can connect to any of the other ends including itself, (b). However, the switch variable is exclusive, i.e. there is only one connection to b (0) 1 , and reversible, i.e. if b (0) 1 connects to b (0) 3 , then b (0) 3 should also connect to b (0) 1 , as shown in (c). Figures (d) and (e) show two of the legal contour groupings for the boundary fragments: two open contours and a closed loop contour.", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_4", "figure_caption": "The chain is specified by fragment label {i 1 , \u2022 \u2022 \u2022 , i m } and end label {x 1 , \u2022 \u2022 \u2022 , x m }. It can be either open or closed. The order of the chain is determined by the switch variable. Each end appears in the chain at most once. The notation of a chain is not unique. Two open chains are identical if the fragment and end labels are reversed. Two closed chains are identical if they match each other by rotating one of them. These identities are guaranteed from the reversibility of the switch variables. A set of chains C = {c i } can be uniquely extracted based on the values of the reversible switch variables, as illustrated in Figure 3 (d) and (e).", "figure_data": ""}, {"figure_label": "4", "figure_type": "figure", "figure_id": "fig_5", "figure_caption": "Figure 4 :4Figure 4: An illustration of local saliency computation. (a) Without loss of generalization we assume the two ends to be b (0) 1 and b (0) 2 . (b) The KL divergence between the distributions of flow vectors are used to measure the motion similarity. (c) An illusory boundary \u03b3 is generated by minimizing the energy of the curve. The sum of square curvatures are used to measure the curve smoothness. (d) The means of the local patches located at the two ends are extracted, i.e. h11 and h12 from b (0) 1 , h21 and h22 from b (0) 2 , to compute contrast consistency.is the KL divergence between the two Gaussian distributions of the flow vectorsexp{\u2212\u03b1 KL KL(N (\u03bc 11 , \u03a3 11 ), N (\u03bc 21 , \u03a3 21 ))},(2)where \u03b1 KL is a scaling factor. The second term is the local saliency measure on the illusory boundary \u03b3 that connects the two ends. The illusory boundary is simply generated by minimizing the energy of the curve. The saliency is defined as", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_6", "figure_caption": "Pr(V, S; B, O)= Pr(S; B, O) \u2022 Pr(V|S; B, O), (9) (where Pr(S; B, O) and Pr(V|S; B, O) are defined in Eqn. (", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_7", "figure_caption": "The two-bar examples in Figure 1(a) yields fourteen detected boundary fragments in Figure 6(a) and two contours in (b). The estimated motion matches the ground truth at the T-junctions. The fragments belonging to the same contour are plotted in the same color and the illusory boundaries are synthesized as shown in (c). The boundaries are warped according to the estimated flow and displayed in (d). The hallucinated illusory boundaries in frame 1 (c) and 2 (d) are plausible amodal completions.", "figure_data": ""}, {"figure_label": "25", "figure_type": "figure", "figure_id": "fig_8", "figure_caption": "2 Figure 5 :25Figure 5: Input images for the non-synthetic examples of Figure 6. The dancer's right leg is moving downwards and the chair is rotating (note the changing space between the chair's arms).", "figure_data": ""}], "formulas": [{"formula_id": "formula_1", "formula_text": ")1", "formula_coordinates": [4.0, 496.23, 280.61, 7.74, 8.97]}, {"formula_id": "formula_2", "formula_text": "(x1) i1 , b (x1) i1 ), \u2022 \u2022 \u2022 , (b (xm) im , b (xm) im )}.", "formula_coordinates": [4.0, 123.24, 373.5, 142.53, 14.9]}, {"formula_id": "formula_4", "formula_text": "exp \u2212\u03b1 \u03b3 \u03b3 d\u03b8 ds 2 ds , (3", "formula_coordinates": [5.0, 249.11, 272.46, 251.0, 28.09]}, {"formula_id": "formula_5", "formula_text": ")", "formula_coordinates": [5.0, 500.11, 282.89, 3.87, 8.97]}, {"formula_id": "formula_6", "formula_text": "exp \u2212 d max 2\u03c3 2 max \u2212 d min 2\u03c3 2 min , (4", "formula_coordinates": [5.0, 249.0, 334.32, 251.1, 24.8]}, {"formula_id": "formula_7", "formula_text": ")", "formula_coordinates": [5.0, 500.1, 340.97, 3.87, 8.97]}, {"formula_id": "formula_8", "formula_text": "d 1 = (h 11 \u2212 h 21 ) 2 , d 2 = (h 12 \u2212 h 22 ) 2 , and d max = max(d 1 , d 2 ), d min = min(d 1 , d 2 )", "formula_coordinates": [5.0, 136.31, 361.26, 364.5, 12.01]}, {"formula_id": "formula_9", "formula_text": "\u03bb(S(i, t i )= (i, t i )) = \u03c4 .", "formula_coordinates": [5.0, 108.0, 395.5, 93.09, 10.65]}, {"formula_id": "formula_10", "formula_text": "Pr(S; B, O) = 1 Z S N i=1 1 ti=0 \u03bb(S(i, t i ); B, O)\u03b4[S(S(i, t i )) \u2212 (i, t i )] \u2022 M j=1 \u03c8(c j ; B, O),(5)", "formula_coordinates": [5.0, 134.76, 477.06, 369.22, 31.21]}, {"formula_id": "formula_11", "formula_text": "\u03d5(v i ; b i ) = ni k=1 exp{\u2212(v ik \u2212 \u03bc ik ) T \u03a3 \u22121 ik (v ik \u2212 \u03bc ik )} ni\u22121 k=1 exp{\u2212 1 2\u03c3 2 v ik \u2212 v i,k+1 2 }, (6", "formula_coordinates": [5.0, 122.16, 602.99, 377.94, 31.05]}, {"formula_id": "formula_12", "formula_text": ")", "formula_coordinates": [5.0, 500.1, 613.49, 3.87, 8.97]}, {"formula_id": "formula_13", "formula_text": "\u03c6(V(i, t i ), V(S(i, t i ))) = 1 i f S(i, t i ) = (i, t i ), exp{\u2212 1 2\u03c3 2 V(i, t i )\u2212V(S(i, t i )) 2 } otherwise.(7)", "formula_coordinates": [5.0, 118.56, 690.58, 385.42, 33.24]}, {"formula_id": "formula_14", "formula_text": "Pr(V|S; B) = 1 Z V N i=1 \u03d5(v i ; b i ) 1 ti=0 \u03c6(V(i, t i ), V(S(i, t i )))(8)", "formula_coordinates": [6.0, 182.4, 89.22, 321.58, 31.21]}, {"formula_id": "formula_15", "formula_text": "q (S(i, t i )= (j, t j )) \u221d 1 Z q \u03bb (S(i, t i )= (j, t j )) \u03bb (S(j, t j )= (i, t i ))(10)", "formula_coordinates": [6.0, 174.48, 323.5, 329.56, 24.22]}], "doi": ""}