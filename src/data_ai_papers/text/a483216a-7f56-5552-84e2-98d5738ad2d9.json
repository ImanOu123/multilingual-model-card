{"title": "Exploring Simple Siamese Representation Learning", "authors": "Xinlei Chen; Kaiming He", "pub_date": "2020-11-20", "abstract": "Siamese networks have become a common structure in various recent models for unsupervised visual representation learning. These models maximize the similarity between two augmentations of one image, subject to certain conditions for avoiding collapsing solutions. In this paper, we report surprising empirical results that simple Siamese networks can learn meaningful representations even using none of the following: (i) negative sample pairs, (ii) large batches, (iii) momentum encoders. Our experiments show that collapsing solutions do exist for the loss and structure, but a stop-gradient operation plays an essential role in preventing collapsing. We provide a hypothesis on the implication of stop-gradient, and further show proof-of-concept experiments verifying it. Our \"SimSiam\" method achieves competitive results on ImageNet and downstream tasks. We hope this simple baseline will motivate people to rethink the roles of Siamese architectures for unsupervised representation learning. Code will be made available.", "sections": [{"heading": "Introduction", "text": "Recently there has been steady progress in un-/selfsupervised representation learning, with encouraging results on multiple visual tasks (e.g., [2,17,8,15,7]). Despite various original motivations, these methods generally involve certain forms of Siamese networks [4]. Siamese networks are weight-sharing neural networks applied on two or more inputs. They are natural tools for comparing (including but not limited to \"contrasting\") entities. Recent methods define the inputs as two augmentations of one image, and maximize the similarity subject to different conditions.\nAn undesired trivial solution to Siamese networks is all outputs \"collapsing\" to a constant. There have been several general strategies for preventing Siamese networks from collapsing. Contrastive learning [16], e.g., instantiated in SimCLR [8], repulses different images (negative pairs) while attracting the same image's two views (positive pairs). The negative pairs preclude constant outputs from the solution space. Clustering [5] is another way of avoiding constant output, and SwAV [7] incorporates online clustering into Siamese networks. Beyond contrastive learning and clustering, BYOL [15] relies only on positive pairs but it does not collapse in case a momentum encoder is used.\nIn this paper, we report that simple Siamese networks can work surprisingly well with none of the above strategies for preventing collapsing. Our model directly maximizes the similarity of one image's two views, using neither negative pairs nor a momentum encoder. It works with typical batch sizes and does not rely on large-batch training. We illustrate this \"SimSiam\" method in Figure 1.\nThanks to the conceptual simplicity, SimSiam can serve as a hub that relates several existing methods. In a nutshell, our method can be thought of as \"BYOL without the momentum encoder\". Unlike BYOL but like SimCLR and SwAV, our method directly shares the weights between the two branches, so it can also be thought of as \"SimCLR without negative pairs\", and \"SwAV without online clustering\". Interestingly, SimSiam is related to each method by removing one of its core components. Even so, SimSiam does not cause collapsing and can perform competitively.\nWe empirically show that collapsing solutions do exist, but a stop-gradient operation (Figure 1) is critical to prevent such solutions. The importance of stop-gradient suggests that there should be a different underlying optimization problem that is being solved. We hypothesize that there are implicitly two sets of variables, and SimSiam behaves like alternating between optimizing each set. We provide proof-of-concept experiments to verify this hypothesis.\nOur simple baseline suggests that the Siamese architectures can be an essential reason for the common success of the related methods. Siamese networks can naturally introduce inductive biases for modeling invariance, as by definition \"invariance\" means that two observations of the same concept should produce the same outputs. Analogous to convolutions [25], which is a successful inductive bias via weight-sharing for modeling translation-invariance, the weight-sharing Siamese networks can model invariance w.r.t. more complicated transformations (e.g., augmentations). We hope our exploration will motivate people to rethink the fundamental roles of Siamese architectures for unsupervised representation learning.", "publication_ref": ["b1", "b16", "b7", "b14", "b6", "b3", "b15", "b7", "b4", "b6", "b14", "b24"], "figure_ref": [], "table_ref": []}, {"heading": "Related Work", "text": "Siamese networks. Siamese networks [4] are general models for comparing entities. Their applications include signature [4] and face [34] verification, tracking [3], one-shot learning [23], and others. In conventional use cases, the inputs to Siamese networks are from different images, and the comparability is determined by supervision.\nContrastive learning. The core idea of contrastive learning [16] is to attract the positive sample pairs and repulse the negative sample pairs. This methodology has been recently popularized for un-/self-supervised representation learning [36,30,20,37,21,2,35,17,29,8,9]. Simple and effective instantiations of contrastive learning have been developed using Siamese networks [37,2,17,8,9].\nIn practice, contrastive learning methods benefit from a large number of negative samples [36,35,17,8]. These samples can be maintained in a memory bank [36]. In a Siamese network, MoCo [17] maintains a queue of negative samples and turns one branch into a momentum encoder to improve consistency of the queue. SimCLR [8] directly uses negative samples coexisting in the current batch, and it requires a large batch size to work well.\nClustering. Another category of methods for unsupervised representation learning are based on clustering [5,6,1,7].\nThey alternate between clustering the representations and learning to predict the cluster assignment. SwAV [7] incorporates clustering into a Siamese network, by computing the assignment from one view and predicting it from another view. SwAV performs online clustering under a balanced partition constraint for each batch, which is solved by the Sinkhorn-Knopp transform [10].\nWhile clustering-based methods do not define negative exemplars, the cluster centers can play as negative prototypes. Like contrastive learning, clustering-based methods require either a memory bank [5,6,1], large batches [7], or a queue [7] to provide enough samples for clustering. BYOL. BYOL [15] directly predicts the output of one view from another view. It is a Siamese network in which one branch is a momentum encoder. 1 It is hypothesized in [15] that the momentum encoder is important for BYOL to avoid collapsing, and it reports failure results if removing the momentum encoder (0.3% accuracy, Table 5 in [15]). 2 Our empirical study challenges the necessity of the momentum encoder for preventing collapsing. We discover that the stop-gradient operation is critical. This discovery can be obscured with the usage of a momentum encoder, which is always accompanied with stop-gradient (as it is not updated by its parameters' gradients). While the moving-average behavior may improve accuracy with an appropriate momentum coefficient, our experiments show that it is not directly related to preventing collapsing.", "publication_ref": ["b3", "b3", "b33", "b2", "b22", "b15", "b35", "b29", "b19", "b36", "b20", "b1", "b34", "b16", "b28", "b7", "b8", "b36", "b1", "b16", "b7", "b8", "b35", "b34", "b16", "b7", "b35", "b16", "b7", "b4", "b5", "b0", "b6", "b6", "b9", "b4", "b5", "b0", "b6", "b6", "b14", "b0", "b14", "b14", "b1"], "figure_ref": [], "table_ref": []}, {"heading": "Method", "text": "Our architecture (Figure 1) takes as input two randomly augmented views x 1 and x 2 from an image x. The two views are processed by an encoder network f consisting of a backbone (e.g., ResNet [19]) and a projection MLP head [8]. The encoder f shares weights between the two views. A prediction MLP head [15], denoted as h, transforms the output of one view and matches it to the other view. Denoting the two output vectors as p 1 h(f (x 1 )) and z 2 f (x 2 ), we minimize their negative cosine similarity:\nD(p 1 , z 2 ) = \u2212 p 1 p 1 2 \u2022 z 2 z 2 2 ,(1)\nwhere \u2022 2 is 2 -norm. This is equivalent to the mean squared error of 2 -normalized vectors [15], up to a scale  [36] as a monitor of progress. Table : ImageNet linear evaluation (\"w/ stop-grad\" is mean\u00b1std over 5 trials).\nof 2. Following [15], we define a symmetrized loss as:\nL = 1 2 D(p 1 , z 2 ) + 1 2 D(p 2 , z 1 ).(2)\nThis is defined for each image, and the total loss is averaged over all images. Its minimum possible value is \u22121.\nAn important component for our method to work is a stop-gradient (stopgrad) operation (Figure 1). We implement it by modifying (1) as:\nD(p 1 , stopgrad(z 2 )).(3)\nThis means that z 2 is treated as a constant in this term. Similarly, the form in (2) is implemented as:\nL= 1 2 D(p 1 , stopgrad(z 2 ))+ 1 2 D(p 2 , stopgrad(z 1 )).(4\n) Here the encoder on x 2 receives no gradient from z 2 in the first term, but it receives gradients from p 2 in the second term (and vice versa for x 1 ).\nThe pseudo-code of SimSiam is in Algorithm 1.\nBaseline settings. Unless specified, our explorations use the following settings for unsupervised pre-training:\n\u2022 Optimizer. We use SGD for pre-training. Our method does not require a large-batch optimizer such as LARS [38] (unlike [8,15,7]). We use a learning rate of lr\u00d7BatchSize/256 (linear scaling [14]), with a base lr = 0.05. The learning rate has a cosine decay schedule [27,8]. The weight decay is 0.0001 and the SGD momentum is 0.9.\nThe batch size is 512 by default, which is friendly to typical 8-GPU implementations. Other batch sizes also work well (Sec. 4.3). We use batch normalization (BN) [22] synchronized across devices, following [8,15,7]. \n\u2022", "publication_ref": ["b18", "b7", "b14", "b14", "b35", "b14", "b37", "b7", "b14", "b6", "b13", "b26", "b7", "b21", "b7", "b14", "b6"], "figure_ref": [], "table_ref": []}, {"heading": "Empirical Study", "text": "In this section we empirically study the SimSiam behaviors. We pay special attention to what may contribute to the model's non-collapsing solutions.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Stop-gradient", "text": "Figure 2 presents a comparison on \"with vs. without stop-gradient\". The architectures and all hyper-parameters are kept unchanged, and stop-gradient is the only difference.\nFigure 2 (left) shows the training loss. Without stopgradient, the optimizer quickly finds a degenerated solution and reaches the minimum possible loss of \u22121. To show that the degeneration is caused by collapsing, we study the standard deviation (std) of the 2 -normalized output z/ z 2 . If the outputs collapse to a constant vector, their std over all samples should be zero for each channel. This can be observed from the red curve in Figure 2 (middle).\nAs a comparison, if the output z has a zero-mean isotropic Gaussian distribution, we can show that the std of z/ z 2 is 1 \u221a d . 3 The blue curve in Figure 2 (middle) shows 3 Here is an informal derivation: denote z/ z 2 as z , that is,\nz i = z i /( d j=1 z 2 j ) 1 2\nfor the i-th channel. If z j is subject to an i.i.d Gaussian that with stop-gradient, the std value is near 1 \u221a d . This indicates that the outputs do not collapse, and they are scattered on the unit hypersphere.\ndistribution: z j \u223c N (0, 1), \u2200j, then z i \u2248 z i /d 1 2 and std[z i ] \u2248 1/d 1 2 .\nFigure 2 (right) plots the validation accuracy of a knearest-neighbor (kNN) classifier [36]. This kNN classifier can serve as a monitor of the progress. With stop-gradient, the kNN monitor shows a steadily improving accuracy.\nThe linear evaluation result is in the table in Figure 2. SimSiam achieves a nontrivial accuracy of 67.7%. This result is reasonably stable as shown by the std of 5 trials. Solely removing stop-gradient, the accuracy becomes 0.1%, which is the chance-level guess in ImageNet.\nDiscussion. Our experiments show that there exist collapsing solutions. The collapse can be observed by the minimum possible loss and the constant outputs. 4 The existence of the collapsing solutions implies that it is insufficient for our method to prevent collapsing solely by the architecture designs (e.g., predictor, BN, 2 -norm). In our comparison, all these architecture designs are kept unchanged, but they do not prevent collapsing if stop-gradient is removed.\nThe introduction of stop-gradient implies that there should be another optimization problem that is being solved underlying. We propose a hypothesis in Sec. 5.", "publication_ref": ["b2", "b2", "b35", "b3"], "figure_ref": ["fig_1", "fig_1", "fig_1", "fig_1", "fig_1", "fig_1"], "table_ref": []}, {"heading": "Predictor", "text": "In Table 1 we study the predictor MLP's effect. The model does not work if removing h (Table 1a), i.e., h is the identity mapping. Actually, this observation can be expected if the symmetric loss (4) is used. Now the loss is\n1 2 D(z 1 , stopgrad(z 2 )) + 1 2 D(z 2 , stopgrad(z 1 )\n). Its gradient has the same direction as the gradient of D(z 1 , z 2 ), with the magnitude scaled by 1/2. In this case, using stopgradient is equivalent to removing stop-gradient and scaling the loss by 1/2. Collapsing is observed (Table 1a).\nWe note that this derivation on the gradient direction is valid only for the symmetrized loss. But we have observed that the asymmetric variant (3) also fails if removing h, while it can work if h is kept (Sec. 4.6). These experiments suggest that h is helpful for our model.\nIf h is fixed as random initialization, our model does not work either ( collapsing. The training does not converge, and the loss remains high. The predictor h should be trained to adapt to the representations. We also find that h with a constant lr (without decay) can work well and produce even better results than the baseline (Table 1c). A possible explanation is that h should adapt to the latest representations, so it is not necessary to force it converge (by reducing lr) before the representations are sufficiently trained. In many variants of our model, we have observed that h with a constant lr provides slightly better results. We use this form in the following subsections.", "publication_ref": [], "figure_ref": [], "table_ref": ["tab_0", "tab_0", "tab_0", "tab_0"]}, {"heading": "Batch Size", "text": "Table 2 reports the results with a batch size from 64 to 4096. When the batch size changes, we use the same linear scaling rule (lr\u00d7BatchSize/256) [14] with base lr = 0.05. We use 10 epochs of warm-up [14] for batch sizes \u2265 1024. Note that we keep using the same SGD optimizer (rather than LARS [38]) for all batch sizes studied.\nOur method works reasonably well over this wide range of batch sizes. Even a batch size of 128 or 64 performs decently, with a drop of 0.8% or 2.0% in accuracy. The results are similarly good when the batch size is from 256 to 2048, and the differences are at the level of random variations.\nThis behavior of SimSiam is noticeably different from SimCLR [8] and SwAV [7]. All three methods are Siamese networks with direct weight-sharing, but SimCLR and SwAV both require a large batch (e.g., 4096) to work well.\nWe also note that the standard SGD optimizer does not work well when the batch is too large (even in supervised learning [14,38]), and our result is lower with a 4096 batch. We expect a specialized optimizer (e.g., LARS [38]) will help in this case. However, our results show that a specialized optimizer is not necessary for preventing collapsing.  [14] is used specifically for this entry). This variant does not cause collapse, although the accuracy is low (34.6%). The low accuracy is likely because of optimization difficulty. Adding BN to the hidden layers (Table 3b) increases accuracy to 67.4%.", "publication_ref": ["b13", "b13", "b37", "b7", "b6", "b13", "b37", "b37", "b13"], "figure_ref": [], "table_ref": ["tab_4"]}, {"heading": "Batch Normalization", "text": "Further adding BN to the output of the projection MLP (i.e., the output of f ) boosts accuracy to 68.1% (Table 3c), which is our default configuration. In this entry, we also find that the learnable affine transformation (scale and offset [22]) in f 's output BN is not necessary, and disabling it leads to a comparable accuracy of 68.2%.\nAdding BN to the output of the prediction MLP h does not work well (Table 3d). We find that this is not about collapsing. The training is unstable and the loss oscillates.\nIn summary, we observe that BN is helpful for optimization when used appropriately, which is similar to BN's behavior in other supervised learning scenarios. But we have seen no evidence that BN helps to prevent collapsing: actually, the comparison in Sec. 4.1 (Figure 2) has exactly the same BN configuration for both entries, but the model collapses if stop-gradient is not used.", "publication_ref": ["b21"], "figure_ref": ["fig_1"], "table_ref": ["tab_4", "tab_4"]}, {"heading": "Similarity Function", "text": "Besides the cosine similarity function (1), our method also works with cross-entropy similarity. We modify D as:\nD(p 1 , z 2 ) = \u2212softmax(z 2 )\u2022 log softmax(p 1 ).\nHere the softmax function is along the channel dimension. The output of softmax can be thought of as the probabilities of belonging to each of d pseudo-categories.\nWe simply replace the cosine similarity with the crossentropy similarity, and symmetrize it using (4). All hyperparameters and architectures are unchanged, though they may be suboptimal for this variant. Here is the comparison: The cross-entropy variant can converge to a reasonable result without collapsing. This suggests that the collapsing prevention behavior is not just about the cosine similarity. This variant helps to set up a connection to SwAV [7], which we discuss in Sec. 6.2.", "publication_ref": ["b6"], "figure_ref": [], "table_ref": []}, {"heading": "Symmetrization", "text": "Thus far our experiments have been based on the symmetrized loss (4). We observe that SimSiam's behavior of preventing collapsing does not depend on symmetrization. We compare with the asymmetric variant (3) as follows: The asymmetric variant achieves reasonable results. Symmetrization is helpful for boosting accuracy, but it is not related to collapse prevention. Symmetrization makes one more prediction for each image, and we may roughly compensate for this by sampling two pairs for each image in the asymmetric version (\"2\u00d7\"). It makes the gap smaller.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Summary", "text": "We have empirically shown that in a variety of settings, SimSiam can produce meaningful results without collapsing. The optimizer (batch size), batch normalization, similarity function, and symmetrization may affect accuracy, but we have seen no evidence that they are related to collapse prevention. It is mainly the stop-gradient operation that plays an essential role.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Hypothesis", "text": "We discuss a hypothesis on what is implicitly optimized by SimSiam, with proof-of-concept experiments provided.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Formulation", "text": "Our hypothesis is that SimSiam is an implementation of an Expectation-Maximization (EM) like algorithm. It implicitly involves two sets of variables, and solves two underlying sub-problems. The presence of stop-gradient is the consequence of introducing the extra set of variables.\nWe consider a loss function of the following form:\nL(\u03b8, \u03b7) = E x,T F \u03b8 (T (x)) \u2212 \u03b7 x 2 2 .(5)\nF is a network parameterized by \u03b8. T is the augmentation.\nx is an image. The expectation E[\u2022] is over the distribution of images and augmentations. For the ease of analysis, here we use the mean squared error \u2022 2 2 , which is equivalent to the cosine similarity if the vectors are 2 -normalized. We do not consider the predictor yet and will discuss it later.\nIn (5), we have introduced another set of variables which we denote as \u03b7. The size of \u03b7 is proportional to the number of images. Intuitively, \u03b7 x is the representation of the image x, and the subscript x means using the image index to access a sub-vector of \u03b7. \u03b7 is not necessarily the output of a network; it is the argument of an optimization problem.\nWith this formulation, we consider solving:\nmin \u03b8,\u03b7 L(\u03b8, \u03b7).(6)\nHere the problem is w.r.t. both \u03b8 and \u03b7. This formulation is analogous to k-means clustering [28]. The variable \u03b8 is analogous to the clustering centers: it is the learnable parameters of an encoder. The variable \u03b7 x is analogous to the assignment vector of the sample x (a one-hot vector in kmeans): it is the representation of x. Also analogous to k-means, the problem in (6) can be solved by an alternating algorithm, fixing one set of variables and solving for the other set. Formally, we can alternate between solving these two subproblems:\n\u03b8 t \u2190 arg min \u03b8 L(\u03b8, \u03b7 t\u22121 ) (7) \u03b7 t \u2190 arg min \u03b7 L(\u03b8 t , \u03b7)(8)\nHere t is the index of alternation and \"\u2190\" means assigning.\nSolving for \u03b8. One can use SGD to solve the sub-problem (7). The stop-gradient operation is a natural consequence, because the gradient does not back-propagate to \u03b7 t\u22121 which is a constant in this subproblem.\nSolving for \u03b7. The sub-problem ( 8) can be solved independently for each \u03b7 x . Now the problem is to minimize:\nE T F \u03b8 t (T (x)) \u2212 \u03b7 x 2 2\nfor each image x, noting that the expectation is over the distribution of augmentation T . Due to the mean squared error, 5 it is easy to solve it by:\n\u03b7 t x \u2190 E T F \u03b8 t (T (x)) .(9)\nThis indicates that \u03b7 x is assigned with the average representation of x over the distribution of augmentation.\nOne-step alternation. SimSiam can be approximated by one-step alternation between ( 7) and (8). First, we approximate ( 9) by sampling the augmentation only once, denoted as T , and ignoring E T [\u2022]:\n\u03b7 t x \u2190 F \u03b8 t (T (x)).(10)\nInserting it into the sub-problem ( 7), we have:\n\u03b8 t+1 \u2190 arg min \u03b8 E x,T F \u03b8 (T (x)) \u2212 F \u03b8 t (T (x)) 2 2 . (11\n)\nNow \u03b8 t is a constant in this sub-problem, and T implies another view due to its random nature. This formulation exhibits the Siamese architecture. Second, if we implement (11) by reducing the loss with one SGD step, then we can approach the SimSiam algorithm: a Siamese network naturally with stop-gradient applied.\nPredictor. Our above analysis does not involve the predictor h. We further assume that h is helpful in our method because of the approximation due to (10). By definition, the predictor h is expected to minimize:\nE z h(z 1 ) \u2212 z 2 2 2 .\nThe optimal solution to h should satisfy:\nh(z 1 ) = E z [z 2 ] = E T f (T (x)\n) for any image x. This term is similar to the one in (9). In our approximation in (10), the expectation E T [\u2022] is ignored. The usage of h may fill this gap. In practice, it would be unrealistic to actually compute the expectation E T . But it may be possible for a neural network (e.g., the preditor h) to learn to predict the expectation, while the sampling of T is implicitly distributed across multiple epochs.\nSymmetrization. Our hypothesis does not involve symmetrization. Symmetrization is like denser sampling T in (11). Actually, the SGD optimizer computes the empirical expectation of E x,T [\u2022] by sampling a batch of images and one pair of augmentations (T 1 , T 2 ). In principle, the empirical expectation should be more precise with denser sampling. Symmetrization supplies an extra pair (T 2 , T 1 ). This explains that symmetrization is not necessary for our method to work, yet it is able to improve accuracy, as we have observed in Sec. 4.6.", "publication_ref": ["b27", "b6", "b4", "b7", "b9", "b8", "b10"], "figure_ref": [], "table_ref": []}, {"heading": "Proof of concept", "text": "We design a series of proof-of-concept experiments that stem from our hypothesis. They are methods different with SimSiam, and they are designed to verify our hypothesis.\nMulti-step alternation. We have hypothesized that the SimSiam algorithm is like alternating between ( 7) and ( 8), with an interval of one step of SGD update. Under this hypothesis, it is likely for our formulation to work if the interval has multiple steps of SGD.\nIn this variant, we treat t in ( 7) and ( 8) as the index of an outer loop; and the sub-problem in ( 7) is updated by an inner loop of k SGD steps. In each alternation, we pre-compute the \u03b7 x required for all k SGD steps using (10) and cache them in memory. Then we perform k SGD steps to update \u03b8. We use the same architecture and hyperparameters as SimSiam. The comparison is as follows: Expectation over augmentations. The usage of the predictor h is presumably because the expectation E T [\u2022] in ( 9) is ignored. We consider another way to approximate this expectation, in which we find h is not needed.\nIn this variant, we do not update \u03b7 x directly by the assignment (10); instead, we maintain a moving-average:\n\u03b7 t x \u2190 m * \u03b7 t\u22121 x + (1 \u2212 m) * F \u03b8 t (T (x)),\nwhere m is a momentum coefficient (0.8 here). This computation is similar to maintaining the memory bank as in [36]. This movingaverage provides an approximated expectation of multiple views. This variant has 55.0% accuracy without the predictor h. As a comparison, it fails completely if we remove h but do not maintain the moving average (as shown in Table 1a). This proof-of-concept experiment supports that the usage of predictor h is related to approximating E T [\u2022].  [13]. All VOC results are the average over 5 trials. Bold entries are within 0.5 below the best.", "publication_ref": ["b35", "b12"], "figure_ref": [], "table_ref": ["tab_0"]}, {"heading": "Discussion", "text": "Our hypothesis is about what the optimization problem can be. It does not explain why collapsing is prevented. We point out that SimSiam and its variants' non-collapsing behavior still remains as an empirical observation.\nHere we briefly discuss our understanding on this open question. The alternating optimization provides a different trajectory, and the trajectory depends on the initialization. It is unlikely that the initialized \u03b7, which is the output of a randomly initialized network, would be a constant. Starting from this initialization, it may be difficult for the alternating optimizer to approach a constant \u03b7 x for all x, because the method does not compute the gradients w.r.t. \u03b7 jointly for all x. The optimizer seeks another trajectory (Figure 2 left), in which the outputs are scattered (Figure 2 middle).", "publication_ref": [], "figure_ref": ["fig_1", "fig_1"], "table_ref": []}, {"heading": "Comparisons", "text": "", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Result Comparisons", "text": "ImageNet. We compare with the state-of-the-art frameworks in Table 4 on ImageNet linear evaluation. For fair comparisons, all competitors are based on our reproduction, and \"+\" denotes improved reproduction vs. the original papers (see supplement). For each individual method, we follow the hyper-parameter and augmentation recipes in its original paper. 6 All entries are based on a standard ResNet-50, with two 224\u00d7224 views used during pre-training.\nTable 4 shows the results and the main properties of the methods. SimSiam is trained with a batch size of 256, using neither negative samples nor a momentum encoder. Despite it simplicity, SimSiam achieves competitive results. It has the highest accuracy among all methods under 100-epoch pre-training, though its gain of training longer is smaller. It has better results than SimCLR in all cases.\nTransfer Learning. In Table 5 we compare the representation quality by transferring them to other tasks, including VOC [12] object detection and COCO [26] object detection and instance segmentation. We fine-tune the pretrained models end-to-end in the target datasets. We use the public codebase from MoCo [17] for all entries, and search the fine-tuning learning rate for each individual method. All methods are based on 200-epoch pre-training in ImageNet using our reproduction.\nTable 5 shows that SimSiam's representations are transferable beyond the ImageNet task. It is competitive among these leading methods. The \"base\" SimSiam in Table 5 uses the baseline pre-training recipe as in our ImageNet experiments. We find that another recipe of lr = 0.5 and wd = 1e-5 (with similar ImageNet accuracy) can produce better results in all tasks (Table 5, \"SimSiam, optimal\").\nWe emphasize that all these methods are highly successful for transfer learning-in Table 5, they can surpass or be on par with the ImageNet supervised pre-training counterparts in all tasks. Despite many design differences, a common structure of these methods is the Siamese network. This comparison suggests that the Siamese structure is a core factor for their general success.", "publication_ref": ["b5", "b11", "b25", "b16"], "figure_ref": [], "table_ref": []}, {"heading": "Methodology Comparisons", "text": "Beyond accuracy, we also compare the methodologies of these Siamese architectures. Our method plays as a hub to connect these methods. Figure 3 abstracts these methods. The \"encoder\" subsumes all layers that can be shared between both branches (e.g., backbone, projection MLP [8], prototypes [7]). The components in red are those missing in SimSiam. We discuss the relations next.\nRelation to SimCLR [8]. SimCLR relies on negative samples (\"dissimilarity\") to prevent collapsing. SimSiam can be thought of as \"SimCLR without negatives\".\nTo have a more thorough comparison, we append the prediction MLP h and stop-gradient to SimCLR. 7 Here is the ablation on our SimCLR reproduction: Neither the stop-gradient nor the extra predictor is necessary or helpful for SimCLR. As we have analyzed in Sec. 5, the introduction of the stop-gradient and extra predictor is presumably a consequence of another underlying optimization problem. It is different from the contrastive learning problem, so these extra components may not be helpful.\nRelation to SwAV [7]. SimSiam is conceptually analogous to \"SwAV without online clustering\". We build up this connection by recasting a few components in SwAV. (i)\nThe shared prototype layer in SwAV can be absorbed into the Siamese encoder. (ii) The prototypes were weight-normalized outside of gradient propagation in [7]; we instead implement by full gradient computation [33]. 8 (iii) The similarity function in SwAV is cross-entropy. With these abstractions, a highly simplified SwAV illustration is shown in Figure 3.\nSwAV applies the Sinkhorn-Knopp (SK) transform [10] on the target branch (which is also symmetrized [7]). The SK transform is derived from online clustering [7]: it is the outcome of clustering the current batch subject to a balanced partition constraint. The balanced partition can avoid collapsing. Our method does not involve this transform.\nWe study the effect of the prediction MLP h and stopgradient on SwAV. Note that SwAV applies stop-gradient on the SK transform, so we ablate by removing it. Here is the comparison on our SwAV reproduction: an alternating formulation [7]. This may explain why stopgradient should not be removed from SwAV.\nRelation to BYOL [15]. Our method can be thought of as \"BYOL without the momentum encoder\", subject to many implementation differences. The momentum encoder may be beneficial for accuracy (Table 4), but it is not necessary for preventing collapsing. Given our hypothesis in Sec. 5, the \u03b7 sub-problem (8) can be solved by other optimizers, e.g., a gradient-based one. This may lead to a temporally smoother update on \u03b7. Although not directly related, the momentum encoder also produces a smoother version of \u03b7. We believe that other optimizers for solving (8) are also plausible, which can be a future research problem.", "publication_ref": ["b7", "b6", "b7", "b6", "b6", "b6", "b32", "b7", "b6", "b6", "b6", "b14", "b7"], "figure_ref": [], "table_ref": []}, {"heading": "Conclusion", "text": "We have explored Siamese networks with simple designs. The competitiveness of our minimalist method suggests that the Siamese shape of the recent methods can be a core reason for their effectiveness. Siamese networks are natural and effective tools for modeling invariance, which is a focus of representation learning. We hope our study will attract the community's attention to the fundamental role of Siamese networks in representation learning.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "A. Implementation Details", "text": "Unsupervised pre-training. Our implementation follows the practice of existing works [36,17,8,9,15].\nData augmentation. We describe data augmentation using the PyTorch [31] [8], we initialize the scale parameters as 0 [14] in the last BN layer for every residual block.\nWeight decay. We use a weight decay of 0.0001 for all parameter layers, including the BN scales and biases, in the SGD optimizer. This is in contrast to the implementation of [8,15] that excludes BN scales and biases from weight decay in their LARS optimizer.\nLinear evaluation. Given the pre-trained network, we train a supervised linear classifier on frozen features, which are from ResNet's global average pooling layer (pool 5 ). The linear classifier training uses base lr = 0.02 with a cosine decay schedule for 90 epochs, weight decay = 0, momentum= 0.9, batch size= 4096 with a LARS optimizer [38]. We have also tried the SGD optimizer following [17] with base lr = 30.0, weight decay = 0, momentum = 0.9, and batch size= 256, which gives \u223c1% lower accuracy. After training the linear classifier, we evaluate it on the center 224\u00d7224 crop in the validation set.", "publication_ref": ["b35", "b16", "b7", "b8", "b14", "b30", "b7", "b13", "b7", "b14", "b37", "b16"], "figure_ref": [], "table_ref": []}, {"heading": "B. Additional Ablations on ImageNet", "text": "The following It benefits from a larger d and gets saturated at d = 2048. This is unlike existing methods [36,17,8,15] whose accuracy is saturated when d is 256 or 512. In this table, the prediction MLP's hidden layer dimension is always 1/4 of the output dimension. We find that this bottleneck structure is more robust. If we set the hidden dimension to be equal to the output dimension, the training can be less stable or fail in some variants of our exploration. We hypothesize that this bottleneck structure, which  behaves like an auto-encoder, can force the predictor to digest the information. We recommend to use this bottleneck structure for our method.", "publication_ref": ["b35", "b16", "b7", "b14"], "figure_ref": [], "table_ref": []}, {"heading": "C. Reproducing Related Methods", "text": "Our comparison in Table 4 is based on our reproduction of the related methods. We re-implement the related methods as faithfully as possible following each individual paper. In addition, we are able to improve SimCLR, MoCo v2, and SwAV by small and straightforward modifications: specifically, we use 3 layers in the projection MLP in SimCLR and SwAV (vs. originally 2), and use symmetrized loss for MoCo v2 (vs. originally asymmetric). Table C.1 compares our reproduction of these methods with the original papers' results (if available). Our reproduction has better results for SimCLR, MoCo v2, and SwAV (denoted as \"+\" in Table 4), and has at least comparable results for BYOL.", "publication_ref": [], "figure_ref": [], "table_ref": ["tab_12"]}, {"heading": "D. CIFAR Experiments", "text": "We have observed similar behaviors of SimSiam in the CIFAR-10 dataset [24]. The implementation is similar to that in ImageNet. We use SGD with base lr = 0.03 and a cosine decay schedule for 800 epochs, weight decay = 0.0005, momentum = 0.9, and batch size = 512. The input image size is 32\u00d732. We do not use blur augmentation. The backbone is the CIFAR variant of ResNet-18 [19], followed by a 2-layer projection MLP. The outputs are 2048-d. ", "publication_ref": ["b23", "b18"], "figure_ref": [], "table_ref": []}], "references": [{"ref_id": "b0", "title": "Self-labelling via simultaneous clustering and representation learning", "journal": "", "year": "2019", "authors": "Yuki Markus Asano; Christian Rupprecht; Andrea Vedaldi"}, {"ref_id": "b1", "title": "Learning representations by maximizing mutual information across views", "journal": "", "year": "2019", "authors": "Philip Bachman; Devon Hjelm; William Buchwalter"}, {"ref_id": "b2", "title": "Fully-convolutional Siamese networks for object tracking", "journal": "", "year": "2016", "authors": "Luca Bertinetto; Jack Valmadre; Joao F Henriques; Andrea Vedaldi; Philip Hs Torr"}, {"ref_id": "b3", "title": "Signature verification using a \"Siamese\" time delay neural network. In NeurIPS", "journal": "", "year": "1994", "authors": "Jane Bromley; Isabelle Guyon; Yann Lecun; Eduard S\u00e4ckinger; Roopak Shah"}, {"ref_id": "b4", "title": "Deep clustering for unsupervised learning of visual features", "journal": "", "year": "2018", "authors": "Mathilde Caron; Piotr Bojanowski; Armand Joulin; Matthijs Douze"}, {"ref_id": "b5", "title": "Unsupervised pre-training of image features on non-curated data", "journal": "", "year": "2019", "authors": "Mathilde Caron; Piotr Bojanowski; Julien Mairal; Armand Joulin"}, {"ref_id": "b6", "title": "Unsupervised learning of visual features by contrasting cluster assignments", "journal": "", "year": "2020", "authors": "Mathilde Caron; Ishan Misra; Julien Mairal; Priya Goyal; Piotr Bojanowski; Armand Joulin"}, {"ref_id": "b7", "title": "A simple framework for contrastive learning of visual representations", "journal": "", "year": "2020", "authors": "Ting Chen; Simon Kornblith; Mohammad Norouzi; Geoffrey Hinton"}, {"ref_id": "b8", "title": "Improved baselines with momentum contrastive learning", "journal": "", "year": "2020", "authors": "Xinlei Chen; Haoqi Fan; Ross Girshick; Kaiming He"}, {"ref_id": "b9", "title": "Sinkhorn distances: Lightspeed computation of optimal transport", "journal": "", "year": "2013", "authors": "Marco Cuturi"}, {"ref_id": "b10", "title": "ImageNet: A large-scale hierarchical image database", "journal": "", "year": "2009", "authors": "Jia Deng; Wei Dong; Richard Socher; Li-Jia Li; Kai Li; Li Fei-Fei"}, {"ref_id": "b11", "title": "The PASCAL Visual Object Classes (VOC) Challenge. IJCV", "journal": "", "year": "2010", "authors": "Mark Everingham; Luc Van Gool; K I Christopher; John Williams; Andrew Winn;  Zisserman"}, {"ref_id": "b12", "title": "Piotr Doll\u00e1r, and Kaiming He. Detectron", "journal": "", "year": "2018", "authors": "Ross Girshick; Ilija Radosavovic; Georgia Gkioxari"}, {"ref_id": "b13", "title": "Yangqing Jia, and Kaiming He. Accurate, large minibatch SGD: Training ImageNet in 1 hour", "journal": "", "year": "2017", "authors": "Priya Goyal; Piotr Doll\u00e1r; Ross Girshick; Pieter Noordhuis; Lukasz Wesolowski; Aapo Kyrola; Andrew Tulloch"}, {"ref_id": "b14", "title": "Bootstrap your own latent: A new approach to self-supervised learning", "journal": "", "year": "2020", "authors": "Jean-Bastien Grill; Florian Strub; Florent Altch\u00e9; Corentin Tallec; Pierre H Richemond; Elena Buchatskaya; Carl Doersch; Bernardo Avila Pires; Zhaohan Daniel Guo; Mohammad Gheshlaghi Azar; Bilal Piot; Koray Kavukcuoglu; R\u00e9mi Munos; Michal Valko"}, {"ref_id": "b15", "title": "Dimensionality reduction by learning an invariant mapping", "journal": "", "year": "2006", "authors": "Raia Hadsell; Sumit Chopra; Yann Lecun"}, {"ref_id": "b16", "title": "Momentum contrast for unsupervised visual representation learning", "journal": "", "year": "2019", "authors": "Kaiming He; Haoqi Fan; Yuxin Wu; Saining Xie; Ross Girshick"}, {"ref_id": "b17", "title": "Piotr Doll\u00e1r, and Ross Girshick. Mask R-CNN", "journal": "", "year": "2017", "authors": "Kaiming He; Georgia Gkioxari"}, {"ref_id": "b18", "title": "Deep residual learning for image recognition", "journal": "", "year": "2016", "authors": "Kaiming He; Xiangyu Zhang; Shaoqing Ren; Jian Sun"}, {"ref_id": "b19", "title": "Learning deep representations by mutual information estimation and maximization", "journal": "", "year": "2019", "authors": "Alex R Devon Hjelm; Samuel Fedorov; Karan Lavoie-Marchildon; Adam Grewal; Yoshua Trischler;  Bengio"}, {"ref_id": "b20", "title": "Data-efficient image recognition with contrastive predictive coding", "journal": "", "year": "2019", "authors": "J Olivier; Aravind H\u00e9naff; Jeffrey De Srinivas; Ali Fauw; Carl Razavi; S M Doersch; Aaron Ali Eslami;  Van Den Oord"}, {"ref_id": "b21", "title": "Batch normalization: Accelerating deep network training by reducing internal covariate shift", "journal": "", "year": "2015", "authors": "Sergey Ioffe; Christian Szegedy"}, {"ref_id": "b22", "title": "Siamese neural networks for one-shot image recognition", "journal": "", "year": "2015", "authors": "Gregory Koch; Richard Zemel; Ruslan Salakhutdinov"}, {"ref_id": "b23", "title": "Learning multiple layers of features from tiny images", "journal": "", "year": "2009", "authors": "Alex Krizhevsky"}, {"ref_id": "b24", "title": "Backpropagation applied to handwritten zip code recognition", "journal": "Neural computation", "year": "1989", "authors": "Yann Lecun; Bernhard Boser; S John; Donnie Denker; Richard E Henderson; Wayne Howard; Lawrence D Hubbard;  Jackel"}, {"ref_id": "b25", "title": "Microsoft COCO: Common objects in context", "journal": "", "year": "2014", "authors": "Tsung-Yi Lin; Michael Maire; Serge Belongie; James Hays; Pietro Perona; Deva Ramanan; Piotr Doll\u00e1r; C Lawrence Zitnick"}, {"ref_id": "b26", "title": "SGDR: Stochastic gradient descent with warm restarts", "journal": "", "year": "2017", "authors": "Ilya Loshchilov; Frank Hutter"}, {"ref_id": "b27", "title": "Some methods for classification and analysis of multivariate observations", "journal": "", "year": "1967", "authors": "James Macqueen"}, {"ref_id": "b28", "title": "Selfsupervised learning of pretext-invariant representations", "journal": "", "year": "2019", "authors": "Ishan Misra; Laurens Van Der Maaten"}, {"ref_id": "b29", "title": "Representation learning with contrastive predictive coding", "journal": "", "year": "2018", "authors": "Aaron Van Den Oord; Yazhe Li; Oriol Vinyals"}, {"ref_id": "b30", "title": "PyTorch: An imperative style, high-performance deep learning library", "journal": "", "year": "2019", "authors": "Adam Paszke; Sam Gross; Francisco Massa; Adam Lerer; James Bradbury; Gregory Chanan; Trevor Killeen; Zeming Lin; Natalia Gimelshein; Luca Antiga"}, {"ref_id": "b31", "title": "Faster R-CNN: Towards real-time object detection with region proposal networks", "journal": "", "year": "2015", "authors": "Kaiming Shaoqing Ren; Ross He; Jian Girshick;  Sun"}, {"ref_id": "b32", "title": "Weight normalization: A simple reparameterization to accelerate training of deep neural networks", "journal": "In NeurIPS", "year": "2016", "authors": "Tim Salimans; P Diederik;  Kingma"}, {"ref_id": "b33", "title": "DeepFace: Closing the gap to human-level performance in face verification", "journal": "", "year": "2014", "authors": "Yaniv Taigman; Ming Yang; Marcaurelio Ranzato; Lior Wolf"}, {"ref_id": "b34", "title": "Contrastive multiview coding", "journal": "", "year": "2019", "authors": "Yonglong Tian; Dilip Krishnan; Phillip Isola"}, {"ref_id": "b35", "title": "Unsupervised feature learning via non-parametric instance discrimination", "journal": "", "year": "2018", "authors": "Zhirong Wu; Yuanjun Xiong; Stella Yu; Dahua Lin"}, {"ref_id": "b36", "title": "Unsupervised embedding learning via invariant and spreading instance feature", "journal": "", "year": "2019", "authors": "Mang Ye; Xu Zhang; C Pong; Shih-Fu Yuen;  Chang"}, {"ref_id": "b37", "title": "Large batch training of convolutional networks", "journal": "", "year": "2017", "authors": "Yang You; Igor Gitman; Boris Ginsburg"}], "figures": [{"figure_label": "21", "figure_type": "figure", "figure_id": "fig_0", "figure_caption": "2 Figure 1 .21Figure 1. SimSiam architecture. Two augmented views of one image are processed by the same encoder network f (a backbone plus a projection MLP). Then a prediction MLP h is applied on one side, and a stop-gradient operation is applied on the other side. The model maximizes the similarity between both sides. It uses neither negative pairs nor a momentum encoder.", "figure_data": ""}, {"figure_label": "2", "figure_type": "figure", "figure_id": "fig_1", "figure_caption": "Figure 2 .2Figure 2. SimSiam with vs. without stop-gradient. Left plot: training loss. Without stop-gradient it degenerates immediately. Middle plot: the per-channel std of the 2-normalized output, plotted as the averaged std over all channels. Right plot: validation accuracy of a kNN classifier[36] as a monitor of progress. Table:ImageNet linear evaluation (\"w/ stop-grad\" is mean\u00b1std over 5 trials).", "figure_data": ""}, {"figure_label": "11", "figure_type": "figure", "figure_id": "fig_4", "figure_caption": "Figure D. 1 Figure D. 1 .11Figure D.1. CIFAR-10 experiments. Left: validation accuracy of kNN classification as a monitor during pre-training. Right: linear evaluation accuracy. The backbone is ResNet-18.", "figure_data": ""}, {"figure_label": "1", "figure_type": "table", "figure_id": "tab_0", "figure_caption": "SimSiam Pseudocode, PyTorch-like", "figure_data": "# f: backbone + projection mlp# h: prediction mlpfor x in loader: # load a minibatch x with n samplesx1, x2 = aug(x), aug(x) # random augmentationz1, z2 = f(x1), f(x2) # projections, n-by-dp1, p2 = h(z1), h(z2) # predictions, n-by-dL = D(p1, z2)/2 + D(p2, z1)/2 # lossL.backward() # back-propagateupdate(f, h) # SGD updatedef D(p, z): # negative cosine similarityz = z.detach() # stop gradientp = normalize(p, dim=1) # l2-normalizez = normalize(z, dim=1) # l2-normalizereturn -(p * z).sum(dim=1).mean()"}, {"figure_label": "1", "figure_type": "table", "figure_id": "tab_2", "figure_caption": "Effect of prediction MLP (ImageNet linear evaluation accuracy with 100-epoch pre-training). In all these variants, we use the same schedule for the encoder f (lr with cosine decay).", "figure_data": "pred. MLP hacc. (%)baselinelr with cosine decay67.7(a)no pred. MLP0.1(b)fixed random init.1.5(c)lr not decayed68.1"}, {"figure_label": "1b23", "figure_type": "table", "figure_id": "tab_3", "figure_caption": ". However, this failure is not about Effect of batch sizes (ImageNet linear evaluation accuracy with 100-epoch pre-training). Effect of batch normalization on MLP heads (Ima-geNet linear evaluation accuracy with 100-epoch pre-training).", "figure_data": "batch size641282565121024 2048 4096acc. (%)66.1 67.3 68.1 68.168.067.964.0proj. MLP's BN pred. MLP's BNcasehidden output hidden output acc. (%)(a) none----34.6(b) hidden-only--67.4(c) default-68.1(d) allunstable"}, {"figure_label": "3", "figure_type": "table", "figure_id": "tab_4", "figure_caption": "", "figure_data": ""}, {"figure_label": "45", "figure_type": "table", "figure_id": "tab_7", "figure_caption": "Comparisons on ImageNet linear classification. All are based on ResNet-50 pre-trained with two 224\u00d7224 views. Evaluation is on a single crop. All competitors are from our reproduction, and \"+\" denotes improved reproduction vs. original papers (see supplement).", "figure_data": "methodbatch sizenegative pairsmomentum encoder100 ep 200 ep 400 ep 800 epSimCLR (repro.+)409666.568.369.870.4MoCo v2 (repro.+)25667.469.971.072.2BYOL (repro.)409666.570.673.274.3SwAV (repro.+)409666.569.170.771.8SimSiam25668.170.070.871.3VOC 07 detectionVOC 07+12 detectionCOCO detectionCOCO instance seg.pre-trainAP 50APAP 75AP 50APAP 75AP 50APAP 75 AP mask 50AP mask AP mask 75scratch35.916.813.060.233.833.144.026.427.846.929.330.8ImageNet supervised 74.442.442.781.353.558.858.238.241.254.733.335.2SimCLR (repro.+)75.946.850.181.855.561.457.737.940.954.633.335.3MoCo v2 (repro.+)77.148.552.582.357.063.358.839.242.555.534.336.6BYOL (repro.)77.147.049.981.455.361.157.837.940.954.333.235.0SwAV (repro.+)75.546.549.681.555.461.457.637.640.354.233.135.1SimSiam, base75.547.050.282.056.462.857.537.940.954.233.235.2SimSiam, optimal77.348.552.582.457.063.759.339.242.156.034.436.7"}, {"figure_label": "", "figure_type": "table", "figure_id": "tab_8", "figure_caption": "Comparison on Siamese architectures. The encoder includes all layers that can be shared between both branches. The dash lines indicate the gradient propagation flow. In BYOL, SwAV, and SimSiam, the lack of a dash line implies stop-gradient, and their symmetrization is not illustrated for simplicity. The components in red are those missing in SimSiam.", "figure_data": "gradsimilarity & dissimilaritygradgradsimilaritypredictormovingencoderencoderencoderaverageencoder momentumimageimageSimCLRBYOLgradsimilaritygradsimilaritySinkhorn-KnopppredictorencoderencoderencoderencoderimageimageSwAVSimSiamFigure 3.SwAVw/ predictorremove stop-grad66.565.2NaNAdding the predictor does not help either. Removing stop-gradient (so the model is trained end-to-end) leads to diver-gence. As a clustering-based method, SwAV is inherently"}, {"figure_label": "", "figure_type": "table", "figure_id": "tab_9", "figure_caption": "notations. Geometric augmentation is RandomResizedCrop with scale in [0.2, 1.0][36] and RandomHorizontalFlip. Color augmentation is ColorJitter with {brightness, contrast, saturation, hue} strength of {0.4, 0.4, 0.4, 0.1} with an applying probability of 0.8, and RandomGrayscale with an ap-", "figure_data": "plying probability of 0.2. Blurring augmentation [8] has aGaussian kernel with std in [0.1, 2.0].Initialization. The convolution and fc layers follow thedefault PyTorch initializers. Note that by default PyTorchinitializes fc layers' weight and bias by a uniform distribu-tion U(\u2212 \u221a k, \u221a k) where k= 1 in channels . Models with sub-stantially different fc initializers (e.g., a fixed std of 0.01)may not converge. Moreover, similar to the implementationof"}, {"figure_label": "", "figure_type": "table", "figure_id": "tab_10", "figure_caption": "table reports the SimSiam results vs. the output dimension d:", "figure_data": "output d25651210242048acc. (%)65.367.267.568.1"}, {"figure_label": "", "figure_type": "table", "figure_id": "tab_11", "figure_caption": ".6 68.3 69.3 67.5 71.1 72.5 -74.3 70.1 repro. 68.3 70.4 -69.9 72.2 72.4 74.3 -70.7", "figure_data": "SimCLRMoCo v2BYOLSwAVepoch 200 800 1000 200 800 300 800 1000400origin 66"}, {"figure_label": "C", "figure_type": "table", "figure_id": "tab_12", "figure_caption": ".1. Our reproduction vs. original papers' results. All are based on ResNet-50 pre-trained with two 224\u00d7224 crops.", "figure_data": ""}], "formulas": [{"formula_id": "formula_0", "formula_text": "D(p 1 , z 2 ) = \u2212 p 1 p 1 2 \u2022 z 2 z 2 2 ,(1)", "formula_coordinates": [2.0, 368.23, 565.85, 176.89, 24.72]}, {"formula_id": "formula_1", "formula_text": "L = 1 2 D(p 1 , z 2 ) + 1 2 D(p 2 , z 1 ).(2)", "formula_coordinates": [3.0, 104.59, 229.31, 181.77, 22.31]}, {"formula_id": "formula_2", "formula_text": "D(p 1 , stopgrad(z 2 )).(3)", "formula_coordinates": [3.0, 119.71, 327.43, 166.66, 9.65]}, {"formula_id": "formula_3", "formula_text": "L= 1 2 D(p 1 , stopgrad(z 2 ))+ 1 2 D(p 2 , stopgrad(z 1 )).(4", "formula_coordinates": [3.0, 54.0, 377.9, 228.49, 30.32]}, {"formula_id": "formula_4", "formula_text": "\u2022", "formula_coordinates": [3.0, 50.11, 637.36, 3.49, 8.64]}, {"formula_id": "formula_5", "formula_text": "z i = z i /( d j=1 z 2 j ) 1 2", "formula_coordinates": [3.0, 308.86, 678.74, 236.25, 22.28]}, {"formula_id": "formula_6", "formula_text": "distribution: z j \u223c N (0, 1), \u2200j, then z i \u2248 z i /d 1 2 and std[z i ] \u2248 1/d 1 2 .", "formula_coordinates": [3.0, 308.86, 701.84, 220.51, 12.9]}, {"formula_id": "formula_7", "formula_text": "1 2 D(z 1 , stopgrad(z 2 )) + 1 2 D(z 2 , stopgrad(z 1 )", "formula_coordinates": [4.0, 59.93, 534.69, 206.72, 13.47]}, {"formula_id": "formula_8", "formula_text": "D(p 1 , z 2 ) = \u2212softmax(z 2 )\u2022 log softmax(p 1 ).", "formula_coordinates": [5.0, 50.11, 362.56, 197.33, 9.65]}, {"formula_id": "formula_9", "formula_text": "L(\u03b8, \u03b7) = E x,T F \u03b8 (T (x)) \u2212 \u03b7 x 2 2 .(5)", "formula_coordinates": [5.0, 350.17, 330.03, 194.94, 16.11]}, {"formula_id": "formula_10", "formula_text": "min \u03b8,\u03b7 L(\u03b8, \u03b7).(6)", "formula_coordinates": [5.0, 402.65, 515.03, 142.46, 14.66]}, {"formula_id": "formula_11", "formula_text": "\u03b8 t \u2190 arg min \u03b8 L(\u03b8, \u03b7 t\u22121 ) (7) \u03b7 t \u2190 arg min \u03b7 L(\u03b8 t , \u03b7)(8)", "formula_coordinates": [5.0, 367.92, 660.5, 177.19, 36.09]}, {"formula_id": "formula_12", "formula_text": "E T F \u03b8 t (T (x)) \u2212 \u03b7 x 2 2", "formula_coordinates": [6.0, 50.11, 160.81, 98.43, 12.2]}, {"formula_id": "formula_13", "formula_text": "\u03b7 t x \u2190 E T F \u03b8 t (T (x)) .(9)", "formula_coordinates": [6.0, 120.61, 213.98, 165.75, 12.69]}, {"formula_id": "formula_14", "formula_text": "\u03b7 t x \u2190 F \u03b8 t (T (x)).(10)", "formula_coordinates": [6.0, 130.66, 338.45, 155.7, 12.69]}, {"formula_id": "formula_15", "formula_text": "\u03b8 t+1 \u2190 arg min \u03b8 E x,T F \u03b8 (T (x)) \u2212 F \u03b8 t (T (x)) 2 2 . (11", "formula_coordinates": [6.0, 60.25, 388.77, 221.97, 29.78]}, {"formula_id": "formula_16", "formula_text": ")", "formula_coordinates": [6.0, 282.21, 409.91, 4.15, 8.64]}, {"formula_id": "formula_17", "formula_text": "E z h(z 1 ) \u2212 z 2 2 2 .", "formula_coordinates": [6.0, 50.11, 567.41, 82.99, 16.11]}, {"formula_id": "formula_18", "formula_text": "h(z 1 ) = E z [z 2 ] = E T f (T (x)", "formula_coordinates": [6.0, 71.04, 587.32, 117.26, 9.65]}, {"formula_id": "formula_19", "formula_text": "\u03b7 t x \u2190 m * \u03b7 t\u22121 x + (1 \u2212 m) * F \u03b8 t (T (x)),", "formula_coordinates": [6.0, 308.86, 606.98, 164.11, 12.19]}], "doi": ""}