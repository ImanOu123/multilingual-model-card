{"title": "Tractable Nonparametric Bayesian Inference in Poisson Processes with Gaussian Process Intensities", "authors": "Ryan Prescott Adams; Iain Murray; David J C Mackay", "pub_date": "", "abstract": "The inhomogeneous Poisson process is a point process that has varying intensity across its domain (usually time or space). For nonparametric Bayesian modeling, the Gaussian process is a useful way to place a prior distribution on this intensity. The combination of a Poisson process and GP is known as a Gaussian Cox process, or doubly-stochastic Poisson process. Likelihood-based inference in these models requires an intractable integral over an infinite-dimensional random function. In this paper we present the first approach to Gaussian Cox processes in which it is possible to perform inference without introducing approximations or finitedimensional proxy distributions. We call our method the Sigmoidal Gaussian Cox Process, which uses a generative model for Poisson data to enable tractable inference via Markov chain Monte Carlo. We compare our methods to competing methods on synthetic data and apply it to several real-world data sets.", "sections": [{"heading": "Introduction", "text": "The Poisson process is a widely-used model for point data in temporal and spatial settings. The inhomogeneous variant of the Poisson process allows the rate of arrivals to vary in time (or space), but typically we do not have a preconceived idea of the appropriate functional form for this variation. In this setting, it is often desirable to use another stochastic process to Appearing in Proceedings of the 26 th International Conference on Machine Learning, Montreal, Canada, 2009. Copyright 2009 by the author(s)/owner(s).\ndescribe nonparametrically the variation in the Poisson intensity function. This construction is called a doubly-stochastic Poisson process, or a Cox process (Cox, 1955), and has been applied in a variety of settings, e.g. neuroscience (Cunningham et al., 2008b), astronomy (Gregory & Loredo, 1992), and forestry (Heikkinen & Arjas, 1999).\nOne variant of the Cox process is the Gaussian Cox process, where the intensity function is a transformation of a random realization from a Gaussian process (GP). From a modeling perspective, this is a particularly convenient way to specify general prior beliefs about the intensity function via a kernel, without having to choose a particular functional form. Unfortunately, however, likelihood-based inference in this model is generally intractable, due to the need to integrate an infinite-dimensional random function. Various approximations have been introduced to deal with this intractability. The classic approach of Diggle (1985) uses Parzen-type kernel densities to construct a nonparametric estimator, with the bandwidth chosen via the empirical Ripley's function (Ripley, 1977). Nonparametric Bayesian approaches to the Gaussian Cox process have been studied in works by Rathbun and Cressie (1994) and M\u00f8ller et al. (1998), which both introduced tractable finite-dimensional proxy distributions via discretization. There have also been nonparametric Bayesian approaches to inhomogeneous Poisson Process inference that do not use underlying Gaussian processes, e.g. Dirichlet process mixtures of Beta distributions (Kottas & Sans\u00f3, 2007).\nIn this paper we present the first approach to a Gaussian Cox process model that enables fullynonparametric Bayesian inference via Markov chain Monte Carlo (MCMC), without requiring either numeric approximation or a finite-dimensional proxy dis- tribution. We achieve this tractability by extending recently-developed MCMC methods for probability density functions (Adams et al., 2009).", "publication_ref": ["b3", "b6", "b7", "b4", "b16", "b15", "b11", "b9", "b0"], "figure_ref": [], "table_ref": []}, {"heading": "The Model", "text": "In this section we review the Poisson process and specify our model, the Sigmoidal Gaussian Cox Process (SGCP), which transforms a Gaussian process into a nonparametric prior distribution on intensity functions. We then show that the SGCP allows exact simulation of Poisson data from a random infinitedimensional intensity function, without performing intractable integrals. This approach is similar to that taken for general density modeling by Adams et al. (2009).", "publication_ref": ["b0"], "figure_ref": [], "table_ref": []}, {"heading": "The Poisson Process", "text": "We consider the inhomogeneous Poisson process on a domain S which we will take to be R D . The Poisson process is parameterized by an intensity (or rate) function \u03bb(s) : S \u2192 R + where R + indicates the nonnegative real numbers. The random number of events N (T ) within a subregion T \u2282 S is Poissondistributed with parameter \u03bb T = T \u03bb(s)ds. The number of events in disjoint subsets are independent. Figure 1 shows an example of a one-dimensional Poisson intensity function along with three independentlydrawn event sequences.", "publication_ref": [], "figure_ref": ["fig_0"], "table_ref": []}, {"heading": "A GP Prior on Poisson Intensities", "text": "We introduce a random scalar function g(s) : S \u2192 R. This function has a Gaussian process prior, which means that the prior distribution over any discrete set of function values {g(s n )} N n=1 is a multivariate Gaussian distribution. These distributions can be con-sistently defined with a positive definite covariance function C(\u2022, \u2022) : S \u00d7 S \u2192 R and a mean function m(\u2022) : S \u2192 R. The mean and covariance functions are parameterized by hyperparameters \u03b8. For a more detailed review of Gaussian processes see, e.g., Rasmussen and Williams (2006).\nIn the Sigmoidal Gaussian Cox Process, we transform the random g(s) into a random intensity function \u03bb(s) via\n\u03bb(s) = \u03bb \u22c6 \u03c3(g(s)) (1)\nwhere \u03bb \u22c6 is an upper bound on \u03bb(s) and \u03c3(\u2022) is the logistic function, \u03c3(z) = (1 + e \u2212z ) \u22121 . Equation 1 squashes g(s) through a sigmoid function so that each g(s) corresponds to a random function with outputs between zero and \u03bb \u22c6 . In this paper we use a logistic function as the sigmoid. The choice of \u03bb \u22c6 is part of the prior and can be included in inference, as described in Section 3.5.", "publication_ref": ["b14"], "figure_ref": [], "table_ref": []}, {"heading": "Generating Poisson Data from Random Gaussian Process Intensities", "text": "We use the transformation of Equation 1 because it allows us to simulate exact Poisson data from a random intensity function drawn from the prior provided by the Gaussian process. By exact we mean that the data are not biased by, for example, the starting state of a finite Markov chain. We generate these exact data via thinning, which is a point-process variant of rejection sampling introduced by Lewis and Shedler (1979).\nWe extend the thinning procedure to simultaneously sample the function g(s) from the Gaussian process.\nWe wish to generate a set of events {s k } K k=1 on some subregion T of S which are drawn according to a Poisson process whose intensity function \u03bb(s) is the result of applying Equation 1 to a random function g(s) drawn from the GP. We do this by first simulating a set of events {\u015d j } J j=1 from a homogeneous Poisson process with intensity \u03bb \u22c6 . If \u00b5(\u2022) is a measure on S, then we first sample J, the number of events in T , by drawing it from a Poisson distribution with parameter \u03bb \u22c6 \u00b5(T ). Next, the J events {\u015d j } J j=1 are distributed uniformly within T .\nThe {\u015d j } J j=1 are now events randomly drawn from a homogeneous Poisson process with intensity \u03bb \u22c6 on T . Next, we treat these {\u015d j } J j=1 as input points for a Gaussian process and sample the function g(s) at these locations, to generate a corresponding set of function values, denoted {g(\u015d j )} J j=1 . We now use the thinning procedure to choose which K \u2264 J points of {\u015d j } J j=1 we will keep so that the kept points, denoted {s k } K k=1 , are drawn from an inhomogeneous Poisson process with an Algorithm 1 Simulate data from a Poisson process on region T with random \u03bb(s) drawn as in Equation 1Inputs: Region T , Upper-bound \u03bb \u22c6 , GP functions m(s) and C(s, s \u2032 ) Outputs: Exact Poisson events E = (s 1 , s 2 , . . .)\n1: V \u2190 \u00b5(T ) \u22b2 Compute the measure of T . 2: J \u223c Poisson(V \u03bb \u22c6 )\n\u22b2 Draw the number of events.\n3: {\u015d j } J j=1 \u223c Uniform(T ) \u22b2 Distribute the events uniformly in T . 4: {g(\u015d j )} J j=1 \u223c GP (C(\u2022, \u2022), m(\u2022), \u03b8, {\u015d j } J j=1 )\n\u22b2 Sample the function at the events from the GP. 5: E \u2190 \u2205 \u22b2 Initialize the set of accepted events. 6: for j \u2190 1 . . . J do 7: r j \u223c Uniform(0, 1) \u22b2 Draw a uniform random variate on the unit interval.", "publication_ref": ["b10"], "figure_ref": [], "table_ref": []}, {"heading": "8:", "text": "if r j < \u03c3(g(\u015d j )) then \u22b2 Apply acceptance rule.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "9:", "text": "E \u2190 E \u222a\u015d j \u22b2 Add\u015d j to accepted events.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "10:", "text": "end if 11: end for 12: return E intensity function \u03bb(s) consistent with the {g(\u015d j )} J j=1 we have just simulated from the Gaussian process. We do this by generating J uniform random variates on (0, 1), denoted {r j } J j=1 . We only accept the events for which r j < \u03c3(g(\u015d j )). These accepted events form the set {s k } K k=1 . This procedure is shown in Algorithm 1 and graphically in Figure 2.", "publication_ref": [], "figure_ref": ["fig_2"], "table_ref": []}, {"heading": "Inference", "text": "We have so far defined a model for generating data from an inhomogeneous Poisson process using a GPbased prior for the intensity function. We now address the problem of inference: given a set of K events, denoted {s k } K k=1 , within a region T , and using the SGCP model of Section 2 as the prior, what is the posterior distribution over \u03bb(s)? The Poisson process likelihood function is\np({s k } K k=1 | \u03bb(s)) = exp \u2212 T ds \u03bb(s) K k=1 \u03bb(s k ). (2)\nFor random infinite-dimensional \u03bb(s), such as the Log Gaussian Cox Process or the SGCP model presented in Section 2, the integral inside the exponential cannot be evaluated. We write Bayes' theorem for our model, using g to indicate the infinite-dimensional object corresponding to g(s):\np(g | {s k } K k=1 ) = (3) GP (g) exp \u2212 T \u03bb \u22c6 \u03c3(g(s)) ds k \u03bb \u22c6 \u03c3(g(s k )) dg GP (g) exp \u2212 T \u03bb \u22c6 \u03c3(g(s)) ds k \u03bb \u22c6 \u03c3(g(s k ))\n.\nThis posterior distribution is doubly-intractable (Murray et al., 2006), due to the presence of an intractable integral over T in the numerator and an intractable integral over g in the denominator. Standard Markov chain Monte Carlo methods are unable to deal with intractability in the likelihood as in Equations 2 and 3. We also have the basic intractability that we cannot na\u00efvely represent the posterior distribution over the infinite-dimensional g, even if we could perform the integral calculations.", "publication_ref": ["b12"], "figure_ref": [], "table_ref": []}, {"heading": "Tractability Via Latent Variables", "text": "Rather than performing MCMC inference directly via the posterior in Equation 3, we augment the posterior distribution to make the Markov chain tractable. Specifically, we consider the Poisson data to have been generated as in Section 2, and the additional latent variables are 1) the total number of \"thinned\" events M ; 2) the locations of the thinned events, {s m } M m=1 ; 3) the values of the function g(s) at the thinned events, denoted g M = {g(s m )} M m=1 ; 4) the values of the function g(s) at the observed events, denoted g K = {g(s k )} K k=1 . The generative procedure did not require integrating an infinite-dimensional random function, nor did it require knowledge of g(s) or \u03bb(s) at more than a finite number of locations. By considering the procedure as a latent variable model, we inherit these convenient properties for inference. The joint distribution over the fixed data {s k } K k=1 , the number of thinned events M , the location of the thinned events {s m } M m=1 , and the function value vectors g M and g K , is\np({s k } K k=1 , M, {s m } M m=1 , g M+K | \u03bb \u22c6 , T , \u03b8) = (\u03bb \u22c6 ) K+M exp {\u2212\u03bb \u22c6 \u00b5(T )} K k=1 \u03c3(g(s k )) M m=1 \u03c3(\u2212g(s m )) \u00d7 GP (g M+K | {s k } K k=1 , {s m } M m=1 , \u03b8) (4)\nwhere g M+K denotes a vector concatenating g M and g K . Note that \u03c3(\u2212z) = 1 \u2212 \u03c3(z), and that we  have integrated out the vertical coordinates r that determined acceptance and rejection. We use three kinds of Markov transitions to sample from this joint distribution: 1) changing M , the number of latent thinned events, 2) changing the locations {s m } M m=1 of the thinned events, and 3) changing the latent function vector g M+K . We also address hyperparameter inference in Section 3.5.\n(t)\u015d j s j \u03bb \u22c6 \u03bb(s) a) b) c) d) \u03bb \u22c6 \u03c3(g(\u015d j )) \u03bb \u22c6 r j", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Sampling the Number of Thinned Events", "text": "We use Metropolis-Hastings to sample from the number of thinned events M . We define a function b(K, M ) : N \u00d7 N \u2192 (0, 1) that gives the Bernoulli probability of proposing an insertion or a deletion. An insertion move consists of proposing a news \u2032 drawn uniformly from T , followed by a draw of the corresponding function value g(s \u2032 ) from the Gaussian pro-cess, conditioned on the current state g M+K . This proposal is\nq ins (M +1 \u2190 M ) = b(K, M ) \u00b5(T ) GP (g(s \u2032 ) |s \u2032 , g M+K ).\n(5)\nA deletion move for a latent thinned event consists of selecting the event m to remove randomly and uniformly from the M events in the current state. This proposal has density\nq del (M \u22121 \u2190 M ) = 1 \u2212 b(K, M ) M . (6\n)\nWe incorporate the joint distribution of Equation 4to find the Metropolis-Hastings acceptance ratios of each type of proposal, integrating out the vertical coordinate r:\na ins = (1\u2212b(K, M +1)) \u00b5(T ) \u03bb \u22c6 (M +1) b(K, M ) (1+exp{g(s \u2032 )}) (7) a del = M b(K, M \u22121) (1+exp{g(s m )}) (1\u2212b(K, M )) \u00b5(T ) \u03bb \u22c6 . (8\n)\nThe proposal probability b(K, M ) can safely be set to 1 2 . Tuning and domain knowledge can almost certainly yield better choices, however. We have not extensively explored this topic. In practice we have found it useful to make several (\u2248 10) of these transitions for each of the transitions made in Sections 3.3 and 3.4.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Sampling the Locations of Thinned Events", "text": "Given the number of thinned events, M , we also wish to sample from the posterior distribution on the locations of the events, {s m } M m=1 . We use Metropolis-Hastings to perform this sampling. We iterate over each of the M thinned events and propose a new locations \u2032 m via the proposal density q(s \u2032 m \u2190s m ). We then draw a function value g(s \u2032 m ) from the Gaussian process, conditioned on the current state g M+K . The Metropolis-Hastings acceptance ratio for this proposal, integrating out the vertical coordinate r, is\na loc = q(s m \u2190s \u2032 m ) (1 + exp{g(s m )}) q(s \u2032 m \u2190s m ) (1 + exp{g(s \u2032 m )}) .(9)\nTypically, perturbative proposals on the order of the Gaussian process length scale are appropriate for these Metropolis-Hastings steps. If the move is accepted, the old valuess m and g(s m ) can safely be forgotten.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Sampling the Function", "text": "We use Hamiltonian Monte Carlo (Duane et al., 1987) for inference of the function values g M+K , to take advantage of gradient information and make efficient proposals. We perform gradient calculations in the \"whitened\" space resulting from linearly transforming g M+K with the inverse Cholesky decomposition of the covariance matrix \u03a3, as this results in a betterconditioned space for calculations. The log conditional posterior distribution is ln p(g\nM+K | M, {s k } K k=1 , {s m } M m=1 , \u03b8) = \u2212 1 2 g T M+K \u03a3 \u22121 g M+K \u2212 K k=1 ln (1 + exp{\u2212g(s k )}) \u2212 M m=1\nln (1 + exp{g(s k )}) + const. (10)", "publication_ref": ["b5"], "figure_ref": [], "table_ref": []}, {"heading": "Hyperparameter Inference", "text": "Given the data, the thinned events {s m } M m=1 and the function values g M+K , we might also like to take advantage of hierarchical Bayesian inference to sample from the posterior distribution on any hyperparameters \u03b8 in the covariance and mean functions. This can be performed straightforwardly using Hamiltonian Monte Carlo as described by Neal (1998).\nThe upper-bound parameter \u03bb \u22c6 can also be inferred as part of the MCMC procedure. Conditioned on M , K, and the thinned event locations, the union of {s k } K k=1 and {s m } M m=1 are drawn from a homogeneous Poisson process on T with rate \u03bb \u22c6 . The Gamma distribution with shape parameter \u03b1 and inverse-scale parameter \u03b2 provides a conditionally-conjugate prior for \u03bb \u22c6 . We can sample from the conditional posterior distribution, which is Gamma with parameters\n\u03b1 post = \u03b1 + K + M \u03b2 post = \u03b2 + \u00b5(T ).", "publication_ref": ["b13"], "figure_ref": [], "table_ref": []}, {"heading": "Predictive Samples", "text": "The predictive distribution is often of interest in Bayesian modeling. This distribution is the one arising on sets of events, integrating out the posterior over intensity functions and hyperparameters. For the SGCP model, this corresponds to generating an entirely new time series from the model, integrating out g(s). It is straightforward to generate data from this distribution as a part of the MCMC inference: after any given step in the Markov chain, run the generative procedure of Algorithm 1, but condition on the current g M+K when drawing from the Gaussian process. That is, in Line 4 of Algorithm 1, condition on {s k , g(s k )} K k=1 and {s m , g(s m )} M m=1 . This provides new time series that are drawn from the predictive distribution. ", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Empirical Results", "text": "We performed two types of empirical analysis of our approach. We used synthetic data with known \u03bb(s) to compare the SGCP to other comparable nonparametric approaches. We also applied our method to two real-world data sets, one temporal and one spatial.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Synthetic Data", "text": "We created three one-dimensional data sets using the following intensity functions:\n1. A sum of an exponential and a Gaussian bump:  (Diggle, 1985) and with the Log Gaussian Cox Process (M\u00f8ller et al., 1998  We compared the SGCP to the classical kernel smoothing (KS) approach of Diggle (1985). We performed edge-corrected kernel smoothing using a quartic kernel and the recommended mean-square minimization technique for bandwidth selection. We also compared to the most closely-related nonparametric Bayesian technique, the Log Gaussian Cox Process of Rathbun and Cressie (1994) and M\u00f8ller et al. (1998). To implement this method, we used discretization to make a finitedimensional approximation and applied Markov chain Monte Carlo. We ran the Log Gaussian Cox Process method with 10 bins (LGCP10), 25 bins (LGCP25) and 100 bins (LGCP100).\nWe used the squared-exponential kernel for both the SGCP and the LGCP, and sampled from the hyperparameters for both models.\nWe report the numerically-estimated \u2113 2 distance between the mean \u03bb(s) provided by each method and the known true function. We also report the mean log predictive probability of ten additional held-out time series generated from the same (known) \u03bb(s). These predictive probabilities were calculated by numerical integrations of the functions. These results are provided in Table 1, and the resulting estimates (excluding LGCP10 and LGCP25) are shown in Figure 3. 1850 1860 1870 1880 1890 1900 1910 1920 1930 1940 1950 1960 1970 ", "publication_ref": ["b4", "b11", "b4", "b15", "b11"], "figure_ref": ["fig_3"], "table_ref": ["tab_0"]}, {"heading": "Coal Mining Disaster Data", "text": "We ran the Markov chain Monte Carlo inference procedure on the classic coal mine disaster data of Jarrett (1979). These data are the dates of 191 coal mine explosions that killed ten or more men in Britain between 15 March 1875 and22 March 1962. Figure 5(a) shows the events along the top, and the inferred mean intensity function. Also shown are approximate quartile error bars. In Figure 5(b) is a normalized histogram of the inferred upper bounding intensity, \u03bb \u22c6 . Figure 5(c) is a normalized histogram of the number of latent thinned events, M .", "publication_ref": ["b8"], "figure_ref": ["fig_6", "fig_6"], "table_ref": []}, {"heading": "Redwoods Data", "text": "We used a standard data set from spatial statistics to demonstrate the Sigmoidal Gaussian Cox Process in two dimensions. These data are the locations of redwood trees studied by Ripley (1977) and others. There are 195 points and, as in previous studies, they have been scaled to the unit square. Figure 4(a) shows the data along with the inferred mean intensity function. Figure 4. The left figure shows the redwood locations that have been scaled to a unit square as in Ripley (1977). The mean intensity estimate from the SGCP is also shown. The black line shows the contour at \u03bb(s) = 150. On the right is a normalized histogram of the locations of thinned events. This illustrates the tendency of these events to migrate to areas where \u03bb(s) is small and \"peg down\" the GP.\nThese data are useful for examining the placement of latent thinned events. Figure 4(b) shows a normalized histogram of where the these events tended to be located during the MCMC run. As expected, it is approximately a \"negative\" of the mean intensity; the thinned events are moving to places where it is necessary to \"peg down\" the intensity function.", "publication_ref": ["b16", "b16"], "figure_ref": [], "table_ref": []}, {"heading": "Discussion", "text": "", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Computational Concerns", "text": "Gaussian processes have significant computational demands: they have O(n 3 ) time complexity for n input points, and O(n 2 ) space complexity. When performing inference in the SGCP model, this means that each MCMC step costs O((K + M ) 3 ) as the thinned events must be included in the GP. Thus the approach we present is infeasible for data sets that have more than several thousand events. Generally, mixing of the Markov chain is a potential computational concern, but by using Hamiltonian Monte Carlo we have had good results. Autocorrelation plots from the \u03bb 1 (s) inference are shown in Figure 6.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Contrasting With Other Methods", "text": "The motivation for the Gaussian Cox process is primarily the ease with which one can specify prior beliefs about the variation of the intensity function of a Poisson process, without specifying a particular functional form. There have been several methods proposed for approximation to this model, most notably the discretization method of Rathbun and Cressie (1994) and M\u00f8ller et al. (1998), to which we have compared the SGCP. Cunningham et al. (2008a) also use a discretization-based approximation for the Cox process and report performance improvements on their domain of interest. This method, however, suffers from three deficiencies for general application: it is a finitedimensional proxy method, it uses the renewal-process formalism that cannot be easily generalized beyond the time domain, and its model is inconsistent in that it assigns prior mass to negative intensity functions.\nThe Dirichlet process mixture of Beta distributions (Kottas & Sans\u00f3, 2007) has the appealing characteristic that it allows tractable nonparametric Bayesian inference via relatively standard MCMC methods. However, it is unclear how to choose the hyperparameters of an infinite mixture of fixed densities to represent beliefs about a Poisson process intensity. The underlying infinite-dimensional stochastic process is the Dirichlet, and it is fixed throughout space and/or time. Variations in the intensity only arise out of the parametric variations in the distributions being mixed. Also, it is straightforward to understand the marginalization properties of the Gaussian Cox Process if the region of interest changes, but a mixture of Betas appears to have discontinuities when expanding the studied region.\nThe Sigmoidal Gaussian Cox Process is superior to the frequentist kernel density approach (Diggle, 1985) in several ways. First, we obtain samples from the posterior rather than a point estimate of the unknown intensity function. Second, we are able to perform bandwidth selection in a principled way by sampling from the hyperparameters of the Gaussian process. Third, we are able to incorporate arbitrary nonstationary Gaussian processes into the framework without modification. Finally, our method does not suffer from detrimental edge effects. These improvements do, however, come at some computational cost.", "publication_ref": ["b15", "b11", "b1", "b9", "b4"], "figure_ref": [], "table_ref": []}, {"heading": "Variations on the Model", "text": "There are several ways in which the Sigmoidal Gaussian Cox Process we have presented could be modified for different modeling situations. For example, to arrive at bounded random intensities we used a constant dominating function \u03bb \u22c6 , but other tractable parametric forms would be suitable and potentially more efficient. Also, we use the logistic function in Equation 1to map from arbitrary functions to the bounded domain, but other functions could be used to achieve different properties. For example, if \u03c3(\u2022) was the normal cumulative distribution function and the Gaussian process prior was zero-mean and stationary with unit amplitude, then the random intensities \u03bb(s) from the model would be marginally uniform beneath \u03bb \u22c6 .", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Summary of Contributions", "text": "We have introduced a novel method of inference for the Gaussian Cox process that avoids the intractability typical to such models. Our model, the Sigmoidal Gaussian Cox Process, uses a generative prior that allows exact Poisson data to be generated from a random intensity function drawn from a transformed Gaussian process. With the ability to generate exact data, we can simulate a Markov chain on the posterior distribution of infinite-dimensional intensity functions without approximation and with finite computational resources. Our approach stands in contrast to other nonparametric Bayesian approaches to the inhomogeneous Poisson process in that it requires neither a crippling of the model, nor a finite-dimensional approximation.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Acknowledgements", "text": "The authors wish to thank Maneesh Sahani and Zoubin Ghahramani for valuable comments. Ryan Adams thanks the Gates Cambridge Trust and the Canadian Institute for Advanced Research.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "", "text": "Cox, D. R. (1955). Some statistical methods connected with series of events. Journal of the Royal Statistical Society, Series B, 17, 129-164. ", "publication_ref": [], "figure_ref": [], "table_ref": []}], "references": [{"ref_id": "b0", "title": "The Gaussian process density sampler", "journal": "NIPS", "year": "2009", "authors": "R P Adams; I Murray; D J C Mackay"}, {"ref_id": "b1", "title": "", "journal": "", "year": "2008", "authors": "J P Cunningham; K V Shenoy; M Sahani"}, {"ref_id": "b2", "title": "Fast Gaussian process methods for point process intensity estimation", "journal": "", "year": "2008", "authors": ""}, {"ref_id": "b3", "title": "Inferring neural firing rates from spike trains using Gaussian processes", "journal": "", "year": "2008", "authors": "J P Cunningham; B M Yu; K V Shenoy; M Sahani"}, {"ref_id": "b4", "title": "A kernel method for smoothing point process data", "journal": "Applied Statistics", "year": "1985", "authors": "P Diggle"}, {"ref_id": "b5", "title": "Hybrid Monte Carlo", "journal": "Physics Letters B", "year": "1987", "authors": "S Duane; A D Kennedy; B J Pendleton; D Roweth"}, {"ref_id": "b6", "title": "A new method for the detection of a periodic signal of unknown shape and period", "journal": "The Astrophysical Journal", "year": "1992", "authors": "P C Gregory; T J Loredo"}, {"ref_id": "b7", "title": "Modeling a Poisson forest in variable elevations: a nonparametric Bayesian approach", "journal": "Biometrics", "year": "1999", "authors": "J Heikkinen; E Arjas"}, {"ref_id": "b8", "title": "A note on the intervals between coal-mining disasters", "journal": "Biometrika", "year": "1979", "authors": "R G Jarrett"}, {"ref_id": "b9", "title": "Bayesian mixture modeling for spatial Poisson process intensities, with applications to extreme value analysis", "journal": "Journal of Statistical Planning and Inference", "year": "2007", "authors": "A Kottas; B Sans\u00f3"}, {"ref_id": "b10", "title": "Simulation of a nonhomogeneous Poisson process by thinning", "journal": "Naval Research Logistics Quarterly", "year": "1979", "authors": "P A W Lewis; G S Shedler"}, {"ref_id": "b11", "title": "Log Gaussian Cox processes", "journal": "Scandinavian Journal of Statistics", "year": "1998", "authors": "J M\u00f8ller; A R Syversveen; R P Waagepetersen"}, {"ref_id": "b12", "title": "MCMC for doubly-intractable distributions. UAI 22", "journal": "", "year": "2006", "authors": "I Murray; Z Ghahramani; D J Mackay"}, {"ref_id": "b13", "title": "Regression and classification using Gaussian process priors", "journal": "Bayesian Statistics", "year": "1998", "authors": "R M Neal"}, {"ref_id": "b14", "title": "Gaussian processes for machine learning", "journal": "MIT Press", "year": "2006", "authors": "C E Rasmussen; C K I Williams"}, {"ref_id": "b15", "title": "Asymptotic properties of estimators for the parameters of spatial inhomogeneous Poisson point processes", "journal": "Advances in Applied Probability", "year": "1994", "authors": "S L Rathbun; N Cressie"}, {"ref_id": "b16", "title": "Modelling spatial patterns", "journal": "Journal of the Royal Statistical Society, Series B", "year": "1977", "authors": "B D Ripley"}], "figures": [{"figure_label": "1", "figure_type": "figure", "figure_id": "fig_0", "figure_caption": "Figure 1 .1Figure 1. Three realizations of events from an inhomogeneous Poisson process in time, along with the associated intensity function.", "figure_data": ""}, {"figure_label": "2", "figure_type": "figure", "figure_id": "fig_2", "figure_caption": "Figure 2 .2Figure 2. This sequence of figures shows the generative procedure for the SGCP. a) The upper-bounding intensity \u03bb \u22c6 is shown, along with a Poisson time series generated from it. b) At each point of the time series, a sample is drawn from the Gaussian process. This function is squashed through the logistic function so that it is everywhere positive and upper-bounded by \u03bb \u22c6 . c) Variates are drawn uniformly on (0, \u03bb \u22c6 ) in the vertical coordinate. d) If the uniform variates are greater than the random function, then the corresponding events are discarded. The kept events are drawn from the inhomogeneous Poisson process corresponding to the random intensity \u03bb(s).", "figure_data": ""}, {"figure_label": "3", "figure_type": "figure", "figure_id": "fig_3", "figure_caption": "Figure 3 .3Figure 3. These are synthetic time series and mean functions from analyzed estimation methods. The thin solid lines show the true intensities, the thick solid lines show the Sigmoidal Gaussian Cox Process (SGCP) posterior mean, the dot-dashed lines show the kernel estimator (KS), and the dotted lines show the posterior mean of the Log Gaussian Cox Process with 100 bins (LGCP100).", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_4", "figure_caption": "\u03bb 1 (s) = 2 exp{\u2212s/15} + exp{\u2212((s \u2212 25)/10) 2 } on the interval [0, 50]. 53 events. 2. A sinusoid with increasing frequency: \u03bb 2 (s) = 5 sin(s 2 )+6 on [0, 5]. 29 events. 3. \u03bb 3 (s) is the piecewise linear function shown in Figure 3(c), on the interval [0, 100]. 235 events.", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_5", "figure_caption": "Coal mine data, with mean intensity and quartile error bars.", "figure_data": ""}, {"figure_label": "5", "figure_type": "figure", "figure_id": "fig_6", "figure_caption": "Figure 5 .5Figure 5. These three figures show the result of MCMC inference applied to coal mine disaster data. There were 191 events between 15 March 1875 and 22 March 1962. The top figure shows the inferred function with quartile error bars. The bottom two figures are normalized histograms of the sampled \u03bb \u22c6 and the number of thinned events M .", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_7", "figure_caption": "Normalized histogram of thinned event locations.", "figure_data": ""}, {"figure_label": "1", "figure_type": "table", "figure_id": "tab_0", "figure_caption": "The Sigmoidal Gaussian Cox Process (SGCP) is compared with the main frequentist kernel smoothing (KS) method", "figure_data": ""}, {"figure_label": "", "figure_type": "table", "figure_id": "tab_1", "figure_caption": "). The LGCP requires binning and the table shows the results with ten (LGCP10), 25 (LGCP25) and 100 (LGCP100) bins. The comparisons were done against time series from known intensity functions and compared on \u2113s norm to the true function and the mean predictive log probability (lp) of ten unseen time series from the same intensity function.", "figure_data": "SGCPKS LGCP10 LGCP25 LGCP100\u03bb1(s)\u21132 lp -45.11 -46.41 4.20 6.655.96 -46.006.12 -46.805.44 -45.24\u03bb2(s)\u21132 38.38 73.71 lp 24.45 28.1970.34 23.3653.27 22.8943.51 25.29\u03bb3(s)\u21132 11.41 30.56 lp -43.39 -46.4790.76 -53.6722.14 -52.3110.79 -47.16"}], "formulas": [{"formula_id": "formula_0", "formula_text": "\u03bb(s) = \u03bb \u22c6 \u03c3(g(s)) (1)", "formula_coordinates": [2.0, 386.44, 187.49, 155.0, 11.44]}, {"formula_id": "formula_1", "formula_text": "1: V \u2190 \u00b5(T ) \u22b2 Compute the measure of T . 2: J \u223c Poisson(V \u03bb \u22c6 )", "formula_coordinates": [3.0, 60.23, 107.91, 481.22, 22.13]}, {"formula_id": "formula_2", "formula_text": "3: {\u015d j } J j=1 \u223c Uniform(T ) \u22b2 Distribute the events uniformly in T . 4: {g(\u015d j )} J j=1 \u223c GP (C(\u2022, \u2022), m(\u2022), \u03b8, {\u015d j } J j=1 )", "formula_coordinates": [3.0, 60.23, 131.05, 481.22, 25.8]}, {"formula_id": "formula_3", "formula_text": "p({s k } K k=1 | \u03bb(s)) = exp \u2212 T ds \u03bb(s) K k=1 \u03bb(s k ). (2)", "formula_coordinates": [3.0, 61.86, 497.49, 227.58, 30.7]}, {"formula_id": "formula_4", "formula_text": "p(g | {s k } K k=1 ) = (3) GP (g) exp \u2212 T \u03bb \u22c6 \u03c3(g(s)) ds k \u03bb \u22c6 \u03c3(g(s k )) dg GP (g) exp \u2212 T \u03bb \u22c6 \u03c3(g(s)) ds k \u03bb \u22c6 \u03c3(g(s k ))", "formula_coordinates": [3.0, 63.04, 617.92, 226.4, 45.08]}, {"formula_id": "formula_5", "formula_text": "p({s k } K k=1 , M, {s m } M m=1 , g M+K | \u03bb \u22c6 , T , \u03b8) = (\u03bb \u22c6 ) K+M exp {\u2212\u03bb \u22c6 \u00b5(T )} K k=1 \u03c3(g(s k )) M m=1 \u03c3(\u2212g(s m )) \u00d7 GP (g M+K | {s k } K k=1 , {s m } M m=1 , \u03b8) (4)", "formula_coordinates": [3.0, 310.91, 625.01, 230.53, 64.47]}, {"formula_id": "formula_6", "formula_text": "(t)\u015d j s j \u03bb \u22c6 \u03bb(s) a) b) c) d) \u03bb \u22c6 \u03c3(g(\u015d j )) \u03bb \u22c6 r j", "formula_coordinates": [4.0, 56.34, 68.81, 202.97, 285.85]}, {"formula_id": "formula_7", "formula_text": "q ins (M +1 \u2190 M ) = b(K, M ) \u00b5(T ) GP (g(s \u2032 ) |s \u2032 , g M+K ).", "formula_coordinates": [4.0, 316.34, 101.59, 216.19, 23.53]}, {"formula_id": "formula_8", "formula_text": "q del (M \u22121 \u2190 M ) = 1 \u2212 b(K, M ) M . (6", "formula_coordinates": [4.0, 352.52, 203.94, 184.68, 23.75]}, {"formula_id": "formula_9", "formula_text": ")", "formula_coordinates": [4.0, 537.2, 210.89, 4.24, 9.96]}, {"formula_id": "formula_10", "formula_text": "a ins = (1\u2212b(K, M +1)) \u00b5(T ) \u03bb \u22c6 (M +1) b(K, M ) (1+exp{g(s \u2032 )}) (7) a del = M b(K, M \u22121) (1+exp{g(s m )}) (1\u2212b(K, M )) \u00b5(T ) \u03bb \u22c6 . (8", "formula_coordinates": [4.0, 338.89, 288.34, 202.55, 52.04]}, {"formula_id": "formula_11", "formula_text": ")", "formula_coordinates": [4.0, 537.2, 323.59, 4.24, 9.96]}, {"formula_id": "formula_12", "formula_text": "a loc = q(s m \u2190s \u2032 m ) (1 + exp{g(s m )}) q(s \u2032 m \u2190s m ) (1 + exp{g(s \u2032 m )}) .(9)", "formula_coordinates": [4.0, 342.61, 581.18, 198.82, 26.08]}, {"formula_id": "formula_13", "formula_text": "M+K | M, {s k } K k=1 , {s m } M m=1 , \u03b8) = \u2212 1 2 g T M+K \u03a3 \u22121 g M+K \u2212 K k=1 ln (1 + exp{\u2212g(s k )}) \u2212 M m=1", "formula_coordinates": [5.0, 70.89, 168.73, 205.3, 82.98]}, {"formula_id": "formula_14", "formula_text": "\u03b1 post = \u03b1 + K + M \u03b2 post = \u03b2 + \u00b5(T ).", "formula_coordinates": [5.0, 80.25, 501.59, 184.39, 10.32]}], "doi": ""}