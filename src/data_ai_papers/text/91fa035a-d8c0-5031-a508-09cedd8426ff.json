{"title": "Efficient Answer Enumeration in Description Logics with Functional Roles -Extended Version", "authors": "Carsten Lutz; Marcin Przyby\u0142ko", "pub_date": "2022-11-28", "abstract": "We study the enumeration of answers to ontology-mediated queries when the ontology is formulated in a description logic that supports functional roles and the query is a CQ. In particular, we show that enumeration is possible with linear preprocessing and constant delay when a certain extension of the CQ (pertaining to functional roles) is acyclic and free-connex acyclic. This holds both for complete answers and for partial answers. We provide matching lower bounds for the case where the query is self-join free. In ontology-mediated querying, a query is combined with an ontology to enrich querying with domain knowledge and to facilitate access to incomplete and heterogeneous data (Bienvenu et al. 2014;Calvanese et al. 2009;Cal\u00ec, Gottlob, and Lukasiewicz 2012). Intense research has been carried out on the complexity of ontology-mediated querying, considering in particular description logics and existential rules as the ontology languages and conjunctive queries (CQs) as the actual queries. Most of the existing studies have concentrated on the basic problem of single-testing which means to decide, given an ontology-mediated query (OMQ) Q, a database D, and a candidate answer\u0101, whether\u0101 is indeed an answer to Q on D. From the viewpoint of many practical applications, however, the assumption that a candidate answer is provided is hardly realistic and it seems much more relevant to enumerate, given an OMQ Q and a database D, all answers to Q on D. The investigation of answer enumeration for OMQs has recently been initiated in (Lutz and Przybylko 2022a) which also introduces useful new notions of minimal partial answers; such answers may contain wildcards to represent objects that are known to exist, but whose exact identity is unknown. If, for example, the ontology stipulates that Researcher \u2291 \u2203worksFor.University Unversity \u2291 Academia and the database D is {Researcher(mary)}, then there are no complete answers to the CQ q(x, y) = worksFor(x, y) \u2227 Academia(y), but (mary, * ) is a minimal partial answer that conveys information which is otherwise lost. The ontologies in (Lutz", "sections": [{"heading": "", "text": "and Przybylko 2022a) are sets of guarded existential rules which generalize well-known description logics such as EL and ELIH. An important feature of description logics that is not captured by guarded rules are functionality assertions on roles, making it possible to declare that some relations must be interpreted as partial functions.\nThe purpose of this paper is to study answer enumeration to OMQs based on description logics with functional roles, in particular ELIHF and its fragments. For the actual queries, we concentrate on CQs. We consider both the traditional complete answers and two versions of minimal partial answers that differ in which kind of wildcards are admitted. In one version, there is only a single wildcard symbol ' * ' while in the other version, multiple wildcards ' * 1 ', ' * 2 ', etc are admitted and multiple occurrences of the same wildcard represent the same unknown constant.\nWe study enumeration algorithms with a preprocessing phase that takes time linear in the size of D and with constant delay, that is, in the enumeration phase the delay between two answers must be independent of D. Note that we assume the OMQ Q to be fixed and of constant size, as in data complexity. If such an algorithm exists, then enumeration belongs to the complexity class DelayC lin . If in addition the algorithm writes in the enumeration phase only a constant amount of memory, then it belons to the class CD\u2022Lin. It is not known whether DelayC lin and CD\u2022Lin coincide (Kazana 2013). Enumeration algorithms with these properties have been studied intensely, see e.g. (Berkholz, Gerhardt, and Schweikardt 2020;Segoufin 2015) for an overview.\nIt is an important result for conjunctive queries q without ontologies that enumeration is possible in CD\u2022Lin if q is acyclic and free-connex acyclic (Bagan, Durand, and Grandjean 2007), the latter meaning that q is acyclic after adding an atom that covers all answer variables. If these conditions are not met and q is self-join free (i.e., no relation symbol occurs more than once), then enumeration is not possible in DelayC lin unless certain algorithmic assumptions fail that pertain to the triangle conjecture, the hyperclique conjecture, and Boolean matrix multiplication (Bagan, Durand, and Grandjean 2007;Brault-Baron 2013). In the presence of functional dependencies, which in their unary version are identical to functionality assertions in description logic, this characterization changes: enumeration in CD\u2022Lin is then possible if a certain extension q + of q guided by the functional dependencies is acyclic and free-connex acyclic (Carmeli and Kr\u00f6ll 2020). In particular, adding functional dependencies may result in queries to become enumerable in CD\u2022Lin which were not enumerable before.\nThe main results presented in this paper are as follows. We consider OMQs Q where the ontology O is formulated in the description logic ELIHF and the query q is a CQ, and show that enumerating answers to Q is possible in CD\u2022Lin if q + is acyclic and free-connex acyclic. For complete answers, this is done by using carefully defined universal models and showing that they can be constructed in linear time via an encoding as a propositional Horn formula. For minimal partial answers (with single or multiple wildcards), we additionally make use of an enumeration algorithm that was given in (Lutz and Przybylko 2022a). Here, we only attain enumeration in DelayC lin .\nWe also prove corresponding lower bounds for selfjoin free queries, paralleling those in (Bagan, Durand, and Grandjean 2007;Brault-Baron 2013) and (Carmeli and Kr\u00f6ll 2020). They concern only ontologies formulated in the fragment ELIF of ELIHF that disallows role inclusions. The reason is that lower bounds for OMQs with role inclusions entails a characterization of enumerability in CD\u2022Lin for CQs with self-joins, a major open problem even without ontologies. The lower bounds apply to complete and (both versions of) minimal partial answers and are conditional on the same algorithmic assumptions as in the case without ontologies. Our constructions and correctness proofs are more challenging than the existing ones in the literature since, unlike in the upper bounds, we cannot directly use the query q + . This is because the transition from q to q + changes the signature, extending the arity of relation symbols beyond two, and it is unclear how this can be reflected in the ontology.\nWe also study the combined complexity of single-testing for the new notions of minimal partial answers, concentrating on the important tractable description logics EL and ELH. It turns out that tractability is only preserved for acyclic CQs and the single wildcard version of minimal partial answers, while in all other cases the complexity increases to NP-complete or DP-complete.", "publication_ref": ["b5", "b3", "b3", "b8", "b3", "b8"], "figure_ref": [], "table_ref": []}, {"heading": "Preliminaries", "text": "Let C, R, and K be countably infinite sets of concept names, role names, and constants. A role R is a role name r \u2208 R or an inverse role r \u2212 with r a role name. If R = r \u2212 , then R \u2212 = r. An ELI-concept is built according to the rule C, D ::\n= A | C \u2293 D | \u2203R.C\nwhere A ranges over concept names and R over roles. An ELIHF -ontology is a finite set of concept inclusions (CIs) C \u2291 D role inclusions (RIs) R \u2291 S, and functionality assertions func(R) where (here and in what follows) C, D range over ELI concepts and R, S over roles. An ELIF -ontology is an ELIHF -ontology that does not use RIs.\nA database is a finite set of facts of the form A(c) or r(c, c \u2032 ) where A is a concept name or \u22a4, r is a role name, and c, c \u2032 \u2208 K. We use adom(D) to denote the set of con-stants used in database D, also called its active domain. We may write r \u2212 (a, b) \u2208 D to mean r(b, a) \u2208 D.\nA signature is a set of concept and role names, uniformly referred to as relation symbols. For a syntactic object O such as a concept or an ontology, we use sig(O) to denote the set of relation symbols used in it and ||O|| to denote its size, that is, the number of symbols needed to write it as a word using a suitable encoding.\nThe semantics is given in terms of interpretations I = (\u2206 I , \u2022 I ) where \u2206 I is a non-empty set called the domain and \u2022 I is the interpretation function, see (Baader et al. 2017) for details. We take the liberty to identify interpretations with non-empty and potentially infinite databases. The interpretation function \u2022 I is then defined as A I = {c | A(c) \u2208 I} for concept names A and r I = {(c, c \u2032 ) | r(c, c \u2032 ) \u2208 I} for role names r. An interpretation I satisfies a CI C \u2291 D if C I \u2286 D I , a fact A(c) if c \u2208 A I , and a fact r(c, c \u2032 ) if (c, c \u2032 ) \u2208 r I . We thus make the standard names assumption, that is, we interpret constants as themselves. An interpretation I is a model of an ontology (resp. database) if it satisfies all inclusions and assertions (resp. facts) in it.\nA database D is satisfiable w.r.t. an ontology O if there is a model I of O and D. Note that functionality assertions in an ontology O can result in databases that are unsatisfiable w.r.t. O. We write O |= func(R) if every model of O satisfies the functionality assertion func(R). In ELIHF , this is decidable and EXPTIME-complete; see appendix.\nQueries. A conjunctive query (CQ) is of the form q(x) = \u2203\u0233 \u03d5(x,\u0233), wherex and\u0233 are tuples of variables and \u03d5(x,\u0233) is a conjunction of concept atoms A(x) and role atoms r(x, y), with A a concept name, r a role name, and x, y variables fromx \u222a\u0233. We call the variables inx the answer variables of q, and use var(q) to denotex \u222a\u0233. We may write \u03b1 \u2208 q to indicate that \u03b1 is an atom in q. For V \u2286 var(q), we use q| V to denote the restriction of q to the atoms that use only variables in V . A homomorphism from q to an interpretation I is a function h : var(q) \u2192 \u2206 I such that A(x) \u2208 q implies A(h(x)) \u2208 I and r(x, y) \u2208 q implies r(h(x), h(y)) \u2208 I. A tupled \u2208 (\u2206 I ) |x| , where |x| denotes the length of the tuplex, is an answer to q on interpretation I if there is a homomorphism h from q to I with h(x) =d.\nEvery CQ q is associated with a canonical database D q obtained from q by viewing variables as constants and atoms as facts. We associate every database, and via D q also every CQ q, with an undirected graph G D = (adom(D), {{a, b} | R(a, b) \u2208 D for some role R}. It is thus clear what we mean by a path c 0 , . . . , c k in a database and a path x 0 , . . . , x k in a CQ. A CQ q is self-join free if every relation symbol occurs in at most one atom in q.\nOntology-Mediated Queries. An ontology-mediated query (OMQ) is a pair Q = (O, \u03a3, q) with O an ontology, \u03a3 \u2286 sig(O) \u222a sig(q) a finite signature called the data schema, and q a query. We write Q(x) to indicate that the answer variables of q arex. The signature \u03a3 expresses the promise that Q is only evaluated on \u03a3-databases. Let D be such a database. A tuple\u0101 \u2208 adom(D) |x| is an answer to Q(x) on D, written D |= Q(\u0101), if I |= q(\u0101) for all models I of O and D. We might alternatively write D, O |= q(\u0101).\n\u22a4 \u2291 A, A 1 \u2293 A 2 \u2291 A, A 1 \u2291 \u2203R.A 2 , \u2203R.A 1 \u2291 A 2 where A 1 , A 2 , A range over concept names. Every ELIHF -ontology O can be converted into this form in linear time without affecting the answers to OMQs (Baader et al. 2017).\nWith (L, Q), we denote the OMQ language that contains all OMQs Q in which O is formulated in DL L and q in query language Q, such as in (ELIHF , CQ).\nPartial Answers. Fix a wildcard symbol ' * ' that is not in K. A wildcard tuple for a database D takes the form (c 1 , . . . , c n ) \u2208 (adom(D) \u222a { * }) n , n \u2265 0. For wildcard tuplesc = (c 1 , . . . , c n ) andc \u2032 = (c \u2032 1 , . . . , c \u2032 n ), we writec c \u2032 if c \u2032 i \u2208 {c i , * } for 1 \u2264 i \u2264 n. Moreover,c \u227ac \u2032 ifc c \u2032 and c =c \u2032 . For example, (a, b) \u227a (a, * ) and (a, * ) \u227a ( * , * ) while (a, * ) and ( * , b) are incomparable w.r.t. '\u227a'. Informally,c \u227ac \u2032 expresses that tuplec is preferred over tuplec \u2032 as it carries more information.\nA partial answer to OMQ Q(x) = (O, \u03a3, q) on an Sdatabase D is a wildcard tuplec for D of length |x| such that for each model I of D and O, there is ac \u2032 \u2208 q(I) such thatc \u2032 c. Note that some positions inc \u2032 may contain constants from adom(I) \\ adom(D), and that the corresponding position inc must then have a wildcard. A partial answer c to Q on a \u03a3-database D is a minimal partial answer if there is no partial answerc \u2032 to Q on D withc \u2032 \u227ac. We use Q(D) * to denote the set of all minimal partial answers to Q on D. An example is provided in the introduction. Note that Q(D) \u2286 Q(D) * . To distinguish them from partial answers, we also refer to the answers in Q(D) as complete answers.\nWe also define a second version of minimal partial answers where multiple wildcards are admitted, from a countably infinite set W = { * 1 , * 2 , . . . } disjoint from K. Multiple occurrences of the same wildcard then represent the same unknown constant while different wildcards may or may not represent different constants. We use Q(D) W to denote the set of minimal partial answers with multiple wildcards. A precise definition is provided in the appendix, here we only give an example. \nExample 1. Let Q(x, y, z) = (O, \u03a3, q)\nq(x, y, z) = Person(x) \u2227 hasEmployee(y, x) \u2227 TechCompany(y) \u2227 hasEmployee(z, x) \u2227 CarCompany(z).\nFurther consider the database D with facts CarFactory(gigafactory1), TechFactory(gigafactory1).\nThen Q W (D) = {( * 1 , * 2 , * 2 )}. If we extend D with hasOwner(gigafactory1, tesla), then this changes to Q W (D) = {( * 1 , tesla, tesla)}.\nEnumeration. We are interested in enumerating the complete and minimal partial answers to a given OMQ Q(x) = (O, \u03a3, q) \u2208 (L, Q) on a given \u03a3-database D. An enumeration algorithm has a preprocessing phase where it may produce data structures, but no output. In the subsequent enumeration phase, it enumerates all tuples from Q(D), without repetition. Answer enumeration for an OMQ language (L, Q) is possible with linear preprocessing and constant delay, or in DelayC lin , if there is an enumeration algorithm for (L, Q) in which preprocessing takes time f (||Q||)\u2022 O(||D||), f a computable function, while the delay between the output of two consecutive answers depends only on ||Q||, but not on ||D||. Enumeration in CD\u2022Lin is defined likewise, except that it can use a constant total amount of extra memory in the enumeration phase.\nThe above definition only becomes precise when we fix a concrete machine model. We use RAMs under a uniform cost measure (Cook and Reckhow 1973), see (Grandjean 1996) for a formalization. A RAM has a one-way read-only input tape, a write-only output tape, and an unbounded number of registers that store non-negative integers of O(log n) bits, n the input size. In this model, which is standard in the DelayC lin context, sorting is possible in linear time and we can access in constant time lookup tables indexed by constants from adom(D) (Grandjean 1996).\nWe also consider single-testing which means to decide, given an OMQ Q(x) = (O, \u03a3, q), a \u03a3-database D, and an answer candidatec \u2208 adom(D) |x| , whetherc \u2208 Q(D).\nAcyclic CQs. Let q(x) = \u2203\u0233 \u03d5(x,\u0233) be a CQ. A join tree for q(x) is an undirected tree T = (V, E) where V is the set of atoms in \u03d5 and for each x \u2208 var(q), the set {\u03b1 \u2208 V | x occurs in \u03b1} is a connected subtree of T . A CQ q(x) is acyclic if it has a join tree. If q contains only unary and binary relations (which shall not always be the case), then q being acyclic is equivalent to G Dq being a tree, potentially with multi-edges and self-loops. A CQ q(x) is free-connex acyclic if adding a head atom H(x) that 'guards' the answer variables, where H is a relation symbol of arity |x|, results in an acyclic CQ. Acyclicity and free-connex acyclicity are independent properties, that is, neither of them implies the other.", "publication_ref": ["b2", "b2", "b13"], "figure_ref": [], "table_ref": []}, {"heading": "Upper Bounds", "text": "We identify cases that admit answer enumeration in CD\u2022Lin and DelayC lin , considering both complete answers and minimal partial answers. From now on, we also use relation symbols of arity exceeding two, identifying concept names and role names with relations symbols of arity one and two.\nWe start with some preliminaries. Let Q(x) = (O, \u03a3, q) \u2208 (ELIHF , CQ). Fix a linear order on the variables in q.\nA path y 0 , . . . , y k in q is functional if for CQ q x y z t R1 R2 R3 R4 Join tree for q + (x, t, y) R \u2032 1 (x,y,z) R \u2032 2 (y,z) R \u2032 3 (z,x,y) R \u2032 4 (t,y)\nJoin tree for q + (x, t, y) with added head atom H\nR \u2032 1 (x,y,z) R \u2032 2 (y,z) R \u2032 3 (z,x,y) R \u2032 4 (t,y) H(x,t,y) Figure 1: Illustration of Example 2 0 \u2264 i < k, there is an atom R(y i , y i+1 ) \u2208 q such that O |= func(R).\nFor a tuplex of variables, we usex + to denote the tuplex\u0233 where\u0233 consists of all variables y, in the fixed order, that are reachable from a variable inx on a functional path in q and that are not part ofx.\nThe FA-extension of q is the CQ q + (x + ) that contains an atom R \u2032 (\u0233 + ) for every atom R(\u0233) in q, where R \u2032 is a fresh relation symbol of arity |\u0233 + |. Note that q and q + are over different signatures. Moreover, q + may contain symbols of high arity and is self-join free. We will also consider the CQ q + (x) with a non-extended set of answer variables. Our FAextensions are a variation of the notion of FD-extension used in (Carmeli and Kr\u00f6ll 2020).\nExample 2. Let O={func(R \u2212 2 ), func(R \u2212 3 ), func(R 4 )} and q(x, t)=R 1 (x, y) \u2227 R 2 (y, z) \u2227 R 3 (z, x) \u2227 R 4 (t, y). Fix the variable order x < y < z < t. Then the CQ q + ((x, t) + ) is q + (x, t, y) = R \u2032 1 (x, y, z), R \u2032 2 (y, z), R \u2032 3 (z, x, y), R \u2032 4 (t, y\n), which is acyclic and free-connex acyclic while q is neither. See Figure 1 for a graphical representation.\nIn contrast, the version of q + that has a non-extended set of answer variables {x, t} (but is otherwise identical) is acyclic, but not free-connex acyclic.\nWe state our upper bound for complete answers.\nTheorem 1. Let Q(x) = (O, \u03a3, q) \u2208 (ELIHF , CQ) such that q + (x +\n) is acyclic and free-connex acyclic. Then the complete answers to Q can be enumerated in CD\u2022Lin.\nThe proof of Theorem 1 relies on the following.\nProposition 1. Given an OMQ Q(x) = (O, \u03a3, q) \u2208 (ELIHF , CQ) and a \u03a3-database D that is satisfiable w.r.t. O, one can compute in time 2 poly(||Q||) \u2022 O(||D||) a database U D,Q \u2287 D that satisfies all functionality asser- tions in O and such that Q(D) = q(U D,Q ) \u2229 adom(D) |x| .\nThe database U D,Q from Proposition 1 should be thought of as a univeral model for the ontology O and database D that is tailored specifically towards the query q. Such 'querydirected' universal models originate from (Bienvenu et al. 2013). We compute U D,Q in time 2 poly (||Q||) \u2022 O(||D||) by constructing a suitable propositional Horn logic formula \u03b8, computing a minimal model for \u03b8 in linear time (Dowling and Gallier 1984), and then reading off U D,Q from that model. Details are provided in the appendix.\nTo prove Theorem 1, let Q(x) = (O, \u03a3, q) \u2208 (ELIHF , CQ) with q + (x + ) acyclic and free-connex, and let D be a \u03a3-database. We first replace q by the CQ q 0 that is obtained from q by choosing a fresh concept name D and adding D(x) for every answer variable x. We also replace D by the database D 0 = U D,Q from Proposition 1 extended with D(c) for all c \u2208 adom(D). Clearly, Q(D) = q 0 (D 0 ) and thus it suffices to enumerate the latter.\nWe next replace q 0 (x) by q + 0 (x + ) and D 0 by a database D + 0 that reflects the change in signature which comes with the transition from q 0 to q + 0 . More precisely if atom R(\u0233) is replaced with R \u2032 (\u0233 + ) in the construction of q + 0 and h is a homomorphism from q 0 |\u0233+ to D 0 , then D + 0 contains the fact R \u2032 (h(\u0233 + )). The following implies that q 0 (D 0 ) is the projection of q + 0 (D + 0 ) to the first |x| components. Lemma 1. Every homomorphism from q 0 to D 0 is also a homomorphism from q + 0 to D + 0 and vice versa. Moreover, D + 0 can be constructed in time linear in ||D||.\nTo enumerate q 0 (D 0 ), we may thus enumerate q + (D + 0 ) and project to the first |x| components. The former can be done in CD\u2022Lin: since q + (x + ) is acyclic and free-connex, so is q + 0 (x + ), and thus we may apply the CD\u2022Lin enumeration procedure from (Bagan, Durand, and Grandjean 2007;Berkholz, Gerhardt, and Schweikardt 2020). Clearly, projection can be implemented in constant time. To argue that the resulting algorithm produces no duplicates, it remains to observe that the answers to q 0 (D 0 ) and to q + (D + 0 ) are in a one-to-one correspondence, that is, everyc \u2208 q 0 (D 0 ) extends in a unique way to ac \u2032 \u2208 q + (D + 0 ). This, however, is an immediate consequence of Lemma 1, the definition of q + 0 and the fact that D 0 saties all functionality assertions in O.\nWe now turn to minimal partial answers. Here, we cannot expect a result as general as Theorem 1, a counterexample is presented in Section 3. We thus resort to the stronger condition that q + (x) rather than q + (x + ) is acyclic and freeconnex acyclic. The difference between the two conditions is related to the interplay of answer variables and functional roles. In particular, q + (x) and q + (x + ) are identical for OMQs Q = (O, \u03a3, q) such that answer variables have no functional edges to quantified variables, that is, for every atom R(x, y) in q, if O |= func(R) and x is an answer variable, then y is also an answer variable. Theorem 2. Let Q(x) = (O, \u03a3, q) \u2208 (ELIHF , CQ) such that q + (x) is acyclic and free-connex acyclic. Then the minimal partial answers to Q can be enumerated in DelayC lin , both with multi-wildcards and with a single wildcard.\nTo prove Theorem 2, we make use of a recent result regarding OMQs in which the ontologies are sets of guarded existential rules. We refer to the class of such ontologies as G. It was shown in (Lutz and Przybylko 2022a) that minimal partial answers to OMQs Q = (O, \u03a3, q) \u2208 (G, CQ) can be enumerated in DelayC lin if q is acyclic and free-connex acyclic, both with multi-wildcards and with a single wildcard. The enumeration algorithms presented in (Lutz and Przybylko 2022a) are non-trivial and we use them as a blackbox. To achieve this, we need a slightly more 'low-level' formulation of the results from (Lutz and Przybylko 2022a). In what follows, we restrict our attention to minimal partial answers with a single wildcard. The multi-wildcard case is analogous, details are in the appendix.\nFix a countably infinite set N of nulls that is disjoint from K and does not contain the wildcard symbol ' * '. In what follows, we assume that databases may use nulls in place of constants. Let D be a database and q(x) a CQ. For an answer a \u2208 q(D), we use\u0101 * N to denote the unique wildcard tuple for D obtained from\u0101 by replacing all nulls with ' * '. We call\u0101 * N a partial answer to q on D and say that it is minimal if there is nob \u2208 q(D) withb * N \u227a\u0101 * N . With q(D) * N , we denote the set of minimal partial answers to q on D.\nA database E is chase-like if there are databases D 1 , . . . , D n such that\n1. E = D 1 \u222a \u2022 \u2022 \u2022 \u222a D n ,\n2. D i contains exactly one fact that uses no nulls, and that fact contains all constants in adom(\nD i ) \\ N, 3. adom(D i ) \u2229 adom(D j ) \u2229 N = \u2205 for 1 \u2264 i < j \u2264 n.\nWe call D 1 , . . . , D n a witness for E being chase-like. The term 'chase-like' refers to the chase, a well-known procedure for constructing universal models (Johnson and Klug 1982). The query-directed universal models U D,Q from Proposition 1 are chase-like when the elements of N = adom(U D,Q ) \\ adom(D) are viewed as nulls. A witness D 1 , . . . , D n is obtained by removing from U D,Q all atoms r(a, b) with a, b \u2208 adom(D) and taking the resulting maximally connected components. The domain sizes |adom(D \u2032 i )| then only depend on Q, but not on D. The following is Proposition E.1 in (Lutz and Przybylko 2022b). Theorem 3. For every CQ q(x) that is acyclic and free-connex ayclic, enumerating the answers q(D) * N is in DelayC lin for databases D and sets of nulls N \u2286 adom(D) such that D is chase-like with witness D 1 , . . . , D n where |adom(D i )| does not depend on D for 1 \u2264 i \u2264 n.\nThe strategy for proving Theorem 2 is now similar to the case of complete answers. Let Q(x) = (O, \u03a3, q) \u2208 (ELIHF , CQ) with q + (x) acyclic and free-connex acyclic, and let D be a \u03a3-database. It is shown in the appendix that the query-directed universal model U D,Q is also universal for partial answers with a single wildcard in the sense that Q(D) * = q(U D,Q ) * N . We thus first replace D with U D,Q , aiming to enumerate Q(D) * = q(U D,Q ) * N . We next replace q(x) with q + (x) and D 0 = U D,Q with\nD + 0 . It follows from Lemma 1 that q(D 0 ) * N = q + (D + 0 ) * N .\nNote that no projection is needed since q + has answer variablesx here, in contrast to answer variablesx + in the case of complete answers. It remains to invoke Theorem 3.", "publication_ref": ["b6", "b3", "b5"], "figure_ref": [], "table_ref": []}, {"heading": "Lower Bounds", "text": "The main aim of this section is to establish lower bounds that (partially) match the upper bounds stated in Theorems 1 and 2. First, however, we show that Theorem 2 cannot be strengthened by using q + (x + ) in place of q + (x). All results presented in this section are conditional on algorithmic conjectures and assumptions. One of the conditions concerns Boolean matrix multiplication.\nA Boolean n \u00d7 n matrix is a function M : [n] 2 \u2192 {0, 1} where [n] denotes the set {1, . . . , n}. The product of two The following implies that Theorem 2 cannot be strengthened by using q + (x + ) in place of q + (x).\nBoolean n \u00d7 n matrices M 1 , M 2 is the Boolean n \u00d7 n ma- trix M 1 M 2 := n c=1 M 1 (a, c) \u2022 M 2 (c\nTheorem 4. There is an OMQ Q(x) = (O, \u03a3, q) \u2208 (ELIF , CQ) such that q + (x + ) is acyclic and free-connex acyclic, but the minimal partial answers to Q cannot be enumerated in DelayC lin unless spBMM is possible in time\nO(|M 1 | + |M 2 | + |M 1 M 2 |)\n. This holds both for single wildcards and multi-wildcards.\nProof. Let Q(x) = (O, \u03a3, q) where O = {A \u2291 \u2203f \u2212 .\u22a4, func(f )} \u03a3 = {A, r 1 , r 2 , f } q(x, z, y) = r 1 (x, u 1 ) \u2227 f (z, u 1 ) \u2227 f (z, u 2 ) \u2227 r 2 (u 2 , y).\nIt is easy to see that q + (x + ) is just q, except that now all variables are answer variables. Thus, q + (x + ) is acyclic and free-connex acyclic, as required.\nAssume to the contrary of what is to be shown that there is an algorithm that given a database D, enumerates Q(D) * in DelayC lin (the case of multi-wildcards is identical). Then this algorithm can be used, given two Boolean matrices\nM 1 M 2 in list representation, to compute M 1 M 2 in time O(|M 1 | + |M 2 | + |M 1 M 2 |)\n. This is done as follows.\nGiven M 1 and M 2 , we construct a database D by adding facts r 1 (a, c) and A(c) for every (a, c) with M 1 (a, c) = 1 and facts r 2 (c, b) and A(c) for every (c, b)\nwith M 2 (c, b) = 1. It is easy to verify that Q(D) * = {(a, * , b) | (a, b) \u2208 M 1 M 2 }. We may thus construct a list representation of M 1 M 2 by enumerating Q(D) * . Since |D| = |M 1 | + |M 2 | and we can enumerate in DelayC lin , the overall time spent is O(|M 1 | + |M 2 | + |M 1 M 2 |).\nWe now consider lower bounds for Theorems 1 and 2. Here, we need two additional algorithmic conjectures that are closely related, both from fine-grained complexity theory. Recall that a k-regular hypergraph is a pair H = (V, E) where V is a finite set of vertices and E \u2286 2 V contains only sets of cardinality k. Consider the following problems:\n\u2022 The triangle detection problem is to decide, given an undirected graph G = (V, E) as a list of edges, whether G contains a 3-clique (a \"triangle\").\n\u2022 The (k + 1, k)-hyperclique problem, for k \u2265 3, is to decide whether a given k-uniform hypergraph H contains a hyperclique of size k + 1, that is, a set of k + 1 vertices such that each subset of size k forms a hyperedge in H. The triangle conjecture states that there is no algorithm for triangle detection that runs in linear time (Abboud and Williams 2014) and the hyperclique conjecture states that every algorithm that solves the (k + 1, k)-hyperclique problem, for some k \u2265 3, requires running time at least n k+1\u2212o(1) with n the number of vertices (Lincoln, Williams, and Williams 2018). Note that triangle detection is the same as (k + 1, k)-hyperclique for k = 2, but the formulation of the two conjectures differs in that the former refers to the number of edges and the latter to the number of nodes. The following theorem summarizes our lower bounds. Theorem 5. Let Q(x) = (O, \u03a3, q) \u2208 (ELIF , CQ) be nonempty with q self-join free and connected. 1. If q + is not acyclic, then enumerating complete answers to Q is not in DelayC lin unless the triangle conjecture fails or the hyperclique conjecture fails. 2. If q + (x + ) is acyclic, but not free-connex acyclic, then enumerating complete answers to Q is not in DelayC lin unless spBMM is possible in time O(|M\n1 | + |M 2 | + |M 1 M 2 |).\nThe same is true for least partial answers, both with a single wildcard and with multi-wildcards.\nRecall that we use different versions of q + , namely q + (x + ) and q + (x) in Theorems 1 and 2. The difference is moot for Point 1 of Theorem 2 as q + (x + ) is acyclic if and only if q + (x) is.\nThe proof of Theorem 5 is inspired by proofs from (Bagan, Durand, and Grandjean 2007;Brault-Baron 2013;Carmeli and Kr\u00f6ll 2020) and uses similar ideas. However, the presence of ontologies and the fact that we want to capture minimal partial answers makes our proofs much more subtle. In particular, the constructions in (Carmeli and Kr\u00f6ll 2020) first transition from q to q + and then work purely on q + , but we cannot do this due to the presence of the ontology, which is formulated in the signature of q, not of q + . We (partially) present the proof of Point 1 and refer to the appendix for full detail.\nThe proof of Point 1 of Theorem 5 splits into two cases. Recall that the Gaifman graph of a CQ q is the undirected graph that has the atoms of q as its nodes and an edge between any two nodes/atoms that share a variable. It is known that if q is not acyclic, then its Gaifman graph is not chordal or not conformal (Beeri et al. 1983). Here, chordal means that every cycle of length at least 4 has a chord and conformal means that for every clique C in the Gaifman graph, there is an atom in q that contains all variables in C. The first case of the proof of Point 1 of Theorem 5 is as follows. Lemma 2. Let Q(x) = (O, \u03a3, q) \u2208 (ELIF , CQ) be nonempty such that q is self-join free and connected and the hypergraph of q + is not chordal. Then enumerating complete answers to Q is not in DelayC lin unless the triangle conjecture fails. The same is true for least partial answers, both with a single wildcard and with multi-wildcards.\nThe second case is formulated similarly, but refers to nonconformality and the hyperclique conjecture. We give the proof of Lemma 2.\nLet Q(x) = (O, \u03a3, q) \u2208 (ELIF , CQ) be as in Lemma 2, and let y 0 , . . . , y k be a chordless cycle in the Gaifman graph of q + that has length at least 4. Let Y = {y 0 , . . . , y k } and for easier reference let y k+1 = y 0 . For every variable x in q, we use Y x to denote the set of variables y \u2208 Y such that q contains a functional (possibly empty) path from x to y.\nLet G = (V, E) be an undirected graph. We may assume w.l.o.g. that G does not contain isolated vertices. Our aim is to construct a database D, in time linear in |E|, such that G contains a triangle if and only if Q(D) = \u2205. Clearly, a DelayC lin enumeration algorithm for Q lets us decide the latter in linear time and thus we have found an algorithm for triangle detection that runs in time linear in |E|, refuting the triangle conjecture.\nThe construction proceeds in two steps. In the first step, we define a database D 0 that encodes the graph G. The constants in D 0 are pairs x, f with x \u2208 var(q) and f a partial function from Y to V . For every variable x in q and word w = a 0 . . . a k \u2208 V * we use f w\nx denote the function that maps each variable y i \u2208 Y x to a i and is undefined on all other variables. We may treat E as a symmetric (directed) relation, writing e.g. (a, b) \u2208 E and (b, a) \u2208 E if {a, b} \u2208 E. For every atom r(x, y) in q with r \u2208 \u03a3, add the following facts to D 0 :\n1. if y 0 \u2208 Y x \u222aY y : r( x, f ab k x , y, f ab k y ) for all (a, b) \u2208 E, 2. if y k \u2208 Y x \u222aY y : r( x, f a k b x , y, f a k b y ) for all (a, b) \u2208 E, 3. if neither is true: r( x, f b k+1 x , y, f b k+1 y ) for all a \u2208 V .\nIn addition, we add the fact A(c) for every concept name A \u2208 \u03a3 and every constant c introduced above.\nTo provide an intuition for the reduction, let us start with a description that is relatively simple, but inaccurate. Consider a homomorphism h from q to D 0 . It can be shown that h must map every variable y i to a constant of the form y i , f yi and that the domain of the function f yi is {y i }. Since f yi (y i ) is a node from G, the homomorphism h thus identifies a sequence of nodes a 0 , . . . , a k from G, with a i = f yi (y i ). The construction of D 0 ensures that a 1 = \u2022 \u2022 \u2022 = a k\u22121 and a 0 , a 1 , a k forms a triangle in G. Conversely, every triangle in G gives rise to a homomorphism from q to D 0 of the described form. For other variables x from q, the use of the function f x in constants x, f x serves the purpose of ensuring that all functionality assertions in O are satisfied in D 0 . A concrete example for the construction of D 0 is provided in the appendix.\nThe above description is inaccurate for several reasons. First, instead of homomorphisms into D 0 , we need to consider homomorphisms into the universal model U D0,O (defined in the appendix). Then variables y i need not be mapped to a constant y i , f yi , but can also be mapped to elements outside of adom(D 0 ). This does not break the reduction but complicates the correctness proof. Another difficulty arises from the fact that O and q may use symbols that do not occur in \u03a3 and and we need these to be derived by O at the relevant points in D 0 . This is achieved in the second step of the construction of D 0 , described next.\nInformally, we want O to derive, at every constant c \u2208 adom(D 0 ), anything that it could possibly derive at any constant in any database. This is achieved by attaching certain tree-shaped databases to every constant in D 0 . We next make this precise. Let R \u03a3 be the set of all role names from \u03a3 and their inverses. The infinite tree-shaped \u03a3-database D \u03c9 has as its active domain adom(D \u03c9 ) the set of all (finite) words over alphabet R \u03a3 and contains the following facts:\n\u2022 A(w) for all w \u2208 adom(D \u03c9 ) and concept names A \u2208 \u03a3;\n\u2022 r(w, w \u2032 ) for all w, w \u2032 \u2208 adom(D \u03c9 ) with w \u2032 = wr;\n\u2022 r(w \u2032 , w) for all w, w \u2032 \u2208 adom(D \u03c9 ) with w \u2032 = wr \u2212 . We cannot directly use D \u03c9 in the construction of D since it is infinite. Consider all concept names A such that D \u03c9 , O |= A(\u03b5). We prove in the appendix that these are precisely the concept names A that are non-empty, that is, D, O |= A(c) for some database D and some c \u2208 adom(D). Clearly the number of such concept names A is finite. By compactness, there is thus a finite database D tree \u2286 D \u03c9 such that D tree , O |= A(\u03b5) for all non-empty concept names A. We may w.l.o.g. assume that D tree is the initial piece of D \u03c9 of some finite depth k \u2265 1.\nIn principle, we would like to attach a copy of D tree at every constant in D 0 . This, however, might violate functionality assertions in O and thus we have to be a bit more careful. For a role R \u2208 {r, r \u2212 } with r \u2208 \u03a3, let D R \u2286 D tree be the database that consists of the fact R(\u03b5, R) and the subtree in D tree rooted at R. Now, the final database D used in the reduction is obtained from D 0 as follows: for every c \u2208 adom(D 0 ) and every role R \u2208 {r, r \u2212 } with r \u2208 \u03a3 such that there is no fact R(c, c \u2032 ) \u2208 D 0 , add a disjoint copy of D R , glueing the copy of \u03b5 to c.\nIt is easy to see that D can be computed in time O(||E||). In particular, the database D tree can be constructed (in time independent of D) by generating initial pieces of D \u03c9 of increasing depth and checking whether all non-empty concept names are implied at \u03b5. In the appendix, we show that D satisfies all functionality assertions in O and is derivation complete at adom(D 0 ). We then use a rather subtle analysis to prove the following. Lemma 3. TD1 If there is a minimal partial answer to Q on D (with a single wildcard or with multiple wildcards), then there is a triangle in G. TD2 If there is a triangle in G then there is a complete answer to Q on D.", "publication_ref": ["b0", "b3", "b8", "b4"], "figure_ref": [], "table_ref": []}, {"heading": "Combined Complexity of Single-Testing", "text": "The results on enumeration provide a (mild) indication that partial answers can be computationally more challenging than complete ones: the condition used in Theorem 1 is weaker than that in Theorem 2, and Theorem 1 achieves CD\u2022Lin while Theorem 2 achieves only DelayC lin . Other cases in point may be found in (Lutz and Przybylko 2022a). This situation prompts us to study the effect of answer partiality on the combined complexity of single-testing.\nWe concentrate on the fragments EL and ELH of ELIHF that do not admit inverse roles and functionality assertions and, in the case of EL, also no role inclusions. These DLs bear special importance as single-testing complete answers to OMQs Q = (O, \u03a3, q) \u2208 (ELH, CQ) is in PTIME if q acyclic and NP-complete otherwise, both in combined complexity, and thus no harder than without ontologies (Kr\u00f6tzsch, Rudolph, and Hitzler 2007;Bienvenu et al. 2013). We will show that making answers partial may have an adverse effect on these complexities, starting, however, with a positive result. It is proved by a Turing-reduction to single-testing complete answers. Theorem 6. For OMQs Q = (O, \u03a3, q) \u2208 (ELH, CQ) with q acyclic, single-testing minimal partial answers with a single-wildcard is in PTIME in combined complexity.\nPartial answers with multi-wildcards are less wellbehaved. The lower bound in the next result is proved by a reduction from 1-in-3-SAT and only needs a very simple ontology that consists of a single CI of the form A \u2291 \u2203r.\u22a4. Theorem 7. For OMQs Q = (O, \u03a3, q) \u2208 (EL, CQ) with q acyclic, single-testing minimal partial answers with multi-wildcards is NP-complete in combined complexity. The same is true in (ELH, CQ)\nWe now move from acyclic to unrestricted CQs. This makes the complexity increase further, and the difference between single and multi-wildcards vanishes. Theorem 8. For OMQs Q = (O, \u03a3, q) \u2208 (EL, CQ) singletesting minimal partial answers is DP-complete in combined complexity. This is true both for single wildcards and multiwildcards, and the same holds also in (ELH, CQ).\nFor most other OMQ languages, we do not expect a difference in complexity between single-testing complete answers and single-testing partial answers. As an example, we consider ELIHF where single-testing complete answers is EXPTIME-complete (Eiter et al. 2008). Theorem 9. In (ELIHF , CQ), single-testing minimal partial answers is EXPTIME-complete in combined complexity, both with single wildcards and multi-wildcards.\nWe remark that the data complexity of single-testing minimal partial answers in (ELIHF , CQ) is in PTIME, both with a single wildcard and with multi-wildcards. This can be shown by using essentially the same arguments as in the proof of Theorem 6.", "publication_ref": ["b6"], "figure_ref": [], "table_ref": []}, {"heading": "Conclusion", "text": "It would be interesting to extend our results to ELIHF with local functionality assertions, that is, with concepts of the form ( 1 R) or even ( 1 R C). This is non-trivial as it is unclear how to define the CQ extension q + . It would also be interesting and non-trivial to get rid of self-join freeness in the lower bounds, see (Berkholz, Gerhardt, and Schweikardt 2020;Carmeli and Segoufin 2022). Another natural question is whether answers can be enumerated in some given order, see e.g. (Carmeli et al. 2021). Note that it was observed in (Lutz and Przybylko 2022a) that when enumerating Q(D) * or Q(D) W , it is possible to enumerate the complete answers before the truely partial ones. ", "publication_ref": ["b5", "b11", "b12"], "figure_ref": [], "table_ref": []}, {"heading": "A Additional Details for Section 1", "text": "We formally define the notion of partial answers with multiwildcards. Fix a countably infinite set of multi-wildcards W = { * 1 , * 2 , . . . }, disjoint from K. A multi-wildcard tuple for a database D is a tuple (c 1 , . . . , c n ) \u2208 (adom(D)\u222aW) n , n \u2265 0, such that if c i = * j with j > 1, then there is an i \u2032 < i with c i \u2032 = * j\u22121 . For example, (a, * 1 , b, * 2 , * 1 , a) is a multi-wildcard tuple. Occurrences of the same wildcard represent occurrences of the same unknown constant while different wildcards represent constants that may or may not be different. For multi-wildcard tuplesc = (c 1 , . . . , c n ) and\nc \u2032 = (c \u2032 1 , . . . , c \u2032 n ), we writec c \u2032 if 1. c i = c \u2032 i or c \u2032 i \u2208 W for \u2264 i \u2264 n and 2. c \u2032 i = c \u2032 j implies c i = c j for 1 \u2264 i, j \u2264 n. Then,c \u227ac \u2032 ifc c \u2032 andc =c \u2032 . For example, ( * 1 , a) \u227a ( * 1 , * 2 ) and (a, * 1 , * 2 , * 1 ) \u227a (a, * 1 , * 2 , * 3 ). Informally,c \u227a c \u2032 means thatc is strictly more informative thanc \u2032 .\nA partial answer with multi-wildcards to OMQ Q(x) = (O, \u03a3, q) on a \u03a3-database D is a multi-wildcard tuplec for D of length |x| such that for each model I of O and D, there is ac \u2032 \u2208 q(I) such thatc \u2032 c. A partial answer with multiwildcardsc to Q on a \u03a3-database D is a minimal partial answer if there is no partial answer with multi-wildcardsc \u2032 to Q on D withc \u2032 \u227ac. The minimal partial answer evaluation of Q(x) on D with multi-wildcards, denoted Q(D) * , is the set of all minimal partial answers to Q on D with multiwildcards. Note that Q(D) \u2286 Q(D) W .\nThroughout the paper, we assume that given an ELIHF ontology O and roles R, S, it is decidable whether O |= R \u2291 S and whether O |= func(R). It is in fact not hard to see that these problems are EXPTIME-complete. We describe the upper bounds.\nTo decide whether O |= R \u2291 S, one constructs the database D = {R(a, b)} and then checks whether D, O |= S(x, y), which is possible in EXPTIME (Eiter et al. 2008).\nTo decide whether O |= func(R), one constructs the database D = {R(a, b 1 ), R(a, b 2 )} and then checks whether D is satisfiable w.r.t. O which is the case if and only if D, O |= \u2203x A(x) with A a fresh concept name.\nThroughout the appendix, we say that a CQ q is a tree if the undirected graph G Dq is a tree and q contains no reflexive atoms r(x, y). Note that multi-edges r(x, y), s(x, y) \u2208 q, with r = s, are admitted.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "B Simulations", "text": "We introduce the notion of a simulation, which is closely linked to the expressive power of ELI and will be used throughout the appendix. Let I and J be interpretations.\nA simulation from I to J is a relation S \u2286 adom(I) \u00d7 adom(J ) such that Sim1 A(c) \u2208 I and (c, c \u2032 ) \u2208 S implies A(c \u2032 ) \u2208 J and Sim2 R(c 1 , c 2 ) \u2208 I and (c 1 , c \u2032 1 ) \u2208 S implies that there is a c \u2032 2 \u2208 adom(J ) such that R(c \u2032 1 , c \u2032 2 ) \u2208 J and (c 2 , c \u2032 2 ) \u2208 S.\nIf there is a simulation S from I to J such that (c, c \u2032 ) \u2208 S, then we write (I, c) (J , c \u2032 ).", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "C Universal Models", "text": "We show how to construct a universal model U D,O of a database D and ELIHF -ontology O, using a somewhat unusual combination of chase and 'direct definition' that is tailored towards the needs of our subsequent proofs and constructions.\nIn a nutshell, we use chase-like rule applications for the database part of the universal model and a 'direct definition' for the parts of the universal model generated by existential quantifiers in O. One advantage over a pure chase approach is that this avoids ever having to identify generated objects.\nTo see why such identifications might be necessary, consider an ontology that includes\nO = {A 1 \u2291 \u2203r 1 .B 1 , A 2 \u2291 \u2203r 2 .B 2 , A \u2291 \u2203s.B r 1 \u2291 s, r 2 \u2291 s, func(s)}\nand a database that includes A 2 (c). Chasing would generate r 1 (c, c 1 ), B 1 (c 1 ) and r 2 (c, c 2 ), B 2 (c 2 ) with with c 1 , c 2 fresh constants. If now other parts of the chase generate A(c), then c 2 has to be merged into c 1 and s(c, c 1 ) has to be added.\nLet O be an ELIHF -ontology in normal form and D a database that is satisfiable w.r.t. O. For each non-empty set \u03c1 of roles and set M of concept names, define a CQ\nq 1 \u03c1,M (x) = \u2203y {R(x, y) | R \u2208 \u03c1} \u2227 {A(y) | A \u2208 M } and let q 2\n\u03c1,M (x, y) denote the same CQ, but with y an additional answer variable rather than a quantified variable. For the chase part of our construction, we use the following chase rules: \nR1 If A 1 (c), . . . , A n (c) \u2208 D, O |= A 1 \u2293 \u2022 \u2022 \u2022 \u2293 A n \u2291\nS(c 1 , c 2 ) to D; R4 If A 1 (c 1 ), . . . , A n (c 1 ), R(c 1 , c 2 ) \u2208 D, func(R) \u2208 O, {A 1 (c 1 ), . . . , A n (c n )}, O |= q 1 \u03c1,M (c 1 ), S, R \u2208 \u03c1, A \u2208 M , and S(c 1 , c 2 ) / \u2208 D or A(c 2 ) / \u2208 D, then add S(c 1 , c 2 ) and A(c 2 ) to D.\nIn rule R1, we may have n = 0 to capture CIs of the form \u22a4 \u2291 A. Rule R4 is best understood in the light of the example above. For a database D and ontology O, we use ch O (D) to denote the result of exhaustively applying the above rules to D. Note that no rule introduces fresh constants, and thus rule application terminates. It is also easy to see that the final result does not depend on the order in which the rules are applied.\nTo construct the universal model U D,O , we first build the chase ch O (D) and then proceed with the 'semantic' part of the construction as follows. Let c \u2208 adom(D). Similarly, for a non-empty set \u03c1 of roles and sets M 1 , M 2 of concept names, we write\nM 1 \u03c1 D,O M 2 if for 1 \u2264 i < n: 4. D Mi , O |= q 1 \u03c1i+1,Mi+1(\nc) and 5. \u03c1 i+1 and M i+1 are maximal with this property.\nA trace for D and O is a sequence\nt = c\u03c1 1 M 1 \u03c1 2 M 2 . . . \u03c1 n M n , n \u2265 0,\nwhere c \u2208 adom(D), \u03c1 1 , . . . , \u03c1 n are sets of roles that occur in O, and M 1 , . . . , M n are sets of concept names that occur in O such that for 1 \u2264 i < n:\n6. c \u03c11 D,O M 1 , 7. M i \u03c1i+1 O M i+1 , 8. there is no role name R with R \u2212 \u2208 \u03c1 i , R \u2208 \u03c1 i+1 , and func(R) \u2208 O, for 1 \u2264 i < n.\nLet T denote the set of all traces for D and O. Then, the universal model of D and O is the following database with active domain T, viewed as an interpretation:\nU D,O = ch O (D) \u222a {A(t\u03c1M ) | t\u03c1M \u2208 T and A \u2208 M } \u222a {R(t, t\u03c1M ) | t\u03c1M \u2208 T and R \u2208 \u03c1}.\nThe following lemma summarizes the most important properties of universal models. \n(D). 3. Q(D) = q(U D,O ) \u2229 adom(D) |x| .\nTo prove Lemma 4, let us first give two technical lemmas that will also be useful later on.\nLemma 5. Let O be an ELIF ontology in normal form, D 1 , D 2 be databases that are satisfiable w.r.t. O, and\nc i \u2208 adom(D i ) for i \u2208 {1, 2}. Then (D 1 , c 1 ) (D 2 , c 2 ) and D 1 , O |= A(c 1 ) implies D 2 , O |= A(c 2 ) for every concept name A.\nProof. Consider the chase procedure used as the first part of the construction of universal models. Started on D 1 , it constructs a finite sequence\nD 1 = I 0 \u2286 I 1 \u2286 \u2022 \u2022 \u2022 \u2286 I k = ch O (D 1 ). Since (D 1 , c 1 ) (D 2 , c 2 ), there is a simulation S from D 1 to D 2 with (c 1 , c 2 ) \u2208 S. We prove by induction on i that ( \u2020) S is a simulation from I i to ch O (D 2 ).\nThe induction start is trivial. For the induction step assume that we have already shown that S is a simulation from I i to ch O (D 2 ). We need to verify that Conditions Sim1 and Sim2 are also satisfied for S as a simulation from I i+1 to ch O (D 2 ).\nRecall that I i+1 was obtained from I i by application of one of the rules R1 to R4 from Section C. Since O is formulated in ELIF (and thus contains no role inclusions) rule R3 cannot be used. Similarly, no new binary facts R(c, c \u2032 ) are added by the rules and, thus, Sim2 holds by inductive assumption.\nFor Sim1, let (c, c \u2032 ) \u2208 S and A(c) \u2208 I i+1 . If A(c) \u2208 I i then A(c \u2032 ) \u2208 U D2,O by the inductive assumption. Otherwise, A(c) was added by one of the above rules. Thus, A(c) is a consequence of some facts S = {A 1 (c), . . . , A \u2113 (c), R 1 (c, c 1 ), . . . , R k (c, c k )} \u2286 I i and the ontology, i.e. S, O |= A(c). By inductive assumption, there are constants For all n \u2265 0 we construct a homomorphism h n from I| Tn to J such that h n (c 1 ) = c 2 . The desired homomorphism h is then obtained in the limit, that is, h = n\u22650 h n .\nc \u2032 i , for 1 \u2264 j \u2264 k such that S \u2032 = {A 1 (c \u2032 ), . . . , A \u2113 (c), R 1 (c, c \u2032 1 ), . . . , R k (c, c \u2032 k )} \u2286 U D2,O . Clearly, we have that S \u2032 , O |= A(c \u2032 ). Since U D2,O is a model of O, we infer that A(c \u2032 ) \u2208 U D2,O . This finishes the proof of ( \u2020). Now assume that D 1 , O |= A(c 1 ). Then Point 3 of Lemma 4 yields A(c 1 ) \u2208 U D1,O . Since the construction of U D1,O from ch O (D 1 ) adds no facts A(c) with c \u2208 adom(D 1 ), this yields A(c 1 ) \u2208 ch O (D 1 ). Now ( \u2020) yields A(c 2 ) \u2208 ch O (D 2 ), thus A(c 2 ) \u2208 U D2,O , implying D 2 , O |= A(c 2 ).\nThe homomorphism h 0 is simply the identity on c 1 . Since\nD 1 , O |= A(c 1 ) implies D 2 , O |= A(c 2 ) for every concept name A, h 0 is a homomorphism.\nFor the inductive step, let us assume that we have already defined h n . We show how to use it to define h n+1 .\nWe first take h n+1 = h n . Now, let w\u03c1M \u2208 T n+1 \\ T n be a trace in the next layer of the tree. Since w \u2208 T n , h n+1 (w) is already defined. Let N = {A | A(w) \u2208 I} and\nN \u2032 = {A | A(w) \u2208 J }. Since h n is a homomorphism, N \u2286 N \u2032 . By construction of the universal model U D1,O we have M = {A | A(w\u03c1M ) \u2208 I}. Moreover, D N , O |= q 1 \u03c1,M (w).\nSince J is a model of D 2 and O, and N \u2286 N \u2032 , we infer that\nD N \u2032 , O |= q 1 \u03c1,M (h(w)). Therefore, there is a constant d \u2208 dom(J ) such that J , O |= q 2 \u03c1,M (h(w), d). We set ( \u2020) h n+1 (w\u03c1M ) = d.\nWe now show that h n+1 is a homomorphism from I| Tn+1 to J . For w, w \u2032 \u2208 T n , we have h n+1 (w) = h n (w) and h n+1 (w \u2032 ) = h n (w \u2032 ). Thus, by inductive assumption, A(w) \u2208 I implies A(h n+1 (w)) \u2208 J and R(w, w \u2032 ) \u2208 I implies R(h n+1 (w), h n+1 (w \u2032 )) \u2208 J .\nThus, let w \u2208 T n+1 \\ T n . By definition of U D1,O there is a unique w \u2032 \u2208 T n such that w = w \u2032 \u03c1M where M =\n{A | A(w) \u2208 U D1,O }, and \u03c1 = {R | R(w \u2032 , w) \u2208 U D1,O }.\nMoreover, since I is a tree, we have that for all w \u2032\u2032 \u2208 T n+1 if R(w \u2032\u2032 , w) for some role name R then w \u2032\u2032 = w \u2032 . Now, if A(w) \u2208 I then A \u2208 M and A(h n+1 (w)) \u2208 I by the choice ( \u2020) of h n+1 (w). Similarly, if R(w, w \u2032\u2032 ) \u2208 I for some w \u2032\u2032 \u2208 T n+1 then w \u2032\u2032 = w \u2032 and R(h n+1 (w), h n+1 (w \u2032\u2032 )) \u2208 I by, again, the choice ( \u2020) of h n+1 (w).\nWe now give the proof of Lemma 4.\nProof of Lemma 4. We start with Point 1. It is clear by construction that U D,O is a model of D.\nWe next show that U D,O also satisfies all CIs in O, making a case distinction according to the form of the CI:\n\u2022 \u22a4 \u2291 A \u2208 O. For all c \u2208 adom(D), Rule R1 ensures that A(c) \u2208 ch O (D) \u2286 U D,O . For traces t = t \u2032 \u03c1M , by construc- tion of U D,O it suffices to show that A \u2208 M .\nBut this is a consequence of the definition of traces, in particular of Conditions 2 and 5 above which from now on we refer to as the 'maximality conditions'.\n\u2022 A 1 \u2293 A 2 \u2291 A \u2208 O. Assume that t \u2208 A UD,O 1 \u2229 A UD,O 2 . If t = c \u2208 adom(D), then t \u2208 A chO(D) 1 \u2229 A chO(D) 2 and rule R1 ensures that A(c) \u2208 U D,O . If t = c\u03c1M or t = t \u2032 \u03c1M , then t \u2208 A UD,O 1 \u2229 A UD,O 2 implies A 1 , A 2 \u2208 M , thus also A \u2208 M by the maximality conditions, which yields t \u2208 A UD,O by construction of U D,O . \u2022 A 1 \u2291 \u2203R.A 2 \u2208 O. Let t \u2208 A UD,O1\n. First assume that t = c \u2208 adom(D). \u2208 \u03c1 one can prove that Condition 8 of traces is satisfied for t \u2032 = t\u03c1 \u2032 M \u2032 , based on a straightforward model-theoretic argument. Since all other conditions of traces are trivially satisfied for t \u2032 , we obtain t \u2032 \u2208 T and the construction of\nU D,O yields (t, t \u2032 ) \u2208 R UD,O and t \u2032 \u2208 A UD,O 2 . Now assume that t = t \u2032 \u03c1M with t \u2032 = t \u2032\u2032 \u03c1 \u2032 M \u2032 . Then A 1 \u2208 M . If A 2 \u2208 M \u2032 and R \u2212 \u2208 \u03c1, then (t, t \u2032 ) \u2208 R UD,O and t \u2032 \u2208 A UD,O 2\nand we are done. Now assume that \nA 2 / \u2208 M \u2032 or R \u2212 / \u2208 \u03c1. Since A 1 \u2208 M ,\n\u03c1 D,O M . The fact that A 2 / \u2208 M \u2032 or R \u2212 /\n\u2208 \u03c1 can be used to prove model-theoretically that Condition 8 of traces is satisfied for t = t \u03c1 M . Since all other conditions of traces are trivially satisfied for t, we obtain t \u2208 T and the construction of U D,O yields (t, t) \u2208 R UD,O and t \u2208 A\nUD,O 2 . \u2022 \u2203R.A 1 \u2291 A 2 \u2208 O. Let (t, t \u2032 ) \u2208 R UD,O and t \u2032 \u2208 A UD,O 1 .\nWe distinguish several cases. t, t \u2032 are both from adom(D), then Rule R2 yields t \u2208 A\nUD,O 2 , as required. t is from adom(D) and t \u2032 = t\u03c1M . Then A 1 \u2208 M , R \u2208 \u03c1, and D Mc , O |= q 1 \u03c1,M (t \u2032 ). Consequently, D Mc , O |= A 2 (t), implying t \u2208 A UD,O 2 . t \u2032 is from adom(D) and t = t \u2032 \u03c1M . Then D, O |= A 1 (t \u2032 ), R \u2212 \u2208 \u03c1, and \u03c1 and M are maximal with D, O |= q 1 \u03c1,M (t). Thus clearly A 2 \u2208 M , implying t \u2208 A UD,O 2 due to Rule R1. t, t \u2032 are both not from adom(D) and t \u2032 = t\u03c1 \u2032 M \u2032 . Let t = c\u03c1M or t = M 0 \u03c1M . Then A 1 \u2208 M \u2032 , R \u2208 \u03c1 \u2032 , and D M , O |= q 1 \u03c1 \u2032 ,M \u2032 ( c). It is easy to see that this implies D M , O |= A 2 ( c). Since M is maximal with D Mc , O |= q 1 \u03c1,M (c) or D M0 |= q 1 \u03c1,M ( c), it follows that A 2 \u2208 M . This implies that t \u2208 A UD,O 2 . t, t \u2032 are both not from adom(D) and t = t \u2032 \u03c1M . Let t \u2032 = c\u03c1 \u2032 M \u2032 or t \u2032 = M 0 \u03c1 \u2032 M \u2032 . Then A 1 \u2208 M \u2032 , R \u2212 \u2208 \u03c1, and M is maximal with D M \u2032 , O |= q 1 \u03c1,M ( c). Consequently, A 2 \u2208 M , implying t \u2208 A UD,O 2 .\nWe It remains to show that all functionality assertions are satisfied. We first note that it is straightforward to show the following, essentially by induction on the number of rule applications used to construct ch O (D):\n(i) c \u2208 A ch O (D) implies D, O |= A(c); (ii) (c, c \u2032 ) \u2208 R chO(D) implies D, O |= R(c, c \u2032 ).\nWe may replace the precondition in (ii) with the equivalent condition (c, c \u2032 ) \u2208 R UD,O (and likewise for (i), but this is not going to be important).\nAssume to the contrary of what we want to show that there are R(t, t 1 ), R(t, t 2 ) \u2208 U D,O with func(R) \u2208 O and t 1 = t 2 . We distinguish several cases: t, t 1 , t 2 are all from adom(D). It then follows from (ii) (with precondition (c,\nc \u2032 ) \u2208 R UD,O ) that D is not satisfiable w.r.t. O, a contradiction. t, t 1 are from adom(D) and t 2 = t\u03c1 2 M 2 . Then t \u03c12 D,O M 2 and R \u2208 \u03c1 2 . Since R(t, t 1 ) \u2208 U D,O , also R(t, t 1 ) \u2208 ch O (D). Together with func(R) \u2208 O, we thus obtain a contradiction against Condition 3 of t \u03c12 D,O M 2 . t 1 = t\u03c1 1 M 1 , and t 2 = t\u03c1 2 M 2 . Then t \u03c11 D,O M 1 and t \u03c12 D,O M 2 . Moreover, R \u2208 \u03c1 1 \u2229 \u03c1 2 .\nThe maximality conditions thus yield \u03c1 1 = \u03c1 2 and M 1 = M 2 , in contradiction to t 1 = t 2 .\nt = t 1 \u03c1 1 M 1 , and t 2 = t\u03c1 2 M 2 . Then R \u2212 \u2208 \u03c1 1 and R \u2208 \u03c1 2 , contradicting Condition 8 of paths for t 2 .\nFor Point 2, let I be a model of D and O. We construct a homomorphism from U D,O to I that is the identity on adom(D) in two steps.\nWe first show that ch O (D) \u2286 I. This gives us a homomorphism h 0 from U D,O | adom(D) = ch O (D) to I that is the identity on adom(D). Then, we extend h 0 to a homomorphism from U D,O to I using Lemma 6.\nLet\nD = N 0 , N 1 , . . . , N \u2113 = ch O (D)\nbe the databases obtained by applying rules R1-R4 in the construction of the chase. To show that ch O (D) \u2286 I, it suffices to show that\nN i \u2286 I for all 0 \u2264 i \u2264 \u2113. The base case, i = 0, is trivial as I is a model of D = N 0 .\nFor the inductive step, let us assume that N i \u2286 I, i < \u2113. We show that N i+1 \u2286 I. By definition, N i+1 was constructed from N i by applying one of the rules R1-R4.\nLet R1 be the applied rule. It has added a single new fact A(c). Since the rule has been used, there are facts A 1 (c), . . . , A n (c) \u2208 N i . By the inductive assumption we have that A 1 (c), . . . , A n (c) \u2208 I. Since I is a model of O and O |= A 1 \u2293 \u2022 \u2022 \u2022 \u2293 A n \u2291 A we infer that A(c) \u2208 I. This implies that N i+1 = N i \u222a {A(c)} \u2286 I and ends the inductive step for rule R1. This ends the first step of the proof. Let h 0 be the identity homomorphism from ch O (D) to I.\nFor the second step note that ch O (D) \u2286 I implies that (ch O (D), c) (I, c) for every c \u2208 dom(D). It thus follows from Lemmas 5 and 6 that there is a homomorphism h c from U \u2193c D,O to I. We show that h = h 0 \u222a c\u2208dom(D) h c is the desired homomorphism from U D,O to I.\nThe function h is well defined as h 0 is identity on adom(D) and for all c \u2208 adom(D) we have that h c (c) = c. This also implies that h is identity on adom(D).\nTo show that h is a homomorphism observe the following. For concept names, if Let D be a \u03a3-database that is satisfiable w.r.t. O. The Quniversal extension of D, denoted U D,Q is constructed in three steps as follows.\nA(d) \u2208 U D,O then h(d) = h 0 (d) or h(d) = h c (d) for some c \u2208 dom(D).\nStep 1. Start with ch O (D).\nStep \n(D) = q(U D,Q ) \u2229 adom(D) |x| . What is more, for every Q \u2032 (x \u2032 ) = (O, \u03a3, q \u2032 ) where |var(q \u2032 )| \u2264 |var(q)|, we have Q \u2032 (D) = q \u2032 (U D,Q ) \u2229 adom(D) |x| .\nProof. It clearly suffices to prove the 'what is more' part of the lemma.\nThe '\u2287' direction is simple. Assume thatc \u2208 q \u2032 (U D,Q ) \u2229 adom(D) |x \u2032 | . Using the construction of U D,Q , it is not hard to see that there is a homomorphism from U D,Q to U D,O that is the identity on adom(D). Thusc \u2208 q \u2032 (U D,O ) and it follows from Point 3 of Lemma 4 thatc \u2208 Q \u2032 (D).\nFor the '\u2286' direction, assume thatc \u2208 Q \u2032 (D). Then there is a homomorphism h from q \u2032 to U D,O such that h(x \u2032 ) =c. Let q 1 , . . . , q k be the maximal connected components of q \u2032 such that h(y) / \u2208 dom(D) for all variables y that occur in them. Note that by definition, q 1 , . . . , q k are Boolean. Further let q 0 be the disjoint union of all remaining maximal connected components of q \u2032 .\nLet n = |var(q)| and let U D,O,n denote the restriction of U D,O to traces of length at most n. It is not hard to verify that h(y) \u2208 adom(U D,O,n ) for all y \u2208 var(q 0 ), and thus the restriction h \u2032 of h to the variables in q 0 is a homomorphism from q 0 to U D,O,n \u2286 U D,Q . To show thatc \u2208 q \u2032 (U D,Q ) \u2229 adom(D) |x| , it remains to extend h \u2032 to q 1 , . . . , q k .\nLet 1 \u2264 i \u2264 k and let q \u2032 i be the CQ obtained from q i by identifying variables x, y \u2208 var(q) if h(x) = h(y). Clearly, it suffices to show that we can extend h \u2032 to q \u2032 i in place of q i . Since h(y) / \u2208 adom(D) for all y \u2208 var(q i ) and due to the shape of U D,O , the CQ q \u2032 i must be a tree CQ. Consequently, it is in cl(Q).\nSince the restriction h i of h to the variables in q \u2032 i is a homomorphism from q \u2032 i to U D,O that does not have any constants from adom(D) in its range, there is an e i \u2208 adom(D) such that the range of h i consists only of traces that start with e i . The construction of U D,O then yields D Me i , O |= q i (). Consequently, a copy D \u2032 qi of D qi was added during the construction of U D,Q . It is thus easy to extend h \u2032 to q \u2032 i , as desired.\nWe now show that the Q-universal database extension U D,Q is also universal for answers with wildcards when we view all elements of adom(U D,Q ) \\ adom(D) as nulls.\nLemma 8.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Q(D)", "text": "* = q(U D,Q ) * N and 2. Q(D) W = q(U D,Q ) W N .\nProof. We only consider Point 2. The proof of Point 1 is similar. When we speak of partial answers, we thus generally mean partial answers with multi-wildcards. We first observe that it suffices to prove the following:\n(a) every minimal partial answer to Q on D is a partial answer to q on U D,Q ; (b) every partial answer to q on U D,Q if a partial answer to Q on D.\nFor assume that (a) and (b) have been shown. First let a W \u2208 Q(D) W . By (a),\u0101 W is a partial answer to q on U D,Q . Assume to the contrary of what we have to show that\u0101 W is not minimal, that is, there is a partial answerb W to q on U D,Q withb W \u227a\u0101 W . By (b),b W is a partial answer to Q on D, contradicting minimality of\u0101 W . Conversely, let\u0101 W \u2208 q(U D,Q ) W N . By (b),\u0101 W is a partial answer to Q on D. Assume to the contrary of what we have to show that\u0101 W is not minimal, that is, there is a partial answerb W to Q on D withb W \u227a\u0101 W . We may assume w.l.o.g. thatb W is minimal. Thus (a) implies thatb W is a partial answer to q on U D,Q , contradicting minimality of\u0101 W .\nIt thus remains to prove (a) and (b). We start with the former. Assume that\u0101 W \u2208 Q(D) W . Letx = x 1 , . . . , x n , let a W = a 1 , . . . , a n , and let the wildcards from W that occur in\u0101 W be * 1 , . . . , * \u2113 . Consider the CQ q \u2032 (x \u2032 ) obtained from q in the following way:\n\u2022 introduce fresh quantified variables z 1 , . . . , z \u2113 ; \u2022 if a i = * j , then replace in q \u2032 the answer variable x i with quantified variable z j .\nFurther let\u0101 be obtained from\u0101 W by removing all wildcards.\nBy a simple semantic argument, it follows from the fact that\u0101 W is a partial answer to Q on D that\u0101 \u2208 Q \u2032 (D) where\nQ \u2032 (x \u2032 ) = (O, \u03a3, q \u2032 ). Note that |var(q \u2032 )| \u2264 |var(q)|. Ap- plying Lemma 7 thus yields\u0101 \u2208 q \u2032 (U D,Q ) \u2229 adom(D) |x \u2032 | .\nConsequently, there is a homomorphism h \u2032 from q \u2032 to U D,Q such that h \u2032 (x \u2032 ) =\u0101. We observe the following:\n( * ) h \u2032 (z i ) / \u2208 adom(D) for 1 \u2264 i \u2264 \u2113.\nFor assume to the contrary that there is a z p with h \u2032 (z p ) \u2208 adom(D). Consider\n\u2022 the CQ q \u2032\u2032 (x \u2032\u2032 ) obtained from q in exactly the same way as q \u2032 except that if a i = * p , then x i is not replaced with z p , \u2022 the tupleb W obtained from\u0101 W in the following way: if a i = * p , then replace a i with h \u2032 (z p ), and \u2022 the tupleb obtained fromb W by removing all wildcards.\nThe homomorphism h \u2032 witnesses thatb \u2208 q \u2032\u2032 (U D,Q ) \u2229 adom(D) |x \u2032\u2032 | . From Lemma 7 we thus obtainb \u2208 Q \u2032\u2032 (D) where Q \u2032\u2032 (x \u2032\u2032 ) = (O, \u03a3, q \u2032\u2032 ). An easy semantic argument shows that, consequently,b W is a partial answer to Q on D, contradicting the minimality of\u0101 W . Thus ( * ) is shown.\nWe may obtain from h \u2032 a homomorphism h from q to U D,Q by setting h(x i ) = z j whenever x i was replaced by z j in the construction of q \u2032 . Using h and ( * ), it is now easy to show that\u0101 W is a partial answer to q on U D,Q , as required.\nFor (b), let\u0101 W be a partial answer to q on U D,O . Let q \u2032 and\u0101 be constructed exactly as above.\nThen\u0101 \u2208 q \u2032 (U D,Q ) \u2229 adom(D) |x \u2032 | . Lemma 7 yields\u0101 \u2208 Q \u2032 (D) where again Q \u2032 (x \u2032 ) = (O, \u03a3, q \u2032\n). An easy semantic argument shows that, consequently,\u0101 W is a partial answer to Q on D, as required. To prove Proposition 2, we make use of the fact that minimal models for propositional Horn formulas can be computed in linear time (Dowling and Gallier 1984). More precisely, we derive a satisfiable propositional Horn formula \u03b8 from O and D, compute a minimal model of \u03b8 in linear time, and read off ch O (D) from that model. It then remains to construct U D,Q from ch O (D), exactly as described in the previous section.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "C.2 Query-Directed Universal Models in Linear Time", "text": "An edge in D is a pair (c 1 , c 2 ) such that R(c 1 , c 2 ) \u2208 D for some role R. Note that if (c 1 , c 2 ) is an edge in D, them so is (c 2 , c 1 ). We introduce the following propositional variables:\n\u2022 x A(c) for every concept name A \u2208 sig(O) and every c \u2208 adom(D); \u2022 x r(c,c \u2032 ) for every edge (c, c \u2032 ) in D and every role name r \u2208 sig(O).\nWe may write x r \u2212 (c \u2032 ,c) on place of x r(c,c \u2032 ) . Clearly, the number of introduced variables is bounded by ||D|| \u2022 ||O||.\nThe propositional Horn formula \u03b8 consists of the following conjuncts: Since \u03b8 contains no negative literals, it is clearly satisfiable and thus has a unique minimal model. Let V be the truth assignment that represents this minimal model. We construct the database D \u03b8 by including all A(c) such that V (x A(c) ) = 1 and all r(c 1 , c 2 ) such that V (x r(c1,c2) ) = 1. It is clear that the construction of D \u03b8 is possible in time 2 O(||O||) \u2022 ||D||. Moreover, it is easy to verify that D \u03b8 = ch O (D) given that the implications in \u03b8 exactly parallel the rules of the chase given in Section C.\n1. x A(c) for every A(c) \u2208 D and x r(c,c \u2032 ) for every r(c, c \u2032 ) \u2208 D; 2. x A1(c) \u2227 \u2022 \u2022 \u2022 \u2227 x An(c) \u2192 x A(c) for all c \u2208 adom(D) and all concept names A 1 , . . . , A n , A such that O |= A 1 \u2293 \u2022 \u2022 \u2022 \u2293 A n \u2291 A; 3. x A(c1) \u2227 x R(c2,c1) \u2192 x B(c2) for all edges (c 1 , c 2 ) of D and all \u2203R.A \u2291 B \u2208 O; 4. x R(c1,c2) \u2192 x S(c1,c2) for all edges (c 1 , c 2 ) of D and all R \u2291 S \u2208 O; 5. x A(c1) \u2227 x R(c1,c2) \u2192 x S(c1,\nWe may now construct U D,Q from ch O (D) exactly as in the previous section, using Steps 2 and 3 described there. In Step 2, we may iterate over all c \u2208 adom(D) and then add the fragment of U D,O that consists of traces of length at most n starting with c, following exactly the definition of such traces, that is, proceeding in the order of increasing trace length. It is easy to see that the number of traces that start with c is bounded by 2 poly(||Q||) . This involves deciding questions of the form D M , O |= q 1 \u03c1,M \u2032 (c) which is possible in time 2 poly(||Q||) (Eiter et al. 2008). Thus, Step 2 can be implemented in time 2 poly(||Q||) \u2022 ||D||.\nFor Step 3, first note that the number of CQs in Q is bounded by 2 poly (||Q||) . We may iterated over all c \u2208 adom(D) and all p \u2208 Q and check whether D Mc , O |= p, and if so, add a disjoint copy of p. Again the described check is possible in time 2 poly(||Q||) (Eiter et al. 2008) and the overall time needed is 2 poly(||Q||) \u2022 ||D||.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "D Proofs for Section 2", "text": "Lemma 1. Every homomorphism from q 0 to D 0 is also a homomorphism from q + 0 to D + 0 and vice versa. Moreover, D + 0 can be constructed in time linear in ||D||.\nProof. First assume that h is a homomorphism from q 0 to D 0 . Let R \u2032 (\u0233 + ) be an atom in q + 0 , and let R(\u0233) be the atom in q 0 that gave rise to it during the construction of q + 0 . The restriction h|\u0233+ of h to the variables in\u0233 + is a homomorphism from q 0 |\u0233+ to D 0 . By definition, D + 0 thus contains the atom R \u2032 (h(\u0233 + )), as required.\nConversely, assume that h is a homomorphism from q + 0 to D + 0 and let R(\u0233) be an atom in q 0 . Then q + 0 contains a corresponding atom R \u2032 (\u0233 + ) and R \u2032 (h(\u0233 + )) \u2208 D + 0 . By construction of D + 0 , there is a homomorphism g from q 0 |\u0233+ to D 0 that is identical to the restriction of h to the variables in\u0233 + . It follows that R(h(\u0233)) \u2208 D 0 , as required.\nWe sketch the computation of ||D + 0 || in linear time. We first construct a lookup table that allows us to find in constant time, given a c \u2208 adom(D 0 ) and a role R with func(R) \u2208 O, the unique c \u2032 \u2208 adom(D 0 ) with R(c, c \u2032 ) \u2208 D 0 (if existant). This relies on the use of the RAM model and can be achieved by a single scan of D 0 . We then iterate over every atom R(\u0233) of q 0 . If R(\u0233) is replaced with R \u2032 (\u0233 + ) in q + 0 , then we need to add to D + 0 a fact R \u2032 (h(\u0233 + )) for every homomorphism h from q 0 |\u0233+ to D 0 . To find these homomorphisms h, we consider all facts R(c) \u2208 D 0 as candidates for R(h(\u0233)). We can find them by a single scan of D 0 . Every variable z in y + is reachable from a variable y in\u0233 by a functional path in q 0 . Following this functional paths in D 0 , starting at h(y) and using the lookup table, we can find the unique possible target h(z) (if existant). It then remains to check whether the constructed h is really a homomorphism. This is possible in constant time if we have previously created lookup tables that tell us for every k-ary R \u2208 \u03a3 andc \u2208 adom(D 0 ) k whether R(c) \u2208 D 0 .\nWe next establish Theorem 2 for the multi-wildcard case. Let D be a database that may use nulls in place of constants, and let q(x) be a CQ. For an answer\u0101 \u2208 q(D), we use\u0101 W N to denote the (unique) multi-wildcard tuple for D obtained from\u0101 by consistently replacing nulls from N with wildcards using exactly a prefix of the ordered set W = { * 1 , * 2 , . . . } and respecting the order, that is, if the first occurrence of a null c 1 in\u0101 is before the first occurrence of a null c 2 , c 1 is replaced with * i , and c 2 with * j , then i < j. With q(D) W N . We call such an\u0101 W N a partial answer to q on D (with multi-wildcards) and say that it is minimal if there is no\u0101 \u2208 q(D) withb W N \u227a\u0101 W N . We use q(D) W N to denote the set of minimal partial answers with multi-wildcards to q on D.\nAs already mentioned, In the query-directed universal models U D,Q from Proposition 1, we may view all elements of N = adom(U D,Q ) \\ adom(D) as nulls. We then have Q(D) W = q(U D,Q ) W N . To prove Theorem 2 in the multi-wildcard case, we replace Theorem 3 with the following result, also from (Lutz and Przybylko 2022b) (Proposition F.1).\nTheorem 10. For every CQ q(x) that is acyclic and free-connex ayclic, enumerating the answers q(D) W N is in DelayC lin for databases D and sets of nulls N \u2286 adom(D) such that D is chase-like with witness D 1 , . . . , D n where |adom(D i )| does not depend on D for 1 \u2264 i \u2264 n.\nWe now proceed as in the single-wildcard case. Let Q(x) = (O, \u03a3, q) \u2208 (ELIHF , CQ) with q + (x) acyclic and free-connex acyclic, and let D be a \u03a3-database. By Lemma 8, the query-directed universal model U D,Q is also universal for partial answers with multi-wildcards in the sense that Q(D) W = q(U D,Q ) W N . We thus first replace D with U D,Q , aiming to enumerate q(U D,Q ) W N . We next replace q(x) with q + (x) and D 0 = U D,Q with D + 0 . It follows from Lemma 1 that q(D 0 ) W N = q + (D + 0 ) W N and thus we can apply the algorithm promised by Theorem 10 to enumerate\nq + (D + 0 ) W N .", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "E Proofs for Section 3", "text": "We provide proofs for Section 3, starting with several preliminaries.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "E.1 Derivation completeness", "text": "Recall that we have defined in the main part of the paper a database D \u03c9 and a finite subset D tree . We will use the latter in all of our lower bound proofs. In this section, we estbalish some fundamental properties related to it. We say that a \u03a3-database D is derivation complete at c \u2208 adom(D) if for every \u03a3-database D \u2032 that is satisfiable w.r.t. O and every c \u2032 \u2208 adom(D \u2032 ), there is a homomorphism h from U \u2193c \u2032 D \u2032 ,O to U D,O with h(c \u2032 ) = c. Informally, derivation completeness at c means that O derives at c anything that it could possibly derive at any constant in any database. For a set \u0393 \u2286 adom(D), we say that D is derivation complete at \u0393 if it is derivation complete at every c \u2208 \u0393.\nThe databases D \u03c9 and D tree are both derivation complete. Moreover, in all three reductions the construction of the final databases D makes sure that for every c \u2208 adom(D 0 ) there is a simulation S from D tree to D such that (\u03b5, c) \u2208 S. This guarantees that D is derivation complete at c.\nTo show all of this formally, let us define a weaker version of derivation completeness that only pertains to concept names, c.f. the construction of D tree . A concept name A is non-empty if there is a \u03a3-database D and a c \u2208 adom(D) such that D, O |= A(c). Now, a \u03a3-database D is derivation complete for concept names at c \u2208 adom(D) if D, O |= A(c) for every non-empty concept name A. ", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "E.2 Additional Preliminaries", "text": "A path \u03c0 in a database D is a sequence of database constants a 0 , . . . , a k such that for 0 \u2264 i < k there is an edge\n{a i , a i+1 } in the Gaifman graph G D .\nWe say that a path is simple if no constant repeats, that it is chordless if there is no edge {a i , a j } such that |i \u2212 j| > 1 except for {i, j} = {1, k}, and that it is a cycle if k \u2265 1 and {a 0 , a k } is an edge or if k = 1 and D contains two distinct facts that both mention a 0 and a 1 . We say that constants c, c \u2032 \u2208 adom(D) are connected in D if D contains a path that starts at c and ends at c \u2032 .\nA path in a CQ q is a sequence y 0 , . . . , y k of variables from q that forms a path in D q . The path is functional if for 0 \u2264 i < k there is an atom r(y i , y i+1 ) \u2208 q such that func(r) \u2208 O.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "E.3 Cyclic Queries -The Case of Non-Chordality", "text": "We finish the proof of Lemma 2 that we have started in the main body of the paper. First, however, we give an example of the construction of D 0 in Figure 2. We use the query q and graph G shown in the top part of the figure and assume that the role names f 1 and f 2 are declared functional by O. Now back to the proof of Lemma 2. We first observe some basic properties of D 0 . Claim 1.", "publication_ref": [], "figure_ref": ["fig_12"], "table_ref": []}, {"heading": "for every variable", "text": "x in q, we have Y x \u2286 {y i , y i+1 } for some 0 \u2264 i \u2264 k. 2. Y yi = {y i } for 0 \u2264 i \u2264 k.\nProof. Both points follow from the chordlessness of the cycle y 0 , . . . , y k .\nFor Point 1, let x be a variable in q and assume that Y x \u2287 {y j , y i } and y j / \u2208 {y i\u22121 , y i+1 } with y \u22121 = y k . By definition of Y x , there is then a functional path in q from x to y j and from x to y i . Thus, by construction of q + the Gaifman graph of q + contains the edge {y j , y i }, in contradiction to y 0 , . . . , y k being chordless.\nquery q y 0 z 1 y 1 y 2 y 3 f 0 f 1 R 12 R 23 R 30 graph G a b c d database D 0 R 12 R 23 R 30 f 0 f 1 y 1 \u2192a y 1 \u2192b y 1 \u2192c y 1 \u2192d y 2 \u2192a y 2 \u2192b y 2 \u2192c y 2 \u2192d y 3 \u2192a y 3 \u2192b y 3 \u2192c y 3 \u2192d y 0 y 1 \u2192ab y 0 y 1 \u2192ac y 0 y 1 \u2192ad y 0 y 1 \u2192ba y 0 y 1 \u2192bc y 0 y 1 \u2192ca y 0 y 1 \u2192cb y 0 y 1 \u2192da y 0 \u2192a y 0 \u2192b y 0 \u2192c y 0 \u2192d y 1 \u2192a y 1 \u2192b y 1 \u2192c y 1 \u2192d\nFor Point 2, first note that y i \u2208 Y yi by definition of Y yi . By Point 1, this leaves as the only possible options Y yi = {y i }, Y yi = {y i , y i\u22121 } (with y \u22121 = y k ), and Y yi = {y i , y i+1 }. The latter two options, however, are not possible. We show this exemplarily for the last option. By construction of q + , the fact that {y i , y i\u22121 } is an edge in the Gaifman graph of q + implies that q contains an atom \u03b1 that contains variables u, v such that y i\u22121 is reachable on a functional path from u and y i is reachable on a functional path from y i . Since y i+1 \u2208 Y yi , there is also a functional path from y i to y i+1 and thus we find a functional path from v to y i+1 . By construction of q + , the Gaifman graph of q + contains the edge {y i\u22121 , y i+1 }, in contradiction to the chordfreeness of y 0 , . . . , y k .\nLemma 11. The database D", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "can be computed in time O(||E||).", "text": "", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "satisfies all functionality assertions in O.", "text": "3. is derivation complete at adom(D 0 ). \nY y \u2286 Y x that for all y i \u2208 Y y , we have f d (y i ) = f c (y i ).\nThe same is true for the fact R(c, d \u2032 ), and thus we obtain\nf d = f d \u2032 , which in turn implies d = d \u2032 .\nBy construction of D, it is easy to see that (D tree , \u03b5) (D, c) for all c \u2208 adom(D 0 ). By Lemma 10, it follows that D is derivation complete at adom(D 0 ).\nClaim 2. Let h be a homomorphism from q to U D,O . Then 1. for every simple path u 0 , . . . , u m in q, m > 0, h(u 0 ) \u2208 adom(D 0 ) and h(u m ) \u2208 adom(D 0 ) implies h(u i ) \u2208 adom(D 0 ) for 0 \u2264 i \u2264 m; 2. for every cycle u 0 , . . . , u m in q, we have h(u i ) \u2208 adom(D 0 ) for 0 \u2264 i \u2264 m.\nProof. We only prove Point 1, the proof of Point 2 is similar. Assume towards a contradiction that h(u j ) / \u2208 adom(D 0 ) for some j with 0 \u2264 j \u2264 m and additionally let j be smallest with this property. Moreover, let \u2113 > j be smallest such that h(u \u2113 ) \u2208 adom(D 0 ). Note that 0 < j < \u2113 < m. By definition of a path, q must contain atoms R j (u j\u22121 , u j ), . . . , R \u2113 (u \u2113\u22121 , u \u2113 ). Since q is self-join free, the relation symbols R j , . . . , R \u2113 are all distinct.\nNext observe that by construction of D and by definition of universal models, the interpretation I obtained from U D,O by removing all edges r(a, b) with a, b \u2208 adom(D 0 ) is a collection of trees without multi-edges. More precisely, these are the trees added in the second step in the construction of D and the trees U \u2193c D,O of U D,O . We view as the roots of these trees the elements of adom(D 0 ).\nThen h maps R j (u j\u22121 , u j ), . . . , R \u2113 (u \u2113\u22121 , u \u2113 ) to some tree of this collection, and both u j\u22121 and u \u2113 are mapped to the root of the tree. This, however, clearly contradicts the fact that the relation symbols R j , . . . , R \u2113 are all distinct and the tree has no multi-edges.\nThe next lemma states soundness and completeness of the reduction.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Lemma 3.", "text": "TD1 If there is a minimal partial answer to Q on D (with a single wildcard or with multiple wildcards), then there is a triangle in G. TD2 If there is a triangle in G then there is a complete answer to Q on D.\nWe now prove Claim 3, which finishes the lower bound proof. To show TD2, let a, b, c be a triangle in G. To show that there is a complete answer to Q on D, it suffices to exhibit a homomorphism h from q to U D,O such that h(x) \u2208 adom(D 0 ) for every answer variable x.\nSince Q is non-empty, there is a database D \u2032 that is satisfiable w.r.t. O and a homomorphism h \u2032 from q to U D \u2032 ,O such that h \u2032 (x) contains only elements of adom(D \u2032 ). We use h \u2032 to guide the construction of h.\nLet W 0 be the set of variables x \u2208 var(q) with h \u2032 (x) \u2208 adom(D \u2032 ) and for each c \u2208 adom(D \u2032 ), let W c be the set of variables x \u2208 var(q) such that h \u2032 (x) is a trace that starts with c, that is, h \u2032 (x) is c or located in the tree\nU \u2193c D \u2032 ,O in U D \u2032 ,O that is rooted in c.\nWe first note that for all c \u2208 adom(D \u2032 ), the restriction q c of q to the variables in W c is a disjoint union of trees (without multi-edges and reflexive loops) in the sense that the Gaifman graph of q c is a tree. Let p be a connected component of q c . Clearly, p has no multi-edges and reflexive loops since the same is true for U \u2193c D \u2032 ,O . It remains to show that p is a tree. Assume to the contrary that p contains atoms R\n1 (x 0 , x 1 ), . . . , R m (x m\u22121 , x m ) with x 0 = x m . Since U \u2193c D \u2032 ,O\nis a tree, h \u2032 must map two distinct atoms from this list to the same fact in U \u2193c D \u2032 ,O . This contradicts the selfjoin freeness of q, which implies that R 1 , . . . , R m are pairwise distinct.\nWe start the construction of h by setting h(x) = x, f ab k\u22121 c x for all x \u2208 W 0 . Let q 0 be the restriction of q to the variables in W 0 . It can be verified that h is indeed a homomorphism from q 0 to U D,O . In fact, binary atoms R(x, x \u2032 ) in q 0 are preserved: since h \u2032 (x), h \u2032 (x \u2032 ) \u2208 adom(D \u2032 ) and the construction of U D \u2032 ,O from D \u2032 does not add any binary facts R(a, a \u2032 ) with a, a \u2032 \u2208 adom(D \u2032 ), we must have R \u2208 \u03a3; we thus obtain R(h(x), h(x \u2032 )) \u2208 D 0 from the construction of D 0 and the fact that a, b, c is a triangle in G. Unary atoms A(x) with A \u2208 \u03a3 are trivially preserved by construction of D. And unary atoms A(x) with A / \u2208 \u03a3 are preserved since D is derivation complete at adom(D 0 ). More precisely, if A(x) is an atom in q 0 , then non-emptiness of q implies that A is non-empty, and since derivation completeness (trivially) implies derivation completeness for concept names it follows that O, D |= A(c) for all c \u2208 adom(D 0 ).\nTo extend h to the remaining variables in q, consider each set W c separately (clearly, those sets are disjoint and contain all remaining variables). As established above, the restriction q c of q to the variables in W c is a disjoint union of trees. Let p be any such tree. Since q is connected, p contains a (unique) variable x with h \u2032 (x) = c. Since D is derivation complete at c, there is a homomorphism h c from U \u2193c D \u2032 ,O to U D,O with h c (c) = h(x). Then set h(y) = h c (h \u2032 (y)) for every y \u2208 var(p). This finishes the construction of h.\nTo show TD1, assume that there is a minimap partial answer to Q on D. Then there is a homomorphism h from q to U D,O . Ideally, we would like to show that for i \u2208 {0, 1, k}, h(y i ) is of the form y i , f i and f 0 (y 0 ), f 1 (y 1 ), f k (y k ) forms a triangle in G. Unfortunately, it may be the case that h(y i ) / \u2208 adom(D 0 ) and thus we need to argue in a slightly more complex way. We first show the following.\nClaim 3. There is a variable u i such that h(u i ) \u2208 adom(D 0 ) and y i \u2208 Y ui , for 0 \u2264 i \u2264 k. Proof. Let 0 \u2264 i \u2264 k.\nRecall that y 0 , . . . , y k is a cycle in q + and let y k+1 = y 0 . By construction of q + , this means that for 0 \u2264 j \u2264 k, q contains an atom \u03b1 j that contains (possibly identical) variables u j , v j such that q contains a functional path \u03c0 j from u j to y j and a functional path \u03c0 \u2032 j from v j to y j+1 . 1 The concatenation \u03c0 \u2212 0 \u03c0 0 \u2022 \u2022 \u2022 \u03c0 \u2212 k \u03c0 k is a cycle C = z 0 , . . . , z \u2113 in q where \u2022 \u2212 denotes path reversal. It may be that C is not a simple cycle, but we can use it to find a simple cycle in q that contains a variable u i with y i \u2208 Y ui .\nLet u i be the last variable on the longest common prefix of the paths \u03c0 \u2032 \u2212 i\u22121 \u03c0 i\u22121 and \u03c0 \u2212 i \u03c0 \u2032 i . This u i must be in the (\u03c0 \u2032 i\u22121 ) \u2212 prefix of the first path and in the \u03c0 \u2212 i prefix of the second path because all variables z in the \u03c0 i\u22121 suffix of the first path satisfy y i\u22121 \u2208 Y z and all variables z in the \u03c0 \u2032 i suffix of the second path satisfy y i+1 \u2208 Y z , c.f. Claim 1. This clearly implies that y i \u2208 Y ui . We can now obtain a cycle C \u2032 by starting with C and 1. cutting out the prefixes of \u03c0 \u2032 \u2212 i\u22121 and \u03c0 \u2212 i up to (excluding) u i and 2. removing subpaths that end in the same variable (and do not contain u i ) from the remaining cycle to make it simple.\nBy Point 2 of Claim 2, h(u i ) \u2208 adom(D 0 ).\nClaim 4. Let y, y \u2032 be variables in q such that h(y), h(y \u2032 ) \u2208 adom(D 0 ). Then, h(y) = y, f y and h(y) = y \u2032 , f y \u2032 for some functions f y and f y \u2032 . Moreover, if\ny i \u2208 Y y \u2229 Y y \u2032 then f y (y i ) = f y \u2032 (y i ).\nProof. Since q is connected, there is a simple path z 0 , . . . , z \u2113 in q from z 0 = y to z \u2113 = y \u2032 . Since h(y), h(y \u2032 ) \u2208 adom(D 0 ) and by Point 1 of Claim 2, all variables on this path are mapped to adom(D 0 ). Thus, there are atoms R(y, z 1 ) and S(z \u2113\u22121 , y \u2032 ) such that R(h(y), h(z 1 )) \u2208 D 0 and S(h(z \u2113\u22121 ), h(y \u2032 )) \u2208 D 0 . It now follows from the construction of D 0 and the self-join freeness of q that h(y) = y, f y and h(y) = y \u2032 , f y \u2032 . For the second part of the claim observe that if y i \u2208 Y y \u2229 Y y \u2032 then there are a simple functional path from y to y i and a simple functional path from y \u2032 to y i . Hence, there is a simple path from y to y \u2032 such that for every variable u on this path we have y i \u2208 Y u . By Claim 10, this implies f y (y i ) = f y \u2032 (y i ).\nLet f = 0\u2264i\u2264k h(u i ). By Claim 4, f is a function. We argue that a = f (y 0 ), b = f (y 1 ), and c = f (y k ) form a triangle in G.\nFirst for the edge {a, b}. We start with observing that q contains a path \u03c0 from u 0 to u 1 such that Y z \u2229 {y 0 , y 1 } = \u2205 for all variables z on \u03c0. We can find \u03c0 by concatenating the functional path from u 0 to y 0 with a path from y 0 to y 1 that contains only variables t with Y z \u2229 {y 0 , y 1 } = \u2205 (which exists since {y 0 , y 1 } is an edge in G q + and then again with the reverse of the functional path from u 1 to y 1 . We can convert \u03c0 into a simple path by cutting out subpaths. Since h(u 0 ), h(u 1 ) \u2208 adom(D 0 ) and by Point 1 of Claim 2, all variables on this path are mapped to adom(D 0 ). It now follows from y 0 \u2208 Y u0 , y 1 \u2208 Y u1 , and Claim 1 that there are two consecutive variables z 0 , z 1 on \u03c0 such that y 0 \u2208 Y z0 and y 1 \u2208 Y z1 . In summary, q contains an atom R(z 0 , z 1 ) with y 0 \u2208 Y z0 , y 1 \u2208 Y z1 , and h(z 0 ), h(z 1 ) \u2208 adom(D 0 ). Then R(h(z 0 ), h(z 1 )) \u2208 D 0 and Claim 4 yields h(z 0 ) = z 0 , f z0 with f z0 (y 0 ) = f (y 0 ) and h(z 1 ) = z 1 , f z1 with f z1 (y 1 ) = f (y 1 ). Since q is self-join free, the fact R(h(z 0 ), h(z 1 )) must have been added to D 0 due to the atom R(z 0 , z 1 ) \u2208 q. Since Y z1 \u222a Y z2 = {y 0 , y 1 }, the fact must have been added in Case 1. Thus {a, b} \u2208 E, as required.\nThe case of the edge {b, c} is analogous, with u 0 , y 0 replaced by u k\u22121 ,y k\u22121 and u 1 , y 1 by u k , y k . Moreover, it uses Case 2 of the construction of D 0 in place of Case 1.\nThe case of the edge {c, b} is also analogous, with u 0 , y 0 replaced by u k , y k and u 1 , y 1 by u 0 , y 0 . The fact R(h(z 0 ), h(z 1 )) was then added by Case 1 and Case 2 simultaneously (they simply produce the same fact), which yields {c, b} \u2208 E.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "E.4 Cyclic Queries -The Case of Non-Conformity", "text": "We now consider the second case in the proof of Point 1 of Theorem 5. The basic idea of our reduction goes back to (Brault-Baron 2013), but the details differ. Recall that a CQ q is conformal if for every clique C in the Gaifman graph of q, there is an atom in q that contains all variables in C.\nLemma 12. Let Q(x) = (O, \u03a3, q) \u2208 (ELI, CQ) be nonempty such that q is self-join free and connected and the hypergraph of q + is non-conformal. Then enumerating complete answers to Q is not in DelayC lin unless the hyperclique conjecture fails. The same is true for least partial answers, both with a single wildcard and with multi-wildcards.\nLet Q(x) = (O, \u03a3, q) \u2208 (ELI, CQ) be as in Lemma 12, and let Y = {y 0 , . . . , y k }, k \u2265 2, be a clique in the Gaifman graph of q + . Further assume that every proper subset of Y is contained in an edge in q + . MP: what if k=2?\nLet G = (V, E) be a k-regular hypergraph, that is, V = {v 1 , . . . , v n } is a set of vertices and E is a set of subsets of V of size k called the hyperedges. Our aim is to construct a database D, in time n k , such that G contains a hyperclique of size k + 1 if and only if Q(D) = \u2205. Clearly, a DelayC lin enumeration algorithm for Q lets us decide the latter in linear time and thus we have found an algorithm for the (k + 1, k)hyperclique problem that runs in time O(n k ), refuting the hyperclique conjecture.\nThe reduction shares a lot of ideas, intuition, and notation with the previous one. In particular, for every variable x in q the set Y x is defined as in the previous reduction and we again define the desired database D by starting with a 'core part' D 0 that encodes the hyperclique problem and then adding trees in a second step.\nWe start with the construction of D 0 , where we use the same functions f w\nx as in the previous reduction. For every atom r(x, y) in q with r \u2208 \u03a3, add the following facts to D 0 :\n\u2022 r( x, f w\nx , y, f w y ) for every hyperedge e = {a 1 , . . . , a k } \u2208 E and every serialization w = a 1 \u2022 \u2022 \u2022 a k of e.\nThe construction of D from D 0 is exactly as in the previous reduction, based on the database D tree and its fragments D R . More precisely, we extend the database D 0 to the desired database D as follows: for every c \u2208 adom(D 0 ) and every role R \u2208 {r, r \u2212 } with r \u2208 \u03a3 such that there is no fact R(c, c \u2032 ) \u2208 D 0 , add a disjoint copy of D R , glueing the copy of \u03b5 to c.\nFinally, for every unary relation A symbol in \u03a3 and every constant c in the so-far constructed database we add fact A(c).\nLemma 13. The database D 1. can be computed in time O(n k ), 2. satisfies all functional assertions in O, 3. is derivation complete at adom(D 0 ).\nPoint 1 is clear from the construction and Points 2 and 3 can be proved in the same way as the corresponding points in Claim 16.\nWe observe the following counterpart of Claim 2. The proof is omitted.\nClaim 5. Let h be a homomorphism from q to U D,O . Then 1. for every simple path u 0 , . . . , u m in q, m > 0, h(u 0 ) \u2208 adom(D 0 ) and h(u m ) \u2208 adom(D 0 ) implies h(u i ) \u2208 adom(D 0 ) for 0 \u2264 i \u2264 m; 2. for every cycle u 0 , . . . , u m in q, we have h(u i ) \u2208 adom(D 0 ) for 0 \u2264 i \u2264 m.\nTo finish the proof of Lemma 12, it remains to show the following.", "publication_ref": ["b8"], "figure_ref": [], "table_ref": []}, {"heading": "Lemma 14.", "text": "HD1 if there is a minimal partial answer to Q on D then there is a (k + 1)-hyperclique in the Gaifman graph of G, HD2 if there is a (k + 1)-hyperclique in the Gaifman graph of G then there is a complete answer to Q on D.\nTo show HD2, let v 0 , . . . , v k be a hyperclique in G. To show that there is a complete answer to Q on D, it suffices to exhibit a homomorphism h from q to U D,O such that h(x) \u2208 adom(D 0 ) for every answer variable x. The construction of h is very similar to the proof of the TD2 part of Claim 3 and we provide only an outline.\nSince Q is non-empty, there is a database D \u2032 that is satisfiable w.r.t. O and a homomorphism h \u2032 from q to U D \u2032 ,O such that h \u2032 (x) contains only elements of adom(D \u2032 ). Let W 0 be the set of variables x \u2208 var(q) with h \u2032 (x) \u2208 adom(D \u2032 ).\nWe may construct the desired homomorphism h by setting h\n(x) = x, f v0\u2022\u2022\u2022v k x\nfor all x \u2208 W 0 , and then extending to the remaining variables in q (which are part of tree-shaped subqueries of q) exactly as in the proof of the TD2 part of Claim 3.\nTo prove HD1, we start with observing an analogue of Claim 3. Claim 6. There is a variable u i such that h(u i ) \u2208 adom(D 0 ) and y i \u2208 Y ui , for 0 \u2264 i \u2264 k.\nProof. We prove the claim for the case y i = y 1 , the other cases are symmetric. By Point 2 of Claim 2, it suffices to show that q contains a simple cycle and a variable u i on the cycle with y i \u2208 Y ui .\nConsider the variables y 1 , y 2 , y 3 . We first show that q contains atoms R 1 (v 2 1 , v 3 1 ), R 2 (v 1 2 , v 3 2 ), and R 3 (v 1 3 , v 2 3 ) such that for every variable v j i :\n1. y j \u2208 Y v j i via a functional path \u03c0 j i in q from v j i to y j , 2. y i / \u2208 Y v j i (and thus y i / \u2208 Y x for any variable x on path \u03c0 j i ), 3. the concatenated path (\u03c0 j1 i ) \u2212 \u03c0 j2 i is simple where {i, j 1 , j 2 } = {1, 2, 3} and \u2022 \u2212 denotes path reversal.\nIn fact, by choice of Y , q + contains atoms \u03b1 1 , \u03b1 2 , \u03b1 3 such that for i, j \u2208 {1, 2, 3} \u03b1 i contains y j iff i = j. This implies in particular that y i / \u2208 Y z for any variable z in \u03b1 i . By construction of q + , we find in q (unary or binary atoms) \u03b2 1 , \u03b2 2 , \u03b2 3 such that \u03b2 i contains only variables from \u03b1 i and every variable in \u03b1 i is reachable in a functional path in q from a variable in \u03b2 i . Thus y i / \u2208 Y z for any variable z in \u03b2 i . Moreover, for {i, j 1 , j 2 } = {1, 2, 3} the atom \u03b2 i contains (possibly identical) variables w i , w \u2032 i such that q contains a functional path \u03c0 from w i to y j1 and \u03c0 \u2032 from w \u2032 i to y j2 . If these two paths share no variables, then we can choose R i (v j1 i , v j2 i ) to be \u03b2 i , \u03c0 j1 i to be \u03c0, and \u03c0 j2 i to be \u03c0 \u2032 . Otherwise, we choose v j1 i to be the last variable shared by the two paths, R i (v j1 i , v j2 i ) to be some atom that connects v j1 i with its successor node on \u03c0 \u2032 , \u03c0 j1 i to be the suffix of \u03c0 starting at v j1 i , and \u03c0 j2 i to be the suffix of \u03c0 \u2032 starting at v j2 i . Let z 1 be the first variable shared by paths \u03c0 1 3 and \u03c0 1 2 , z 2 the first variable on \u03c0 2 1 and \u03c0 2 3 , and z 3 the first variable on \u03c0 3 2 and \u03c0 3 1 . This is illustrated in Figure 3. Now consider the following cycle C:\n\u2022 path \u03c0 1 3 from v 1 3 to z 1 , reverse of path \u03c0 1 2 from z 1 to v 1 2 , \u2022 path \u03c0 2 3 from v 3 2 to z 3 , reverse of path \u03c0 3 1 from z 3 to v 3 1 , \u2022 path \u03c0 2 1 from v 2 1 to z 2 , reverse of path \u03c0 2 3 from z 2 to v 2 3 .\nIf C is simple, then we can choose u i = v 1 3 and are done. Otherwise, we can extract from C a simple cycle that still contains u i = v 1 3 , as follows. Let v be the first variable on C (regarding the order in which C is presented above) that occurs more than once on C, let its first appearance be on (possibly reversed) \u03c0 j i and the last appearance on (possibly reversed) \u03c0 m \u2113 . Note that (a) \u2113 = j because v being on \u03c0 j i implies that y j \u2208 Y v while v being on \u03c0 m \u2113 implies y \u2113 / \u2208 Y v by Point 2 above; (b) \u2113 = i due to Point 3 above.\nPoints (a) and (b) imply that the first appearance of v on C is before z 3 . It also implies that if the first appearance is before z 3 , then any other appearance (including the last) is after z 3 . We can thus remove the subcycle between the first and last occurrence without removing u i = v 1 3 . The resulting cycle is simple. To see this, assume to the contrary that there is a variable w with repeated appearance. Then w = v and the first appearance of w cannot be before the (only) appearance of v by choice of v. It can also not be after the appearance of v since then all appearances of w would be after z 3 in the original cycle C and Points (a) and (b) above imply that this is impossible. Now we can prove HD1. Let h be a homomorphism from q to U D,O . By Claim 6 for 0 \u2264 i \u2264 k there is a variable u i in q such that y i \u2208 Y ui and h(u i ) \u2208 adom(D 0 ). The following claim is proved in exactly the same way as Claim 4, details are omitted. The proof is identical and omitted.\nClaim 7. Let y, y \u2032 be variables in q such that h(y), h(y \u2032 ) \u2208 adom(D 0 ). Then, h(y) = y, f y and h(y) = y \u2032 , f y \u2032 for some functions f y and\nf y \u2032 . Moreover, if y i \u2208 Y y \u2229 Y y \u2032 then f y (y i ) = f y \u2032 (y i ). Let f = 0\u2264i\u2264k f ui . It follows from Claim 7 that f is a function from Y to V . For brevity, let v i = f (y i ) for 0 \u2264 i \u2264 k.\nTo end the proof it suffices to show that for every set I \u2286 {0, . . . , k} of size k, the set\nV I = {v i \u2208 V | i \u2208 I} is a hyperedge in G, i.e. V I \u2208 E. Since Y I = {y i \u2208 Y | i \u2208 I} \u2286 Y ,\nthere is an atom R + I (z) in q + that contains all variables in Y I . We show that q contains an atom R(z, z \u2032 ) such that Y I \u2286 Y z \u222a Y z \u2032 and h(z), h(z \u2032 ) \u2208 adom(D 0 ). Before we prove the existence of this atom, we show how this implies that V I \u2208 E. It follows from h(z), h(z \u2032 ) \u2208 adom(D 0 ) that R(h(z), h(z \u2032 )) \u2208 D 0 . By Claim 7 and the definition of D 0 , there is thus a word \nw = b 1 \u2022 \u2022 \u2022 b k such that h(z) = z, f w z , h(z \u2032 ) = z \u2032 , f w z \u2032 ,\nY I \u2286 Y z \u222aY z \u2032 yields v i = f (y i ) = b i for all i \u2208 I. Thus, V I = {v i } i\u2208I = {b 1 , . . . , b k }.\nThis proves that V I is an edge in G, as desired. Now we prove the existence of the atom R(z, z \u2032 ). By the construction of q + , q contains a (unary or binary) atom \u03b1 and two (not necessarily distinct) variables w, w \u2032 in \u03b1 such that for every y i \u2208 Y I , there is a functional path in q from w to y i or from w \u2032 to y i . Since q is connected, every variable occurs in a binary atom, and thus we may actually assume that \u03b1 is of the form R \u2032 (z 0 , z \u2032 0 ). Then Y I \u2286 Y z0 \u222a Y z \u2032 0 , that is, for every variable y i \u2208 Y I there is a simple functional path \u03c0 i in q from z 0 to y i or there is a simple functional path \u03c0 \u2032 i in q from z \u2032 0 to y i . We next show that there is a variable v such that h(v) \u2208 adom(D 0 ) and q contains a path from z 0 to v such that for all variables x on the path, Y z0 \u2286 Y x . Likewise, there is a variable v \u2032 such that h(v \u2032 ) \u2208 adom(D 0 ) and q contains a path from z \u2032 0 to v \u2032 such that for all variables x on the path,\nY z \u2032 0 \u2286 Y x .\nWe only do the case of v explicitly, the case of v \u2032 is symmetric.\nIf Y z0 = {y i } is a singleton, we choose v = u i and are done. Note that there is a functional path \u03c0 from z 0 to y i and a functional path \u03c0 \u2032 from u i to y i , and the required path from z 0 to v is \u03c0\u03c0 \u2032 \u2212 .\nOtherwise, let Y z0 = {y i1 , . . . , y im }, j \u2265 2. We prove the following by induction on i.\nClaim 8. For 2 \u2264 i \u2264 m, there is variable w i in q such that {y i1 , . . . , y ii } \u2286 Y wi , h(w i ) \u2208 adom(D 0 ), and there is a simple functional path \u03c0 i from z 0 to w i .\nWe may then choose v = w m .\nProof. The induction start is i = 2. Since y i1 , y i2 \u2208 Y z0 , we find a simple functional path \u03c4 1 from z 0 to y i1 and a simple functional path \u03c4 2 from z 0 to y i2 . Clearly, all variables x on \u03c4 1 satisfy y i1 \u2208 Y x and all variables x on \u03c4 2 satisfy y i2 \u2208 Y x . We choose w 2 to be the last variable on the longest common prefix of \u03c4 1 and \u03c4 2 (note that these paths end in y i1 and y i2 , which are distinct), and \u03c0 2 to be this prefix. Clearly, {y i1 , y i2 } \u2286 Y w2 and thus it remains to show that h(w 2 ) \u2208 adom(D 0 ).\nLet \u03c9 1 , \u03c9 2 be the parts of \u03c4 1 and \u03c4 2 that remain after the common prefix \u03c0 2 . Further recall that there is a simple functional path \u03c1 1 from u i1 to y i1 and a simple functional path \u03c1 2 from u i2 to y i2 . Now consider the path \u00b5 = \u03c1 \u2212 1 \u03c9 \u2212 1 \u03c9 2 \u03c1 2 from u i1 to u i2 . We can make the \u03c1 \u2212 1 \u03c9 \u2212 1 prefix simple by removing subpaths and we can make the \u03c4 2 \u03c9 2 suffix simple in the same way.\nFirst assume that the resulting path \u00b5 \u2032 , which must still contain w 2 , is simple. Since h(u i1 ), h(u i2 ) \u2208 adom(D 0 ), Point 1 of Claim 5 yields w 2 \u2208 adom(D 0 ) and we are done. Now assume that \u00b5 \u2032 is not simple. Then some variable x = w 2 must occur on the path \u03c9 1 \u03c1 1 and on the path \u03c9 2 \u03c1 2 . This gives rise to a cycle C in q, starting from w 2 on \u03c9 1 \u03c1 1 to x and back on \u03c1 2 \u03c9 2 to w 2 . Note that this must indeed be a cycle since it contains w 2 as well as the successors of w 2 on the paths \u03c4 1 and \u03c4 2 , and these three variables must be pairwise distinct by choice of w 2 and since \u03c4 1 , \u03c4 2 are simple paths. 2 Point 2 of Claim 5 yields w 2 \u2208 adom(D 0 ) and we are done.\nThe induction step, where i > 2, is essentially identical to the induction start except that we now start from the simple functional path \u03c4 1 = \u03c0 i\u22121 from z 0 to w i\u22121 in place of the path \u03c4 1 from z 0 to y i1 . All the remaining arguments are identical.\nHence, q contains a simple path \u03c0 from z 0 to v such that h(v) \u2208 adom(D 0 ) and all variables x on the path satisfy Y z0 \u2286 Y x , and a simple path \u03c0 \u2032 from z \u2032 0 to v \u2032 such that h(v \u2032 ) \u2208 adom(D 0 ) and all variables x on the path satisfy\nY z \u2032 0 \u2286 Y x .\nFirst assume that \u03c0 and \u03c0 \u2032 share a variable and let z be the first variable on \u03c0 \u2212 shared with \u03c0 \u2032 . Consider the path \u03c4 obtained by traveling on \u03c0 \u2212 from v to z and then on \u03c0 from z to v \u2032 . Clearly, \u03c4 is simple and thus Point 1 of Claim 5 together with the fact that h(v), h(v \u2032 ) \u2208 adom(D 0 ) implies that h(z) \u2208 adom(D 0 ). Moreover we have Y I \u2286 h(z). Let z \u2032 be the successor of z on \u03c4 . Then q must contain an atom R(z, z \u2032 ) which is the atom that we have been looking for. Now assume that \u03c0 and \u03c0 \u2032 are disjoint. Then \u03c0 \u2212 \u03c0 \u2032 is a simple path from v to v \u2032 that contains both z 0 and z \u2032 0 . Point 1 of Claim 5 yields R(h(z 0 ), h(z \u2032 0 )) \u2208 D 0 and R(z 0 , z \u2032 0 ) is the promised atom.", "publication_ref": [], "figure_ref": ["fig_14"], "table_ref": []}, {"heading": "E.5 Acyclic Queries that are not Free-Connex Acyclic", "text": "We now prove Point 2 of Theorem 5. \nM 1 , M 2 in time O(|M 1 |+|M 2 |+ |M 1 M 2 |).\nThe same is true for least partial answers, both with a single wildcard and with multi-wildcards.\nLet Q(x) = (O, \u03a3, q) be as in Lemma 15. It is well known that if a CQ is acyclic but not free-connex acyclic, then it contains a bad path, that is, a path y 0 , . . . , y k that is simple, chordless, and not a cycle, and such that y 0 , y k are answer variables while y 1 , . . . , y k\u22121 are quantified variables. See e.g. (Berkholz, Gerhardt, and Schweikardt 2020) for a proof. Thus q + contains a bad path y 0 , . . . , y k . Note that y 0 and y k are answer variables in q + , but not necessarily in q. By construction of q + , however, there is an answer variable in q that has a functional path to y 0 and a different one that has a functional path to y k . We can assume w.l.o.g. that these answer variables in q are the first two answer variables x 1 and x 2 in the tuplex.\nLet M 1 , M 2 be n\u00d7n-matrices. Our aim is to construct a database D, in time O(|M 1 | + |M 2 |), such that a DelayC lin algorithm for enumerating the (complete or partial) answers to Q on D allows us to compute\nM 1 M 2 in time O(|M 1 | + |M 2 | + |M 1 M 2 |).\nThe reduction shares ideas, intuition, and notation with the previous two reductions. In particular, for every variable x in q the set Y x is defined as in the previous reduction and we again define the desired database D by starting with a 'core part' D 0 that encodes matrix multiplication and then add trees in a second step. Before we give details, we observe the following properties of the sets Y x .\nClaim 9.", "publication_ref": ["b5"], "figure_ref": [], "table_ref": []}, {"heading": "For every variable", "text": "x in q, Y x \u2286 {y i , y i+1 } for some i with 0 \u2264 i < k. . 2. For every atom R(x, y) in q, Y x \u222a Y y \u2286 {y i , y i+1 } for some i with 0 \u2264 i < k. 3. Y yi = {y i } for 0 \u2264 i \u2264 k.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "For every answer variable", "text": "x \u2032 in q, Y x \u2032 \u2208 {\u2205, {y 0 }, {y k }}.\nProof. All points follow from the fact that the bad path y 0 , . . . , y k is chordless and not a cycle.\nFor Point 1, let x be a variable in q and assume that Y x \u2287 {y j , y i } and y j / \u2208 {y i\u22121 , y i+1 } with y \u22121 = y k . By definition of Y x , there is then a functional path in q from x to y j and from x to y i . Thus, by construction of q + the Gaifman graph of q + contains the edge {y j , y i }, in contradiction to y 0 , . . . , y k being chordless.\nThe proof of Point 2 is similar. For Point 3, first note that y i \u2208 Y yi by definition of Y yi . By Point 1, this leaves as the only possible options Y yi = {y i }, Y yi = {y i , y i\u22121 } (with y \u22121 = y k ), and Y yi = {y i , y i+1 }. The latter two options, however, are not possible. We show this exemplarily for the last option. By construction of q + , the fact that {y i , y i\u22121 } is an edge in the Gaifman graph of q + implies that q contains an atom \u03b1 that contains variables u, v such that y i\u22121 is reachable on a functional path from u and y i is reachable on a functional path from y i . Since y i+1 \u2208 Y yi , there is also a functional path from y i to y i+1 and thus we find a functional path from v to y i+1 . By construction of q + , the Gaifman graph of q + contains the edge {y i\u22121 , y i+1 }, in contradiction to the chordfreeness of y 0 , . . . , y k .\nFor Point 4 observe that the variables y 1 , . . . , y k\u22121 are quantified. Thus, by construction of q + (which is q + (x + )), q contains no functional path from an answer variable in q to any of these variables. Consequently, if x \u2032 is an answer variable in q, then Y x \u2032 \u2286 {y 0 , y k }. But by construction of q + , Y x \u2032 = {y 0 , y k } would imply that the Gaifman graph of q + contains the edge {y 0 , y k }, in contradiction to y 1 , . . . , y k not being a cycle in q + . Thus Y x \u2032 {y 0 , y k } and we are done.\nTo give an intuition of the reduction, consider the CQ q 0 (y 0 , y 2 ) = \u2203y 1 R 1 (y 0 , y 1 ) \u2227 R 2 (y 1 , y 2 ), which represents a 'paradigmatic' bad path, and assume that the ontology is empty. To compute the product M 1 M 2 , we can use the database\nD = {R 1 ( y 0 , a , y 1 , b ) | (a, b) \u2208 M 1 } \u222a {R 2 ( y 1 , b , y 2 , c ) | (b, c) \u2208 M 2 }.\nClearly, the answers to q 0 on D, projected to the second component, are exactly the 1-entries in M 1 M 2 . The above database D may be viewed as the direct product of q 0 with the database\n{R i (a, b) | (a, b) \u2208 M i , i \u2208 {1, 2}}.\nAlso in general (and as in the previous two reductions), the constructed database D may be viewed as a variation of the direct product. A homomorphism h from q to D that maps every y i \u2208 Y to a constant of the form y i , f yi gives rise to a pair (a, b) \u2208 M i as follows. By Point 3 of Claim 9, the domain of the function f yi is {y i }, and by construction of D f yi (y i ) will be an element of [n]. The homomorphism h thus identifies a sequence of elements a 0 , . . . , a k \u2208 [n], with a i = f yi (y i ). The construction of D ensures that then (a 0 , a 1 ) \u2208 M 1 , a 1 = \u2022 \u2022 \u2022 = a k\u22121 , and (a k\u22121 , a k ) \u2208 M 2 , and thus (a 0 , a k ) \u2208 M 1 M 2 . As in the previous two reductions, however, we cannot ensure that h maps every y i to a constant of the form y i , f yi . This leads to similar technical complications as in the previous reductions. Conversely, all pairs (a, c) \u2208 M 1 and (c, b) \u2208 M 2 give rise to a homomorphism from q to D.\nWe now construct the database D.\nStep 1: Encoding the product of M 1 and M 2 . We use the same functions f w x also employed in the two previous reductions. The database D 0 contains the following facts, for every atom r(x, y) in q with r \u2208 \u03a3: Step 2: Adding trees. This step is the same as in the previous two reductions. We extend the database D 0 to the desired database D as follows: for every c \u2208 adom(D 0 ) and every role R \u2208 {r, r \u2212 } with r \u2208 \u03a3 such that there is no fact R(c, c \u2032 ) \u2208 D 0 , add a disjoint copy of D R , glueing the copy of \u03b5 to c.\nMR1 if y 0 \u2208 Y x \u222a Y y , the fact r( x, f ab k x , y, f ab k y ) for all (a, b) \u2208 M 1 , MR2 if y k \u2208 Y x \u222a Y y ,\nThe following is immediate from the construction of D 0 , by a straightforward analysis of the Cases 1-3 in the construction of D 0 that may introduce an atom R(a, b). Claim 10. Let R(a, b) \u2208 D 0 with a = x, f x and b = y, f y . Then f x (y i ) = f y (y i ) for all y i \u2208 Y x \u2229 Y y .\nWe next summarize some important properties of the database D. ", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "is derivation complete at adom(D 0 ).", "text": "Point 1 should be clear by construction of D and Points 2 and 3 can be proved in the same way as the corresponding points in Claim 16.\nThe following lemma makes precise the connection between answers to Q and the matrix product M 1 M 2 . Recall that x 1 and x 2 are the first two answer variables of q. For any complete or partial answer\u0101, we use a 1 and a 2 to denote the first two constants in\u0101. Lemma 17. MM1 For every minimal partial answer\u0101 to Q on D, if minimal partial answers to Q on D. This holds both for minimal partial answers with a single wildcard and with multi-wildcards.\na 1 = x 1 , f x1 \u2208 adom(D 0 ) and a 2 = x 2 , f x2 \u2208 adom(D 0 ) then (f x1 (y 0 ), f x2 (y k )) \u2208 M 1 M 2 . MM2 For all (a, b) \u2208 M 1 M 2 ,\nBefore we prove the lemma, we let us explain how it is used to prove Lemma 15.\nAssume that the complete or minimal partial answers to Q (with a single or multiple wildcards) answers can be enumerated in DelayC lin . We can then multiply matrices M 1 and To prepare for proof of Lemma 17, we make some technical observations. Claim 11. Let h be a homomorphism from q to U D,O and u 0 , . . . , u m a simple path in q, m > 0. If h(u 0 ) \u2208 adom(D 0 ) and h(u m ) \u2208 adom(D 0 ), then h(u i ) \u2208 adom(D 0 ) for 0 \u2264 i \u2264 m.\nProof. Assume towards a contradiction that h(u j ) / \u2208 adom(D 0 ) for some j with 0 \u2264 j \u2264 m and additionally let j be smallest with this property. Moreover, let \u2113 > j be smallest such that h(u \u2113 ) \u2208 adom(D 0 ). Note that 0 < j < \u2113 < m. By definition of a path, q must contain atoms R j (u j\u22121 , u j ), . . . , R \u2113 (u \u2113\u22121 , u \u2113 ). Since q is self-join free, the relation symbols R j , . . . , R \u2113 are all distinct.\nNext observe that by construction of D and by definition of universal models, the interpretation I obtained from U D,O by removing all edges r(a, b) with a, b \u2208 adom(D 0 ) is a collection of trees without multi-edges. More precisely, these are the trees added in the second step in the construction of D and the trees U \u2193c D,O of U D,O . We view as the roots of these trees the elements of adom(D 0 ).\nThen h maps R j (u j\u22121 , u j ), . . . , R \u2113 (u \u2113\u22121 , u \u2113 ) to some tree of this collection, and both u j\u22121 and u \u2113 are mapped to the root of the tree. This, however, clearly contradicts the fact that the relation symbols R j , . . . , R \u2113 are all distinct and the tree has no multi-edges.\nClaim 12. Let y, y \u2032 be variables in q such that y = y \u2032 and h(y), h(y \u2032 ) \u2208 adom(D 0 ). Then, h(y) = y, f y and h(y) = y \u2032 , f y \u2032 for some functions f y : Y y \u2192 [n] and f y \u2032 :\nY y \u2032 \u2192 [n]. Moreover, if y i \u2208 Y y \u2229 Y y \u2032 then f y (y i ) = f y \u2032 (y i ).\nProof. Since q is connected, there is a simple path z 0 , . . . , z \u2113 in q from z 0 = y to z \u2113 = y \u2032 . Since h(y), h(y \u2032 ) \u2208 adom(D 0 ), by the previous claim, all variables on this path are mapped to adom(D 0 ). Thus, there are atoms R 0 (y, z 1 ) and R 2 (z \u2113\u22121 , y \u2032 ) such that R 0 (h(y), h(z 1 )) \u2208 D 0 and R 2 (h(z \u2113\u22121 ), h(y \u2032 )) \u2208 D 0 . Those facts have been added by one of the rules MR1, MR2, or MR3 in the construction of D 0 and, thus, h(y) = y, f y and h(y) = y \u2032 , f y \u2032 .\nFor the second part of the claim observe that if y i \u2208 Y y \u2229 Y y \u2032 then there are a simple functional path from y to y i and a simple functional path from y \u2032 to y i . Hence, there is a simple path from y to y \u2032 such that for every variable u on this path we have that y i \u2208 Y u . By Claim 10, this implies that f y (y i ) = f y \u2032 (y i ).\nWe now prove Lemma 17, starting with MM1. In fact, we show the following slightly more general statement that will be useful also in the proof of MM3.\nClaim 13. Let h be a homomorphism from q to U D,O and z, z \u2032 \u2208 var(q) such that y 0 \u2208 Y z , y k \u2208 Y z \u2032 , h(z) = z, f z , and h(z \u2032 ) = z \u2032 , f z \u2032 . Then (f z (y 0 ), f z \u2032 (y k )) \u2208 M 1 M 2 .\nWe may infer MM1 by applying the claim for z = x 1 and z \u2032 = x 2 .\nTo prove Claim 13, let h be a homomorphism from q to U D,O and z, z \u2032 \u2208 var(q) such that y 0 \u2208 Y z , y k \u2208 Y z \u2032 , h(z) = z, f z , and h(z \u2032 ) = z \u2032 , f z \u2032 .\nRecall that y 0 , . . . , y k is a bad path in q + . Thus, for every pair y i , y i+1 , 0 \u2264 i < k, there is an atom R + (z) in q + that uses both y i and y i+1 . Hence, there is a simple path \u03c0 i from y i to y i+1 in q such that for every variable x on the path we have that Y x = \u2205. Indeed, since there is an atom in q + that uses both y i and y i+1 , by definition of q + there is an atom R(v, v \u2032 ) in q such that there are a simple functional path \u03bd from v to y i in q and a simple functional path \u03bd \u2032 from v \u2032 to y i+1 in q . Let v \u2032\u2032 be the last variable on the path \u03bd that also belongs to \u03bd \u2032 . The desired simple path is the concatenation of the reverse of the suffix from v \u2032\u2032 to y i of the path \u03bd and the suffix from v \u2032\u2032 to y i+1 of the path \u03bd \u2032 .\nMoreover, since y 0 \u2208 Y z and y k \u2208 Y z \u2032 , there are a simple functional path \u03c0 \u22121 from z to y 0 in q and a simple functional path \u03c0 \u2212 k+1 from z \u2032 to y k in q. Concatenating paths \u03c0 i , \u22121 \u2264 i \u2264 k + 1, we obtain a path from z to z \u2032 such that Y u = \u2205 for every variable u on this path. Since z = z \u2032 , we can refine it to a simple path z 0 , . . . , z \u2113 from z 0 = z to z \u2113 = z \u2032 in q, by removing internal cycles. We call this path \u03c0. Notice that y 0 \u2208 Y z0 , y k \u2208 Y z \u2113 , and for every variable u on this path the set Y u is not empty.\nLet R j (z j , z j+1 ), 0 \u2264 j < \u2113, be a sequence of atoms on this path. Then, for every 0 \u2264 i < k there is an atom R i (v i , v \u2032 i ) such that {y i , y i+1 } \u2286 Y vi \u222a Y v \u2032 i . To show this let S j = Y zj \u222a Y zj+1 for 0 \u2264 j < \u2113. Now, recall that by Claim 9 for every 0 \u2264 j < \u2113 there is 0 \u2264 o < k such that S j \u2286 {y o , y o+1 } and, by the choice of \u03c0, we have that S j \u2229 S j+1 = \u2205. Moreover y 0 \u2208 S 0 and y k \u2208 S \u2113\u22121 . Now assume that there is 0 \u2264 i < k such that {y i , y i+1 } \u2286 S j for all 0 \u2264 j < \u2113. Then, by a simple inductive argument on the length of the sequence of sets S j , we can show that y o / \u2208 S j for all o > i. Thus, since y k \u2208 S \u2113 , if {y i , y i+1 } \u2286 S j for all 0 \u2264 j < \u2113 then i > k. This implies that for every 0 \u2264 i < k there is an atom\nR i (v i , v \u2032 i ) such that {y i , y i+1 } \u2286 Y zj \u222a Y zj+1 .\nSince the path \u03c0 is simple and its ends are mapped to adom(D 0 ), i.e. h(z 0 ), h(z \u2113 ) \u2208 adom(D 0 ), by Claim 11, we have that h(u) \u2208 adom(D 0 ) for every variable u in \u03c0. Thus, by Claim 12, we know that h(v i ) = v i , f vi and h(v\n\u2032 i ) = v \u2032 i , f v \u2032 i for some partial functions f v \u2032 i , f vi from Y to [n]. Let f = 0\u2264i<k f vi \u222a f v \u2032 i .\nWe claim that f is a function from Y to [n]. The existence of atoms R i (v i , v \u2032 i ) shows that for every y i \u2208 Y there is d \u2208 [n] such that (y i , d) \u2208 f . On the other hand, Claim 12 shows that the value d is uniquely defined. Thus, f is a function from Y to For ME1 recall that y 0 \u2208 Y z . Hence, there is a simple functional path from z to y 0 . For all vertices u on this path we have that y 0 \u2208 Y u and, moreover, h(u) \u2208 adom(D 0 ). Thus f (y 0 ) = f z (y 0 ).\nME3 is shown in the same way. For ME2 observe that for 0\n< i < k \u2212 1 we have that Y vi \u222a Y v \u2032 i = {y i , y i+1 } thus fact R i v i , f vi , v \u2032 i , f v \u2032 i\nwas added by the third rule MR3 in construction of D 0 . Thus, there is a word w = c 1 c k\u22121 c 2 , for some c, c 1 , c 2 \u2208 [n], such that f w vi = f vi and f w\nv \u2032 i = f v \u2032 i .\nBy the definition of f w\nx we obtain f (y i ) = f (y i+1 ) = c. To show (a, c) \u2208 M 1 observe that Y v0 \u222a Y v \u2032 0 = {y 0 , y 1 }. Thus, the fact R 0 v 0 , f v0 , v \u2032 0 , f v \u2032", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Acknowledgements", "text": "The authors were supported by the DFG project LU 1417/3-1 QTEC.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "", "text": "Since Q is non-empty, there is a database D \u2032 that is satisfiable w.r.t. O and a homomorphism h \u2032 from q to U D \u2032 ,O such that h \u2032 (x) contains only elements of adom(D \u2032 ). Let W 0 be the set of variables x \u2208 var(q) with h \u2032 (x) \u2208 adom(D \u2032 ).\nWe may construct the desired homomorphism h by setting h(x) = x, f ad k\u22121 b\nx for all x \u2208 W 0 , and then extending to the remaining variables in q (which are part of tree-shaped subqueries of q) exactly as in the proof of the TD2 part of Claim 3.\nMM3 Let\u0101 \u2208 Q * (D) be a minimal partial answer and x \u2208 var(q). We say that\u0101 is misguided and that x is misguided to c \u2208 adom(D 0 ) for\u0101 if there is a homomorphism h from q to U D,O such that h(x) =\u0101 and h(x) = c has the form x \u2032 , f x with x \u2032 = x. We first show the following. Proof. It clearly suffices to show that for every x \u2208 var(q) and c \u2208 adom(D 0 ), there are at most (|adom(D tree )| + 1) |x| minimal partial answers\u0101 \u2208 Q * (D) such that x is misguided to c for\u0101. Thus fix x and c = x \u2032 , f x with x \u2032 = x. It suffices to show that if h is a homomorphism from q to U D,O such that h(x) =\u0101 and h(x) = c, then for every answer variable x i , the corresponding constant a i in\u0101 is either a constant from a tree attached in Step 2 of the construction of D to c (which includes the possibility that h(x i ) = c) or it is ' * '.\nLet x i be an answer variable. Since q is connected, q contains a simple path z 1 , . . . , z \u2113 from x = z 1 to x i = z \u2113 . There are thus atoms R 1 (z 1 , z 2 ), . . . , R \u2113\u22121 (z \u2113\u22121 , z \u2113 ) \u2208 q. Consider the fact R 1 (h(x), h(z 2 )) \u2208 D. We argue that R 1 (h(x), h(z 2 )) / \u2208 D 0 . Assume for a contradiction that the opposite is true. From h(x) = x \u2032 , f x and the construction of D 0 , it follows that q contains a fact of the form R 1 (x \u2032 , y). This contradicts q being self-join free and containing the atom R 1 (x, z 2 ) with\n) is a constant from a tree attached in Step 2 of the construction of D to c or an element of adom(U D,O ) \\ adom(D).\nTo show that a i is a constant from a tree attached in Step 2 of the construction of D to c or ' * ', it suffices to show that h(z j ) / \u2208 adom(D 0 ) for 2 \u2264 j \u2264 \u2113, or in other words: after leaving adom(D 0 ) in the first step, entering a tree-shaped part of U D,O , the path R 1 (z 1 , z 2 ), . . . , R \u2113\u22121 (z \u2113\u22121 , z \u2113 ) never leaves that tree-shaped part again. Assume to the contrary that h(z j ) \u2208 adom(D 0 ) with 2 \u2264 j \u2264 \u2113. Then Claim 11 applied to the simple path z 1 , . . . , z j yields h(z 1 ) \u2208 adom(D 0 ), a contradiction.\nIt remains to analyse the number of minimal partial answers\u0101 that are not misguided.\nWe first establish a technical claim that analyses the facts R(a, b) \u2208 D, which 'cross' from the D 0 -part of D into the tree part added in the second step of the construction.\nProof. Let R(x, y) and R(a, b) be as in the claim. Since b / \u2208 adom(D 0 ), the fact R(a, b) was added to the database D in Step 2 of its construction. Since a \u2208 adom(D 0 ), it follows that there is no d \u2208 adom(D 0 ) such that R(a, d) \u2208 D 0 .\nSince a \u2208 adom(D 0 ), there is a fact R \u2032 (a, c) \u2208 D 0 . Thus, by construction of D 0 there is a a word w = w 0\nFor Point 1, assume to the contrary of what is to be shown that y 0 \u2208 Y x . From R(x, y) \u2208 q and the construction of D 0 it then follows that R( x, f w\nx , y, f w y ) \u2208 D 0 . This is a contradiction to that fact that there is no d \u2208 adom(D 0 ) such that R(a, d) \u2208 D 0 . We can show similarly that y k / \u2208 Y x . For Point 2, assume to the contrary that {y 0 , y k } \u2229 (Y x \u222a Y y ) = \u2205. Then, by Point 3 of the construction of D 0 we have R( x, f w\nx , y, f w y ) \u2208 D 0 which again yields a contradiction.\nRecall that the restriction of U D,O to domain dom(U D,O ) \\ adom(D 0 ) is a disjoint union of trees. These trees consists of the constants that have been added in Step 2 of the construction of D and of the nulls that have been added in the construction of the universal model. Let T \u2032 be the set of all those trees and let T be the subset of trees in T \u2032 that contain at least one constant in D, i.e. T = {T \u2208 T \u2032 | dom(T ) \u2229 dom(D) = \u2205}.\nFor a constant c \u2208 dom( T), let root(c) be the root of the tree T \u2208 T that contains c, i.e. root(c) is the unique constant in T such that there is a fact R(root(c), d) \u2208 D with d \u2208 adom(D 0 ). Moreover, let T U c be the domain of the tree that contains c. Clearly, for all c \u2208 U D,O we have\nFurther let adom(D 0 ) U = c\u2208adom(D0) dom(U \u2193c D,O ). It is not hard to verify that the set adom(D 0 ) U and the sets T U c , for c \u2208 dom(D) \\ adom(D 0 ), form a partition of adom(U D,O ).\nThe next claim analyses the relationship between the homomorphism targets of answer variables in q. Recall that by Claim 9, Y xi is {y 0 }, {y k }, or \u2205 for each answer variable x i . Also recall that Y x1 = {y 0 } and Y x2 = {y k }. Intuitively, part MH1 implies that for homomorphisms from q to U D,O that are not misguided either (MH1a) every variable x such that y 0 \u2208 Y x is mapped to a trace below a constant in adom(D 0 ) or (MH1b) there is a single constant d \u2208 dom(D) \\ adom(D 0 ) such that every every variable x such that y 0 \u2208 Y x is mapped to the tree T U d . A similar observation can be made for variables x such that y k \u2208 Y x . Finally, for variables x such that Y x = \u2205, the claim implies, part MH2, that either x is mapped to a trace below a constant from U D,O or is mapped to one of the trees above.\nClaim 16. Let h be a homomorphism from q to U D,O that is not misguided. Then the following hold:\nProof. For MH1, let x, x \u2032 be as in the claim. Since Y x = Y \u2032 x = {y} for some y \u2208 {y 0 , y k }, there are a simple functional path from x to y and a simple functional path from x \u2032 to y. Moreover, since the paths are functional and y \u2208 Y y , for any variable u on either of those paths we have that y \u2208 Y u . Thus, there is a simple path z 1 , . . . , z \u2113 from z 1 = x to z \u2113 = x \u2032 such that for every variable z i we have that y \u2208 Y zi .\nFor MH1a, let us assume, by contradiction, that h\n. By construction of D, there is z j such that h(z j ) = d. Thus, there are z j\u22121 and an atom R(z j\u22121 , z j ) such that h(z j\u22121 ) = c \u2208 adom(D 0 ), h(z j ) = d / \u2208 adom(D 0 ), and R(c, d) \u2208 D. By Claim 15, we have that y / \u2208 Y zj\u22121 , but this is impossible as we know that for every z i on the path we have that y \u2208 Y zi . This proves MH1a.\nFor MH1b, let h(x) / \u2208 adom(D 0 ) U . Thus, root(h(x)) is well defined. Let d = root(h(x)). By contradiction, let us assume that h(\nthere is a constant h(z j+1 ) = c \u2208 adom(D 0 ) and an atom R(z j , z j+1 ) \u2208 q such that h(z j ) = d. Since c, d \u2208 domD, we have R(c, d) \u2208 D and, by Claim 15, we infer that y / \u2208 Y zj+1 . Again, this is impossible as we know that for every z i on the path we have that y \u2208 Y zi . This proves MH1b.\nFor MH2, let x be an answer variable with Y x = \u2205 and h(x) / \u2208 adom(D 0 ). Then, root(h(x)) is well defined. Let d = root(h(x)). If h(x 1 ) \u2208 T U d , then we are done, so let us assume that h(x 1 ) / \u2208 T U d . Let z 1 , . . . , z \u2113 be a simple path from z 1 = x to z \u2113 = x 1 . Since h(x 1 ) / \u2208 T U d and h(x) \u2208 T U d , by construction of D there is a variable z i on this path such that h(z i ) = d and h(z i+1 ) \u2208 adom(D 0 ). Thus, there is an atom R(z i , z i+1 ) \u2208 q and a fact R(h(z i ), h(z i+1 )). Thus, by Claim 15, we have that {y\nand, by MH1b, h(x 2 ) \u2208 T U d . This ends the proof of MH2.\nFor every answer\u0101 \u2208 Q(D) W , choose a homomorphism h from q to U D,O with h(x) =\u0101 that is not misguided. We analyse four cases according to where exactly h maps the answer variables in q, and determine the maximum number of minimal partial answers in each case. Note that by Claim 9, the cases are exhaustive.\nCase 1: There is no variable x such that Y x = {y 0 } or Y x = {y k } and h(x) \u2208 adom(D 0 ) U . We will show that there are O(|M 1 |+|M 2 |) minimal partial answers consistent with this condition.\nBy Claim 16 part MH1b, there is a constant d 1 such that all answer variables x with Y x = {y 0 } are mapped to the tree T U d1 , and likewise for variables with Y x = {y k } and some constant d 2 . To be more precise, let d 1 = root(h(x 1 )) and d 2 = root(h(x 2 )). Since Y x1 = {y 0 } and Y x2 = {y k }, Point MH1b of Claim 16 implies that h(x) \u2208 T U d1 for every answer variable x with Y x = {y 0 } and h(x) \u2208 T U d2 for every answer variable x with Y x = {y k }. Moreover, by MH2, by Claim 9, and by fact that h is not misguided, for every answer variable x with Y\nwe have no more than (2|adom(D tree )| + 1 + |x|) |x| minimal partial answers, which is independent of ||D||. Thus, to show that the number of possible minimal partial answers is\nBy definition of the root function,\nThus, let us assume that c 1 = c 2 . Since c 1 , c 2 \u2208 adom(D 0 ) and the homomorphism h is not misguided, there are variables\nSince all variables x with y k \u2208 Y x are mapped to the tree T U d2 , which by assumption is different from T U d1 , we infer that y 0 \u2208 Y v1 . Thus, by Claim 15 and the fact that there is an i with Y x \u222a Y x \u2032 \u2286 {y i , y i+1 } for every atom R(x, x \u2032 ) \u2208 q, cf. Point 1 of Claim 9, we infer that Y z1 \u2286 {y 1 }. Indeed, since y 0 \u2208 Y v1 and R\nNow, following a similar argument as in the ME2 statement of MM1, we can show that f z1 (y 1 ) = f z2 (y k\u22121 ). Thus, if c 1 = c 2 then f z1 \u2286 {(y 0 , a)} and f z2 \u2286 {(y k , a)} for some a used in M 1 or in M 2 , i.e. there is a pair (a, b)\nTherefore, there are no more than 8|var(q\nIndeed, there is no more than 2(|M 1 | + |M 2 |) possible values of a and, thus, no more than\nSince there is no more than |var(q)| 2 possible pairs (z 1 , z 2 ) we can bound the number of pairs (c 1 , c 2 ) as above. Now, observe that for i = 1, 2 and every possible constant c i , there is no more than |\u03a3| different possible candidates for d i . Thus, if c 1 = c 2 then there is no more than\nCombining the c 1 = c 2 and the c 1 = c 2 case, in total there are no more than Case 2: There is a variable x such that Y x = {y 0 } and h(x) \u2208 adom(D 0 ) U , but no variable y such that Y x = {y k } and h(y) \u2208 adom(D 0 ) U .\nLet d = root(h(x 2 )). We show that there is a pair (a, b) \u2208 M 1 such that the following holds:\n1. for all answer variables x \u2032 such that Y\nnote that in the latter case, f x \u2032 is only defined on the variable y 0 and thus h(x \u2032 ) is uniquely determined; 3. for all answer variables x \u2032 such that Y\nIt follows that in this case there are no more than\nPoint 1 follows from MH1b in Claim 16, which implies that for all answer variables x \u2032 with y k \u2208 Y x \u2032 we have h(x \u2032 ) \u2208 T U d . Now for Point 2. By MH1a in Claim 16, we have h(x \u2032 ) \u2208 adom(D 0 ) U for all answer variables x \u2032 with y 0 \u2208 Y x \u2032 . If h(x \u2032 ) / \u2208 adom(D) for all such x \u2032 , then we are done. Thus assume otherwise, that is, for some answer variable x \u2032 with y 0 \u2208 Y x \u2032 we have h(x \u2032 ) \u2208 adom(D 0 ).\nSince y 0 \u2208 Y x \u2032 , there is a simple functional path z 1 , . . . , z \u2113 from x \u2032 = z 1 to y 0 = z \u2113 . Thus, there are atoms R 1 (z 1 , z 2 ), . . . , R \u2113\u22121 (z \u2113\u22121 , z \u2113 ) \u2208 q. Moreover, there is a variable z = z j such that h(y 0 ) \u2208 dom(U\n, for every answer variable x \u2032 with y 0 \u2208 Y x \u2032 and for every simple functional path v 1 , . . . , v m from x \u2032 = z 1 to y 0 = z m , which has to exists as y 0 \u2208 Y x \u2032 , there is a variable v = v j on this path such that h(v) = v, f v = z, f z = h(z). Since y 0 \u2208 Y vi or all variables v i on this path, by Claim 10 we infer that f x \u2032 (y 0 ) = f z (y 0 ) = a. This proves Point 2.\nPoint 3 follows immediately from MH2 in Claim 16.\nCase 3: There is a variable x such that Y x = {y k } and h(x) \u2208 adom(D 0 ) U , but no variable y such that Y x = {y 0 } and h(y) \u2208 adom(D 0 ) U .\nBy an argument smmetric to the one for Case 2, we may show that there are no more than |M 2 |\u2022(|adom(D tree )|+1) |x| possible partial answers in this case.\nCase 4; There is a variable x such that Y x = {y 0 } and h(x) \u2208 adom(D 0 ) U and a variable y such that Y y = {y k } and h(y) \u2208 adom(D 0 ) U .\nThen, by MH1a of Claim 16, for every answer variable z we have h(z) \u2208 adom(D 0 ) U .\nIf h(x) \u2208 adom(D 0 ) for some answer variable x with Y x = {y 0 } then we can argue as in Case 2 that for every answer variable x \u2032 with Y x \u2032 = {y 0 } and h(x \u2032 ) \u2208 adom(D 0 ) we have h(\nSimilarly, if h(y) \u2208 adom(D 0 ) for some answer variable y with Y y = {y k }, then we can argue as in Case 3 that for every answer variable y \u2032 with Y y \u2032 = {y k } and h(y\nMoreover, if both such x and y exist then Claim 13 gives (f\n\u2022 2 |x| possible partial answers of this kind.\nMP: the below should be here, true? To end the proof of MM3 we recall that every minimal partial answer is either misguided or falls under one of the four cases Case 1-4. above. We have shown that there is no more than O(|M 1 | + |M 2 |) misguided minimal partial answers. Furthermore, every of the four cases admits O(|M\nminimal partial answers. Thus, MM3 holds.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "F Proofs for Section 4", "text": "Theorem 6. For OMQs Q = (O, \u03a3, q) \u2208 (ELH, CQ) with q acyclic, single-testing minimal partial answers with a single-wildcard is in PTIME in combined complexity.\nProof. We first establish Theorem 6 in the version where 'minimal partial answers' are replaced with 'partial answers'. Let an OMQ Q(x) = (O, \u03a3, q) \u2208 (ELH, CQ) be given with q acyclic, as well as a \u03a3-database D and a tupl\u0113 a * \u2208 (adom(D) \u222a { * }) |x| . We simultaneously modify q and a * as follows:\n\u2022 let q \u2032 (x) be obtained from q(x) by quantifying all variables that have a ' * ' in the corresponding position of\u0101 * ; \u2022 let\u0101 be obtained from\u0101 * by removing all wildcards.\nWe then check whether\u0101 \u2208 Q \u2032 (D) where Q \u2032 = (O, \u03a3, q \u2032 ) and return the answer. This can be done in PTIME (Bienvenu et al. 2013).\nFor the case of minimal partial answers, we first check using the above procedure whether\u0101 * is a partial answer and return 'no' if this is not the case. We then consider all tuplesb * \u2208 (adom(D) \u222a { * }) |x| that may be obtained from a * by replacing a single occurrence of ' * ' with a constant from adom(D). For each such tuple, we check whether it is a partial answer using the above procedure. If any of the checks succeeds, return 'no'. Otherwise, return 'yes'.\nTheorem 7. For OMQs Q = (O, \u03a3, q) \u2208 (EL, CQ) with q acyclic, single-testing minimal partial answers with multi-wildcards is NP-complete in combined complexity. The same is true in (ELH, CQ) Proof. The upper bound is established essentially as in the proof of Theorem 6, with two differences. First, when constructing q \u2032 we now introduce one quantified variable per wildcard * i in\u0101 * , and thus the resulting CQ is not necessarily acyclic. Checking whether\u0101 * is a partial answer is thus only possible in NP now, rather than in PTIME. And second, we now consider all tuples tuplesb * \u2208 (adom(D) \u222a { * }) |x| such that one of the following holds:\n1.b * is obtained from\u0101 * by choosing a wildcard * i and replacing all occurrences of ' * i ' with a constant from adom(D); 2.b * is obtained from\u0101 * by choosing two distinct wildcard * i and * j , replacing all occurrences of * j with * i , and renaming the remaining wildcard to ensure that they are numbered consecutively.\nIn summary, we then obtain an NP upper bound. For the lower bound, we use a reduction from positive 1-in-3-SAT. Let \u03d5 be a 3-formula with clauses c 1 , . . . , c n and variables z 1 , . . . , z m . All literals are positive and we are interested in whether \u03d5 has a 1-in-3 assignment, that is, an assignment that satisfies exactly one variable per clause.\nLet O be the EL-ontology {V \u2291 \u2203r.\u22a4} and q the acyclic CQ that contains one connected component for each clause c i of \u03d5, as follows:\nThe answer variables are the variables x i,j with 1 \u2264 i \u2264 n and 1 \u2264 j \u2264 3. The OMQ Q is now (O, \u03a3, q) where \u03a3 is the set of relation symbols in O and q.\nThe tuple\u0101 W to be tested uses wildcards * 1 , . . . , * m . In the position for each answer variable x i,j , it has wildcard * \u2113 if the j-th variable in clause i is z \u2113 . Thus every wildcard is used multiple times, which ensures that occurrences of the same variable in different clauses receive the same truth value.\nThe database D contains the following facts:\nInformally, each variable y i from each clause may be mapped to each of a 1 , a 2 , a 3 , representing the options of making the first, second, or third variable in c i true while making all other variables false.\nIt can be verified that \u03d5 has a 1-in-3 assignment if and only if\u0101 W \u2208 Q(D) W .\nTheorem 8. For OMQs Q = (O, \u03a3, q) \u2208 (EL, CQ) singletesting minimal partial answers is DP-complete in combined complexity. This is true both for single wildcards and multiwildcards, and the same holds also in (ELH, CQ).\nProof. For the upper bound, we use essentially the same strategy as in the proofs of Theorems 6 and 7. We first observe that in (ELH, CQ), single-testing (not necessarily minimal) partial answers with multi-wildcards is in NP. Let us call this problem P 1 . To implement the strategy followed in the proofs of Theorems 6 and 7 in DP, we consider the intersection of P 1 with the following CONP-problem P 2 : given an OMQ Q = (O, \u03a3, q) \u2208 (ELH, CQ), a database D, and a list of tuples\u0101 * 1 , . . . ,\u0101 * n \u2208 (adom(D) \u222a { * }) |x| , whether (Q, D,\u0101 * i ) is a no-instance of P 1 , for some i with 1 \u2264 i \u2264 n.\nTo prove hardness, we provide a polynomial time reduction of the DP-complete problem 3COL-no3COL, defined as follows: given a pair (G 1 , G 2 ) of undirected graphs, decide whether G 1 is 3-colorable and G 2 is not.\nLet (G 1 , G 2 ) be an instance of 3COL-no3COL. We construct in polynomial time an OMQ Q \u2208 (EL, CQ), a database D, and a wildcard tuple\u0101 * such that\u0101 * \u2208 Q(D) * if and only if G 1 is 3-colorable and G 2 is not. Assume that G 1 = (  It should be clear that the first conjunction in q checks for 3-colorability of G 1 as the r-part of D is simply the CSPtemplate for 3-colorability. The remaining conjunction of q check for non-3-colorability of G 2 in the following way: the answer variable x can be mapped to the constant d if and only if G 2 is 3-colorable and it can always be mapped to an anonymous element generated by O. It is this easy to prove the following (for the multi-wildcard version, ' * ' is simply replaced with ' * 1 ').\nClaim 17. Q(D) * = { * } if and only if G 1 is 3-colorable and G 2 is not.\nTheorem 9. In (ELIHF , CQ), single-testing minimal partial answers is EXPTIME-complete in combined complexity, both with single wildcards and multi-wildcards.\nProof. We may once more use the strategy from the proofs of Theorems 6 and 7. It amounts to polynomially many calls to an EXPTIME problem, thus resulting in EXPTIME overall complexity.", "publication_ref": ["b6"], "figure_ref": [], "table_ref": []}], "references": [{"ref_id": "b0", "title": "Popular Conjectures Imply Strong Lower Bounds for Dynamic Problems", "journal": "IEEE Computer Society", "year": "2014", "authors": "A Abboud; V V Williams"}, {"ref_id": "b1", "title": "A Refined Laser Method and Faster Matrix Multiplication", "journal": "SIAM", "year": "2021", "authors": "J Alman; V V Williams"}, {"ref_id": "b2", "title": "An Introduction to Description Logic", "journal": "Cambridge University Press", "year": "2017", "authors": "F Baader; I Horrocks; C Lutz; U Sattler"}, {"ref_id": "b3", "title": "On Acyclic Conjunctive Queries and Constant Delay Enumeration", "journal": "Springer", "year": "2007", "authors": "G Bagan; A Durand; E Grandjean"}, {"ref_id": "b4", "title": "On the Desirability of Acyclic Database Schemes", "journal": "J. ACM", "year": "1983", "authors": "C Beeri; R Fagin; D Maier; M Yannakakis"}, {"ref_id": "b5", "title": "Constant delay enumeration for conjunctive queries: a tutorial", "journal": "ACM SIGLOG News", "year": "2020", "authors": "C Berkholz; F Gerhardt; N Schweikardt"}, {"ref_id": "b6", "title": "Tractable Queries for Lightweight Description Logics", "journal": "", "year": "2013", "authors": "M Bienvenu; M Ortiz; M Simkus; G Xiao"}, {"ref_id": "b7", "title": "Ontology-Based Data Access: A Study through Disjunctive Datalog, CSP, and MMSNP", "journal": "ACM Trans. Database Syst", "year": "2014", "authors": "M Bienvenu; B Ten Cate; C Lutz; F Wolter"}, {"ref_id": "b8", "title": "De la pertinence de l'\u00e9num\u00e9ration: complexit\u00e9 en logiques propositionnelle et du premier ordre. (The relevance of the list: propositional logic and complexity of the first order)", "journal": "", "year": "2013", "authors": "J Brault-Baron"}, {"ref_id": "b9", "title": "A general Datalog-based framework for tractable query answering over ontologies", "journal": "J. Web Semant", "year": "2012", "authors": "A Cal\u00ec; G Gottlob; T Lukasiewicz"}, {"ref_id": "b10", "title": "Ontologies and Databases: The DL-Lite Approach", "journal": "Springer", "year": "2009", "authors": "D Calvanese; G D Giacomo; D Lembo; M Lenzerini; A Poggi; M Rodriguez-Muro; R Rosati"}, {"ref_id": "b11", "title": "Conjunctive queries with self-joins, towards a fine-grained complexity analysis", "journal": "", "year": "2022", "authors": "N Carmeli; L Segoufin"}, {"ref_id": "b12", "title": "Tractable Orders for Direct Access to Ranked Answers of Conjunctive Queries", "journal": "ACM", "year": "2021", "authors": "N Carmeli; N Tziavelis; W Gatterbauer; B Kimelfeld; M Riedewald"}, {"ref_id": "b13", "title": "Time Bounded Random Access Machines", "journal": "J. Comput. Syst. Sci", "year": "1973", "authors": "S A Cook; R A Reckhow"}], "figures": [{"figure_label": "", "figure_type": "figure", "figure_id": "fig_0", "figure_caption": ", b) where sum and product are interpreted over the Boolean semiring. In (nonsparse) Boolean matrix multiplication (BMM), one wants to compute M 1 M 2 given M 1 and M 2 as n \u00d7 n arrays. In sparse Boolean matrix multiplication (spBMM), input and output matrices M are represented as lists of pairs (a, b) with M (a, b) = 1. The currently best known algorithm for BMM achieves running time n 2.37 (Alman and Williams 2021) and it is open whether running time n 2 can be achieved; this would require dramatic advances in algorithm theory. Regarding spBMM, it is open whether running time O(|M 1 |+|M 2 |+|M 1 M 2 |) can be attained, that is, time linear in the size of the input and the output (represented as lists). This clearly implies BMM in time n 2 , but the converse is not known.", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_1", "figure_caption": "Dowling, W. F.; and Gallier, J. H. 1984. Linear-time algorithms for testing the satisfiability of propositional horn formulae. The Journal of Logic Programming, 1(3): 267-284. Eiter, T.; Gottlob, G.; Ortiz, M.; and Simkus, M. 2008. Query Answering in the Description Logic Horn-SHIQ. In Proc. of JELIA, volume 5293 of LNCS, 166-179. Springer. Grandjean, E. 1996. Sorting, linear time and the satisfiability problem. Annals of Mathematics and Artificial Intelligence, 16: 183-236. Johnson, D. S.; and Klug, A. C. 1982. Testing Containment of Conjunctive Queries Under Functional and Inclusion Dependencies. In Proc. of PODS, 164-169. ACM. Kazana, W. 2013. Query evaluation with constant delay. (L'\u00e9valuation de requ\u00eates avec un d\u00e9lai constant). Ph.D. thesis,\u00c9cole normale sup\u00e9rieure de Cachan, Paris, France. Kr\u00f6tzsch, M.; Rudolph, S.; and Hitzler, P. 2007. Conjunctive Queries for a Tractable Fragment of OWL 1.1. In Proc. of ISWC, volume 4825 of LNCS, 310-323. Springer. Lincoln, A.; Williams, V. V.; and Williams, R. R. 2018. Tight Hardness for Shortest Cycles and Paths in Sparse Graphs. In SODA 2018, 1236-1252. SIAM. Lutz, C.; and Przybylko, M. 2022a. Efficiently Enumerating Answers to Ontology-Mediated Queries. In Proc. of PODS, 277-289. ACM. Lutz, C.; and Przybylko, M. 2022b. Efficiently Enumerating Answers to Ontology-Mediated Queries. CoRR, abs/2203.09288. Segoufin, L. 2015. Constant Delay Enumeration for Conjunctive Queries. SIGMOD Rec., 44(1): 10-17.", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_2", "figure_caption": "A, and A(c) / \u2208 D, then add A(c) to D; R2 If A(c 1 ), R(c 2 , c 1 ) \u2208 D, \u2203R.A \u2291 B \u2208 O, and B(c 2 ) / \u2208 D, then add B(c 2 ) to D; R3 If R(c 1 , c 2 ) \u2208 D, R \u2291 S \u2208 O, and S(c 1 , c 2 ) / \u2208 D, then add", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_3", "figure_caption": "We use M c to denote the set of concept names A with A(c) \u2208 ch O (D). Moreover, we use D M to denote the database {A( c) | A \u2208 M } where c is an arbitrary, but fixed constant. If M = M c , then we take c = c. For a non-empty set \u03c1 of roles and set M of concept names, we write c \u03c1 D,O M if 1. D Mc , O |= q 1 \u03c1,M (c), 2. \u03c1 and M are maximal with this property, that is, there are no \u03c1 \u2032 \u2287 \u03c1 and M \u2032 \u2287 M with (\u03c1 \u2032 , M \u2032 ) = (\u03c1, M ) such that D Mc , O |= q 1 \u03c1 \u2032 ,M \u2032 (c), and 3. there is no R(c, c \u2032 ) \u2208 ch O (D) such that R \u2208 \u03c1 and func(R) \u2208 O.", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_4", "figure_caption": "For c \u2208 dom(D), we use U \u2193c D,O to denote the restriction of U D,O to the domain that consists of all traces starting with c. Note that, by construction of U D,O , U \u2193c D,O takes the shape of a tree without multi-edges and reflexive loops. We also refer to U \u2193c D,O as the tree in U D,O rooted in c. Lemma 6. Let O be an ELIHF -ontology and let D 1 , D 2 be databases that are satisfiable w.r.t. O and c 1 , c 2 be constants such that D 1 , O |= A(c 1 ) implies D 2 , O |= A(c 2 ) for every concept name A. Further, let J be a model of D 2 and O. Then there is a homomorphism h from U \u2193c1 D1,O to J with h(c 1 ) = c 2 . Proof. For brevity, let I = U \u2193c1 D1,O . Let T n , n \u2265 0, be the set of traces in I of length n. In particular T 0 = {c 1 }.", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_5", "figure_caption": "Further assume that ( * ) there are S(c, c 2 ) \u2208 D and \u03c1, M such that func(S) \u2208 O, D Mc , O |= q 1 \u03c1,M (c), S, R \u2208 \u03c1, and A 2 \u2208 M . Then Rule R4 makes sure that R(c, c 2 ) and A 2 (c 2 ) are in U D,O , and thus c \u2208 (\u2203R.A 2 ) UD,O as required. Now assume that ( * ) does not hold. Clearly t \u2208 A UD,O 1 implies A 1 (t) \u2208 ch O (D). Thus A 1 \u2208 M c and consequently there must be some set of roles \u03c1 and of concept names M such that R \u2208 \u03c1, A 2 \u2208 M , and D Mc , O |= q 1 \u03c1,M (c). We may assume w.l.o.g. that \u03c1 and M are maximal with this property. Thus Conditions 1 and 2 of c \u03c1 D,O M are satisfied, and it is not hard to show that Condition 3 must also be satisfied. If, in fact, Condition 3 is violated then there is an R \u2032 (c, c \u2032 ) \u2208 ch O (D) with R \u2208 \u03c1 and func(R) \u2208 O. But then ( * ) is satisfied for \u03c1, M and S = R. Now assume that t = c\u03c1M . Then A 1 \u2208 M and D Mc , O |= q 1 \u03c1,M (c). If D Mc |= A 2 (c) and R \u2212 \u2208 \u03c1, then an easy semantic argument shows D Mc , O |= A 2 (c) and thus rule R1 ensures that A 2 (c) \u2208 U D,O and the construction of U D,O yields (t, c) \u2208 R UD,O , thus we are done. Now assume that D Mc |= A 2 (c) or R \u2212 / \u2208 \u03c1. Since A 1 \u2208 M , there must be some set of roles \u03c1 \u2032 and of concept names M \u2032 such that R \u2208 \u03c1, A 2 \u2208 M , and D M , O |= q 1 \u03c1 \u2032 ,M \u2032 ( c). We may assume w.l.o.g. that \u03c1 \u2032 and M \u2032 are maximal with this property. Thus M \u03c1 \u2032 D,O M \u2032 . Using the fact that D Mc , O |= A 2 (c) or R \u2212 /", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_6", "figure_caption": "there must be some set of roles \u03c1 and of concept names M such that R \u2208 \u03c1, A 2 \u2208 M , and D M , O |= q 1 \u03c1, M ( c). We may assume w.l.o.g. that \u03c1 and M are maximal with this property. Thus M", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_7", "figure_caption": "next show that the RIs in O are satisfied. Thus let R \u2291 S \u2208 O. If R(c, c \u2032 ) \u2208 U D,O with c, c \u2032 \u2208 adom(D), then R(c, c \u2032 ) \u2208 ch O (D) and Rule R3 yields (c, c \u2032 ) \u2208 S UD,O . It remains to deal with the cases (c, c\u03c1M ) \u2208 R UD,O , (t, t\u03c1M ) \u2208 R UD,O , and (t\u03c1M, t) \u2208 R UD,O . In the first two cases, we must have R \u2208 \u03c1, implying S \u2208 \u03c1 by the maximality conditions, and thus also (c, c\u03c1M ) \u2208 S UD,O and (t, t\u03c1M ) \u2208 S UD,O , respectively. In the last case, we must have R \u2212 \u2208 \u03c1. Clearly R \u2291 S \u2208 O implies O |= R \u2212 \u2291 S \u2212 . We can thus argue similarly that (t\u03c1M, t) \u2208 S UD,O .", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_8", "figure_caption": "Thus, A(h(c)) \u2208 I as h 0 and h c are homomorphisms. Similarly, for role names, if R(c, d) is a fact in U D,O then either c, d \u2208 dom(D) and h(c) = h 0 (c), h(d) = h 0 (d) or there is c \u2032 \u2208 dom(D) such that c and d are traces in U \u2193c D,O . In the former case we have that R(h(c), h(d)) \u2208 I as h 0 is a homomorphism from ch O (D) to I, and in the latter we have that R(h(c), h(d)) \u2208 I as h c is a homomorphism from U \u2193c D,O to I. Finally, Point 3 is a consequence of Point 2 and the definitions of Q(D) and q(U D,O ). C.1 Query-Directed Universal Models Let Q = (O, \u03a3, q) \u2208 (ELIHF , CQ) with O in normal form, and let n = |var(q)|. We use cl(Q) to denote the set of all Boolean tree CQs that use at most n variables, only symbols from sig(O) \u222a sig(q), and satisfy all functionality assertions in O. We may assume that the CQs in cl(Q) use only variables from a fixed set of size n, and thus cl(Q) is finite.", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_9", "figure_caption": "2. Extend ch O (D) to the restriction of U D,O to traces of length n. Informally, this attaches trees of depth n to constants c \u2208 adom(D). This can be done following exactly the definition of traces, and it involves deciding questions of the form D M , O |= q 1 \u03c1,M \u2032 (c). Step 3. For every c \u2208 adom(D), let again M c denote the set of concept names A with A(c) \u2208 ch O (D). Then include, for every p \u2208 cl(Q) such that D Mc , O |= p for some c \u2208 adom(D), a copy of D p that uses only fresh constants. It should be clear that U D,Q satisfies all functionality assertions in O. Lemma 7. Let Q(x) = (O, \u03a3, q) \u2208 (ELIHF , CQ) and let D be a \u03a3-database. Then Q", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_10", "figure_caption": "c2) and x A(c1) \u2227 x R(c1,c2) \u2192 x B(c2) for all A \u2291 \u2203S.B \u2208 O such that S \u2291 * O R and func(R) \u2208 O. The size of \u03b8 is bounded by 2 O(||O||) \u2022 ||D|| and \u03b8 can be constructed in time 2 O(||O||) \u2022 ||D||.", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_11", "figure_caption": "Lemma 9. D \u03c9 is derivation complete for concept names at \u03b5.Proof. Let A be a non-empty concept name. Then there is a \u03a3-database D and a c \u2208 dom(D) with D, O |= A(c). Clearly, we have (D, c) (D \u03c9 , \u03b5). Hence, Lemma 5 implies D \u03c9 , O |= A(\u03b5), as required. It follows that, by construction, D tree is also derivation complete for concept names. By the following lemma, D tree is derivation complete in general and what is more, simulation from (D tree , \u03b5) guarantees derivation completeness. Lemma 10. Let D be a \u03a3-database that is satisfiable w.r.t. O and c \u2208 adom(D) such that (D tree , \u03b5) (D, c). Then D is derivation complete at c. Proof. Let D and c be as in the lemma. Further let D \u2032 be any \u03a3-database and c \u2032 \u2208 adom(D \u2032 ). We have to show that there is a homomorphism h from U \u2193c \u2032 D \u2032 ,O to U D,O with h(c \u2032 ) = c. From the fact that D tree is derivation complete for concept names at \u03b5, it follows that D \u2032 , O |= A(c \u2032 ) implies D tree , O |= A(\u03b5). From (D tree , \u03b5) (D, c) and Lemma 5, we obtain D, O |= A(c). Lemma 6 thus yields the desired homomorphism h.", "figure_data": ""}, {"figure_label": "2", "figure_type": "figure", "figure_id": "fig_12", "figure_caption": "Figure 2 :2Figure 2: Example for the construction of D 0 . The role name R 01 is interpreted as the identity in D 0 (not shown in picture).", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_13", "figure_caption": "Proof.Point 1 is clear from the construction. For Point 2, take a role R such that func(R) \u2208 O and facts R(c, d), R(c, d \u2032 ) \u2208 D. We show that d = d \u2032 . If one of c, d or d \u2032 belongs to a copy of D tree then clearly d = d \u2032 . Thus, let us assume that c, d, d \u2032 \u2208 adom(D 0 ). Then the facts R(c, d) and R(c, d \u2032 ) were added to D 0 because of an atom R(x, y) in q and, due to the self-join freeness of q we have c = x, f c , d = y, f d , and d \u2032 = y, f d \u2032 for functions f c , f d , f d \u2032 . From func(R) \u2208 O we obtain Y y \u2286 Y x . No matter whether fact R(c, d) was added in Step 1, 2, or 3 of the construction of D 0 , there is a word w such that f c = f w x and f d = f w y . It thus follows from", "figure_data": ""}, {"figure_label": "3", "figure_type": "figure", "figure_id": "fig_14", "figure_caption": "Figure 3 :3Figure 3: Illustration of the proof of existence of a simple cycle containing u i . The directed edges symbolise functional paths between variables. Paths composed of the same colour sections (red, blue, black) or of the same structure sections (solid, dashed, dotted) are simple.", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_15", "figure_caption": "the fact r( x, f b k c x , y, f b k c y ) for all (b, c) \u2208 M 2 , MR3 otherwise, the fact r( x, f b k+1 x , y, f b k+1 y ) for all b such that (a, b) \u2208 M 1 or (b, c) \u2208 M 2 .It also contains A(c) for every concept name A \u2208 \u03a3 and every constant c \u2208 adom(D 0 ).", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_16", "figure_caption": "Lemma 16. The database D 1. can be computed in time O(|M 1 | + |M 2 |). 2. satisfies the functional assertions in O.", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_17", "figure_caption": "there is a complete answer\u0101 to Q on D such that a1 = x 1 , f x1 , a 2 = y x , f x2 with f x1 (y 0 ) = a and f x2 (y k ) = b. MM3 There are no more than O(|M 1 | + |M 2 | + |M 1 M 2 |)", "figure_data": ""}, {"figure_label": "2", "figure_type": "figure", "figure_id": "fig_18", "figure_caption": "M 22in time O(|M 1 | + |M 2 | + |M 1 M 2 |) as follows. We build the database D as described above. Then, we enumerate the answers to Q on D. For every answer\u0101 with a 1 = x 1 , f x1 and a 2 = x 2 , f x2 we extract the pair (f x1 (y 0 ), f x2 (y k )) \u2208 [n] \u00d7 [n]. By MM1 and MM2, the result of this extraction is exactly the set of pairs in M 1 M 2 . Since D can be constructed in time O(|M 1 | + |M 2 |) and by MM3 there are no more than O(|M 1 | + |M 2 | + |M 1 M 2 |) answers, this algorithm produces M 1 M 2 in time O(|M 1 | + |M 2 | + |M 1 M 2 |).", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_19", "figure_caption": "[n]. Let f (y 0 ) = a, f (y 1 ) = c, and f (y k ) = b. Then ME1 f (y 0 ) = f z (y 0 ) = a, ME2 for 0 < i < k we have that f (y i ) = c, ME3 and f (y k ) = f z \u2032 (y k ) = b. ME4 Finally, (a, c) \u2208 M 1 , (c, b) \u2208 M 2 .", "figure_data": ""}, {"figure_label": "", "figure_type": "table", "figure_id": "tab_1", "figure_caption": "Lemma 4. 1. U D,O is a model of D and O. 2. If I is a model of D and O, then there is a homomorphism from U D,O to I that is the identity on adom", "figure_data": ""}], "formulas": [{"formula_id": "formula_0", "formula_text": "= A | C \u2293 D | \u2203R.C", "formula_coordinates": [2.0, 147.92, 587.36, 81.79, 10.21]}, {"formula_id": "formula_1", "formula_text": "Example 1. Let Q(x, y, z) = (O, \u03a3, q)", "formula_coordinates": [3.0, 54.0, 570.21, 158.3, 9.96]}, {"formula_id": "formula_2", "formula_text": "q(x, y, z) = Person(x) \u2227 hasEmployee(y, x) \u2227 TechCompany(y) \u2227 hasEmployee(z, x) \u2227 CarCompany(z).", "formula_coordinates": [3.0, 64.08, 668.36, 218.31, 37.81]}, {"formula_id": "formula_3", "formula_text": "A path y 0 , . . . , y k in q is functional if for CQ q x y z t R1 R2 R3 R4 Join tree for q + (x, t, y) R \u2032 1 (x,y,z) R \u2032 2 (y,z) R \u2032 3 (z,x,y) R \u2032 4 (t,y)", "formula_coordinates": [3.0, 382.33, 694.52, 175.76, 10.65]}, {"formula_id": "formula_4", "formula_text": "R \u2032 1 (x,y,z) R \u2032 2 (y,z) R \u2032 3 (z,x,y) R \u2032 4 (t,y) H(x,t,y) Figure 1: Illustration of Example 2 0 \u2264 i < k, there is an atom R(y i , y i+1 ) \u2208 q such that O |= func(R).", "formula_coordinates": [4.0, 54.0, 59.49, 242.19, 148.68]}, {"formula_id": "formula_5", "formula_text": "Example 2. Let O={func(R \u2212 2 ), func(R \u2212 3 ), func(R 4 )} and q(x, t)=R 1 (x, y) \u2227 R 2 (y, z) \u2227 R 3 (z, x) \u2227 R 4 (t, y). Fix the variable order x < y < z < t. Then the CQ q + ((x, t) + ) is q + (x, t, y) = R \u2032 1 (x, y, z), R \u2032 2 (y, z), R \u2032 3 (z, x, y), R \u2032 4 (t, y", "formula_coordinates": [4.0, 54.0, 331.97, 238.62, 53.77]}, {"formula_id": "formula_6", "formula_text": "Theorem 1. Let Q(x) = (O, \u03a3, q) \u2208 (ELIHF , CQ) such that q + (x +", "formula_coordinates": [4.0, 54.0, 466.16, 238.62, 21.13]}, {"formula_id": "formula_7", "formula_text": "Proposition 1. Given an OMQ Q(x) = (O, \u03a3, q) \u2208 (ELIHF , CQ) and a \u03a3-database D that is satisfiable w.r.t. O, one can compute in time 2 poly(||Q||) \u2022 O(||D||) a database U D,Q \u2287 D that satisfies all functionality asser- tions in O and such that Q(D) = q(U D,Q ) \u2229 adom(D) |x| .", "formula_coordinates": [4.0, 54.0, 518.36, 238.66, 57.82]}, {"formula_id": "formula_8", "formula_text": "1. E = D 1 \u222a \u2022 \u2022 \u2022 \u222a D n ,", "formula_coordinates": [5.0, 54.48, 202.16, 93.45, 10.9]}, {"formula_id": "formula_9", "formula_text": "D i ) \\ N, 3. adom(D i ) \u2229 adom(D j ) \u2229 N = \u2205 for 1 \u2264 i < j \u2264 n.", "formula_coordinates": [5.0, 54.48, 226.16, 223.89, 23.85]}, {"formula_id": "formula_10", "formula_text": "D + 0 . It follows from Lemma 1 that q(D 0 ) * N = q + (D + 0 ) * N .", "formula_coordinates": [5.0, 54.0, 523.25, 238.63, 26.41]}, {"formula_id": "formula_11", "formula_text": "Boolean n \u00d7 n matrices M 1 , M 2 is the Boolean n \u00d7 n ma- trix M 1 M 2 := n c=1 M 1 (a, c) \u2022 M 2 (c", "formula_coordinates": [5.0, 319.56, 56.24, 238.52, 23.13]}, {"formula_id": "formula_12", "formula_text": "O(|M 1 | + |M 2 | + |M 1 M 2 |)", "formula_coordinates": [5.0, 319.56, 302.84, 109.38, 10.9]}, {"formula_id": "formula_13", "formula_text": "Proof. Let Q(x) = (O, \u03a3, q) where O = {A \u2291 \u2203f \u2212 .\u22a4, func(f )} \u03a3 = {A, r 1 , r 2 , f } q(x, z, y) = r 1 (x, u 1 ) \u2227 f (z, u 1 ) \u2227 f (z, u 2 ) \u2227 r 2 (u 2 , y).", "formula_coordinates": [5.0, 319.56, 336.45, 232.68, 57.57]}, {"formula_id": "formula_14", "formula_text": "M 1 M 2 in list representation, to compute M 1 M 2 in time O(|M 1 | + |M 2 | + |M 1 M 2 |)", "formula_coordinates": [5.0, 319.56, 469.89, 238.38, 32.61]}, {"formula_id": "formula_15", "formula_text": "with M 2 (c, b) = 1. It is easy to verify that Q(D) * = {(a, * , b) | (a, b) \u2208 M 1 M 2 }. We may thus construct a list representation of M 1 M 2 by enumerating Q(D) * . Since |D| = |M 1 | + |M 2 | and we can enumerate in DelayC lin , the overall time spent is O(|M 1 | + |M 2 | + |M 1 M 2 |).", "formula_coordinates": [5.0, 319.56, 534.77, 238.54, 55.93]}, {"formula_id": "formula_16", "formula_text": "1 | + |M 2 | + |M 1 M 2 |).", "formula_coordinates": [6.0, 66.96, 308.84, 225.54, 21.82]}, {"formula_id": "formula_17", "formula_text": "1. if y 0 \u2208 Y x \u222aY y : r( x, f ab k x , y, f ab k y ) for all (a, b) \u2208 E, 2. if y k \u2208 Y x \u222aY y : r( x, f a k b x , y, f a k b y ) for all (a, b) \u2208 E, 3. if neither is true: r( x, f b k+1 x , y, f b k+1 y ) for all a \u2208 V .", "formula_coordinates": [6.0, 320.04, 362.01, 237.93, 51.2]}, {"formula_id": "formula_18", "formula_text": "c \u2032 = (c \u2032 1 , . . . , c \u2032 n ), we writec c \u2032 if 1. c i = c \u2032 i or c \u2032 i \u2208 W for \u2264 i \u2264 n and 2. c \u2032 i = c \u2032 j implies c i = c j for 1 \u2264 i, j \u2264 n. Then,c \u227ac \u2032 ifc c \u2032 andc =c \u2032 . For example, ( * 1 , a) \u227a ( * 1 , * 2 ) and (a, * 1 , * 2 , * 1 ) \u227a (a, * 1 , * 2 , * 3 ). Informally,c \u227a c \u2032 means thatc is strictly more informative thanc \u2032 .", "formula_coordinates": [9.0, 54.0, 178.01, 456.29, 74.92]}, {"formula_id": "formula_19", "formula_text": "A simulation from I to J is a relation S \u2286 adom(I) \u00d7 adom(J ) such that Sim1 A(c) \u2208 I and (c, c \u2032 ) \u2208 S implies A(c \u2032 ) \u2208 J and Sim2 R(c 1 , c 2 ) \u2208 I and (c 1 , c \u2032 1 ) \u2208 S implies that there is a c \u2032 2 \u2208 adom(J ) such that R(c \u2032 1 , c \u2032 2 ) \u2208 J and (c 2 , c \u2032 2 ) \u2208 S.", "formula_coordinates": [9.0, 54.0, 610.28, 238.66, 71.26]}, {"formula_id": "formula_20", "formula_text": "O = {A 1 \u2291 \u2203r 1 .B 1 , A 2 \u2291 \u2203r 2 .B 2 , A \u2291 \u2203s.B r 1 \u2291 s, r 2 \u2291 s, func(s)}", "formula_coordinates": [9.0, 338.52, 207.2, 200.03, 24.7]}, {"formula_id": "formula_21", "formula_text": "q 1 \u03c1,M (x) = \u2203y {R(x, y) | R \u2208 \u03c1} \u2227 {A(y) | A \u2208 M } and let q 2", "formula_coordinates": [9.0, 319.56, 322.13, 236.82, 32.2]}, {"formula_id": "formula_22", "formula_text": "R1 If A 1 (c), . . . , A n (c) \u2208 D, O |= A 1 \u2293 \u2022 \u2022 \u2022 \u2293 A n \u2291", "formula_coordinates": [9.0, 319.56, 391.52, 224.34, 10.9]}, {"formula_id": "formula_23", "formula_text": "S(c 1 , c 2 ) to D; R4 If A 1 (c 1 ), . . . , A n (c 1 ), R(c 1 , c 2 ) \u2208 D, func(R) \u2208 O, {A 1 (c 1 ), . . . , A n (c n )}, O |= q 1 \u03c1,M (c 1 ), S, R \u2208 \u03c1, A \u2208 M , and S(c 1 , c 2 ) / \u2208 D or A(c 2 ) / \u2208 D, then add S(c 1 , c 2 ) and A(c 2 ) to D.", "formula_coordinates": [9.0, 319.56, 450.8, 238.5, 58.54]}, {"formula_id": "formula_24", "formula_text": "M 1 \u03c1 D,O M 2 if for 1 \u2264 i < n: 4. D Mi , O |= q 1 \u03c1i+1,Mi+1(", "formula_coordinates": [10.0, 54.48, 130.63, 228.97, 32.74]}, {"formula_id": "formula_25", "formula_text": "t = c\u03c1 1 M 1 \u03c1 2 M 2 . . . \u03c1 n M n , n \u2265 0,", "formula_coordinates": [10.0, 101.64, 203.0, 143.28, 10.9]}, {"formula_id": "formula_26", "formula_text": "6. c \u03c11 D,O M 1 , 7. M i \u03c1i+1 O M i+1 , 8. there is no role name R with R \u2212 \u2208 \u03c1 i , R \u2208 \u03c1 i+1 , and func(R) \u2208 O, for 1 \u2264 i < n.", "formula_coordinates": [10.0, 54.48, 258.43, 238.14, 55.34]}, {"formula_id": "formula_27", "formula_text": "U D,O = ch O (D) \u222a {A(t\u03c1M ) | t\u03c1M \u2208 T and A \u2208 M } \u222a {R(t, t\u03c1M ) | t\u03c1M \u2208 T and R \u2208 \u03c1}.", "formula_coordinates": [10.0, 78.84, 360.92, 186.63, 38.05]}, {"formula_id": "formula_28", "formula_text": "(D). 3. Q(D) = q(U D,O ) \u2229 adom(D) |x| .", "formula_coordinates": [10.0, 54.48, 476.11, 204.33, 24.84]}, {"formula_id": "formula_29", "formula_text": "c i \u2208 adom(D i ) for i \u2208 {1, 2}. Then (D 1 , c 1 ) (D 2 , c 2 ) and D 1 , O |= A(c 1 ) implies D 2 , O |= A(c 2 ) for every concept name A.", "formula_coordinates": [10.0, 54.0, 544.4, 238.69, 43.09]}, {"formula_id": "formula_30", "formula_text": "D 1 = I 0 \u2286 I 1 \u2286 \u2022 \u2022 \u2022 \u2286 I k = ch O (D 1 ). Since (D 1 , c 1 ) (D 2 , c 2 ), there is a simulation S from D 1 to D 2 with (c 1 , c 2 ) \u2208 S. We prove by induction on i that ( \u2020) S is a simulation from I i to ch O (D 2 ).", "formula_coordinates": [10.0, 49.8, 641.96, 242.17, 63.22]}, {"formula_id": "formula_31", "formula_text": "c \u2032 i , for 1 \u2264 j \u2264 k such that S \u2032 = {A 1 (c \u2032 ), . . . , A \u2113 (c), R 1 (c, c \u2032 1 ), . . . , R k (c, c \u2032 k )} \u2286 U D2,O . Clearly, we have that S \u2032 , O |= A(c \u2032 ). Since U D2,O is a model of O, we infer that A(c \u2032 ) \u2208 U D2,O . This finishes the proof of ( \u2020). Now assume that D 1 , O |= A(c 1 ). Then Point 3 of Lemma 4 yields A(c 1 ) \u2208 U D1,O . Since the construction of U D1,O from ch O (D 1 ) adds no facts A(c) with c \u2208 adom(D 1 ), this yields A(c 1 ) \u2208 ch O (D 1 ). Now ( \u2020) yields A(c 2 ) \u2208 ch O (D 2 ), thus A(c 2 ) \u2208 U D2,O , implying D 2 , O |= A(c 2 ).", "formula_coordinates": [10.0, 319.56, 241.85, 238.74, 125.05]}, {"formula_id": "formula_32", "formula_text": "D 1 , O |= A(c 1 ) implies D 2 , O |= A(c 2 ) for every concept name A, h 0 is a homomorphism.", "formula_coordinates": [10.0, 319.56, 594.2, 238.69, 21.82]}, {"formula_id": "formula_33", "formula_text": "N \u2032 = {A | A(w) \u2208 J }. Since h n is a homomorphism, N \u2286 N \u2032 . By construction of the universal model U D1,O we have M = {A | A(w\u03c1M ) \u2208 I}. Moreover, D N , O |= q 1 \u03c1,M (w).", "formula_coordinates": [10.0, 319.56, 659.33, 238.54, 46.92]}, {"formula_id": "formula_34", "formula_text": "D N \u2032 , O |= q 1 \u03c1,M (h(w)). Therefore, there is a constant d \u2208 dom(J ) such that J , O |= q 2 \u03c1,M (h(w), d). We set ( \u2020) h n+1 (w\u03c1M ) = d.", "formula_coordinates": [11.0, 50.88, 66.05, 241.81, 43.8]}, {"formula_id": "formula_35", "formula_text": "{A | A(w) \u2208 U D1,O }, and \u03c1 = {R | R(w \u2032 , w) \u2208 U D1,O }.", "formula_coordinates": [11.0, 54.0, 191.93, 238.53, 12.13]}, {"formula_id": "formula_36", "formula_text": "\u2022 \u22a4 \u2291 A \u2208 O. For all c \u2208 adom(D), Rule R1 ensures that A(c) \u2208 ch O (D) \u2286 U D,O . For traces t = t \u2032 \u03c1M , by construc- tion of U D,O it suffices to show that A \u2208 M .", "formula_coordinates": [11.0, 58.44, 356.36, 234.32, 43.78]}, {"formula_id": "formula_37", "formula_text": "\u2022 A 1 \u2293 A 2 \u2291 A \u2208 O. Assume that t \u2208 A UD,O 1 \u2229 A UD,O 2 . If t = c \u2208 adom(D), then t \u2208 A chO(D) 1 \u2229 A chO(D) 2 and rule R1 ensures that A(c) \u2208 U D,O . If t = c\u03c1M or t = t \u2032 \u03c1M , then t \u2208 A UD,O 1 \u2229 A UD,O 2 implies A 1 , A 2 \u2208 M , thus also A \u2208 M by the maximality conditions, which yields t \u2208 A UD,O by construction of U D,O . \u2022 A 1 \u2291 \u2203R.A 2 \u2208 O. Let t \u2208 A UD,O1", "formula_coordinates": [11.0, 58.44, 433.64, 234.13, 111.1]}, {"formula_id": "formula_38", "formula_text": "U D,O yields (t, t \u2032 ) \u2208 R UD,O and t \u2032 \u2208 A UD,O 2 . Now assume that t = t \u2032 \u03c1M with t \u2032 = t \u2032\u2032 \u03c1 \u2032 M \u2032 . Then A 1 \u2208 M . If A 2 \u2208 M \u2032 and R \u2212 \u2208 \u03c1, then (t, t \u2032 ) \u2208 R UD,O and t \u2032 \u2208 A UD,O 2", "formula_coordinates": [11.0, 332.4, 253.85, 225.66, 53.41]}, {"formula_id": "formula_39", "formula_text": "A 2 / \u2208 M \u2032 or R \u2212 / \u2208 \u03c1. Since A 1 \u2208 M ,", "formula_coordinates": [11.0, 332.4, 304.97, 166.17, 12.01]}, {"formula_id": "formula_40", "formula_text": "\u03c1 D,O M . The fact that A 2 / \u2208 M \u2032 or R \u2212 /", "formula_coordinates": [11.0, 332.4, 360.55, 225.68, 25.46]}, {"formula_id": "formula_41", "formula_text": "UD,O 2 . \u2022 \u2203R.A 1 \u2291 A 2 \u2208 O. Let (t, t \u2032 ) \u2208 R UD,O and t \u2032 \u2208 A UD,O 1 .", "formula_coordinates": [11.0, 324.0, 424.25, 233.97, 29.17]}, {"formula_id": "formula_42", "formula_text": "UD,O 2 , as required. t is from adom(D) and t \u2032 = t\u03c1M . Then A 1 \u2208 M , R \u2208 \u03c1, and D Mc , O |= q 1 \u03c1,M (t \u2032 ). Consequently, D Mc , O |= A 2 (t), implying t \u2208 A UD,O 2 . t \u2032 is from adom(D) and t = t \u2032 \u03c1M . Then D, O |= A 1 (t \u2032 ), R \u2212 \u2208 \u03c1, and \u03c1 and M are maximal with D, O |= q 1 \u03c1,M (t). Thus clearly A 2 \u2208 M , implying t \u2208 A UD,O 2 due to Rule R1. t, t \u2032 are both not from adom(D) and t \u2032 = t\u03c1 \u2032 M \u2032 . Let t = c\u03c1M or t = M 0 \u03c1M . Then A 1 \u2208 M \u2032 , R \u2208 \u03c1 \u2032 , and D M , O |= q 1 \u03c1 \u2032 ,M \u2032 ( c). It is easy to see that this implies D M , O |= A 2 ( c). Since M is maximal with D Mc , O |= q 1 \u03c1,M (c) or D M0 |= q 1 \u03c1,M ( c), it follows that A 2 \u2208 M . This implies that t \u2208 A UD,O 2 . t, t \u2032 are both not from adom(D) and t = t \u2032 \u03c1M . Let t \u2032 = c\u03c1 \u2032 M \u2032 or t \u2032 = M 0 \u03c1 \u2032 M \u2032 . Then A 1 \u2208 M \u2032 , R \u2212 \u2208 \u03c1, and M is maximal with D M \u2032 , O |= q 1 \u03c1,M ( c). Consequently, A 2 \u2208 M , implying t \u2208 A UD,O 2 .", "formula_coordinates": [11.0, 332.4, 476.81, 225.76, 229.57]}, {"formula_id": "formula_43", "formula_text": "(i) c \u2208 A ch O (D) implies D, O |= A(c); (ii) (c, c \u2032 ) \u2208 R chO(D) implies D, O |= R(c, c \u2032 ).", "formula_coordinates": [12.0, 49.8, 218.09, 189.93, 24.4]}, {"formula_id": "formula_44", "formula_text": "c \u2032 ) \u2208 R UD,O ) that D is not satisfiable w.r.t. O, a contradiction. t, t 1 are from adom(D) and t 2 = t\u03c1 2 M 2 . Then t \u03c12 D,O M 2 and R \u2208 \u03c1 2 . Since R(t, t 1 ) \u2208 U D,O , also R(t, t 1 ) \u2208 ch O (D). Together with func(R) \u2208 O, we thus obtain a contradiction against Condition 3 of t \u03c12 D,O M 2 . t 1 = t\u03c1 1 M 1 , and t 2 = t\u03c1 2 M 2 . Then t \u03c11 D,O M 1 and t \u03c12 D,O M 2 . Moreover, R \u2208 \u03c1 1 \u2229 \u03c1 2 .", "formula_coordinates": [12.0, 54.0, 328.85, 238.62, 102.73]}, {"formula_id": "formula_45", "formula_text": "D = N 0 , N 1 , . . . , N \u2113 = ch O (D)", "formula_coordinates": [12.0, 81.0, 562.52, 140.31, 10.9]}, {"formula_id": "formula_46", "formula_text": "N i \u2286 I for all 0 \u2264 i \u2264 \u2113. The base case, i = 0, is trivial as I is a model of D = N 0 .", "formula_coordinates": [12.0, 54.0, 595.4, 238.47, 21.94]}, {"formula_id": "formula_47", "formula_text": "A(d) \u2208 U D,O then h(d) = h 0 (d) or h(d) = h c (d) for some c \u2208 dom(D).", "formula_coordinates": [12.0, 319.56, 193.88, 238.52, 21.57]}, {"formula_id": "formula_48", "formula_text": "(D) = q(U D,Q ) \u2229 adom(D) |x| . What is more, for every Q \u2032 (x \u2032 ) = (O, \u03a3, q \u2032 ) where |var(q \u2032 )| \u2264 |var(q)|, we have Q \u2032 (D) = q \u2032 (U D,Q ) \u2229 adom(D) |x| .", "formula_coordinates": [12.0, 319.56, 629.24, 238.48, 46.04]}, {"formula_id": "formula_49", "formula_text": "* = q(U D,Q ) * N and 2. Q(D) W = q(U D,Q ) W N .", "formula_coordinates": [13.0, 54.48, 477.53, 113.34, 26.53]}, {"formula_id": "formula_50", "formula_text": "Q \u2032 (x \u2032 ) = (O, \u03a3, q \u2032 ). Note that |var(q \u2032 )| \u2264 |var(q)|. Ap- plying Lemma 7 thus yields\u0101 \u2208 q \u2032 (U D,Q ) \u2229 adom(D) |x \u2032 | .", "formula_coordinates": [13.0, 319.56, 256.61, 238.52, 24.85]}, {"formula_id": "formula_51", "formula_text": "( * ) h \u2032 (z i ) / \u2208 adom(D) for 1 \u2264 i \u2264 \u2113.", "formula_coordinates": [13.0, 319.56, 310.73, 149.73, 11.76]}, {"formula_id": "formula_52", "formula_text": "Then\u0101 \u2208 q \u2032 (U D,Q ) \u2229 adom(D) |x \u2032 | . Lemma 7 yields\u0101 \u2208 Q \u2032 (D) where again Q \u2032 (x \u2032 ) = (O, \u03a3, q \u2032", "formula_coordinates": [13.0, 319.56, 563.69, 238.62, 35.56]}, {"formula_id": "formula_53", "formula_text": "1. x A(c) for every A(c) \u2208 D and x r(c,c \u2032 ) for every r(c, c \u2032 ) \u2208 D; 2. x A1(c) \u2227 \u2022 \u2022 \u2022 \u2227 x An(c) \u2192 x A(c) for all c \u2208 adom(D) and all concept names A 1 , . . . , A n , A such that O |= A 1 \u2293 \u2022 \u2022 \u2022 \u2293 A n \u2291 A; 3. x A(c1) \u2227 x R(c2,c1) \u2192 x B(c2) for all edges (c 1 , c 2 ) of D and all \u2203R.A \u2291 B \u2208 O; 4. x R(c1,c2) \u2192 x S(c1,c2) for all edges (c 1 , c 2 ) of D and all R \u2291 S \u2208 O; 5. x A(c1) \u2227 x R(c1,c2) \u2192 x S(c1,", "formula_coordinates": [14.0, 54.48, 281.72, 238.14, 121.41]}, {"formula_id": "formula_54", "formula_text": "q + (D + 0 ) W N .", "formula_coordinates": [15.0, 54.0, 313.13, 45.21, 14.05]}, {"formula_id": "formula_55", "formula_text": "{a i , a i+1 } in the Gaifman graph G D .", "formula_coordinates": [15.0, 319.56, 342.56, 148.77, 10.9]}, {"formula_id": "formula_56", "formula_text": "x in q, we have Y x \u2286 {y i , y i+1 } for some 0 \u2264 i \u2264 k. 2. Y yi = {y i } for 0 \u2264 i \u2264 k.", "formula_coordinates": [15.0, 320.04, 605.6, 238.0, 33.81]}, {"formula_id": "formula_57", "formula_text": "query q y 0 z 1 y 1 y 2 y 3 f 0 f 1 R 12 R 23 R 30 graph G a b c d database D 0 R 12 R 23 R 30 f 0 f 1 y 1 \u2192a y 1 \u2192b y 1 \u2192c y 1 \u2192d y 2 \u2192a y 2 \u2192b y 2 \u2192c y 2 \u2192d y 3 \u2192a y 3 \u2192b y 3 \u2192c y 3 \u2192d y 0 y 1 \u2192ab y 0 y 1 \u2192ac y 0 y 1 \u2192ad y 0 y 1 \u2192ba y 0 y 1 \u2192bc y 0 y 1 \u2192ca y 0 y 1 \u2192cb y 0 y 1 \u2192da y 0 \u2192a y 0 \u2192b y 0 \u2192c y 0 \u2192d y 1 \u2192a y 1 \u2192b y 1 \u2192c y 1 \u2192d", "formula_coordinates": [16.0, 66.91, 55.52, 478.13, 306.76]}, {"formula_id": "formula_58", "formula_text": "Y y \u2286 Y x that for all y i \u2208 Y y , we have f d (y i ) = f c (y i ).", "formula_coordinates": [16.0, 319.56, 473.24, 238.54, 21.57]}, {"formula_id": "formula_59", "formula_text": "f d = f d \u2032 , which in turn implies d = d \u2032 .", "formula_coordinates": [16.0, 380.16, 493.97, 156.33, 11.76]}, {"formula_id": "formula_60", "formula_text": "Claim 2. Let h be a homomorphism from q to U D,O . Then 1. for every simple path u 0 , . . . , u m in q, m > 0, h(u 0 ) \u2208 adom(D 0 ) and h(u m ) \u2208 adom(D 0 ) implies h(u i ) \u2208 adom(D 0 ) for 0 \u2264 i \u2264 m; 2. for every cycle u 0 , . . . , u m in q, we have h(u i ) \u2208 adom(D 0 ) for 0 \u2264 i \u2264 m.", "formula_coordinates": [16.0, 319.56, 552.2, 238.48, 73.9]}, {"formula_id": "formula_61", "formula_text": "U \u2193c D \u2032 ,O in U D \u2032 ,O that is rooted in c.", "formula_coordinates": [17.0, 54.0, 458.21, 237.79, 24.64]}, {"formula_id": "formula_62", "formula_text": "1 (x 0 , x 1 ), . . . , R m (x m\u22121 , x m ) with x 0 = x m . Since U \u2193c D \u2032 ,O", "formula_coordinates": [17.0, 54.0, 563.85, 238.53, 25.18]}, {"formula_id": "formula_63", "formula_text": "Claim 3. There is a variable u i such that h(u i ) \u2208 adom(D 0 ) and y i \u2208 Y ui , for 0 \u2264 i \u2264 k. Proof. Let 0 \u2264 i \u2264 k.", "formula_coordinates": [17.0, 319.56, 358.76, 238.48, 44.29]}, {"formula_id": "formula_64", "formula_text": "y i \u2208 Y y \u2229 Y y \u2032 then f y (y i ) = f y \u2032 (y i ).", "formula_coordinates": [18.0, 54.0, 78.2, 238.62, 21.57]}, {"formula_id": "formula_65", "formula_text": "(x) = x, f v0\u2022\u2022\u2022v k x", "formula_coordinates": [19.0, 58.78, 268.03, 72.08, 12.58]}, {"formula_id": "formula_66", "formula_text": "f y \u2032 . Moreover, if y i \u2208 Y y \u2229 Y y \u2032 then f y (y i ) = f y \u2032 (y i ). Let f = 0\u2264i\u2264k f ui . It follows from Claim 7 that f is a function from Y to V . For brevity, let v i = f (y i ) for 0 \u2264 i \u2264 k.", "formula_coordinates": [19.0, 319.56, 532.88, 238.5, 60.49]}, {"formula_id": "formula_67", "formula_text": "V I = {v i \u2208 V | i \u2208 I} is a hyperedge in G, i.e. V I \u2208 E. Since Y I = {y i \u2208 Y | i \u2208 I} \u2286 Y ,", "formula_coordinates": [19.0, 319.56, 594.2, 238.42, 32.97]}, {"formula_id": "formula_68", "formula_text": "w = b 1 \u2022 \u2022 \u2022 b k such that h(z) = z, f w z , h(z \u2032 ) = z \u2032 , f w z \u2032 ,", "formula_coordinates": [19.0, 319.56, 693.17, 238.41, 13.08]}, {"formula_id": "formula_69", "formula_text": "Y I \u2286 Y z \u222aY z \u2032 yields v i = f (y i ) = b i for all i \u2208 I. Thus, V I = {v i } i\u2208I = {b 1 , . . . , b k }.", "formula_coordinates": [20.0, 54.0, 305.0, 238.5, 32.86]}, {"formula_id": "formula_70", "formula_text": "Y z \u2032 0 \u2286 Y x .", "formula_coordinates": [20.0, 54.0, 506.72, 40.53, 12.39]}, {"formula_id": "formula_71", "formula_text": "Y z \u2032 0 \u2286 Y x .", "formula_coordinates": [21.0, 54.0, 56.24, 43.17, 12.51]}, {"formula_id": "formula_72", "formula_text": "M 1 , M 2 in time O(|M 1 |+|M 2 |+ |M 1 M 2 |).", "formula_coordinates": [21.0, 54.0, 286.04, 238.5, 21.82]}, {"formula_id": "formula_73", "formula_text": "M 1 M 2 in time O(|M 1 | + |M 2 | + |M 1 M 2 |).", "formula_coordinates": [21.0, 54.0, 498.8, 238.5, 21.82]}, {"formula_id": "formula_74", "formula_text": "x in q, Y x \u2286 {y i , y i+1 } for some i with 0 \u2264 i < k. . 2. For every atom R(x, y) in q, Y x \u222a Y y \u2286 {y i , y i+1 } for some i with 0 \u2264 i < k. 3. Y yi = {y i } for 0 \u2264 i \u2264 k.", "formula_coordinates": [21.0, 54.48, 606.08, 238.11, 56.37]}, {"formula_id": "formula_75", "formula_text": "x \u2032 in q, Y x \u2032 \u2208 {\u2205, {y 0 }, {y k }}.", "formula_coordinates": [21.0, 172.08, 662.45, 120.57, 12.01]}, {"formula_id": "formula_76", "formula_text": "D = {R 1 ( y 0 , a , y 1 , b ) | (a, b) \u2208 M 1 } \u222a {R 2 ( y 1 , b , y 2 , c ) | (b, c) \u2208 M 2 }.", "formula_coordinates": [21.0, 344.64, 440.48, 188.2, 24.7]}, {"formula_id": "formula_77", "formula_text": "{R i (a, b) | (a, b) \u2208 M i , i \u2208 {1, 2}}.", "formula_coordinates": [21.0, 370.92, 505.04, 147.45, 10.65]}, {"formula_id": "formula_78", "formula_text": "MR1 if y 0 \u2208 Y x \u222a Y y , the fact r( x, f ab k x , y, f ab k y ) for all (a, b) \u2208 M 1 , MR2 if y k \u2208 Y x \u222a Y y ,", "formula_coordinates": [22.0, 54.0, 103.89, 238.45, 41.12]}, {"formula_id": "formula_79", "formula_text": "a 1 = x 1 , f x1 \u2208 adom(D 0 ) and a 2 = x 2 , f x2 \u2208 adom(D 0 ) then (f x1 (y 0 ), f x2 (y k )) \u2208 M 1 M 2 . MM2 For all (a, b) \u2208 M 1 M 2 ,", "formula_coordinates": [22.0, 54.0, 538.28, 238.48, 33.22]}, {"formula_id": "formula_80", "formula_text": "Y y \u2032 \u2192 [n]. Moreover, if y i \u2208 Y y \u2229 Y y \u2032 then f y (y i ) = f y \u2032 (y i ).", "formula_coordinates": [22.0, 319.56, 481.04, 238.44, 21.57]}, {"formula_id": "formula_81", "formula_text": "R i (v i , v \u2032 i ) such that {y i , y i+1 } \u2286 Y zj \u222a Y zj+1 .", "formula_coordinates": [23.0, 54.0, 516.05, 238.48, 22.8]}, {"formula_id": "formula_82", "formula_text": "\u2032 i ) = v \u2032 i , f v \u2032 i for some partial functions f v \u2032 i , f vi from Y to [n]. Let f = 0\u2264i<k f vi \u222a f v \u2032 i .", "formula_coordinates": [23.0, 54.0, 582.29, 238.63, 37.69]}, {"formula_id": "formula_83", "formula_text": "< i < k \u2212 1 we have that Y vi \u222a Y v \u2032 i = {y i , y i+1 } thus fact R i v i , f vi , v \u2032 i , f v \u2032 i", "formula_coordinates": [23.0, 319.56, 139.76, 238.45, 26.26]}, {"formula_id": "formula_84", "formula_text": "v \u2032 i = f v \u2032 i .", "formula_coordinates": [23.0, 507.12, 177.93, 36.57, 13.89]}], "doi": ""}