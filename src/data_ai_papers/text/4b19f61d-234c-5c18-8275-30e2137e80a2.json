{"title": "Sudoku Assistant -An AI-powered app to help solve pen-and-paper Sudokus", "authors": "Tias Guns; Milan Pesa; Maxime Mulamba; Ignace Bleukx; Emilio Gamba; Senne Berden", "pub_date": "", "abstract": "", "sections": [{"heading": "", "text": "The Sudoku Assistant app is an AI assistant that uses a combination of machine learning and constraint programming techniques, to interpret and explain a pen-and-paper Sudoku scanned with a smartphone. Although the demo is about Sudoku, the underlying techniques are equally applicable to other constraint solving problems like timetabling, scheduling, and vehicle routing.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "System overview", "text": "Digit classification -prediction After a picture of a Sudoku puzzle is taken with the app, the picture is segmented into 81 cells. A pre-trained convolutional neural network (CNN) is then applied to each cell in order to make a digit prediction. For each cell, the output of the CNN is a probability distribution over the 10 possible values: digits 1-9 and the empty cell value.\nClassification and Solving After the probability distributions have been predicted, a naive approach would simply assign to each cell the value with which the largest probability has been associated (i.e., the argmax). This partial Sudoku can then be given to a constrained satisfaction (CSP) solver, together with the puzzle constraints, to obtain the full solution. However, consider that with this approach, even a CNN with an accuracy of 99% would lead to a correct solution only approximately 0.99 81 = 44% of the time. This is the case because even a single misclassification almost always leads to a wrong solution or no solution at all.\nError correction -hybrid of prediction and reasoning Therefore, we proposed an alternative approach in [4], which features a deeper integration of the digit classification and the reasoning required to solve the Sudoku puzzle. This approach is schematically shown in Fig. 1. The main idea is to not provide the constraint solver with merely the argmax prediction for each of the Sudoku's cells, but rather with the full distributions outputted by the CNN. It is then tasked to find the maximum likelihood solution that satisfies the Sudoku constraints, given the class probabilities. Thus, the solver now solves a constrained optimization problem (COP), rather than a CSP. Effectively, our hybrid approach allows the reasoning to correct some of the mistakes made by the CNN classifier. This allows it to solve significantly more Sudoku problems correctly compared to the naive approach. Providing hints -reasoning A user might be stuck during the solving when faced with a challenging Sudoku. The Sudoku Assistant showcases a hint mechanism that provides the easiest next move among all empty cells. The provided hint highlights which existing digits and constraints can be used to derive that cells value. To make sure the provided hints are easy to understand, we rely on a cost function that should approximate human understandability, e.g., taking the number of constraints and digits into account, as well as an estimate of their cognitive complexity. The underlying technology for computing the hints uses a constraint solver to find an Optimal Unsatisfiable Subset (OUS) of a derived unsatisfiable formula for (the negation of) each of the empty cells [1,2]. Implementation The app is implemented in React-Native. All neural network and constraint solving computations happen on a remote server. The CNN is composed of a VGG-inspired network [7], pre-trained on the Street View House Numbers dataset [5]. The last layer is replaced by a two-layers fully-connected neural network, tuned for our classification task using labeled data acquired from the app. All neural networks are implemented with PyTorch 1.10 [6]. All reasoning (the hybrid reasoning and explanation generation) is implemented in the CPMpy 0.9.9 constraint solving environment [3].", "publication_ref": ["b3", "b0", "b1", "b6", "b4", "b5", "b2"], "figure_ref": ["fig_0"], "table_ref": []}, {"heading": "Acknowledgements", "text": "This research received partial funding from the Flemish Government (AI Research Program); and funding from the European Research Council (ERC) under the European Union's Horizon 2020 research and innovation program (Grant No. 101002802, CHAT-Opt).", "publication_ref": [], "figure_ref": [], "table_ref": []}], "references": [{"ref_id": "b0", "title": "A framework for step-wise explaining how to solve constraint satisfaction problems", "journal": "Artificial Intelligence", "year": "2021", "authors": "B Bogaerts; E Gamba; T Guns"}, {"ref_id": "b1", "title": "Efficiently explaining CSPs with unsatisfiable subset optimization", "journal": "", "year": "2021", "authors": "E Gamba; B Bogaerts; T Guns"}, {"ref_id": "b2", "title": "Increasing modeling language convenience with a universal n-dimensional array,cppy as python-embedded example", "journal": "", "year": "2019", "authors": "T Guns"}, {"ref_id": "b3", "title": "Hybrid classification and reasoning for image-based constraint solving", "journal": "Springer", "year": "2020", "authors": "M Mulamba; J Mandi; R Canoy; T Guns"}, {"ref_id": "b4", "title": "Reading digits in natural images with unsupervised feature learning", "journal": "NIPS", "year": "2011", "authors": "Y Netzer; T Wang; A Coates; A Bissacco; B Wu; A Y Ng"}, {"ref_id": "b5", "title": "Automatic differentiation in pytorch", "journal": "NIPS Autodiff Workshop", "year": "2017", "authors": "A Paszke; S Gross; S Chintala; G Chanan; E Yang; Z Devito; Z Lin; A Desmaison; L Antiga; A Lerer"}, {"ref_id": "b6", "title": "Very deep convolutional networks for large-scale image recognition", "journal": "", "year": "2015-05-07", "authors": "K Simonyan; A Zisserman"}], "figures": [{"figure_label": "1", "figure_type": "figure", "figure_id": "fig_0", "figure_caption": "Fig. 1 :1Fig.1: The hybrid prediction-and-reasoning approach.", "figure_data": ""}, {"figure_label": "2", "figure_type": "figure", "figure_id": "fig_1", "figure_caption": "Fig. 2 :2Fig. 2: Camera picture of a sudoku (a) with predicted probaiblities for the 81 cells (b). Error correction (in red) by the hybrid of prediction and reasoning (c). Visualisation of the hint (d) where the highlighted constraints (blue boxes) and given digits (yellow cells) derive a new value at the puzzle piece.", "figure_data": ""}], "formulas": [], "doi": "10.24963/ijcai.2021/191"}