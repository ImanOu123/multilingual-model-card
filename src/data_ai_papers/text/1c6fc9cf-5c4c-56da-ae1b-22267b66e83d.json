{"title": "An Analysis of Convex Relaxations for MAP Estimation", "authors": "M Pawan Kumar; V Kolmogorov; P H S Torr", "pub_date": "", "abstract": "The problem of obtaining the maximum a posteriori estimate of a general discrete random field (i.e. a random field defined using a finite and discrete set of labels) is known to be NP-hard. However, due to its central importance in many applications, several approximate algorithms have been proposed in the literature. In this paper, we present an analysis of three such algorithms based on convex relaxations: (i) LP-S: the linear programming (LP) relaxation proposed by Schlesinger [20] for a special case and independently in [4,12,23] for the general case; (ii) QP-RL: the quadratic programming (QP) relaxation by Ravikumar and Lafferty [18]; and (iii) SOCP-MS: the second order cone programming (SOCP) relaxation first proposed by Muramatsu and Suzuki [16] for two label problems and later extended in [14] for a general label set. We show that the SOCP-MS and the QP-RL relaxations are equivalent. Furthermore, we prove that despite the flexibility in the form of the constraints/objective function offered by QP and SOCP, the LP-S relaxation strictly dominates (i.e. provides a better approximation than) QP-RL and SOCP-MS. We generalize these results by defining a large class of SOCP (and equivalent QP) relaxations which is dominated by the LP-S relaxation. Based on these results we propose some novel SOCP relaxations which strictly dominate the previous approaches.", "sections": [{"heading": "Introduction", "text": "Discrete random fields are a powerful tool to obtain a probabilistic formulation for various applications in Computer Vision and related areas [3]. Hence, developing accurate and efficient algorithms for performing inference on a given discrete random field is of fundamental importance. In this work, we will focus on the problem of maximum a posteriori (MAP) estimation. MAP estimation is a key step in obtaining the solutions to many applications such as stereo, image stitching and segmentation [21]. Furthermore, it is closely related to many important Combinatorial Optimization problems such as MAXCUT [6], multi-way cut [5], metric labelling [3,11] and 0-extension [3,9]. Given data D, a discrete random field models the distribution (i.e. either the joint or the conditional probability) of a labelling for a set of random variables. Each of these variables v = {v 0 , v 1 , \u2022 \u2022 \u2022 , v n\u22121 } can take a label from a discrete set l = {l 0 , l 1 , \u2022 \u2022 \u2022 , l h\u22121 }. A particular labelling of variables v is specified by a function f whose domain corresponds to the indices of the random variables and whose range is the index of the label set, i.e. f :\n{0, 1, \u2022 \u2022 \u2022 , n\u2212 1} \u2192 {0, 1, \u2022 \u2022 \u2022 , h\u2212 1}.\nIn other words, random variable v a takes label l f (a) . For convenience, we assume the model to be a conditional random field (CRF) while noting that all the results of this paper also apply to Markov random fields (MRF).\nA CRF specifies a neighbourhood relationship E between the random variables, i.e. (a, b) \u2208 E if, and only if, v a and v b are neighbouring random variables. Within this framework, the conditional probability of a labelling f given data D is specified as Pr(f |D, \u03b8) = 1 Z(\u03b8) exp(\u2212Q(f ; D, \u03b8). Here \u03b8 represents the parameters of the CRF and Z(\u03b8) is a normalization constant which ensures that the probability sums to one (also known as the partition function). The energy Q(f ; D, \u03b8) is given by Q(f ; D, \u03b8) = va\u2208v \u03b8 1 a;f (a) + (a,b)\u2208E \u03b8 2 ab;f (a)f (b) . The term \u03b8 1 a;f (a) is called a unary potential since its value depends on the labelling of one random variable at a time. Similarly, \u03b8 2 ab;f (a)f (b) is called a pairwise potential as it depends on a pair of random variables. For simplicity, we assume that \u03b8 2 ab;f (a)f (b) = w(a, b)d(f (a), f (b)) where w(a, b) is the weight that indicates the strength of the pairwise relationship between variables v a and v b , with w(a, b) = 0 if (a, b) / \u2208 E, and d(\u2022, \u2022) is a distance function on the labels. As will be seen later, this formulation of the pairwise potentials would allow us to concisely describe our results.\nThe problem of MAP estimation is well known to be NP-hard in general. Since it plays a central role in several applications, many approximate algorithms have been proposed in the literature. In this work, we analyze three such algorithms which are based on convex relaxations. Specifically, we consider: (i) LP-S, the linear programming (LP) relaxation of [4,12,20,23]; (ii) QP-RL, the quadratic programming (QP) relaxation of [18]; and (iii) SOCP-MS, the second order cone programming (SOCP) relaxation of [14,16]. In order to provide an outline of these relaxations, we formulate the problem of MAP estimation as an Integer Program (IP).", "publication_ref": ["b2", "b20", "b5", "b4", "b2", "b10", "b2", "b8", "b3", "b11", "b19", "b22", "b17", "b13", "b15"], "figure_ref": [], "table_ref": []}, {"heading": "Integer Programming Formulation", "text": "We define a binary variable vector x of length nh. We denote the element of x at index a \u2022 h + i as x a;i where v a \u2208 v and l i \u2208 l. These elements x a;i specify a labelling f such that x a;i = 1 if f (a) = i and x a;i = \u22121 otherwise. We say that the variable x a;i belongs to variable v a since it defines which label v a does (or does not) take. Let X = xx \u22a4 . We refer to the (a \u2022 h + i, b \u2022 h + j) th element of the matrix X as X ab;ij where v a , v b \u2208 v and l i , l j \u2208 l. Clearly, the following IP finds the labelling with the minimum energy, i.e. it is equivalent to the MAP estimation problem:\nIP: x * = arg min x va,li \u03b8 1 a;i (1+xa;i) 2 + (a,b)\u2208E,li,lj \u03b8 2 ab;ij (1+xa;i+x b;j +X ab;ij ) 4 s.t. x \u2208 {\u22121, 1} nh ,(1)\nli\u2208l x a;i = 2 \u2212 h,(2)\nX = xx \u22a4 .(3)\nConstraints ( 1) and ( 3) specify that the variables x and X are binary such that X ab;ij = x a;i x b;j . We will refer to them as the integer constraints. Constraint (2), which specifies that each variable should be assigned only one label, is known as the uniqueness constraint. Note that one uniqueness constraint is specified for each variable v a . Solving the above IP is in general NP-hard. It is therefore common practice to obtain an approximate solution using convex relaxations. We describe four such convex relaxations below.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Linear Programming Relaxation", "text": "The LP relaxation (proposed by Schlesinger [20] for a special case and independently in [4,12,23] for the general case), which we call LP-S, is given as follows:\nLP-S:\nx * = arg min x va,li \u03b8 1 a;i \n(\ns.t. x \u2208 [\u22121, 1] nh , X \u2208 [\u22121, 1] nh\u00d7nh ,(4)\nli\u2208l x a;i = 2 \u2212 h,(5)\nlj \u2208l X ab;ij = (2 \u2212 h)x a;i ,(6)\nX ab;ij = X ba;ji ,\n1 + x a;i + x b;j + X ab;ij \u2265 0.(7)\nIn the LP-S relaxation only those elements X ab;ij of X are used for which (a, b) \u2208 E and l i , l j \u2208 l. Unlike the IP, the feasibility region of the above problem is relaxed such that the variables x a;i and X ab;ij lie in the interval [\u22121, 1]. Further, the constraint (3) is replaced by equation ( 6) which is called the marginalization constraint [23]. One marginalization constraint is specified for each (a, b) \u2208 E and l i \u2208 l. Constraint (7) specifies that X is symmetric. Constraint (8) ensures that \u03b8 2 ab;ij is multiplied by a number between 0 and 1 in the objective function. These constraints (7) and (8) are defined for all (a, b) \u2208 E and l i , l j \u2208 l. Note that the above constraints are not exhaustive, i.e. it is possible to specify other constraints for the problem of MAP estimation (as will be seen in the different relaxations described in the subsequent sections).", "publication_ref": ["b19", "b3", "b11", "b22", "b22", "b6", "b7"], "figure_ref": [], "table_ref": []}, {"heading": "Quadratic Programming Relaxation", "text": "We now describe the QP relaxation for the MAP estimation IP which was proposed by Ravikumar and Lafferty [18]. To this end, it would be convenient to reformulate the objective function of the IP using a vector of unary potentials of length nh (denoted by\u03b8 1 ) and a matrix of pairwise potentials of size nh \u00d7 nh (denoted by\u03b8 2 ). The element of the unary potential vector at index (a \u2022 h + i) is defined as\u03b8 1 a;i = \u03b8 1 a;i \u2212 vc\u2208v l k \u2208l |\u03b8 2 ac;ik |, where v a \u2208 v and l i \u2208 l. The (a\n\u2022 h + i, b \u2022 h + j) th element of the pairwise potential matrix\u03b8 2 is defined such that \u03b8 2 ab;ij = vc\u2208v l k \u2208l |\u03b8 2 ac;ik |, if a = b, i = j, \u03b8 2 ab;ij otherwise,(9)\nwhere v a , v b \u2208 v and l i , l j \u2208 l. In other words, the potentials are modified by defining a pairwise potential\u03b8 2 aa;ii and subtracting the value of that potential from the corresponding unary potential \u03b8 1 a;i . The advantage of this reformulation is that the matrix\u03b8 2 is guaranteed to be positive semidefinite, i.e.\u03b8 2 0. Using the fact that for x a;i \u2208 {\u22121, 1},\n1+xa;i 2 2 = 1+xa;i 2\n, it can be shown that the following is equivalent to the MAP estimation problem [18]: QP-RL:\nx * = arg min x 1+x 2 \u22a4\u03b8 1 + 1+x 2 \u22a4\u03b8 2 1+x 2 ,(10)\ns.t. li\u2208l x a;i = 2 \u2212 h, \u2200v a \u2208 v,(11)\nx \u2208 {\u22121, 1} nh , (12\n)\nwhere 1 is a vector of appropriate dimensions whose elements are all equal to 1. By relaxing the feasibility region of the above problem to x \u2208 [\u22121, 1] nh , the resulting QP can be solved in polynomial time since\u03b8 2 0 (i.e. the relaxation of the QP ( 10)-( 12) is convex). We call the above relaxation QP-RL. Note that in [18], the QP-RL relaxation was described using the variable y = 1+x 2 . However, the above formulation can easily be shown to be equivalent to the one presented in [18].", "publication_ref": ["b17", "b17", "b17", "b17"], "figure_ref": [], "table_ref": []}, {"heading": "Semidefinite Programming Relaxation", "text": "The SDP relaxation of the MAP estimation problem replaces the non-convex constraint X = xx \u22a4 by the convex semidefinite constraint X \u2212 xx \u22a4 0 [6,15] which can be expressed as\n1 x \u22a4 x X 0,(13)\nusing Schur's complement [2]. Further, like LP-S, it relaxes the integer constraints by allowing the variables x a;i and X ab;ij to lie in the interval\n[\u22121, 1] with X aa;ii = 1 for all v a \u2208 v, l i \u2208 l.\nThe SDP relaxation is a well-studied approach which provides accurate solutions for the MAP estimation problem (e.g. see [25]). However, due to its computational inefficiency, it is not practically useful for large scale problems with nh > 1000. See however [17,19,22].", "publication_ref": ["b5", "b14", "b1", "b24", "b16", "b18", "b21"], "figure_ref": [], "table_ref": []}, {"heading": "Second Order Cone Programming Relaxation", "text": "We now describe the SOCP relaxation that was proposed by Muramatsu and Suzuki [16] for the MAXCUT problem (i.e. MAP estimation with h = 2) and later extended for a general label set [14]. This relaxation, which we call SOCP-MS, is based on the technique of Kim and Kojima [10] who observed that the SDP constraint can be further relaxed to second order cone (SOC) constraints. For this purpose, it employs a set of matrices S =\n{C k |C k = U k (U k ) \u22a4 0, k = 1, 2, . . . , n C }.\nUsing the fact that the Frobenius dot product of two semidefinite matrices is non-negative, we get\n\u21d2 (U k ) \u22a4 x 2 \u2264 C k \u2022 X, k = 1, \u2022 \u2022 \u2022 , n C .(14)\nEach of the above SOC constraints may involve some or all variables x a;i and X ab;ij . For example, if C k ab;ij = 0, then the k th SOC constraint will not involve X ab;ij (since its coefficient will be 0). In order to describe the SOCP-MS relaxation, we consider a pair of neighbouring variables v a and v b , i.e. (a, b) \u2208 E, and a pair of labels l i and l j . These two pairs define the following variables: x a;i , x b;j , X aa;ii = X bb;jj = 1 and X ab;ij = X ba;ji (since X is symmetric). For each such pair of variables and labels, the SOCP-MS relaxation specifies two SOC constraints which involve only the above variables [14,16]. In order to specify the exact form of these SOC constraints, we need the following definitions.\nUsing the variables v a and v b (where (a, b) \u2208 E) and labels l i and l j , we define the submatrices x (a,b,i,j) and X (a,b,i,j) of x and X respectively as:\nx (a,b,i,j) =\nx a;i x b;j , X (a,b,i,j) = X aa;ii X ab;ij X ba;ji X bb;jj .\nThe SOCP-MS relaxation specifies SOC constraints of the form ( 14) for all pairs of neighbouring variables (a, b) \u2208 E and labels l i , l j \u2208 l. To this end, it uses the following two matrices: \nC 1 MS = 1 1 1 1 , C 2 MS = 1 \u22121 \u22121 1 .\ns.t. x \u2208 [\u22121, 1] nh , X \u2208 [\u22121, 1] nh\u00d7nh ,(16)\nli\u2208l x a;i = 2 \u2212 h,(17)\n(x a;i \u2212 x b;j ) 2 \u2264 2 \u2212 2X ab;ij ,(18)\n(x a;i + x b;j ) 2 \u2264 2 + 2X ab;ij ,(19)\nX ab;ij = X ba;ji .(20)\nWe refer the reader to [14,16] for details.", "publication_ref": ["b15", "b13", "b9", "b13", "b15", "b13", "b15"], "figure_ref": [], "table_ref": []}, {"heading": "Comparing Relaxations", "text": "In order to compare the relaxations described above, we require the following definitions. We say that a relaxation A dominates the relaxation B (alternatively, B is dominated by A) if and only if\nmin (x,X)\u2208F (A) e(x, X; \u03b8) \u2265 min (x,X)\u2208F (B) e(x, X; \u03b8), \u2200\u03b8,(21)\nwhere F (A) and F (B) are the feasibility regions of the relaxations A and B respectively. The term e(x, X; \u03b8) denotes the value of the objective function at (x, X) (i.e. the energy of the possibly fractional labelling (x, X)) for the MAP estimation problem defined over the CRF with parameter \u03b8.\nThus the optimal value of the dominating relaxation A is always greater than or equal to the optimal value of relaxation B. We note here that the concept of domination has been used previously in [4] (to compare LP-S with the linear programming relaxation in [11] e(x, X; \u03b8).\nNote that, by definition, the optimal value of any relaxation would always be less than or equal to the energy of the optimal (i.e. the MAP) labelling. Hence, the optimal value of a strictly dominating relaxation A is closer to the optimal value of the MAP estimation IP compared to that of relaxation Note that we will only provide the statement of the results here due to page limit. All the proofs are described in [13].", "publication_ref": ["b3", "b10", "b12"], "figure_ref": [], "table_ref": []}, {"heading": "LP-S vs. SOCP-MS", "text": "We now show that for the MAP estimation problem the linear constraints of LP-S are stronger than the SOCP-MS constraints. In other words the feasibility region of LP-S is a strict subset of the feasibility region of SOCP-MS (i.e. F (LP-S) \u2282 F(SOCP-MS)). This in turn would allow us to prove the following theorem.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Theorem 1:", "text": "The LP-S relaxation strictly dominates the SOCP-MS relaxation.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "QP-RL vs. SOCP-MS", "text": "We now prove that QP-RL and SOCP-MS are equivalent (i.e. their optimal values are equal for MAP estimation problems defined over all CRFs). Specifically, we consider a vector x which lies in the feasibility regions of the QP-RL and SOCP-MS relaxations, i.e. x \u2208 [\u22121, 1] nh . For this vector, we show that the values of the objective functions of the QP-RL and SOCP-MS relaxations are equal. This would imply that if x * is an optimal solution of QP-RL for some CRF with parameter \u03b8 then there exists an optimal solution (x * , X * ) of the SOCP-MS relaxation. Further, if e Q and e S are the optimal values of the objective functions obtained using the QP-RL and SOCP-MS relaxation, then e Q = e S .", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Theorem 2:", "text": "The QP-RL relaxation and the SOCP-MS relaxation are equivalent.\nTheorems 1 and 2 prove that the LP-S relaxation strictly dominates the QP-RL and SOCP-MS relaxations. A natural question that now arises is whether the additive bound of QP-RL (proved in [18]) is applicable to the LP-S and SOCP-MS relaxations. Our next theorem answers this question in an affirmative.\nTheorem 3: Using the rounding scheme of [18], LP-S and SOCP-MS provide the same additive bound as the QP-RL relaxation, i.e. S 4 where S = (a,b)\u2208E li,lj \u2208l |\u03b8 2 ab;ij | (i.e. the sum of the absolute values of all pairwise potentials). Furthermore, this bound is tight.\nThe above bound was proved for the case of binary variables (i.e. h = 2) in [8] using a slightly different rounding scheme.", "publication_ref": ["b17", "b17", "b7"], "figure_ref": [], "table_ref": []}, {"heading": "QP and SOCP Relaxations over Trees and Cycles", "text": "We now generalize the results of Theorem 1 by defining a large class of SOCP relaxations which is dominated by LP-S. Specifically, we consider the SOCP relaxations which relax the non-convex constraint X = xx \u22a4 using a set of second order cone (SOC) constraints of the form\n||(U k ) \u22a4 x|| \u2264 C k \u2022 X, k = 1, \u2022 \u2022 \u2022 , n C (23) where C k = U k (U k ) \u22a4 0, for all k = 1, \u2022 \u2022 \u2022 , n C .\nNote that each SOCP relaxation belonging to this class would define an equivalent QP relaxation (similar to the equivalent QP-RL relaxation defined by the SOCP-MS relaxation). Hence, all these QP relaxations will also be dominated by the LP-S relaxation. Before we begin to describe our results in detail, we need to set up some notation as follows. Notation: We consider an SOC constraint which is of the form described in equation ( 23), i.e.\n||(U k ) \u22a4 x|| \u2264 C k \u2022 X,(24)\nwhere k \u2208 {1, \u2022 \u2022 \u2022 , n C }. In order to help the reader understand the notation better, we use an example CRF shown in Fig. 1(a). This CRF is defined over four variables v = {v a , v b , v c , v d } (connected to form a cycle of length 4), each of which take a label from the set l = {l 0 , l 1 }. For this CRF we specify a constraint using a matrix C k 0 which is 0 everywhere, except for the following 4 \u00d7 4 submatrix:\n\uf8eb \uf8ec \uf8ec \uf8ed C k aa;00 C k ab;00 C k ac;00 C k ad;00 C k ba;00 C k bb;00 C k bc;00 C k bd;00 C k ca;00 C k cb;00 C k cc;00 C k cd;00 C k da;00 C k db;00 C k dc;00 C k dd;00 \uf8f6 \uf8f7 \uf8f7 \uf8f8 = \uf8eb \uf8ec \uf8ed 2 1 1 0 1 2 1 1 1 1 2 1 0 1 1 2 \uf8f6 \uf8f7 \uf8f8 (25)\nUsing the SOC constraint shown in equation ( 24) we define the following two sets: (i) The set E k is defined such that (a, b) \u2208 E k if, and only if, it satisfies the following conditions:\n(a, b) \u2208 E, (26\n)\n\u2203l i , l j \u2208 l such that C k ab;ij = 0. (27\n)\nRecall that E specifies the neighbourhood relationship for the given CRF. In other words E k is the subset of the edges in the graphical model of the CRF such that C k specifies constraints for the random variables corresponding to those edges. For the example CRF (shown in Fig. 1(a)) and C k matrix (in equation ( 25)), the set E k obtained is shown in Fig. 1(b). (ii) The set V k is defined as a \u2208 V k if, and only if, there exists a v b \u2208 v such that (a, b) \u2208 E k . In other words V k is the subset of hidden nodes in the graphical model of the CRF such that C k specifies constraints for the random variables corresponding to those hidden nodes. Fig. 1(c) shows the set V k for our example SOC constraint.\nWe also define a weighted graph G k = (V k , E k ) whose vertices are specified by the set V k and whose edges are specified by the set E k . The weight of an edge (a, b) \u2208 E k is given by w(a, b).\nRecall that w(a, b) specifies the strength of the pairwise relationship between two neighbouring variables v a and v b . Thus, for our example SOC constraint, the vertices of this graph are given in Fig. 1(c) while the edges are shown in Fig. 1(b). This graph can be viewed as a subgraph of the graphical model representation for the given CRF.\nTheorem 4: SOCP relaxations (and the equivalent QP relaxations) which define constraints only using graphs G k = (V k , E k ) which form (arbitrarily large) trees are dominated by the LP-S relaxation.\nWe note that the above theorem can be proved using the results of [24] on moment constraints (which imply that LP-S provides the exact solution for the MAP estimation problems defined over treestructured random fields). However, our alternative proof presented in [13] allows us to generalize the results of Theorem 4 for certain cycles as follows.\nTheorem 5: When d(i, j) \u2265 0 for all l i , l j \u2208 l, the SOCP relaxations which define constraints only using non-overlapping graphs G k which form (arbitrarily large) even cycles with all positive or all negative weights are dominated by the LP-S relaxation.\nThe above theorem can be proved for cycles of any length whose weights are all negative by a similar construction. Further, it also holds true for odd cycles (i.e. cycles of odd number of variables) which have only one positive or only one negative weight. However, as will be seen in the next section, unlike trees it is not possible to extend these results for any general cycle.", "publication_ref": ["b23", "b12"], "figure_ref": ["fig_0", "fig_0", "fig_0", "fig_0", "fig_0", "fig_0"], "table_ref": []}, {"heading": "Some Useful SOC Constraints", "text": "We now describe two SOCP relaxations which include all the marginalization constraints specified in LP-S. Note that the marginalization constraints can be incorporated within the SOCP framework but not in the QP framework.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "The SOCP-C Relaxation", "text": "The SOCP-C relaxation (where C denotes cycles) defines second order cone (SOC) constraints using positive semidefinite matrices C such that the graph G (defined in section 5) form cycles. Let the variables corresponding to vertices of one such cycle G of length c be denoted as\nv C = {v b |b \u2208 {a 1 , a 2 , \u2022 \u2022 \u2022 , a c }}. Further, let l C = {l j |j \u2208 {i 1 , i 2 ,\n\u2022 \u2022 \u2022 , i c }} \u2208 l c be a set of labels for the variables v C . In addition to the marginalization constraints, the SOCP-C relaxation specifies the following SOC constraint:\n||U \u22a4 x|| \u2264 C \u2022 X,(28)\nsuch that the graph G defined by the above constraint forms a cycle. The matrix C is 0 everywhere except the following elements:\nC a k ,a l ,i k ,i l = \u03bb c if k = l, D c (k, l) otherwise. (29\n)\nHere D c is a c \u00d7 c matrix which is defined as follows:\nD c (k, l) = \uf8f1 \uf8f2 \uf8f3 1 if |k \u2212 l| = 1 (\u22121) c\u22121 if |k \u2212 l| = c \u2212 1 0 otherwise,(30)\nand \u03bb c is the absolute value of the smallest eigenvalue of D c . In other words the submatrix of C defined by v C and l C has diagonal elements equal to \u03bb c and off-diagonal elements equal to the elements of D c . Clearly, C = U \u22a4 U 0 since its only non-zero submatrix \u03bb c I + D c (where I is a c \u00d7 c identity matrix) is positive semidefinite. This allows us to define a valid SOC constraint as shown in inequality (28). We choose to define the SOC constraint (28) for only those set of labels l C which satisfy the following:\n(a k ,a l )\u2208E D c (k, l)\u03b8 2 a k a l ;i k i l \u2265 (a k ,a l )\u2208E D c (k, l)\u03b8 2 a k a l ;j k j l , \u2200{j 1 , j 2 , \u2022 \u2022 \u2022 , j c }.(31)\nNote that this choice is motivated by the fact that the variables X a k a l ;i k i l corresponding to these sets v C and l C are assigned trivial values by the LP-S relaxation in the presence of non-submodular terms.\nSince marginalization constraints are included in the SOCP-C relaxation, the value of the objective function obtained by solving this relaxation would at least be equal to the value obtained by the LP-S relaxation (i.e. SOCP-C dominates LP-S, see Case II in section 2). We can further show that in the case where |l| = 2 and the constraint (28) is defined over a frustrated cycle (i.e. a cycle with an odd number of non-submodular terms) SOCP-C strictly dominates LP-S. One such example is given in [13]. Note that if the given CRF contains no frustrated cycle, then it can be solved exactly using the method described in [7].\nThe constraint defined in equation ( 28) is similar to the (linear) cycle inequality constraints [1] which are given by\nk,l D c (k, l)X a k a l ;i k i l \u2265 2 \u2212 c.(32)\nWe believe that the feasibility region defined by cycle inequalities is a strict subset of the feasibility region defined by equation (28). In other words a relaxation defined by adding cycle inequalities to LP-S would strictly dominate SOCP-C. We are not aware of a formal proof for this. We now describe the SOCP-Q relaxation.", "publication_ref": ["b12", "b6", "b0"], "figure_ref": [], "table_ref": []}, {"heading": "The SOCP-Q Relaxation", "text": "In this previous section we saw that LP-S dominates SOCP relaxations whose constraints are defined on trees. However, the SOCP-C relaxation, which defines its constraints using cycles, strictly dominates LP-S. This raises the question whether matrices C, which result in more complicated graphs G, would provide an even better relaxation for the MAP estimation problem. In this section, we answer this question in an affirmative. To this end, we define an SOCP relaxation which specifies constraints such that the resulting graph G from a clique. We denote this relaxation by SOCP-Q (where Q indicates cliques).\nThe SOCP-Q relaxation contains the marginalization constraint and the cycle inequalities (defined above). In addition, it also defines SOC constraints on graphs G which form a clique. We denote the variables corresponding to the vertices of clique G as\nv Q = {v b |b \u2208 {a 1 , a 2 , \u2022 \u2022 \u2022 , a q }}. Let l Q = {l j |j \u2208 {i 1 , i 2 ,\n\u2022 \u2022 \u2022 , i q }} be a set of labels for these variables v Q . Given this set of variables v Q and labels l Q , we define an SOC constraint using a matrix C of size nh \u00d7 nh which is zero everywhere except for the elements C a k a l ;i k i l = 1. Clearly, C is a rank 1 matrix with eigenvalue 1 and eigenvector u which is zero everywhere except u a k ;i k = 1 where v a k \u2208 v Q and l i k \u2208 l Q . This implies that C 0, which enables us to obtain the following SOC constraint:\nk x a k ;i k 2 \u2264 q + k,l X a k a l ;i k i l . (33\n)\nWe choose to specify the above constraint only for the set of labels l Q which satisfy the following condition:\n(a k ,a l )\u2208E \u03b8 2 a k a l ;i k i l \u2265\n(a k ,a l )\u2208E \u03b8 2 a k a l ;j k j l , \u2200{j 1 , j 2 , \u2022 \u2022 \u2022 , j q }.\nAgain, this choice is motivated by the fact that the variables X a k a l ;i k i l corresponding to these sets v Q and l Q are assigned trivial values by the LP-S relaxation in the presence of non-submodular pairwise potentials.\nWhen the clique contains a frustrated cycle, it can be shown that SOCP-Q dominates the LP-S relaxation (similar to SOCP-C). Further, using a counter-example, it can proved that the feasibility region given by cycle inequalities is not a subset of the feasibility region defined by constraint (33). One such example is given in [13].", "publication_ref": ["b12"], "figure_ref": [], "table_ref": []}, {"heading": "Discussion", "text": "We presented an analysis of approximate algorithms for MAP estimation which are based on convex relaxations. The surprising result of our work is that despite the flexibility in the form of the objective function/constraints offered by QP and SOCP, the LP-S relaxation dominates a large class of QP and SOCP relaxations. It appears that the authors who have previously used SOCP relaxations in the Combinatorial Optimization literature [16] and those who have reported QP relaxation in the Machine Learning literature [18] were unaware of this result. We also proposed two new SOCP relaxations (SOCP-C and SOCP-Q) and presented some examples to prove that they provide a better approximation than LP-S. An interesting direction for future research would be to determine the best SOC constraints for a given MAP estimation problem (e.g. with truncated linear pairwise potentials).", "publication_ref": ["b15", "b17"], "figure_ref": [], "table_ref": []}, {"heading": "", "text": "Acknowledgments: We thank Pradeep Ravikumar and John Lafferty for careful reading of the manuscript and for pointing out an error in our description of the SOCP-MS relaxation.", "publication_ref": [], "figure_ref": [], "table_ref": []}], "references": [{"ref_id": "b0", "title": "On the cut polytope", "journal": "Mathematical Programming", "year": "1986", "authors": "F Barahona; A Mahjoub"}, {"ref_id": "b1", "title": "Convex Optimization", "journal": "Cambridge University Press", "year": "2004", "authors": "S Boyd; L Vandenberghe"}, {"ref_id": "b2", "title": "Fast approximate energy minimization via graph cuts", "journal": "PAMI", "year": "2001", "authors": "Y Boykov; O Veksler; R Zabih"}, {"ref_id": "b3", "title": "Approximation algorithms for the metric labelling problem via a new linear programming formulation", "journal": "", "year": "2001", "authors": "C Chekuri; S Khanna; J Naor; L Zosin"}, {"ref_id": "b4", "title": "The complexity of multiterminal cuts", "journal": "SICOMP", "year": "1994", "authors": "E Dalhaus; D Johnson; C Papadimitriou; P Seymour; M Yannakakis"}, {"ref_id": "b5", "title": "Improved approximation algorithms for maximum cut and satisfiability problems using semidefinite programming", "journal": "Journal of ACM", "year": "1995", "authors": "M Goemans; D Williamson"}, {"ref_id": "b6", "title": "Roof duality, complementation and persistency in quadratic 0-1 optimization", "journal": "Mathematical Programming", "year": "1984", "authors": "P Hammer; P Hansen; B Simeone"}, {"ref_id": "b7", "title": "A bound on the roof duality gap", "journal": "", "year": "1987", "authors": "P Hammer; B Kalantari"}, {"ref_id": "b8", "title": "Minimum 0-extension of graph metrics", "journal": "Euro. J. of Combinatorics", "year": "1998", "authors": "A Karzanov"}, {"ref_id": "b9", "title": "Second-order cone programming relaxation of nonconvex quadratic optimization problems", "journal": "", "year": "2000", "authors": "S Kim; M Kojima"}, {"ref_id": "b10", "title": "Approximation algorithms for classification problems with pairwise relationships: Metric labeling and Markov random fields", "journal": "", "year": "1999", "authors": "J Kleinberg; E Tardos"}, {"ref_id": "b11", "title": "The partial constraint satisfaction problem: Facets and lifting theorems", "journal": "Operations Research Letters", "year": "1998", "authors": "A Koster; C Van Hoesel; A Kolen"}, {"ref_id": "b12", "title": "An analysis of convex relaxations for MAP estimation", "journal": "Oxford Brookes University", "year": "2007", "authors": "M P Kumar; V Kolmogorov; P H S Torr"}, {"ref_id": "b13", "title": "Solving Markov random fields using second order cone programming relaxations", "journal": "", "year": "2006", "authors": "M P Kumar; P H S Torr; A Zisserman"}, {"ref_id": "b14", "title": "Global optimization with polynomials and the problem of moments", "journal": "SIAM Journal of Optimization", "year": "2001", "authors": "J Lasserre"}, {"ref_id": "b15", "title": "A new second-order cone programming relaxation for max-cut problems", "journal": "Journal of Operations Research of Japan", "year": "2003", "authors": "M Muramatsu; T Suzuki"}, {"ref_id": "b16", "title": "Solving large scale binary quadratic problems: Spectral methods vs. semidefinite programming", "journal": "", "year": "2007", "authors": "C Olsson; A Eriksson; F Kahl"}, {"ref_id": "b17", "title": "Quadratic programming relaxations for metric labelling and Markov random field MAP estimation", "journal": "", "year": "2006", "authors": "P Ravikumar; J Lafferty"}, {"ref_id": "b18", "title": "Subgraph matching with semidefinite programming", "journal": "", "year": "2003", "authors": "C Schellewald; C Schnorr"}, {"ref_id": "b19", "title": "Sintaksicheskiy analiz dvumernykh zritelnikh singnalov v usloviyakh pomekh (syntactic analysis of two-dimensional visual signals in noisy conditions)", "journal": "", "year": "1976", "authors": "M Schlesinger"}, {"ref_id": "b20", "title": "A comparative study of energy minimization methods for markov random fields", "journal": "", "year": "2006", "authors": "R Szeliski; R Zabih; D Scharstein; O Veksler; V Kolmogorov; A Agarwala; M Tappen; C Rother"}, {"ref_id": "b21", "title": "Solving Markov random fields using semidefinite programming", "journal": "", "year": "2003", "authors": "P H S Torr"}, {"ref_id": "b22", "title": "MAP estimation via agreement on trees: Message passing and linear programming", "journal": "IEEE Trans. on Information Theory", "year": "2005", "authors": "M Wainwright; T Jaakola; A Willsky"}, {"ref_id": "b23", "title": "Graphical models, exponential families, and variational inference", "journal": "", "year": "2003", "authors": "M Wainwright; M Jordan"}, {"ref_id": "b24", "title": "Treewidth-based conditions for exactness of the Sherali-Adams and Lasserre relaxations", "journal": "", "year": "2004", "authors": "M Wainwright; M Jordan"}], "figures": [{"figure_label": "1", "figure_type": "figure", "figure_id": "fig_0", "figure_caption": "Figure 1 :1Figure 1: (a) An example CRF defined over four variables which form a cycle. Note that the observed nodes are not shown for the sake of clarity of the image. (b)The set E k specified by the matrix C k shown in equation(25), i.e. E k = {(a, b), (b, c), (c, d)}. (c) The set V k = {a, b, c, d}.See text for definitions of these sets. Notation: We consider an SOC constraint which is of the form described in equation(23), i.e. ||(U k ) \u22a4 x|| \u2264 C k \u2022 X,(24)where k \u2208 {1, \u2022 \u2022 \u2022 , n C }. In order to help the reader understand the notation better, we use an example CRF shown in Fig.1(a). This CRF is defined over four variables v = {v a , v b , v c , v d } (connected to form a cycle of length 4), each of which take a label from the set l = {l 0 , l 1 }. For this CRF we specify a constraint using a matrix C k 0 which is 0 everywhere, except for the following 4 \u00d7 4 submatrix: \uf8eb", "figure_data": ""}, {"figure_label": "", "figure_type": "table", "figure_id": "tab_1", "figure_caption": "Hence, in the SOCP-MS formulation, the MAP estimation IP is relaxed to SOCP-MS:x * = arg min x va,li \u03b8 1 + (a,b)\u2208E,li,lj \u03b8 2 ab;ij (1+xa;i+x b;j +X ab;ij ) 4", "figure_data": "(1+xa;i)a;i2"}], "formulas": [{"formula_id": "formula_0", "formula_text": "{0, 1, \u2022 \u2022 \u2022 , n\u2212 1} \u2192 {0, 1, \u2022 \u2022 \u2022 , h\u2212 1}.", "formula_coordinates": [1.0, 352.08, 536.65, 152.13, 9.96]}, {"formula_id": "formula_1", "formula_text": "IP: x * = arg min x va,li \u03b8 1 a;i (1+xa;i) 2 + (a,b)\u2208E,li,lj \u03b8 2 ab;ij (1+xa;i+x b;j +X ab;ij ) 4 s.t. x \u2208 {\u22121, 1} nh ,(1)", "formula_coordinates": [2.0, 134.76, 255.45, 369.32, 30.28]}, {"formula_id": "formula_2", "formula_text": "li\u2208l x a;i = 2 \u2212 h,(2)", "formula_coordinates": [2.0, 282.48, 289.69, 221.6, 11.89]}, {"formula_id": "formula_3", "formula_text": "X = xx \u22a4 .(3)", "formula_coordinates": [2.0, 291.48, 305.1, 212.6, 10.99]}, {"formula_id": "formula_4", "formula_text": "(", "formula_coordinates": [2.0, 272.28, 434.25, 3.73, 6.97]}, {"formula_id": "formula_5", "formula_text": "s.t. x \u2208 [\u22121, 1] nh , X \u2208 [\u22121, 1] nh\u00d7nh ,(4)", "formula_coordinates": [2.0, 140.28, 453.41, 363.8, 11.0]}, {"formula_id": "formula_6", "formula_text": "li\u2208l x a;i = 2 \u2212 h,(5)", "formula_coordinates": [2.0, 288.0, 468.49, 216.08, 11.89]}, {"formula_id": "formula_7", "formula_text": "lj \u2208l X ab;ij = (2 \u2212 h)x a;i ,(6)", "formula_coordinates": [2.0, 271.2, 483.85, 232.88, 11.9]}, {"formula_id": "formula_8", "formula_text": "1 + x a;i + x b;j + X ab;ij \u2265 0.(7)", "formula_coordinates": [2.0, 259.08, 500.36, 245.0, 23.59]}, {"formula_id": "formula_10", "formula_text": "\u2022 h + i, b \u2022 h + j) th element of the pairwise potential matrix\u03b8 2 is defined such that \u03b8 2 ab;ij = vc\u2208v l k \u2208l |\u03b8 2 ac;ik |, if a = b, i = j, \u03b8 2 ab;ij otherwise,(9)", "formula_coordinates": [3.0, 108.0, 47.93, 396.08, 58.41]}, {"formula_id": "formula_11", "formula_text": "1+xa;i 2 2 = 1+xa;i 2", "formula_coordinates": [3.0, 342.96, 153.69, 73.82, 19.45]}, {"formula_id": "formula_12", "formula_text": "x * = arg min x 1+x 2 \u22a4\u03b8 1 + 1+x 2 \u22a4\u03b8 2 1+x 2 ,(10)", "formula_coordinates": [3.0, 225.0, 190.05, 279.2, 17.41]}, {"formula_id": "formula_13", "formula_text": "s.t. li\u2208l x a;i = 2 \u2212 h, \u2200v a \u2208 v,(11)", "formula_coordinates": [3.0, 195.96, 209.77, 308.24, 11.9]}, {"formula_id": "formula_14", "formula_text": "x \u2208 {\u22121, 1} nh , (12", "formula_coordinates": [3.0, 294.12, 225.17, 205.89, 11.0]}, {"formula_id": "formula_15", "formula_text": ")", "formula_coordinates": [3.0, 500.01, 226.88, 4.19, 8.97]}, {"formula_id": "formula_16", "formula_text": "1 x \u22a4 x X 0,(13)", "formula_coordinates": [3.0, 281.04, 343.38, 223.16, 21.42]}, {"formula_id": "formula_17", "formula_text": "[\u22121, 1] with X aa;ii = 1 for all v a \u2208 v, l i \u2208 l.", "formula_coordinates": [3.0, 294.6, 383.41, 189.09, 10.33]}, {"formula_id": "formula_18", "formula_text": "{C k |C k = U k (U k ) \u22a4 0, k = 1, 2, . . . , n C }.", "formula_coordinates": [3.0, 305.28, 484.49, 198.81, 11.37]}, {"formula_id": "formula_19", "formula_text": "\u21d2 (U k ) \u22a4 x 2 \u2264 C k \u2022 X, k = 1, \u2022 \u2022 \u2022 , n C .(14)", "formula_coordinates": [3.0, 220.2, 512.01, 284.0, 12.29]}, {"formula_id": "formula_21", "formula_text": "C 1 MS = 1 1 1 1 , C 2 MS = 1 \u22121 \u22121 1 .", "formula_coordinates": [4.0, 120.36, 43.89, 383.59, 34.84]}, {"formula_id": "formula_22", "formula_text": "s.t. x \u2208 [\u22121, 1] nh , X \u2208 [\u22121, 1] nh\u00d7nh ,(16)", "formula_coordinates": [4.0, 149.88, 114.41, 354.32, 11.0]}, {"formula_id": "formula_23", "formula_text": "li\u2208l x a;i = 2 \u2212 h,(17)", "formula_coordinates": [4.0, 297.6, 129.37, 206.6, 11.9]}, {"formula_id": "formula_24", "formula_text": "(x a;i \u2212 x b;j ) 2 \u2264 2 \u2212 2X ab;ij ,(18)", "formula_coordinates": [4.0, 267.84, 144.09, 236.36, 11.69]}, {"formula_id": "formula_25", "formula_text": "(x a;i + x b;j ) 2 \u2264 2 + 2X ab;ij ,(19)", "formula_coordinates": [4.0, 267.84, 159.09, 236.36, 11.69]}, {"formula_id": "formula_26", "formula_text": "X ab;ij = X ba;ji .(20)", "formula_coordinates": [4.0, 294.96, 174.37, 209.24, 10.34]}, {"formula_id": "formula_27", "formula_text": "min (x,X)\u2208F (A) e(x, X; \u03b8) \u2265 min (x,X)\u2208F (B) e(x, X; \u03b8), \u2200\u03b8,(21)", "formula_coordinates": [4.0, 202.32, 252.13, 301.88, 16.17]}, {"formula_id": "formula_29", "formula_text": "||(U k ) \u22a4 x|| \u2264 C k \u2022 X, k = 1, \u2022 \u2022 \u2022 , n C (23) where C k = U k (U k ) \u22a4 0, for all k = 1, \u2022 \u2022 \u2022 , n C .", "formula_coordinates": [5.0, 108.0, 291.77, 396.2, 26.13]}, {"formula_id": "formula_30", "formula_text": "||(U k ) \u22a4 x|| \u2264 C k \u2022 X,(24)", "formula_coordinates": [5.0, 259.68, 512.81, 244.52, 11.48]}, {"formula_id": "formula_31", "formula_text": "\uf8eb \uf8ec \uf8ec \uf8ed C k aa;00 C k ab;00 C k ac;00 C k ad;00 C k ba;00 C k bb;00 C k bc;00 C k bd;00 C k ca;00 C k cb;00 C k cc;00 C k cd;00 C k da;00 C k db;00 C k dc;00 C k dd;00 \uf8f6 \uf8f7 \uf8f7 \uf8f8 = \uf8eb \uf8ec \uf8ed 2 1 1 0 1 2 1 1 1 1 2 1 0 1 1 2 \uf8f6 \uf8f7 \uf8f8 (25)", "formula_coordinates": [5.0, 180.12, 585.17, 324.08, 50.61]}, {"formula_id": "formula_32", "formula_text": "(a, b) \u2208 E, (26", "formula_coordinates": [5.0, 283.8, 672.37, 216.21, 9.96]}, {"formula_id": "formula_33", "formula_text": ")", "formula_coordinates": [5.0, 500.01, 673.04, 4.19, 8.97]}, {"formula_id": "formula_34", "formula_text": "\u2203l i , l j \u2208 l such that C k ab;ij = 0. (27", "formula_coordinates": [6.0, 243.6, 33.29, 256.41, 12.81]}, {"formula_id": "formula_35", "formula_text": ")", "formula_coordinates": [6.0, 500.01, 35.0, 4.19, 8.97]}, {"formula_id": "formula_36", "formula_text": "v C = {v b |b \u2208 {a 1 , a 2 , \u2022 \u2022 \u2022 , a c }}. Further, let l C = {l j |j \u2208 {i 1 , i 2 ,", "formula_coordinates": [6.0, 108.0, 483.85, 396.05, 21.69]}, {"formula_id": "formula_37", "formula_text": "||U \u22a4 x|| \u2264 C \u2022 X,(28)", "formula_coordinates": [6.0, 268.43, 526.14, 235.76, 11.59]}, {"formula_id": "formula_38", "formula_text": "C a k ,a l ,i k ,i l = \u03bb c if k = l, D c (k, l) otherwise. (29", "formula_coordinates": [6.0, 208.79, 571.93, 291.21, 21.37]}, {"formula_id": "formula_39", "formula_text": ")", "formula_coordinates": [6.0, 500.0, 578.47, 4.19, 8.97]}, {"formula_id": "formula_40", "formula_text": "D c (k, l) = \uf8f1 \uf8f2 \uf8f3 1 if |k \u2212 l| = 1 (\u22121) c\u22121 if |k \u2212 l| = c \u2212 1 0 otherwise,(30)", "formula_coordinates": [6.0, 194.27, 617.9, 309.92, 34.31]}, {"formula_id": "formula_41", "formula_text": "(a k ,a l )\u2208E D c (k, l)\u03b8 2 a k a l ;i k i l \u2265 (a k ,a l )\u2208E D c (k, l)\u03b8 2 a k a l ;j k j l , \u2200{j 1 , j 2 , \u2022 \u2022 \u2022 , j c }.(31)", "formula_coordinates": [7.0, 155.88, 84.93, 348.32, 23.77]}, {"formula_id": "formula_42", "formula_text": "k,l D c (k, l)X a k a l ;i k i l \u2265 2 \u2212 c.(32)", "formula_coordinates": [7.0, 245.28, 261.73, 258.92, 20.89]}, {"formula_id": "formula_43", "formula_text": "v Q = {v b |b \u2208 {a 1 , a 2 , \u2022 \u2022 \u2022 , a q }}. Let l Q = {l j |j \u2208 {i 1 , i 2 ,", "formula_coordinates": [7.0, 108.0, 450.13, 396.01, 21.69]}, {"formula_id": "formula_44", "formula_text": "k x a k ;i k 2 \u2264 q + k,l X a k a l ;i k i l . (33", "formula_coordinates": [7.0, 244.2, 520.77, 255.81, 33.65]}, {"formula_id": "formula_45", "formula_text": ")", "formula_coordinates": [7.0, 500.01, 534.19, 4.19, 8.97]}], "doi": ""}