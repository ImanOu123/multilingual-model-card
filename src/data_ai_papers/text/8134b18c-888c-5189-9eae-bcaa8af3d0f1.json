{"title": "Neural Network Models for Paraphrase Identification, Semantic Textual Similarity, Natural Language Inference, and Question Answering", "authors": "Wuwei Lan; Wei Xu", "pub_date": "", "abstract": "In this paper, we analyze several neural network designs (and their variations) for sentence pair modeling and compare their performance extensively across eight datasets, including paraphrase identification, semantic textual similarity, natural language inference, and question answering tasks. Although most of these models have claimed state-of-the-art performance, the original papers often reported on only one or two selected datasets. We provide a systematic study and show that (i) encoding contextual information by LSTM and inter-sentence interactions are critical, (ii) Tree-LSTM does not help as much as previously claimed but surprisingly improves performance on Twitter datasets, (iii) the Enhanced Sequential Inference Model (Chen et al.", "sections": [{"heading": "Introduction", "text": "Sentence pair modeling is a fundamental technique underlying many NLP tasks, including the following:\n\u2022 Semantic Textual Similarity (STS), which measures the degree of equivalence in the underlying semantics of paired snippets of text (Agirre et al., 2016). \u2022 Paraphrase Identification (PI), which identifies whether two sentences express the same meaning (Dolan and Brockett, 2005;Xu et al., 2015). \u2022 Natural Language Inference (NLI), also known as recognizing textual entailment (RTE), which concerns whether a hypothesis can be inferred from a premise, requiring understanding of the semantic similarity between the hypothesis and the premise (Dagan et al., 2006;Bowman et al., 2015). \u2022 Question Answering (QA), which can be approximated as ranking candidate answer sentences or phrases based on their similarity to the original question (Yang et al., 2015). \u2022 Machine Comprehension (MC), which requires sentence matching between a passage and a question, pointing out the text region that contains the answer. (Rajpurkar et al., 2016).\nTraditionally, researchers had to develop different methods specific for each task. Now neural networks can perform all the above tasks with the same architecture by training end to end. Various neural models (He and Lin, 2016;Chen et al., 2017;Parikh et al., 2016;Wieting et al., 2016;Tomar et al., 2017;Shen et al., 2017a;Yin et al., 2016) have declared state-of-the-art results for sentence pair modeling tasks; however, they were carefully designed and evaluated on selected (often one or two) datasets that can demonstrate the superiority of the model. The research questions are as follows: Do they perform well on other tasks and datasets? How much performance gain is due to certain system design choices and hyperparameter optimizations?\nTo answer these questions and better understand different network designs, we systematically analyze and compare the state-of-the-art neural models across multiple tasks and multiple domains. Namely, we implement five models and their variations on the same PyTorch platform: InferSent model (Conneau et al., 2017), Shortcut-stacked Sentence Encoder Model (Nie and Bansal, 2017), Pairwise Word Interaction Model (He and Lin, 2016), Decomposable Attention Model (Parikh et al., 2016), and Enhanced Sequential Inference Model (Chen et al., 2017). They are representative of the two most common approaches: sentence encoding models that learn vector representations of individual sentences and then calculate the semantic relationship between sentences based on vector distance and sentence pair interaction models that use some sorts of word alignment mechanisms (e.g., attention) then aggregate inter-sentence interactions. We focus on identifying important network designs and present a series of findings with quantitative measurements and in-depth analyses, including (i) incorporating inter-sentence interactions is critical; (ii) Tree-LSTM does not help as much as previously claimed but surprisingly improves performance on Twitter data; (iii) Enhanced Sequential Inference Model has the most consistent high performance for larger datasets, while Pairwise Word Interaction Model performs better on smaller datasets and Shortcut-Stacked Sentence Encoder Model is the best performaning model on the Quora corpus. We release our implementations as a toolkit to the research community. 1", "publication_ref": ["b1", "b9", "b37", "b8", "b2", "b38", "b25", "b12", "b5", "b23", "b35", "b30", "b27", "b39", "b7", "b22", "b12", "b23", "b5"], "figure_ref": [], "table_ref": []}, {"heading": "General Framework for Sentence Pair Modeling", "text": "Various neural networks have been proposed for sentence pair modeling, all of which fall into two types of approaches. The sentence encoding approach encodes each sentence into a fixed-length vector and then computes sentence similarity directly. The model of this type has advantages in the simplicity of the network design and generalization to other NLP tasks. The sentence pair interaction approach takes word alignment and interactions between the sentence pair into account and often show better performance when trained on in-domain data. Here we outline the two types of neural networks under the same general framework:\n\u2022 The Input Embedding Layer takes vector representations of words as input, where pretrained word embeddings are most commonly used, e.g. GloVe (Pennington et al., 2014) or Word2vec (Mikolov et al., 2013). Some work used embeddings specially trained on phrase or sentence pairs that are paraphrases (Wieting and Gimpel, 2017;Tomar et al., 2017); some used subword embeddings, which showed improvement on social media data (Lan and Xu, 2018).\n\u2022 The Context Encoding Layer incorporates word context and sequence order into modeling for better vector representation. This layer often uses CNN (He et al., 2015), LSTM (Chen et al., 2017), recursive neural network (Socher et al., 2011), or highway network (Gong et al., 2017). The sentence encoding type of model will stop at this step, and directly use the encoded vectors to compute the semantic similarity through vector distances and/or the output classification layer.\n\u2022 The Interaction and Attention Layer calculates word pair (or n-gram pair) interactions using the outputs of the encoding layer. This is the key component for the interaction-aggregation type of model. In the PWIM model (He and Lin, 2016), the interactions are calculated by cosine similarity, Euclidean distance, and the dot product of the vectors. Various models put different weights on different interactions, primarily simulating the word alignment between two sentences. The alignment information is useful for sentence pair modeling because the semantic relation between two sentences depends largely on the relations of aligned chunks as shown in the SemEval-2016 task of interpretable semantic textual similarity (Agirre et al., 2016).\n\u2022 The Output Classification Layer adapts CNN or MLP to extract semantic-level features on the attentive alignment and applies softmax function to predict probability for each class.", "publication_ref": ["b24", "b21", "b34", "b30", "b18", "b13", "b5", "b29", "b11", "b12", "b1"], "figure_ref": [], "table_ref": []}, {"heading": "Representative Models for Sentence Pair Modeling", "text": "Table 1 gives a summary of typical models for sentence pair modeling in recent years. In particular, we investigate five models in depth: two are representative of the sentence encoding type of model, and three are representative of the interaction-aggregation type of model. These models have reported state-or-the-art results with varied architecture design (this section) and implementation details (Section 4.2).   ", "publication_ref": [], "figure_ref": [], "table_ref": ["tab_1"]}, {"heading": "The Bi-LSTM Max-pooling Network (InferSent)", "text": "We choose the simple Bi-LSTM max-pooling network from InferSent (Conneau et al., 2017):\n\u2190 \u2192 h i = BiLST M (x i , \u2190 \u2192 h i\u22121 ) (1) v = max( \u2190 \u2192 h 1 , \u2190 \u2192 h 2 , ..., \u2190 \u2192 h n )(2)\nwhere \u2190 \u2192 h i represents the concatenation of hidden states in both directons. It has shown better transfer learning capabilities than several other sentence embedding models, including SkipThought (Kiros et al., 2015) and FastSent (Hill et al., 2016), when trained on the natural language inference datasets.", "publication_ref": ["b7", "b17", "b14"], "figure_ref": [], "table_ref": []}, {"heading": "The Shortcut-Stacked Sentence Encoder Model (SSE)", "text": "The Shortcut-Stacked Sentence Encoder model (Nie and Bansal, 2017) is a sentence-based embedding model, which enhances multi-layer Bi-LSTM with skip connection to avoid training error accumulation, and calculates each layer as follows:\n\u2190 \u2192 h k i = BiLST M (x k i , \u2190 \u2192 h k i\u22121 )(3)\nx 1 i = w i (k = 1), x k i = [w i , \u2190 \u2192 h k\u22121 i , \u2190 \u2192 h k\u22122 i , ..., \u2190 \u2192 h 1 i ] (k > 1) (4) v = max( \u2190 \u2192 h m 1 , \u2190 \u2192 h m 2 , ..., \u2190 \u2192 h m n ) (5)\nwhere x k i is the input of the kth Bi-LSTM layer at time step i, which is the combination of outputs from all previous layers, \u2190 \u2192 h k i represents the hidden state of the kth Bi-LSTM layer in both directions. The final sentence embedding v is the row-based max pooling over the output of the last Bi-LSTM layer, where n denotes the number of words within a sentence and m is the number of Bi-LSTM layers (m = 3 in SSE).", "publication_ref": ["b22"], "figure_ref": [], "table_ref": []}, {"heading": "The Pairwise Word Interaction Model (PWIM)", "text": "In the Pairwise Word Interaction model (He and Lin, 2016), each word vector w i is encoded with context through forward and backward LSTMs:\n\u2212 \u2192 h i = LST M f (w i , \u2212 \u2192 h i\u22121 ) and \u2190 \u2212 h i = LST M b (w i , \u2190 \u2212 h i+1 ).\nFor every word pair (w a i , w b j ) across sentences, the model directly calculates word pair interactions using cosine similarity, Euclidean distance, and dot product over the outputs of the encoding layer:\nD( \u2212 \u2192 h i , \u2212 \u2192 h j ) = [cos( \u2212 \u2192 h i , \u2212 \u2192 h j ), \u2212 \u2192 h i \u2212 \u2212 \u2192 h j , \u2212 \u2192 h i \u2022 \u2212 \u2192 h j ](6)\nThe above equation not only applies to forward hidden state \u2212 \u2192 h i and backward hidden state \u2190 \u2212 h i , but also to the concatenation\n\u2190 \u2192 h i = [ \u2212 \u2192 h i , \u2190 \u2212 h i ] and summation h + i = \u2212 \u2192 h i + \u2190 \u2212 h i\n, resulting in a tensor D 13\u00d7|sent1|\u00d7|sent2| after padding one extra bias term. A \"hard\" attention is applied to the interaction tensor to build word alignment: selecting the most related word pairs and increasing the corresponding weights by 10 times. Then a 19-layer deep CNN is applied to aggregate the word interaction features for final classification.", "publication_ref": ["b12"], "figure_ref": [], "table_ref": []}, {"heading": "The Decomposable Attention Model (DecAtt)", "text": "The Decomposable Attention model (Parikh et al., 2016) is one of the earliest models to introduce attentionbased alignment for sentence pair modeling, and it achieved state-of-the-art results on the SNLI dataset with about an order of magnitude fewer parameters than other models (see more in Table 5) without relying on word order information. It computes the word pair interaction between w a i and w b j (from input sentences s a and s b , each with m and n words, respectively) as e ij = F (w a i ) T F (w b j ), where F is a feedforward network; then alignment is determined as follows:\n\u03b2 i = n j=1 exp(e ij ) n k=1 exp(e ik ) w b j \u03b1 j = m i=1 exp(e ij ) m k=1 exp(e kj ) w a i (7)\nwhere \u03b2 i is the soft alignment between w a i and subphrases w b j in sentence s b , and vice versa for \u03b1 j . The aligned phrases are fed into another feedforward network G: v a i = G([w a i ; \u03b2 i ]) and v b j = G([w b j ; \u03b1 j ]) to generate sets {v a i } and {v b j }, which are aggregated by summation and then concatenated together for classification.", "publication_ref": ["b23"], "figure_ref": [], "table_ref": ["tab_8"]}, {"heading": "The Enhanced Sequential Inference Model (ESIM)", "text": "The Enhanced Sequential Inference Model (Chen et al., 2017) is closely related to the DecAtt model, but it differs in a few aspects. First, Chen et al. (2017) demonstrated that using Bi-LSTM to encode sequential contexts is important for performance improvement. They used the concatenation w\ni = \u2190 \u2192 h i = [ \u2212 \u2192 h i , \u2190 \u2212 h i ]\nof both directions as in the PWIM model. The word alignment \u03b2 i and \u03b1 j between w a and w b are calculated the same way as in DecAtt. Second, they showed the competitive performance of recursive architecture with constituency parsing, which complements with sequential LSTM. The feedforward function G in DecAtt is replaced with Tree-LSTM:\nv a i = T reeLST M ([w a i ; \u03b2 i ; w a i \u2212 \u03b2 i ; w a i \u03b2 i ])(8)\nv b j = T reeLST M ([w b j ; \u03b1 j ; w b j \u2212 \u03b1 j ; w b j \u03b1 j ])(9)\nThird, instead of using summation in aggregation, ESIM adapts the average and max pooling and concatenation v = [v a ave ; v a max ; v b ave ; v b max ] before passing through multi-layer perceptron (MLP) for classification: 4 Experiments and Analysis\nv a ave = m i=1 v a i m , v a max = m max i=1 v a i , v b ave = n j=1 v b j n , v b max = n max j=1 v b j(10)", "publication_ref": ["b5", "b5"], "figure_ref": [], "table_ref": []}, {"heading": "Datasets", "text": "We conducted sentence pair modeling experiments on eight popular datasets: two NLI datasets, three PI datasets, one STS dataset and two QA datasets. Table 2 gives a comparison of these datasets:\n\u2022 SNLI (Bowman et al., 2015) contains 570k hypotheses written by crowdsourcing workers given the premises. It focuses on three semantic relations: the premise entails the hypothesis (entailment), they contradict each other (contradiction), or they are unrelated (neutral). \u2022 Multi-NLI (Williams et al., 2017) extends the SNLI corpus to multiple genres of written and spoken texts with 433k sentence pairs.   (Hovy et al., 2006). \u2022 WikiQA (Yang et al., 2015) is an open-domain question-answering dataset. Following He and Lin (2016), questions without correct candidate answer sentences are excluded, and answer sentences are truncated to 40 tokens, resulting in 12k question-answer pairs for our experiments. \u2022 TrecQA (Wang et al., 2007) is an answer selection task of 56k question-answer pairs and created in Text Retrieval Conferences (TREC). For both WikiQA and TrecQA datasets, the best answer is selected according to the semantic relatedness with the question.", "publication_ref": ["b36", "b15", "b38", "b12", "b32"], "figure_ref": [], "table_ref": ["tab_3"]}, {"heading": "Implementation Details", "text": "We implement all the models with the same PyTorch framework. 23 Below, we summarize the implementation details that are key for reproducing results for each model:\n\u2022 SSE: This model can converge very fast, for example, 2 or 3 epochs for the SNLI dataset. We control the convergence speed by updating the learning rate for each epoch:\nspecifically, lr = 1 2 epoch i 2 * init lr,\nwhere init lr is the initial learning rate and epoch i is the index of current epoch.\n\u2022 DecAtt: It is important to use gradient clipping for this model: for each gradient update, we check the L2 norm of all the gradient values, if it is greater than a threshold b, we scale the gradient by a factor \u03b1 = b/L2 norm. Another useful procedure is to assemble batches of sentences with similar length.\n\u2022 ESIM: Similar but different from DecAtt, ESIM batches sentences with varied length and uses masks to filter out padding information. In order to batch the parse trees within Tree-LSTM recursion, we follow Bowman et al.'s (2016) procedure that converts tree structures into the linear sequential structure of a shift reduce parser. Two additional masks are used for producing left and right children of a tree node. \u2022 PWIM: The cosine and Euclidean distances used in the word interaction layer have smaller values for similar vectors while dot products have larger values. The performance increases if we add a negative sign to make all the vector similarity measurements behave consistently.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Analysis", "text": "", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Re-implementation Results vs. Previously Reported Results", "text": "Table 3 and 4 show the results reported in the original papers and the replicated results with our implementation. We use accuracy, F1 score, Pearson's r, Mean Average Precision (MAP), and Mean Reciprocal Rank (MRR) for evaluation on different datasets following the literature. Our reproduced results are slightly lower than the original results by 0.5 \u223c 1.5 points on accuracy. We suspect the following potential reasons: (i) less extensive hyperparameter tuning for each individual dataset; (ii) only one run with random seeding to report results; and (iii) use of different neural network toolkits: for example, the original ESIM model was implemented with Theano, and PWIM model was in Torch.", "publication_ref": [], "figure_ref": [], "table_ref": ["tab_5"]}, {"heading": "Effects of Model Components", "text": "Herein, we examine the main components that account for performance in sentence pair modeling.\nHow important is LSTM encoded context information for sentence pair modeling? Regarding DecAtt, Parikh et al. (2016) mentioned that \"intra-sentence attention is optional\"; they can achieve competitive results without considering context information. However, not surprisingly, our experiments consistently show that encoding sequential context information with LSTM is critical. Compared to DecAtt, ESIM shows better performance on every dataset (see Table 4 and Figure 3). The main difference between ESIM and DecAtt that contributes to performance improvement, we found, is the use of Bi-LSTM and Tree-LSTM for sentence encoding, rather than the different choices of aggregation functions.\nWhy does Tree-LSTM help with Twitter data? Chen et al. ( 2017) offered a simple combination (ESIM seq+tree ) by averaging the prediction probabilities of two ESIM variants that use sequential Bi-LSTM and Tree-LSTM respectively, and suggested \"parsing information complements very well with ESIM and further improves the performance\". However, we found that adding Tree-LSTM only helps slightly or not at all for most datasets, but it helps noticably with the two Twitter paraphrase datasets. We hypothesize the reason is that these two datasets come from real-world tweets which often contain extraneous text fragments, in contrast to SNLI and other datasets that have sentences written by crowdsourcing workers. For example, the segment \"ever wondered ,\" in the sentence pair ever wondered , why your recorded #voice sounds weird to you? and why do our recorded voices sound so weird to us? introduces a disruptive context into the Bi-LSTM encoder, while Tree-LSTM can put it in a less important position after constituency parsing.\nHow important is attentive interaction for sentence pair modeling? Why does SSE excel on Quora? Both ESIM and DecAtt (Eq. 7) calculate an attention-based soft alignment between a sentence pair, which was also proposed in (Rockt\u00e4schel et al., 2016) and (Wang and Jiang, 2017) for sentence pair modeling, whereas PWIM utilizes a hard attention mechanism. Both attention strategies are critical for model performance. In PWIM model (He and Lin, 2016), we observed a 1\u223c2 point performance drop after   ", "publication_ref": ["b23", "b26", "b31", "b12"], "figure_ref": [], "table_ref": ["tab_6"]}, {"heading": "Learning Curves and Training Time", "text": "Figure 3 shows the learning curves. The DecAtt model converges quickly and performs well on large NLI datasets due to its design simplicity. PWIM is the slowest model (see time comparison in Table 5) but shows very strong performance on semantic similarity and paraphrase identification datasets. ESIM and SSE keep a good balance between training time and performance.  ", "publication_ref": [], "figure_ref": [], "table_ref": ["tab_8"]}, {"heading": "Categorical Performance Comparison", "text": "We conducted an in-depth analysis of model performance on the Multi-domain NLI dataset based on different categories: text genre, sentence pair overlap, and sentence length. As shown in Table 7, all models have comparable performance between matched genre and unmatched genre. Sentence length and overlap turn out to be two important factors -the longer the sentences and the fewer tokens in common, the more challenging it is to determine their semantic relationship. These phenomena shared by the state-of-the-art systems reflect their similar design framework which is symmetric at processing both sentences in the pair, while question answering and natural language inference tasks are directional (Ghaeini et al., 2018). How to incorporate asymmetry into model design will be worth more exploration in future research.", "publication_ref": ["b10"], "figure_ref": [], "table_ref": ["tab_11"]}, {"heading": "Transfer Learning Experiments", "text": "In addition to the cross-domain study (Table 7), we conducted transfer learning experiments on three paraphrase identification datasets (Table 6). The most noteworthy phenomenon is that the SSE model performs better on Twitter-URL and PIT-2015 when trained on the large out-of-domain Quora data than the small in-domain training data. Two likely reasons are: 1) the SSE model with over 29 million parameters is data hungry and 2) SSE model is a sentence encoding model, which generalizes better across domains/tasks than sentence pair interaction models. Sentence pair interaction models may encounter difficulties on Quora, which contains sentence pairs with the highest word overlap (51.5%) among all datasets and often causes   the interaction patterns to focus on a few key words that differ. In contrast, the Twitter-URL dataset has the lowest overlap (23.0%) with a semantic relationship that is mainly based on the intention of the tweets.", "publication_ref": [], "figure_ref": [], "table_ref": ["tab_11", "tab_10"]}, {"heading": "Conclusion", "text": "We analyzed five different neural models (and their variations) for sentence pair modeling and conducted a series of experiments with eight representative datasets for different NLP tasks. We quantified the importance of the LSTM encoder and attentive alignment for inter-sentence interaction, as well as the transfer learning ability of sentence encoding based models. We showed that the SNLI corpus of over 550k sentence pairs cannot saturate the learning curve. We systematically compared the strengths and weaknesses of different network designs and provided insights for future work.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Acknowledgements", "text": "We thank Ohio Supercomputer Center (Center, 2012) for computing resources. This work was supported in part by NSF CRII award (RI-1755898) and DARPA through the ARO (W911NF-17-C-0095). The content of the information in this document does not necessarily reflect the position or the policy of the U.S. Government, and no official endorsement should be inferred.", "publication_ref": [], "figure_ref": [], "table_ref": []}], "references": [{"ref_id": "b0", "title": "Semeval-2014 task 10: Multilingual semantic textual similarity", "journal": "", "year": "2014", "authors": "Eneko Agirre; Carmen Banea; Claire Cardie; Daniel Cer; Mona Diab; Aitor Gonzalez-Agirre; Weiwei Guo; Rada Mihalcea; German Rigau; Janyce Wiebe"}, {"ref_id": "b1", "title": "Semeval-2016 task 2: Interpretable semantic textual similarity", "journal": "", "year": "2016", "authors": "Eneko Agirre; Aitor Gonzalez-Agirre; Inigo Lopez-Gazpio; Montse Maritxalar; German Rigau; Larraitz Uria"}, {"ref_id": "b2", "title": "A large annotated corpus for learning natural language inference", "journal": "EMNLP", "year": "2015", "authors": "R Samuel; Gabor Bowman; Christopher Angeli; Christopher D Potts;  Manning"}, {"ref_id": "b3", "title": "A fast unified model for parsing and sentence understanding", "journal": "", "year": "2016", "authors": "R Samuel; Jon Bowman; Abhinav Gauthier; Raghav Rastogi; Christopher D Gupta; Christopher Manning;  Potts"}, {"ref_id": "b4", "title": "Oakley supercomputer", "journal": "", "year": "2012", "authors": " Ohio Supercomputer;  Center"}, {"ref_id": "b5", "title": "Enhanced LSTM for natural language inference", "journal": "", "year": "2017", "authors": "Qian Chen; Xiaodan Zhu; Zhenhua Ling; Si Wei; Hui Jiang; Diana Inkpen"}, {"ref_id": "b6", "title": "Unsupervised learning of task-specific tree structures with tree-LSTMs", "journal": "", "year": "2017", "authors": "Jihun Choi; Sang-Goo Kang Min Yoo;  Lee"}, {"ref_id": "b7", "title": "Supervised learning of universal sentence representations from natural language inference data", "journal": "EMNLP", "year": "2017", "authors": "Alexis Conneau; Douwe Kiela; Holger Schwenk; Lo\u00efc Barrault; Antoine Bordes"}, {"ref_id": "b8", "title": "The PASCAL recognising textual entailment challenge", "journal": "", "year": "2006", "authors": "Oren Ido Dagan; Bernardo Glickman;  Magnini"}, {"ref_id": "b9", "title": "Automatically constructing a corpus of sentential paraphrases", "journal": "", "year": "2005", "authors": "B William; Chris Dolan;  Brockett"}, {"ref_id": "b10", "title": "DR-BiLSTM: Dependent reading bidirectional LSTM for natural language inference", "journal": "", "year": "2018", "authors": "Reza Ghaeini; A Sadid; Vivek Hasan; Joey Datla; Kathy Liu; Ashequl Lee; Yuan Qadir; Aaditya Ling;  Prakash; Z Xiaoli; Oladimeji Fern;  Farri"}, {"ref_id": "b11", "title": "Natural language inference over interaction space", "journal": "", "year": "2017", "authors": "Yichen Gong; Heng Luo; Jian Zhang"}, {"ref_id": "b12", "title": "Pairwise word interaction modeling with deep neural networks for semantic similarity measurement", "journal": "", "year": "2016", "authors": "Hua He; Jimmy Lin"}, {"ref_id": "b13", "title": "Multi-perspective sentence similarity modeling with convolutional neural networks", "journal": "", "year": "2015", "authors": "Hua He; Kevin Gimpel; Jimmy Lin"}, {"ref_id": "b14", "title": "Learning distributed representations of sentences from unlabelled data", "journal": "", "year": "2016", "authors": "Felix Hill; Kyunghyun Cho; Anna Korhonen"}, {"ref_id": "b15", "title": "Ontonotes: The 90% solution", "journal": "", "year": "2006", "authors": "Eduard Hovy; Mitchell Marcus; Martha Palmer; Lance Ramshaw; Ralph Weischedel"}, {"ref_id": "b16", "title": "First Quora Dataset Release: Question Pairs", "journal": "", "year": "2017", "authors": "Shankar Iyer; Nikhil Dandekar; Kornl Csernai"}, {"ref_id": "b17", "title": "Skip-thought vectors", "journal": "", "year": "2015", "authors": "Ryan Kiros; Yukun Zhu; R Ruslan; Richard Salakhutdinov; Raquel Zemel; Antonio Urtasun; Sanja Torralba;  Fidler"}, {"ref_id": "b18", "title": "The importance of subword embeddings in sentence pair modeling", "journal": "", "year": "2018", "authors": "Wuwei Lan; Wei Xu"}, {"ref_id": "b19", "title": "A continuously growing dataset of sentential paraphrases", "journal": "", "year": "2017", "authors": "Wuwei Lan; Siyu Qiu; Hua He; Wei Xu"}, {"ref_id": "b20", "title": "Modelling interaction of sentence pair with coupled-LSTMs", "journal": "", "year": "2016", "authors": "Pengfei Liu; Xipeng Qiu; Xuanjing Huang"}, {"ref_id": "b21", "title": "Distributed representations of words and phrases and their compositionality", "journal": "", "year": "2013", "authors": "Tomas Mikolov; Ilya Sutskever; Kai Chen; Greg S Corrado; Jeff Dean"}, {"ref_id": "b22", "title": "Shortcut-stacked sentence encoders for multi-domain inference", "journal": "", "year": "2017", "authors": "Yixin Nie; Mohit Bansal"}, {"ref_id": "b23", "title": "A decomposable attention model for natural language inference", "journal": "EMNLP", "year": "2016", "authors": "Ankur Parikh; Oscar T\u00e4ckstr\u00f6m; Dipanjan Das; Jakob Uszkoreit"}, {"ref_id": "b24", "title": "GloVe: Global vectors for word representation", "journal": "", "year": "2014", "authors": "Jeffrey Pennington; Richard Socher; Christopher D Manning"}, {"ref_id": "b25", "title": "SQuAD: 100,000+ questions for machine comprehension of text", "journal": "EMNLP", "year": "2016", "authors": "Pranav Rajpurkar; Jian Zhang; Konstantin Lopyrev; Percy Liang"}, {"ref_id": "b26", "title": "Reasoning about entailment with neural attention", "journal": "", "year": "2016", "authors": "Tim Rockt\u00e4schel; Edward Grefenstette; Karl Moritz Hermann; Tom\u00e1\u0161 Ko\u010disk\u1ef3; Phil Blunsom"}, {"ref_id": "b27", "title": "Inter-weighted alignment network for sentence pair modeling", "journal": "", "year": "2017", "authors": "Gehui Shen; Yunlun Yang; Zhi-Hong Deng"}, {"ref_id": "b28", "title": "Disan: Directional self-attention network for RNN/CNN-free language understanding", "journal": "", "year": "2017", "authors": "Tao Shen; Tianyi Zhou; Guodong Long; Jing Jiang; Shirui Pan; Chengqi Zhang"}, {"ref_id": "b29", "title": "Parsing natural scenes and natural language with recursive neural networks", "journal": "", "year": "2011", "authors": "Richard Socher; C Cliff; Chris Lin; Andrew Y Manning;  Ng"}, {"ref_id": "b30", "title": "Neural paraphrase identification of questions with noisy pretraining", "journal": "", "year": "2017", "authors": "Thyago Gaurav Singh Tomar; Oscar Duque; Jakob T\u00e4ckstr\u00f6m; Dipanjan Uszkoreit;  Das"}, {"ref_id": "b31", "title": "A compare-aggregate model for matching text sequences", "journal": "", "year": "2017", "authors": "Shuohang Wang; Jing Jiang"}, {"ref_id": "b32", "title": "What is the Jeopardy model? A quasi-synchronous grammar for qa", "journal": "", "year": "2007", "authors": "Mengqiu Wang; A Noah; Teruko Smith;  Mitamura"}, {"ref_id": "b33", "title": "Bilateral multi-perspective matching for natural language sentences", "journal": "", "year": "2017", "authors": "Zhiguo Wang; Wael Hamza; Radu Florian"}, {"ref_id": "b34", "title": "Revisiting recurrent networks for paraphrastic sentence embeddings", "journal": "", "year": "2017", "authors": "John Wieting; Kevin Gimpel"}, {"ref_id": "b35", "title": "Towards universal paraphrastic sentence embeddings", "journal": "", "year": "2016", "authors": "John Wieting; Mohit Bansal; Kevin Gimpel; Karen Livescu"}, {"ref_id": "b36", "title": "A broad-coverage challenge corpus for sentence understanding through inference", "journal": "", "year": "2017", "authors": "Adina Williams; Nikita Nangia; Samuel R Bowman"}, {"ref_id": "b37", "title": "SemEval-2015 Task 1: Paraphrase and semantic similarity in Twitter (PIT)", "journal": "", "year": "2015", "authors": "Wei Xu; Chris Callison-Burch; William B Dolan"}, {"ref_id": "b38", "title": "WikiQA: A challenge dataset for open-domain question answering", "journal": "EMNLP", "year": "2015", "authors": "Yi Yang; Yih Wen-Tau; Christopher Meek"}, {"ref_id": "b39", "title": "ABCNN: Attention-based convolutional neural network for modeling sentence pairs", "journal": "Transactions of the Association for Computational Linguistics", "year": "2016", "authors": "Wenpeng Yin; Hinrich Schtze; Bing Xiang; Bowen Zhou"}], "figures": [{"figure_label": "1", "figure_type": "figure", "figure_id": "fig_0", "figure_caption": "Figure 1 :1Figure1: Sentence encoding models focus on learning vector representations of individual sentences and then calculate the semantic relationship between sentences based on vector distance.", "figure_data": ""}, {"figure_label": "2", "figure_type": "figure", "figure_id": "fig_1", "figure_caption": "Figure 2 :2Figure 2: Sentence pair interaction models use different word alignment mechanisms before aggregation.", "figure_data": ""}, {"figure_label": "1", "figure_type": "table", "figure_id": "tab_1", "figure_caption": "", "figure_data": ""}, {"figure_label": "", "figure_type": "table", "figure_id": "tab_2", "figure_caption": "Two men on bicycles competing in a race. entailment dev 10,000 s b : Men are riding bicycles on the street.", "figure_data": "DatasetSizeExample and LabelSNLItrain 550,152sa: neutraltest 10,000contradictMulti-NLItrain 392,703 dev 20,000 test 20,000sa: The Old One always comforted Ca'daan, except today. s b : Ca'daan knew the Old One very well.entailment neutral contradictQuoratrain 384,348 dev 10,000 test 10,000sa: What should I do to avoid sleeping in class? s b : How do I not sleep in a boring class?paraphrase non-paraphraseTwitter-URLtrain 42,200 dev -test 9,324sa: Letter warned Wells Fargo of \"widespread\" fraud in 2007. paraphrase s b : Letters suggest Wells Fargo scandal started earlier. non-paraphrasePIT-2015train 11,530 dev 4,142 test 838sa: Ezekiel Ansah w the 3D shades Popped out lens s b : Ezekiel Ansah was wearing lens less 3D glassesparaphrase non-paraphraseSTS-2014train 7,592 dev -test 3,750sa: Then perhaps we could have avoided a catastrophe. s b : Then we might have been able to avoid a disaster.score [0, 5] 4.6WikiQAtrain 8,672 dev 1,130 test 2,351sa: How much is 1 tablespoon of water? s b : In Australia one tablespoon (measurement unit) is 20 mL.true falseTrecQAtrain 53,417 dev 1,148 test 1,517sa: Who was Lincoln's Secretary of State? s b : William Sewardtrue false"}, {"figure_label": "2", "figure_type": "table", "figure_id": "tab_3", "figure_caption": "Basic statistics and examples of different datasets for sentence pair modeling tasks. Twitter-URL(Lan et al., 2017) includes 50k sentence pairs collected from tweets that share the same URL of news articles. This dataset contains both formal and informal language.\u2022 PIT-2015(Xu et al., 2015) comes from SemEval-2015 and was collected from tweets under the same trending topic. It contains naturally occurred (i.e. written by independent Twitter users spontaneously) paraphrases and non-paraphrases with varied topics and language styles. \u2022 STS-2014(Agirre et al., 2014) is from SemEval-2014, constructed from image descriptions, news headlines, tweet news, discussion forums, and OntoNotes", "figure_data": ""}, {"figure_label": "3", "figure_type": "table", "figure_id": "tab_5", "figure_caption": "Reported results from original papers, which are mostly limited to a few datasets. For the Multi-NLI dataset, Acc m represents testing accuracy for the matched genre and Acc um for the unmatched genre.", "figure_data": "ModelSNLIMulti-NLIQuoraTwitter-URLPIT-2015STS-2014WikiQATrecQAAccAcc m/Acc um AccF1F1rMAP/MRR MAP/MRRInferSent0.8460.705/0.7030.8660.7460.4510.7150.287/0.287 0.521/0.559SSE0.8550.740/0.7340.8780.6500.4220.3780.624/0.638 0.628/0.670DecAtt0.8560.719/0.7130.8450.6520.4300.3170.603/0.619 0.660/0.712ESIMtree0.8640.736/0.7270.7550.7400.4470.4930.618/0.633 0.698/0.734ESIMseq0.8700.752/0.7380.8500.7480.5200.6020.652/0.664 0.771/0.795ESIMseq+tree 0.8710.753/0.7480.8540.7590.5380.5890.647/0.658 0.749/0.768PWIM0.8220.722/0.7160.8340.7610.6560.7430.706/0.723 0.739/0.795"}, {"figure_label": "4", "figure_type": "table", "figure_id": "tab_6", "figure_caption": "Replicated results with our reimplementation in PyTorch across multiple tasks and datasets. The best result in each dataset is denoted by a bold typeface, and the second best is denoted by an underline. removing the hard attention, 0\u223c3 point performance drop and \u223c25% training time reduction after removing the 19-layer CNN aggregation. Likely without even the authors of SSE knowing, the SSE model performs extraordinarily well on the Quora corpus, perhaps because Quora contains many sentence pairs with less complicated inter-sentence interactions (e.g., many identical words in the two sentences) and incorrect ground truth labels (e.g., What is your biggest regret in life? and What's the biggest regret you've had in life? are labeled as non-duplicate questions by mistake).", "figure_data": ""}, {"figure_label": "", "figure_type": "table", "figure_id": "tab_7", "figure_caption": "Training curves of ESIM, DecAtt, PWIM, SSE and InferSent models on eight datasets.", "figure_data": "Figure 3: InferSentSSEDecAttESIMseq ESIMtreePWIMNumber of parameters47M140M380K4.3M7.7M2.2MAvg epoch time (seconds) / sentence pair0.0050.0320.00060.0130.0160.60Ratio compared to DecAtt model\u00d78\u00d7531\u00d722\u00d726\u00d71000"}, {"figure_label": "5", "figure_type": "table", "figure_id": "tab_8", "figure_caption": "Average training time per sentence pair in the Twitter-URL dataset (similar time for other datasets).4.3.4 Effects of Training Data SizeAs shown in Figure4, we experimented with different training sizes of the largest SNLI dataset. All the models show improved performance as we increase the training size. ESIM and SSE have very similar trends and clearly outperform PWIM on the SNLI dataset. DecAtt shows a performance jump when the training size exceeds a threshold.", "figure_data": ""}, {"figure_label": "6", "figure_type": "table", "figure_id": "tab_10", "figure_caption": "Transfer learning experiments for paraphrase identification task.", "figure_data": "Category#ExamplesInferSentSSEDecAttESIMseqPWIMFiction19730.7030.7270.7060.7420.707Matched GenreGovernment Slate Telephone1945 1955 19660.753 0.653 0.7180.746 0.670 0.7280.743 0.671 0.7170.790 0.697 0.7530.751 0.670 0.709Travel19760.7050.7010.7330.7520.7149/1119740.6850.7100.6990.7370.711Mismatched GenreFace-to-face Letters OUP1974 1977 19610.713 0.734 0.6980.729 0.757 0.7150.720 0.754 0.7190.761 0.775 0.7590.710 0.757 0.710Verbatim19460.6910.7010.7090.7250.713>60%4880.7560.7950.8050.8420.811Overlap30% \u223c 60%32250.7400.7510.7450.7690.743<30%61020.6850.6890.6910.7270.682>20 tokens37300.6920.6760.6850.7310.694Length10\u223c20 tokens36730.7120.7250.7210.7530.720<10 tokens24120.7210.7580.7480.7620.724"}, {"figure_label": "7", "figure_type": "table", "figure_id": "tab_11", "figure_caption": "Categorical performance (accuracy) on Multi-NLI dataset. Overlap is the percentage of shared tokens between two sentences. Length is calculated based on the number of tokens of the longer sentence.", "figure_data": ""}], "formulas": [{"formula_id": "formula_0", "formula_text": "\u2190 \u2192 h i = BiLST M (x i , \u2190 \u2192 h i\u22121 ) (1) v = max( \u2190 \u2192 h 1 , \u2190 \u2192 h 2 , ..., \u2190 \u2192 h n )(2)", "formula_coordinates": [4.0, 241.03, 107.44, 298.97, 37.84]}, {"formula_id": "formula_1", "formula_text": "\u2190 \u2192 h k i = BiLST M (x k i , \u2190 \u2192 h k i\u22121 )(3)", "formula_coordinates": [4.0, 152.56, 266.27, 387.44, 19.27]}, {"formula_id": "formula_2", "formula_text": "x 1 i = w i (k = 1), x k i = [w i , \u2190 \u2192 h k\u22121 i , \u2190 \u2192 h k\u22122 i , ..., \u2190 \u2192 h 1 i ] (k > 1) (4) v = max( \u2190 \u2192 h m 1 , \u2190 \u2192 h m 2 , ..., \u2190 \u2192 h m n ) (5)", "formula_coordinates": [4.0, 152.56, 285.89, 387.44, 38.9]}, {"formula_id": "formula_3", "formula_text": "\u2212 \u2192 h i = LST M f (w i , \u2212 \u2192 h i\u22121 ) and \u2190 \u2212 h i = LST M b (w i , \u2190 \u2212 h i+1 ).", "formula_coordinates": [4.0, 252.58, 422.68, 267.29, 18.21]}, {"formula_id": "formula_4", "formula_text": "D( \u2212 \u2192 h i , \u2212 \u2192 h j ) = [cos( \u2212 \u2192 h i , \u2212 \u2192 h j ), \u2212 \u2192 h i \u2212 \u2212 \u2192 h j , \u2212 \u2192 h i \u2022 \u2212 \u2192 h j ](6)", "formula_coordinates": [4.0, 190.06, 471.81, 349.94, 18.21]}, {"formula_id": "formula_5", "formula_text": "\u2190 \u2192 h i = [ \u2212 \u2192 h i , \u2190 \u2212 h i ] and summation h + i = \u2212 \u2192 h i + \u2190 \u2212 h i", "formula_coordinates": [4.0, 151.18, 510.48, 212.52, 19.83]}, {"formula_id": "formula_6", "formula_text": "\u03b2 i = n j=1 exp(e ij ) n k=1 exp(e ik ) w b j \u03b1 j = m i=1 exp(e ij ) m k=1 exp(e kj ) w a i (7)", "formula_coordinates": [4.0, 138.89, 685.19, 401.12, 33.71]}, {"formula_id": "formula_7", "formula_text": "i = \u2190 \u2192 h i = [ \u2212 \u2192 h i , \u2190 \u2212 h i ]", "formula_coordinates": [5.0, 439.54, 179.69, 88.68, 18.21]}, {"formula_id": "formula_8", "formula_text": "v a i = T reeLST M ([w a i ; \u03b2 i ; w a i \u2212 \u03b2 i ; w a i \u03b2 i ])(8)", "formula_coordinates": [5.0, 197.0, 261.5, 343.0, 14.19]}, {"formula_id": "formula_9", "formula_text": "v b j = T reeLST M ([w b j ; \u03b1 j ; w b j \u2212 \u03b1 j ; w b j \u03b1 j ])(9)", "formula_coordinates": [5.0, 197.0, 279.59, 343.0, 14.19]}, {"formula_id": "formula_10", "formula_text": "v a ave = m i=1 v a i m , v a max = m max i=1 v a i , v b ave = n j=1 v b j n , v b max = n max j=1 v b j(10)", "formula_coordinates": [5.0, 129.58, 337.6, 410.42, 33.71]}, {"formula_id": "formula_11", "formula_text": "specifically, lr = 1 2 epoch i 2 * init lr,", "formula_coordinates": [6.0, 388.99, 669.85, 151.02, 20.11]}], "doi": ""}