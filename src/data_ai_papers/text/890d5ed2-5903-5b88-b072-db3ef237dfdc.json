{"title": "Concise Integer Linear Programming Formulations for Dependency Parsing", "authors": "Andr\u00e9 F T Martins; Noah A Smith; Eric P Xing", "pub_date": "", "abstract": "We formulate the problem of nonprojective dependency parsing as a polynomial-sized integer linear program. Our formulation is able to handle non-local output features in an efficient manner; not only is it compatible with prior knowledge encoded as hard constraints, it can also learn soft constraints from data. In particular, our model is able to learn correlations among neighboring arcs (siblings and grandparents), word valency, and tendencies toward nearlyprojective parses. The model parameters are learned in a max-margin framework by employing a linear programming relaxation. We evaluate the performance of our parser on data in several natural languages, achieving improvements over existing state-of-the-art methods.", "sections": [{"heading": "Introduction", "text": "Much attention has recently been devoted to integer linear programming (ILP) formulations of NLP problems, with interesting results in applications like semantic role labeling (Roth and Yih, 2005;Punyakanok et al., 2004), dependency parsing (Riedel and Clarke, 2006), word alignment for machine translation (Lacoste-Julien et al., 2006), summarization (Clarke and Lapata, 2008), and coreference resolution (Denis and Baldridge, 2007), among others. In general, the rationale for the development of ILP formulations is to incorporate non-local features or global constraints, which are often difficult to handle with traditional algorithms. ILP formulations focus more on the modeling of problems, rather than algorithm design. While solving an ILP is NP-hard in general, fast solvers are available today that make it a practical solution for many NLP problems.\nThis paper presents new, concise ILP formulations for projective and non-projective depen-dency parsing. We believe that our formulations can pave the way for efficient exploitation of global features and constraints in parsing applications, leading to more powerful models. Riedel and Clarke (2006) cast dependency parsing as an ILP, but efficient formulations remain an open problem. Our formulations offer the following comparative advantages:\n\u2022 The numbers of variables and constraints are polynomial in the sentence length, as opposed to requiring exponentially many constraints, eliminating the need for incremental procedures like the cutting-plane algorithm;\n\u2022 LP relaxations permit fast online discriminative training of the constrained model;\n\u2022 Soft constraints may be automatically learned from data. In particular, our formulations handle higher-order arc interactions (like siblings and grandparents), model word valency, and can learn to favor nearly-projective parses.\nWe evaluate the performance of the new parsers on standard parsing tasks in seven languages. The techniques that we present are also compatible with scenarios where expert knowledge is available, for example in the form of hard or soft firstorder logic constraints (Richardson and Domingos, 2006;Chang et al., 2008).\n2 Dependency Parsing", "publication_ref": ["b27", "b23", "b25", "b15", "b6", "b9", "b25", "b24", "b4"], "figure_ref": [], "table_ref": []}, {"heading": "Preliminaries", "text": "A dependency tree is a lightweight syntactic representation that attempts to capture functional relationships between words. Lately, this formalism has been used as an alternative to phrase-based parsing for a variety of tasks, ranging from machine translation (Ding and Palmer, 2005) to relation extraction (Culotta and Sorensen, 2004) and question answering (Wang et al., 2007). Let us first describe formally the set of legal dependency parse trees. Consider a sentence x = w 0 , . . . , w n , where w i denotes the word at the ith position, and w 0 = $ is a wall symbol. We form the (complete 1 ) directed graph D = V, A , with vertices in V = {0, . . . , n} (the i-th vertex corresponding to the i-th word) and arcs in A = V 2 . Using terminology from graph theory, we say that B \u2286 A is an r-arborescence 2 of the directed graph D if V, B is a (directed) tree rooted at r. We define the set of legal dependency parse trees of x (denoted Y(x)) as the set of 0-arborescences of D, i.e., we admit each arborescence as a potential dependency tree.\nLet y \u2208 Y(x) be a legal dependency tree for x; if the arc a = i, j \u2208 y, we refer to i as the parent of j (denoted i = \u03c0(j)) and j as a child of i. We also say that a is projective (in the sense of Kahane et al., 1998) if any vertex k in the span of a is reachable from i (in other words, if for any k satisfying min(i, j) < k < max(i, j), there is a directed path in y from i to k). A dependency tree is called projective if it only contains projective arcs. Fig. 1 illustrates this concept. 3 The formulation to be introduced in \u00a73 makes use of the notion of the incidence vector associated with a dependency tree y \u2208 Y(x). This is the binary vector z z a a\u2208A with each component defined as z a = I(a \u2208 y) (here, I(.) denotes the indicator function). Considering simultaneously all incidence vectors of legal dependency trees and taking the convex hull, we obtain a polyhedron that we call the arborescence polytope, denoted by Z(x). Each vertex of Z(x) can be identified with a dependency tree in Y(x). The Minkowski-Weyl theorem (Rockafellar, 1970) ensures that Z(x) has a representation of the form Z(x) = {z \u2208 R |A| | Az \u2264 b}, for some p-by-|A| matrix A and some vector b in R p . However, it is not easy to obtain a compact representation (where p grows polynomially with the number of words n). In \u00a73, we will provide a compact representation of an outer polytopeZ(x) \u2287 Z(x) whose integer vertices correspond to dependency trees. Hence, the problem of finding the dependency tree that maximizes some linear function of the inci- 1 The general case where A \u2286 V 2 is also of interest; it arises whenever a constraint or a lexicon forbids some arcs from appearing in dependency tree. It may also arise as a consequence of a first-stage pruning step where some candidate arcs are eliminated; this will be further discussed in \u00a74.\n2 Or \"directed spanning tree with designated root r.\"\n3 In this paper, we consider unlabeled dependency parsing, where only the backbone structure (i.e., the arcs without the labels depicted in Fig. 1) is to be predicted.  those that assume each dependency decision is independent modulo the global structural constraint that dependency graphs must be trees. Such models are commonly referred to as edge-factored since their parameters factor relative to individual edges of the graph (Paskin, 2001;McDonald et al., 2005a). Edge-factored models have many computational benefits, most notably that inference for nonprojective dependency graphs can be achieved in polynomial time (McDonald et al., 2005b). The primary problem in treating each dependency as independent is that it is not a realistic assumption. Non-local information, such as arity (or valency) and neighbouring dependencies, can be crucial to obtaining high parsing accuracies (Klein and Manning, 2002;McDonald and Pereira, 2006). However, in the data-driven parsing setting this can be partially adverted by incorporating rich feature representations over the input (McDonald et al., 2005a).\nThe goal of this work is to further our current understanding of the computational nature of nonprojective parsing algorithms for both learning and inference within the data-driven setting. We start by investigating and extending the edge-factored model of McDonald et al. (2005b). In particular, we appeal to the Matrix Tree Theorem for multi-digraphs to design polynomial-time algorithms for calculating both the partition function and edge expectations over all possible dependency graphs for a given sentence. To motivate these algorithms, we show that they can be used in many important learning and inference problems including min-risk decoding, training globally normalized log-linear models, syntactic language modeling, and unsupervised learning via the E previously been implementations\nWe   those that assume each dependency decision is independent modulo the global structural constraint that dependency graphs must be trees. Such models are commonly referred to as edge-factored since their parameters factor relative to individual edges of the graph (Paskin, 2001;McDonald et al., 2005a). Edge-factored models have many computational benefits, most notably that inference for nonprojective dependency graphs can be achieved in polynomial time (McDonald et al., 2005b). The primary problem in treating each dependency as independent is that it is not a realistic assumption. Non-local information, such as arity (or valency) and neighbouring dependencies, can be crucial to obtaining high parsing accuracies (Klein and Manning, 2002;McDonald and Pereira, 2006). However, in the data-driven parsing setting this can be partially adverted by incorporating rich feature representations over the input (McDonald et al., 2005a).\nThe goal of this work is to further our current understanding of the computational nature of nonprojective parsing algorithms for both learning and inference within the data-driven setting. We start by investigating and extending the edge-factored model of McDonald et al. (2005b). In particular, we appeal to the Matrix Tree Theorem for multi-digraphs to design polynomial-time algorithms for calculating both the partition function and edge expectations over all possible dependency graphs for a given sentence. To motivate these algorithms, we show that they can be used in many important learning and inference problems including min-risk decoding, training globally normalized log-linear models, syntactic language modeling, and unsupervised learning via the E previously been k implementations.\nWe then switch non-local informa bouring parse dec ity constraints we nian graph proble lem is intractabl parse decisions, and Pereira (2006 neighbourhoods tion to modeling sequence of thes exact non-project for any model ass by the edge-facto dence vectors can be cast as an ILP. A similar idea was applied to word alignment by Lacoste-Julien et al. (2006), where permutations (rather than arborescences) were the combinatorial structure being requiring representation.\nLetting X denote the set of possible sentences, define Y\nx\u2208X Y(x). Given a labeled dataset L\nx 1 , y 1 , . . . , x m , y m \u2208 (X \u00d7 Y) m , we aim to learn a parser, i.e., a function h : X \u2192 Y that given x \u2208 X outputs a legal dependency parse y \u2208 Y(x). The fact that there are exponentially many candidates in Y(x) makes dependency parsing a structured classification problem.", "publication_ref": ["b10", "b8", "b32", "b14", "b26", "b19", "b19", "b15"], "figure_ref": ["fig_0", "fig_0"], "table_ref": []}, {"heading": "Arc Factorization and Locality", "text": "There has been much recent work on dependency parsing using graph-based, transition-based, and hybrid methods; see Nivre and McDonald (2008) for an overview. Typical graph-based methods consider linear classifiers of the form h w (x) = argmax y\u2208Y w f (x, y),\nwhere f (x, y) is a vector of features and w is the corresponding weight vector. One wants h w to have small expected loss; the typical loss function is the Hamming loss, (y ; y) |{ i, j \u2208 y : i, j / \u2208 y}|. Tractability is usually ensured by strong factorization assumptions, like the one underlying the arc-factored model (Eisner, 1996;McDonald et al., 2005), which forbids any feature that depends on two or more arcs. This induces a decomposition of the feature vector f (x, y) as:\nf (x, y) = a\u2208y f a (x).\n(2)\nUnder this decomposition, each arc receives a score; parsing amounts to choosing the configuration that maximizes the overall score, which, as shown by McDonald et al. (2005), is an instance of the maximal arborescence problem. Combinatorial algorithms (Chu and Liu, 1965;Edmonds, 1967) can solve this problem in cubic time. 4 If the dependency parse trees are restricted to be projective, cubic-time algorithms are available via dynamic programming (Eisner, 1996). While in the projective case, the arc-factored assumption can be weakened in certain ways while maintaining polynomial parser runtime (Eisner and Satta, 1999) ", "publication_ref": ["b22", "b13", "b21", "b21", "b5", "b11", "b13", "b12"], "figure_ref": [], "table_ref": []}, {"heading": "Dependency Parsing as an ILP", "text": "Our approach will build a graph-based parser without the drawback of a restriction to local features. By formulating inference as an ILP, nonlocal features can be easily accommodated in our model; furthermore, by using a relaxation technique we can still make learning tractable. The impact of LP-relaxed inference in the learning problem was studied elsewhere (Martins et al., 2009). A linear program (LP) is an optimization problem of the form\nmin x\u2208R d c x s.t. Ax \u2264 b.(3)\nIf the problem is feasible, the optimum is attained at a vertex of the polyhedron that defines the constraint space. If we add the constraint x \u2208 Z d , then the above is called an integer linear program (ILP). For some special parameter settings-e.g., when b is an integer vector and A is totally unimodular 5 -all vertices of the constraining polyhedron are integer points; in these cases, the integer constraint may be suppressed and ( 3) is guaranteed to have integer solutions (Schrijver, 2003). Of course, this need not happen: solving a general ILP is an NP-complete problem. Despite this fact, fast solvers are available today that make this a practical solution for many problems. Their performance depends on the dimensions and degree of sparsity of the constraint matrix A. Riedel and Clarke (2006) proposed an ILP formulation for dependency parsing which refines the arc-factored model by imposing linguistically motivated \"hard\" constraints that forbid some arc configurations. Their formulation includes an exponential number of constraints-one for each possible cycle. Since it is intractable to throw in all constraints at once, they propose a cuttingplane algorithm, where the cycle constraints are only invoked when violated by the current solution. The resulting algorithm is still slow, and an arc-factored model is used as a surrogate during training (i.e., the hard constraints are only used at test time), which implies a discrepancy between the model that is optimized and the one that is actually going to be used.\nHere, we propose ILP formulations that eliminate the need for cycle constraints; in fact, they require only a polynomial number of constraints. Not only does our model allow expert knowledge to be injected in the form of constraints, it is also capable of learning soft versions of those constraints from data; indeed, it can handle features that are not arc-factored (correlating, for example, siblings and grandparents, modeling valency, or preferring nearly projective parses). While, as pointed out by McDonald and Satta (2007), the inclusion of these features makes inference NPhard, by relaxing the integer constraints we obtain approximate algorithms that are very efficient and competitive with state-of-the-art methods. In this paper, we focus on unlabeled dependency parsing, for clarity of exposition. If it is extended to labeled parsing (a straightforward extension), our formulation fully subsumes that of Riedel and Clarke (2006), since it allows using the same hard constraints and features while keeping the ILP polynomial in size.", "publication_ref": ["b18", "b28", "b25", "b20", "b25"], "figure_ref": [], "table_ref": []}, {"heading": "The Arborescence Polytope", "text": "We start by describing our constraint space. Our formulations rely on a concise polyhedral representation of the set of candidate dependency parse trees, as sketched in \u00a72.1. This will be accomplished by drawing an analogy with a network flow problem.\nLet D = V, A be the complete directed graph associated with a sentence x \u2208 X , as stated in \u00a72. A subgraph y = V, B is a legal dependency tree (i.e., y \u2208 Y(x)) if and only if the following conditions are met:\n1. Each vertex in V \\ {0} must have exactly one incoming arc in B, 2. 0 has no incoming arcs in B, 3. B does not contain cycles.\nFor each vertex v \u2208 V , let \u03b4 \u2212 (v) { i, j \u2208 A | j = v} denote its set of incoming arcs, and \u03b4 + (v)\n{ i, j \u2208 A | i = v} denote its set of outgoing arcs. The two first conditions can be easily expressed by linear constraints on the incidence vector z:\na\u2208\u03b4 \u2212 (j) z a = 1, j \u2208 V \\ {0} (4\n)\na\u2208\u03b4 \u2212 (0) z a = 0 (5)\nCondition 3 is somewhat harder to express. Rather than adding exponentially many constraints, one for each potential cycle (like Riedel and Clarke, 2006), we equivalently replace condition 3 by 3 . B is connected.\nNote that conditions 1-2-3 are equivalent to 1-2-3 , in the sense that both define the same set Y(x). However, as we will see, the latter set of conditions is more convenient. Connectedness of graphs can be imposed via flow constraints (by requiring that, for any v \u2208 V \\ {0}, there is a directed path in B connecting 0 to v). We adapt the single commodity flow formulation for the (undirected) minimum spanning tree problem, due to Magnanti and Wolsey (1994), that requires O(n 2 ) variables and constraints. Under this model, the root node must send one unit of flow to every other node. By making use of extra variables, \u03c6 \u03c6 a a\u2208A , to denote the flow of commodities through each arc, we are led to the following constraints in addition to Eqs. 4-5 (we denote U [0, 1], and B {0, 1} = U \u2229 Z):\n\u2022 Root sends flow n:\na\u2208\u03b4 + (0) \u03c6 a = n (6)\n\u2022 Each node consumes one unit of flow:\na\u2208\u03b4 \u2212 (j) \u03c6 a \u2212 a\u2208\u03b4 + (j) \u03c6 a = 1, j \u2208 V \\ {0} (7)\n\u2022 Flow is zero on disabled arcs: \u03c6 a \u2264 nz a , a \u2208 A (8)\n\u2022 Each arc indicator lies in the unit interval:\nz a \u2208 U, a \u2208 A.(9)\nThese constraints project an outer bound of the arborescence polytope, i.e.,\nZ(x) {z \u2208 R |A| | (z, \u03c6) satisfy (4-9)} \u2287 Z(x).(10)\nFurthermore, the integer points ofZ(x) are precisely the incidence vectors of dependency trees in Y(x); these are obtained by replacing Eq. 9 by z a \u2208 B, a \u2208 A.\n(11)", "publication_ref": ["b25", "b16"], "figure_ref": [], "table_ref": []}, {"heading": "Arc-Factored Model", "text": "Given our polyhedral representation of (an outer bound of) the arborescence polytope, we can now formulate dependency parsing with an arcfactored model as an ILP. By storing the arclocal feature vectors into the columns of a matrix F(x) [f a (x)] a\u2208A , and defining the score vector s F(x) w (each entry is an arc score) the inference problem can be written as\nmax y\u2208Y(x) w f (x, y) = max z\u2208Z(x) w F(x)z = max z,\u03c6 s z s.t. A z \u03c6 \u2264 b z \u2208 B (12\n)\nwhere A is a sparse constraint matrix (with O(|A|) non-zero elements), and b is the constraint vector; A and b encode the constraints (4-9). This is an ILP with O(|A|) variables and constraints (hence, quadratic in n); if we drop the integer constraint the problem becomes the LP relaxation. As is, this formulation is no more attractive than solving the problem with the existing combinatorial algorithms discussed in \u00a72.2; however, we can now start adding non-local features to build a more powerful model.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Sibling and Grandparent Features", "text": "To cope with higher-order features of the form f a 1 ,...,a K (x) (i.e., features whose values depend on the simultaneous inclusion of arcs a 1 , . . . , a K on a candidate dependency tree), we employ a linearization trick (Boros and Hammer, 2002), defining extra variables z a 1 ...a K z a 1 \u2227 . . . \u2227 z a K . This logical relation can be expressed by the following O(K) agreement constraints: 6\nz a 1 ...a K \u2264 z a i , i = 1, . . . , K z a 1 ...a K \u2265 K i=1 z a i \u2212 K + 1. (13\n)\nAs shown by McDonald and Pereira (2006) and Carreras (2007), the inclusion of features that correlate sibling and grandparent arcs may be highly beneficial, even if doing so requires resorting to approximate algorithms. 7 Define R sibl { i, j, k | i, j \u2208 A, i, k \u2208 A} and R grand { i, j, k | i, j \u2208 A, j, k \u2208 A}. To include such features in our formulation, we need to add extra variables z sibl z r r\u2208R sibl and z grand z r r\u2208R grand that indicate the presence of sibling and grandparent arcs. Observe that these indicator variables are conjunctions of arc indicator variables, i.e., z sibl ijk = z ij \u2227 z ik and z grand ijk = z ij \u2227 z jk . Hence, these features can be handled in our formulation by adding the following O(|A| \u2022 |V |) variables and constraints:\nz sibl ijk \u2264 z ij , z sibl ijk \u2264 z ik , z sibl ijk \u2265 z ij + z ik \u2212 1(14)\nfor all triples i, j, k \u2208 R sibl , and\nz grand ijk \u2264 z ij , z grand ijk \u2264 z jk , z grand ijk \u2265 z ij +z jk \u22121\n(15) for all triples i, j, k \u2208 R grand . Let R A \u222a R sibl \u222a R grand ; by redefining z z r r\u2208R and F(x) [f r (x)] r\u2208R , we may express our inference problem as in Eq. 12, with O(|A| \u2022 |V |) variables and constraints.\nNotice that the strategy just described to handle sibling features is not fully compatible with the features proposed by Eisner (1996) for projective parsing, as the latter correlate only consecutive siblings and are also able to place special features on the first child of a given word. The ability to handle such \"ordered\" features is intimately associated with Eisner's dynamic programming parsing algorithm and with the Markovian assumptions made explicitly by his generative model. We next show how similar features 6 Actually, any logical condition can be encoded with linear constraints involving binary variables; see e.g. Clarke and Lapata (2008) for an overview.\n7 By sibling features we mean features that depend on pairs of sibling arcs (i.e., of the form i, j and i, k ); by grandparent features we mean features that depend on pairs of grandparent arcs (of the form i, j and j, k ). can be incorporated in our model by adding \"dynamic\" constraints to our ILP. Define:\nz next sibl ijk \uf8f1 \uf8f4 \uf8f2 \uf8f4 \uf8f3\n1 if i, j and i, k are consecutive siblings, 0 otherwise,\nz first child ij 1 if j is the first child of i, 0 otherwise.\nSuppose (without loss of generality) that i < j < k \u2264 n. We could naively compose the constraints ( 14) with additional linear constraints that encode the logical relation\nz next sibl ijk = z sibl ijk \u2227 j<l<k \u00acz il ,\nbut this would yield a constraint matrix with O(n 4 ) non-zero elements. Instead, we define auxiliary variables \u03b2 jk and \u03b3 ij :\n\u03b2 jk = 1, if \u2203l s.t. \u03c0(l) = \u03c0(j) < j < l < k 0, otherwise, \u03b3 ij = 1, if \u2203k s.t. i < k < j and i, k \u2208 y 0, otherwise. (16\n)\nThen, we have that z next sibl ijk = z sibl ijk \u2227 (\u00ac\u03b2 jk ) and z first child ij = z ij \u2227 (\u00ac\u03b3 ij ), which can be encoded via\nz next sibl ijk \u2264 z sibl ijk z first child ij \u2264 z ij z next sibl ijk \u2264 1 \u2212 \u03b2 jk z first child ij \u2264 1 \u2212 \u03b3 ij z next sibl ijk \u2265 z sibl ijk \u2212 \u03b2 jk z first child ij \u2265 z ij \u2212 \u03b3 ij\nThe following \"dynamic\" constraints encode the logical relations for the auxiliary variables (16):\n\u03b2 j(j+1) = 0 \u03b3 i(i+1) = 0 \u03b2 j(k+1) \u2265 \u03b2 jk \u03b3 i(j+1) \u2265 \u03b3 ij \u03b2 j(k+1) \u2265 i<j z sibl ijk \u03b3 i(j+1) \u2265 z ij \u03b2 j(k+1) \u2264 \u03b2 jk + i<j z sibl ijk \u03b3 i(j+1) \u2264 \u03b3 ij + z ij\nAuxiliary variables and constraints are defined analogously for the case n \u2265 i > j > k. This results in a sparser constraint matrix, with only O(n 3 ) non-zero elements.", "publication_ref": ["b0", "b19", "b3", "b13", "b6"], "figure_ref": [], "table_ref": []}, {"heading": "Valency Features", "text": "A crucial fact about dependency grammars is that words have preferences about the number and arrangement of arguments and modifiers they accept. Therefore, it is desirable to include features that indicate, for a candidate arborescence, how many outgoing arcs depart from each vertex; denote these quantities by v i a\u2208\u03b4 + (i) z a , for each i \u2208 V . We call v i the valency of the ith vertex. We add valency indicators z val ik I(v i = k) for i \u2208 V and k = 0, . . . , n \u2212 1. This way, we are able to penalize candidate dependency trees that assign unusual valencies to some of their vertices, by specifying a individual cost for each possible value of valency. The following O(|V | 2 ) constraints encode the agreement between valency indicators and the other variables:\nn\u22121 k=0 kz val ik = a\u2208\u03b4 + (i) z a , i \u2208 V (17) n\u22121 k=0 z val ik = 1, i \u2208 V z val ik \u2265 0, i \u2208 V, k \u2208 {0, . . . , n \u2212 1}", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Projectivity Features", "text": "For most languages, dependency parse trees tend to be nearly projective (cf. Buchholz and Marsi, 2006). We wish to make our model capable of learning to prefer \"nearly\" projective parses whenever that behavior is observed in the data.\nThe multicommodity directed flow model of Magnanti and Wolsey (1994) is a refinement of the model described in \u00a73.1 which offers a compact and elegant way to indicate nonprojective arcs, requiring O(n 3 ) variables and constraints. In this model, every node k = 0 defines a commodity: one unit of commodity k originates at the root node and must be delivered to node k; the variable \u03c6 k ij denotes the flow of commodity k in arc i, j . We first replace (4-9) by (18-22):\n\u2022 The root sends one unit of commodity to each node:\na\u2208\u03b4 \u2212 (0) \u03c6 k a \u2212 a\u2208\u03b4 + (0) \u03c6 k a = \u22121, k \u2208 V \\ {0} (18)\n\u2022 Any node consumes its own commodity and no other:\na\u2208\u03b4 \u2212 (j) \u03c6 k a \u2212 a\u2208\u03b4 + (j) \u03c6 k a = \u03b4 k j , j, k \u2208 V \\ {0} (19)\nwhere \u03b4 k j I(j = k) is the Kronecker delta. \u2022 Disabled arcs do not carry any flow:\n\u03c6 k a \u2264 z a , a \u2208 A, k \u2208 V(20)\n\u2022 There are exactly n enabled arcs:\na\u2208A z a = n(21)\n\u2022 All variables lie in the unit interval:\nz a \u2208 U, \u03c6 k a \u2208 U, a \u2208 A, k \u2208 V (22)\nWe next define auxiliary variables \u03c8 jk that indicate if there is a path from j to k. Since each vertex except the root has only one incoming arc, the following linear equalities are enough to describe these new variables: From the definition of projective arcs in \u00a72.1, we have that z np a = 1 if and only if the arc is active (z a = 1) and there is some vertex k in the span of a = i, j such that \u03c8 ik = 0. We are led to the following O(|A|\n\u03c8 jk = a\u2208\u03b4 \u2212 (j) \u03c6 k a , j, k \u2208 V \\ {0} \u03c8 0k = 1, k \u2208 V \\ {0}. (23\n\u2022 |V |) constraints for i, j \u2208 A: z np ij \u2264 z ij z np ij \u2265 z ij \u2212 \u03c8 ik , min(i, j) \u2264 k \u2264 max(i, j) z np ij \u2264 \u2212 max(i,j)\u22121 k=min(i,j)+1 \u03c8 ik + |j \u2212 i| \u2212 1\nThere are other ways to introduce nonprojectivity indicators and alternative definitions of \"nonprojective arc.\" For example, by using dynamic constraints of the same kind as those in \u00a73.3, we can indicate arcs that \"cross\" other arcs with O(n 3 ) variables and constraints, and a cubic number of non-zero elements in the constraint matrix (omitted for space).", "publication_ref": ["b1", "b16"], "figure_ref": [], "table_ref": []}, {"heading": "Projective Parsing", "text": "It would be straightforward to adapt the constraints in \u00a73.5 to allow only projective parse trees: simply force z np a = 0 for any a \u2208 A. But there are more efficient ways of accomplish this. While it is difficult to impose projectivity constraints or cycle constraints individually, there is a simpler way of imposing both. Consider 3 (or 3 ) from \u00a73.1.\nProposition 1 Replace condition 3 (or 3 ) with 3 . If i, j \u2208 B, then, for any k = 1, . . . , n such that k = j, the parent of k must satisfy (defining i min(i, j) and j max(i, j)):\n\uf8f1 \uf8f4 \uf8f2 \uf8f4 \uf8f3 i \u2264 \u03c0(k) \u2264 j , if i < k < j , \u03c0(k) < i \u2228 \u03c0(k) > j , if k < i or k > j or k = i.\nThen, Y(x) will be redefined as the set of projective dependency parse trees.\nWe omit the proof for space. Conditions 1, 2, and 3 can be encoded with O(n 2 ) constraints.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Experiments", "text": "We report experiments on seven languages, six (Danish, Dutch, Portuguese, Slovene, Swedish and Turkish) from the CoNLL-X shared task (Buchholz and Marsi, 2006), and one (English) from the CoNLL-2008 shared task (Surdeanu et al., 2008). 8 All experiments are evaluated using the unlabeled attachment score (UAS), using the default settings. 9 We used the same arc-factored features as McDonald et al. (2005) (included in the MSTParser toolkit 10 ); for the higher-order models described in \u00a73.3-3.5, we employed simple higher order features that look at the word, part-of-speech tag, and (if available) morphological information of the words being correlated through the indicator variables. For scalability (and noting that some of the models require O(|V | \u2022 |A|) constraints and variables, which, when A = V 2 , grows cubically with the number of words), we first prune the base graph by running a simple algorithm that ranks the k-best candidate parents for each word in the sentence (we set k = 10); this reduces the number of candidate arcs to |A| = kn. 11 This strategy is similar to the one employed by Carreras et al. (2008) to prune the search space of the actual parser. The ranker is a local model trained using a max-margin criterion; it is arc-factored and not subject to any structural constraints, so it is very fast. The actual parser was trained via the online structured passive-aggressive algorithm of Crammer et al. (2006); it differs from the 1-best MIRA algorithm of McDonald et al. (2005) by solving a sequence of loss-augmented inference problems. 12 The number of iterations was set to 10.\nThe results are summarized in Table 1; for the sake of comparison, we reproduced three strong baselines, all of them state-of-the-art parsers based on non-arc-factored models: the second order model of McDonald and Pereira (2006), the hybrid model of Nivre and McDonald (2008), which combines a (labeled) transition-based and a graphbased parser, and a refinement of the latter, due to Martins et al. (2008), which attempts to approximate non-local features. 13 We did not reproduce the model of Riedel and Clarke (2006) since the latter is tailored for labeled dependency parsing; however, experiments reported in that paper for Dutch (and extended to other languages in the CoNLL-X task) suggest that their model performs worse than our three baselines.\nBy looking at the middle four columns, we can see that adding non-arc-factored features makes the models more accurate, for all languages. With the exception of Portuguese, the best results are achieved with the full set of features. We can also observe that, for some languages, the valency features do not seem to help. Merely modeling the number of dependents of a word may not be as valuable as knowing what kinds of dependents they are (for example, distinguishing among arguments and adjuncts).\nComparing with the baselines, we observe that our full model outperforms that of McDonald and Pereira (2006), and is in line with the most accurate dependency parsers (Nivre and McDonald, 2008;Martins et al., 2008), obtained by combining transition-based and graph-based parsers. 14 Notice that our model, compared with these hybrid parsers, has the advantage of not requiring an ensemble configuration (eliminating, for example, the need to tune two parsers). Unlike the ensembles, it directly handles non-local output features by optimizing a single global objective. Perhaps more importantly, it makes it possible to exploit expert knowledge through the form of hard global constraints. Although not pursued here, the same kind of constraints employed by Riedel and Clarke (2006) can straightforwardly fit into our model, after extending it to perform labeled dependency parsing. We believe that a careful design of fea-13 Unlike our model, the hybrid models used here as baselines make use of the dependency labels at training time; indeed, the transition-based parser is trained to predict a labeled dependency parse tree, and the graph-based parser use these predicted labels as input features. Our model ignores this information at training time; therefore, this comparison is slightly unfair to us.\n14 See also Zhang and Clark (2008) for a different approach that combines transition-based and graph-based methods.\n[   McDonald and Pereira (2006) and the hybrid models of Nivre and McDonald (2008) and Martins et al. (2008). The four middle columns show the performance of our model using exact (ILP) inference at test time, for increasing sets of features (see \u00a73.2- \u00a73.5). The rightmost column shows the results obtained with the full set of features using relaxed LP inference followed by projection onto the feasible set. Differences are with respect to exact inference for the same set of features. Bold indicates the best result for a language. As for overall performance, both the exact and relaxed full model outperform the arcfactored model and the second order model of McDonald and Pereira (2006) with statistical significance (p < 0.01) according to Dan Bikel's randomized method (http://www.cis.upenn.edu/ \u223c dbikel/software.html).\nM P 0 6 ] [ N M 0 8 ] [ M D S X 0 8 ] A R C -F A C T O R E D + S I B L / G R A N D P . + V A L E N C Y + P R O J . ( F U L L ) F U L L , R E L A X E\ntures and constraints can lead to further improvements on accuracy.\nWe now turn to a different issue: scalability. In previous work (Martins et al., 2009), we showed that training the model via LP-relaxed inference (as we do here) makes it learn to avoid fractional solutions; as a consequence, ILP solvers will converge faster to the optimum (on average). Yet, it is known from worst case complexity theory that solving a general ILP is NP-hard; hence, these solvers may not scale well with the sentence length. Merely considering the LP-relaxed version of the problem at test time is unsatisfactory, as it may lead to a fractional solution (i.e., a solution whose components indexed by arcs,z = z a a\u2208A , are not all integer), which does not correspond to a valid dependency tree. We propose the following approximate algorithm to obtain an actual parse: first, solve the LP relaxation (which can be done in polynomial time with interior-point methods); then, if the solution is fractional, project it onto the feasible set Y(x). Fortunately, the Euclidean projection can be computed in a straightforward way by finding a maximal arborescence in the directed graph whose weights are defined byz (we omit the proof for space); as we saw in \u00a72.2, the Chu-Liu-Edmonds algorithm can do this in polynomial time. The overall parsing runtime becomes polynomial with respect to the length of the sentence.\nThe last column of Table 1 compares the accuracy of this approximate method with the exact one. We observe that there is not a substantial drop in accuracy; on the other hand, we observed a considerable speed-up with respect to exact inference, particularly for long sentences. The av-erage runtime (across all languages) is 0.632 seconds per sentence, which is in line with existing higher-order parsers and is much faster than the runtimes reported by Riedel and Clarke (2006).", "publication_ref": ["b1", "b30", "b21", "b2", "b7", "b21", "b19", "b22", "b17", "b25", "b19", "b22", "b17", "b25", "b33", "b19", "b22", "b17", "b19", "b18", "b25"], "figure_ref": [], "table_ref": ["tab_3", "tab_3"]}, {"heading": "Conclusions", "text": "We presented new dependency parsers based on concise ILP formulations. We have shown how non-local output features can be incorporated, while keeping only a polynomial number of constraints. These features can act as soft constraints whose penalty values are automatically learned from data; in addition, our model is also compatible with expert knowledge in the form of hard constraints. Learning through a max-margin framework is made effective by the means of a LPrelaxation. Experimental results on seven languages show that our rich-featured parsers outperform arc-factored and approximate higher-order parsers, and are in line with stacked parsers, having with respect to the latter the advantage of not requiring an ensemble configuration.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Acknowledgments", "text": "The authors thank the reviewers for their comments. Martins   ", "publication_ref": [], "figure_ref": [], "table_ref": []}], "references": [{"ref_id": "b0", "title": "Pseudo-Boolean optimization", "journal": "Discrete Applied Mathematics", "year": "2002", "authors": "E Boros; P L Hammer"}, {"ref_id": "b1", "title": "CoNLL-X shared task on multilingual dependency parsing", "journal": "", "year": "2006", "authors": "S Buchholz; E Marsi"}, {"ref_id": "b2", "title": "TAG, dynamic programming, and the perceptron for efficient, feature-rich parsing", "journal": "", "year": "2008", "authors": "X Carreras; M Collins; T Koo"}, {"ref_id": "b3", "title": "Experiments with a higher-order projective dependency parser", "journal": "", "year": "2007", "authors": "X Carreras"}, {"ref_id": "b4", "title": "Constraints as prior knowledge", "journal": "", "year": "2008", "authors": "M Chang; L Ratinov; D Roth"}, {"ref_id": "b5", "title": "On the shortest arborescence of a directed graph", "journal": "Science Sinica", "year": "1965", "authors": "Y J Chu; T H Liu"}, {"ref_id": "b6", "title": "Global inference for sentence compression an integer linear programming approach", "journal": "JAIR", "year": "2008", "authors": "J Clarke; M Lapata"}, {"ref_id": "b7", "title": "Online passive-aggressive algorithms", "journal": "JMLR", "year": "2006", "authors": "K Crammer; O Dekel; J Keshet; S Shalev-Shwartz; Y Singer"}, {"ref_id": "b8", "title": "Dependency tree kernels for relation extraction", "journal": "", "year": "2004", "authors": "A Culotta; J Sorensen"}, {"ref_id": "b9", "title": "Joint determination of anaphoricity and coreference resolution using integer programming", "journal": "", "year": "2007", "authors": "P Denis; J Baldridge"}, {"ref_id": "b10", "title": "Machine translation using probabilistic synchronous dependency insertion grammar", "journal": "", "year": "2005", "authors": "Y Ding; M Palmer"}, {"ref_id": "b11", "title": "Optimum branchings", "journal": "Journal of Research of the National Bureau of Standards", "year": "1967", "authors": "J Edmonds"}, {"ref_id": "b12", "title": "Efficient parsing for bilexical context-free grammars and head automaton grammars", "journal": "", "year": "1999", "authors": "J Eisner; G Satta"}, {"ref_id": "b13", "title": "Three new probabilistic models for dependency parsing: An exploration", "journal": "", "year": "1996", "authors": "J Eisner"}, {"ref_id": "b14", "title": "Pseudoprojectivity: a polynomially parsable non-projective dependency grammar", "journal": "", "year": "1998", "authors": "S Kahane; A Nasr; O Rambow"}, {"ref_id": "b15", "title": "Word alignment via quadratic assignment", "journal": "", "year": "2006", "authors": "S Lacoste-Julien; B Taskar; D Klein; M I Jordan"}, {"ref_id": "b16", "title": "Optimal Trees", "journal": "", "year": "1994", "authors": "T L Magnanti; L A Wolsey"}, {"ref_id": "b17", "title": "Stacking dependency parsers", "journal": "", "year": "2008", "authors": "A F T Martins; D Das; N A Smith; E P Xing"}, {"ref_id": "b18", "title": "Polyhedral outer approximations with application to natural language parsing", "journal": "", "year": "2009", "authors": "A F T Martins; N A Smith; E P Xing"}, {"ref_id": "b19", "title": "Online learning of approximate dependency parsing algorithms", "journal": "", "year": "2006", "authors": "R T Mcdonald; F C N Pereira"}, {"ref_id": "b20", "title": "On the complexity of non-projective data-driven dependency parsing", "journal": "", "year": "2007", "authors": "R Mcdonald; G Satta"}, {"ref_id": "b21", "title": "Non-projective dependency parsing using spanning tree algorithms", "journal": "", "year": "2005", "authors": "R T Mcdonald; F Pereira; K Ribarov; J Haji\u010d"}, {"ref_id": "b22", "title": "Integrating graphbased and transition-based dependency parsers", "journal": "", "year": "2008", "authors": "J Nivre; R Mcdonald"}, {"ref_id": "b23", "title": "Semantic role labeling via integer linear programming inference", "journal": "", "year": "2004", "authors": "V Punyakanok; D Roth; W Yih; D Zimak"}, {"ref_id": "b24", "title": "Markov logic networks", "journal": "", "year": "2006", "authors": "M Richardson; P Domingos"}, {"ref_id": "b25", "title": "Incremental integer linear programming for non-projective dependency parsing", "journal": "", "year": "2006", "authors": "S Riedel; J Clarke"}, {"ref_id": "b26", "title": "Convex Analysis", "journal": "Princeton University Press", "year": "1970", "authors": "R T Rockafellar"}, {"ref_id": "b27", "title": "Integer linear programming inference for conditional random fields", "journal": "", "year": "2005", "authors": "D Roth; W T Yih"}, {"ref_id": "b28", "title": "Combinatorial Optimization: Polyhedra and Efficiency", "journal": "Algorithms and Combinatorics", "year": "2003", "authors": "A Schrijver"}, {"ref_id": "b29", "title": "Dependency parsing by belief propagation", "journal": "", "year": "2008", "authors": "D A Smith; J Eisner"}, {"ref_id": "b30", "title": "The conll-2008 shared task on joint parsing of syntactic and semantic dependencies", "journal": "", "year": "2008", "authors": "M Surdeanu; R Johansson; A Meyers; L M\u00e0rquez; J Nivre"}, {"ref_id": "b31", "title": "Finding optimum branchings. Networks", "journal": "", "year": "1977", "authors": "R E Tarjan"}, {"ref_id": "b32", "title": "What is the Jeopardy model? A quasi-synchronous grammar for QA", "journal": "", "year": "2007", "authors": "M Wang; N A Smith; T Mitamura"}, {"ref_id": "b33", "title": "A tale of two parsers: investigating and combining graphbased and transition-based dependency parsing using beam-search", "journal": "", "year": "2008", "authors": "Y Zhang; S Clark"}], "figures": [{"figure_label": "1", "figure_type": "figure", "figure_id": "fig_0", "figure_caption": "Figure 1 :1Figure 1: A projective dependency graph.", "figure_data": ""}, {"figure_label": "2", "figure_type": "figure", "figure_id": "fig_1", "figure_caption": "Figure 2 :2Figure 2: Non-projective dependency graph.", "figure_data": ""}, {"figure_label": "1", "figure_type": "figure", "figure_id": "fig_2", "figure_caption": "$Figure 1 :1Figure 1: A projective dependency graph.", "figure_data": ""}, {"figure_label": "2", "figure_type": "figure", "figure_id": "fig_3", "figure_caption": "Figure 2 :2Figure 2: Non-projective dependency graph.", "figure_data": ""}, {"figure_label": "1", "figure_type": "figure", "figure_id": "fig_4", "figure_caption": "Figure 1 :1Figure 1: A projective dependency parse (top), and a nonprojective dependency parse (bottom) for two English sentences; examples from McDonald and Satta (2007).", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_5", "figure_caption": "\u2208 y and a is nonprojective).", "figure_data": ""}, {"figure_label": "", "figure_type": "table", "figure_id": "tab_2", "figure_caption": "D DANISH 90.60 91.30 91.54 89.80 91.06 90.98 91.18 91.04 (-0.14) DUTCH 84.11 84.19 84.79 83.55 84.65 84.93 85.57 85.41 (-0.16) PORTUGUESE 91.40 91.81 92.11 90.66 92.11 92.01 91.42 91.44 (+0.02) SLOVENE 83.67 85.09 85.13 83.93 85.13 85.45 85.61 85.41 (-0.20) SWEDISH 89.05 90.54 90.50 89.09 90.50 90.34 90.60 90.52 (-0.08) TURKISH 75.30 75.68 76.36 75.16 76.20 76.08 76.34 76.", "figure_data": "32 (-0.02)ENGLISH90.85--90.15 91.13 91.12 91.16 91.14 (-0.02)"}, {"figure_label": "1", "figure_type": "table", "figure_id": "tab_3", "figure_caption": "Results for nonprojective dependency parsing (unlabeled attachment scores). The three baselines are the second order model of", "figure_data": ""}], "formulas": [{"formula_id": "formula_1", "formula_text": "f (x, y) = a\u2208y f a (x).", "formula_coordinates": [2.0, 366.96, 705.66, 98.91, 11.78]}, {"formula_id": "formula_2", "formula_text": "min x\u2208R d c x s.t. Ax \u2264 b.(3)", "formula_coordinates": [3.0, 136.04, 527.76, 154.23, 23.39]}, {"formula_id": "formula_3", "formula_text": "a\u2208\u03b4 \u2212 (j) z a = 1, j \u2208 V \\ {0} (4", "formula_coordinates": [4.0, 116.31, 294.46, 169.72, 11.75]}, {"formula_id": "formula_4", "formula_text": ")", "formula_coordinates": [4.0, 286.03, 294.81, 4.24, 9.46]}, {"formula_id": "formula_5", "formula_text": "a\u2208\u03b4 \u2212 (0) z a = 0 (5)", "formula_coordinates": [4.0, 118.99, 311.0, 171.28, 11.75]}, {"formula_id": "formula_6", "formula_text": "a\u2208\u03b4 + (0) \u03c6 a = n (6)", "formula_coordinates": [4.0, 148.65, 685.71, 141.62, 11.75]}, {"formula_id": "formula_7", "formula_text": "a\u2208\u03b4 \u2212 (j) \u03c6 a \u2212 a\u2208\u03b4 + (j) \u03c6 a = 1, j \u2208 V \\ {0} (7)", "formula_coordinates": [4.0, 87.11, 739.53, 203.16, 21.99]}, {"formula_id": "formula_8", "formula_text": "z a \u2208 U, a \u2208 A.(9)", "formula_coordinates": [4.0, 379.35, 141.84, 146.19, 10.63]}, {"formula_id": "formula_9", "formula_text": "Z(x) {z \u2208 R |A| | (z, \u03c6) satisfy (4-9)} \u2287 Z(x).(10)", "formula_coordinates": [4.0, 318.56, 204.7, 206.98, 28.84]}, {"formula_id": "formula_10", "formula_text": "max y\u2208Y(x) w f (x, y) = max z\u2208Z(x) w F(x)z = max z,\u03c6 s z s.t. A z \u03c6 \u2264 b z \u2208 B (12", "formula_coordinates": [4.0, 313.99, 457.87, 207.01, 91.58]}, {"formula_id": "formula_11", "formula_text": ")", "formula_coordinates": [4.0, 521.0, 539.99, 4.54, 9.46]}, {"formula_id": "formula_12", "formula_text": "z a 1 ...a K \u2264 z a i , i = 1, . . . , K z a 1 ...a K \u2265 K i=1 z a i \u2212 K + 1. (13", "formula_coordinates": [5.0, 107.0, 140.65, 178.72, 28.29]}, {"formula_id": "formula_13", "formula_text": ")", "formula_coordinates": [5.0, 285.72, 157.54, 4.54, 9.46]}, {"formula_id": "formula_14", "formula_text": "z sibl ijk \u2264 z ij , z sibl ijk \u2264 z ik , z sibl ijk \u2265 z ij + z ik \u2212 1(14)", "formula_coordinates": [5.0, 76.75, 398.46, 213.52, 25.6]}, {"formula_id": "formula_15", "formula_text": "z grand ijk \u2264 z ij , z grand ijk \u2264 z jk , z grand ijk \u2265 z ij +z jk \u22121", "formula_coordinates": [5.0, 72.0, 445.81, 220.97, 15.59]}, {"formula_id": "formula_16", "formula_text": "z next sibl ijk \uf8f1 \uf8f4 \uf8f2 \uf8f4 \uf8f3", "formula_coordinates": [5.0, 320.65, 98.61, 63.16, 39.25]}, {"formula_id": "formula_17", "formula_text": "z first child ij 1 if j is the first child of i, 0 otherwise.", "formula_coordinates": [5.0, 317.43, 148.27, 191.79, 23.36]}, {"formula_id": "formula_18", "formula_text": "z next sibl ijk = z sibl ijk \u2227 j<l<k \u00acz il ,", "formula_coordinates": [5.0, 349.56, 248.82, 133.7, 13.99]}, {"formula_id": "formula_19", "formula_text": "\u03b2 jk = 1, if \u2203l s.t. \u03c0(l) = \u03c0(j) < j < l < k 0, otherwise, \u03b3 ij = 1, if \u2203k s.t. i < k < j and i, k \u2208 y 0, otherwise. (16", "formula_coordinates": [5.0, 307.28, 328.06, 220.55, 74.12]}, {"formula_id": "formula_20", "formula_text": ")", "formula_coordinates": [5.0, 527.82, 392.71, 4.54, 9.46]}, {"formula_id": "formula_21", "formula_text": "z next sibl ijk \u2264 z sibl ijk z first child ij \u2264 z ij z next sibl ijk \u2264 1 \u2212 \u03b2 jk z first child ij \u2264 1 \u2212 \u03b3 ij z next sibl ijk \u2265 z sibl ijk \u2212 \u03b2 jk z first child ij \u2265 z ij \u2212 \u03b3 ij", "formula_coordinates": [5.0, 312.26, 455.59, 220.04, 42.55]}, {"formula_id": "formula_22", "formula_text": "\u03b2 j(j+1) = 0 \u03b3 i(i+1) = 0 \u03b2 j(k+1) \u2265 \u03b2 jk \u03b3 i(j+1) \u2265 \u03b3 ij \u03b2 j(k+1) \u2265 i<j z sibl ijk \u03b3 i(j+1) \u2265 z ij \u03b2 j(k+1) \u2264 \u03b2 jk + i<j z sibl ijk \u03b3 i(j+1) \u2264 \u03b3 ij + z ij", "formula_coordinates": [5.0, 312.26, 546.67, 229.6, 75.19]}, {"formula_id": "formula_23", "formula_text": "n\u22121 k=0 kz val ik = a\u2208\u03b4 + (i) z a , i \u2208 V (17) n\u22121 k=0 z val ik = 1, i \u2208 V z val ik \u2265 0, i \u2208 V, k \u2208 {0, . . . , n \u2212 1}", "formula_coordinates": [6.0, 84.53, 234.7, 205.73, 49.31]}, {"formula_id": "formula_24", "formula_text": "a\u2208\u03b4 \u2212 (0) \u03c6 k a \u2212 a\u2208\u03b4 + (0) \u03c6 k a = \u22121, k \u2208 V \\ {0} (18)", "formula_coordinates": [6.0, 74.67, 554.69, 215.6, 24.49]}, {"formula_id": "formula_25", "formula_text": "a\u2208\u03b4 \u2212 (j) \u03c6 k a \u2212 a\u2208\u03b4 + (j) \u03c6 k a = \u03b4 k j , j, k \u2208 V \\ {0} (19)", "formula_coordinates": [6.0, 72.12, 627.0, 218.15, 24.49]}, {"formula_id": "formula_26", "formula_text": "\u03c6 k a \u2264 z a , a \u2208 A, k \u2208 V(20)", "formula_coordinates": [6.0, 126.62, 701.87, 163.65, 14.19]}, {"formula_id": "formula_27", "formula_text": "a\u2208A z a = n(21)", "formula_coordinates": [6.0, 156.67, 752.26, 133.6, 11.75]}, {"formula_id": "formula_28", "formula_text": "z a \u2208 U, \u03c6 k a \u2208 U, a \u2208 A, k \u2208 V (22)", "formula_coordinates": [6.0, 340.08, 86.99, 185.47, 14.19]}, {"formula_id": "formula_29", "formula_text": "\u03c8 jk = a\u2208\u03b4 \u2212 (j) \u03c6 k a , j, k \u2208 V \\ {0} \u03c8 0k = 1, k \u2208 V \\ {0}. (23", "formula_coordinates": [6.0, 326.33, 192.32, 194.67, 29.26]}, {"formula_id": "formula_30", "formula_text": "\u2022 |V |) constraints for i, j \u2208 A: z np ij \u2264 z ij z np ij \u2265 z ij \u2212 \u03c8 ik , min(i, j) \u2264 k \u2264 max(i, j) z np ij \u2264 \u2212 max(i,j)\u22121 k=min(i,j)+1 \u03c8 ik + |j \u2212 i| \u2212 1", "formula_coordinates": [6.0, 307.92, 334.51, 216.99, 74.1]}, {"formula_id": "formula_31", "formula_text": "\uf8f1 \uf8f4 \uf8f2 \uf8f4 \uf8f3 i \u2264 \u03c0(k) \u2264 j , if i < k < j , \u03c0(k) < i \u2228 \u03c0(k) > j , if k < i or k > j or k = i.", "formula_coordinates": [6.0, 323.17, 720.72, 200.87, 39.7]}, {"formula_id": "formula_32", "formula_text": "M P 0 6 ] [ N M 0 8 ] [ M D S X 0 8 ] A R C -F A C T O R E D + S I B L / G R A N D P . + V A L E N C Y + P R O J . ( F U L L ) F U L L , R E L A X E", "formula_coordinates": [8.0, 195.87, 55.87, 302.29, 37.43]}], "doi": ""}