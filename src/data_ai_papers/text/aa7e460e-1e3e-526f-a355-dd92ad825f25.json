{"title": "Optimizing Impression Counts for Outdoor Advertising", "authors": "Yipeng Zhang; Yuchen Li; Zhifeng Bao; Songsong Mo; Ping 2019 Zhang", "pub_date": "", "abstract": "In this paper we propose and study the problem of optimizing the influence of outdoor advertising (ad) when impression counts are taken into consideration. Given a database U of billboards, each of which has a location and a non-uniform cost, a trajectory database T and a budget B, it aims to find a set of billboards that has the maximum influence under the budget. In line with the advertising consumer behavior studies, we adopt the logistic function to take into account the impression counts of an ad (placed at different billboards) to a user trajectory when defining the influence measurement. However, this poses two challenges: (1) our problem is NP-hard to approximate within a factor of O(|T | 1\u2212\u03b5 ) for any \u03b5 > 0 in polynomial time; (2) the influence measurement is nonsubmodular, which means a straightforward greedy approach is not applicable. Therefore, we propose a tangent line based algorithm to compute a submodular function to estimate the upper bound of influence. Henceforth, we introduce a branch-and-bound framework with a \u03b8 -termination condition, achieving \u03b8 2 (1 \u2212 1/e) approximation ratio. However, this framework is time-consuming when |U| is huge. Thus, we further optimize it with a progressive pruning upper bound estimation approach which achieves \u03b8 2 (1 \u2212 1/e \u2212 \u03f5) approximation ratio and significantly decreases the running-time. We conduct the experiments on real-world billboard and trajectory datasets, and show that the proposed approaches outperform the baselines by 95% in effectiveness. Moreover, the optimized approach is around two orders of magnitude faster than the original framework.", "sections": [{"heading": "INTRODUCTION", "text": "Outdoor advertising (ad) has been a market of 29 billion dollars since 2017 and its revenue is expected to grow by 3% to 4% per year to reach 33 billion dollars by 2021 1 . 74% of its growth comes from the billboard segment [1]. The main audiences of billboards are people moving along their trips, by vehicles, motorcycles, bikes, etc. More than 80% drivers notice billboards when driving 2 . Enabled by the prevalence of positioning devices, tremendous amounts of trajectories have been generated and recorded [32]. Moreover, the evidence in our experimental study shows that (Figure 4a), more than 50% travellers are impressed by more than five billboards on each trip.\nThe aforementioned opportunities motivate us to propose and study a novel research problem, namely optimizing Impression Counts for Outdoor Advertising (ICOA). Given a billboard database U, a trajectory database T and a budget B, ICOA aims to find a set of billboards that have the maximum influence under the budget. Solving ICOA is imperative as it facilitates the decision making of an advertiser to achieve the highest return on investment. For example, the average cost of renting a billboard is $14,000/month in New York City (NYC) [12]; the total cost of renting 50 billboards is $700,000/month. That means we can save about $70,000/month if we can improve the influence by 10%.\nTo the best of our knowledge, this is the first problem that draws the inspiration from the intersection of (1) budget constraints, (2) moving trajectories when impression counts are considered, and (3) non-uniform costs of renting a billboard. As a result, the following challenges are important to be addressed.\nThe first challenge is how to appropriately measure the influence from a billboard to a user. Studies in consumer behavior report that, in the real world, users are unlikely to take a meaningful action when they receive only one message from an ad [7,9,13,24,28]. Meanwhile, there is evidence showing that the effect of ad repetition should be measured as an S-shaped function [4,19,23,26], which means the ad effectiveness will increase at low levels of repetition and then decrease as ad repetition increases. The logistic function has been widely adopted to measure the influence of an ad in many domain [10,16,25,27,29], since it matches the above characteristic of ad effectiveness. More importantly, as aforementioned, most people pass through more than five billboards during one trip. It is feasible for a company to rent multiple billboards to ingrain the ads in the user's mind. Therefore, we employ the logistic function to measure the influence from the ads (i.e., a set of billboards) to a user (i.e., a trajectory recording the user's travel). The influence of billboards is small when a user only saw the ad a few times, while it will increase dramatically upon seeing more. However, when this user has already seen a sufficient number of the same ad displayed on different billboards, the effect of additional impressions will decline as the effect of extra information diminishes.\nThe second challenge is posed by the property of the logistic function. The influence model based on the logistic function is non-submodular, which means any straightforward greedy-based approach is not applicable to address the ICOA problem (as elaborated in Section 3). Even worse, the non-uniform cost of different billboards makes the optimization problem intricate. We show that ICOA is NP-hard to approximate within any constant factor.\nIn order to address this algorithmic challenge, we propose an upper bound estimation method that tightly upper bounds the logistic function value, by means of a tangent line that intersects with the logistic S-curve. Based on the upper bound estimation method, we propose a branch-and-bound framework (Section 4.1). However, the efficiency and scalability of the branch-and-bound framework is limited -there is a potential for an exponential search space against the number of billboards and each upper bound estimation may visit a large number of trajectories. Even in one city, there are thousands of billboards and millions of trajectories (as evident in the real-world datasets used in our experimental study). It is thus time-consuming to explore all branches to get the optimal placement plan. Therefore, to further improve the efficiency of our framework, we devise a \u03b8 -termination method (Section 4.3) and a progressive upper bound estimation method (Section 5) which can provide a trade-off between efficiency and effectiveness.\nThe main contributions are summarized as below:\n\u2022 We propose and study the ICOA problem for the first time, and show that the influence model based on the logistic function is non-submodular. We also prove that ICOA is NP-hard to approximate (Section 3). \u2022 We propose an upper bound estimation method by adaptively solving submodular optimization problems. Based on the upper bound function, we propose a branch-and-bound framework. We further introduce a \u03b8 -termination method to achieve a trade-off between the efficiency and effectiveness. It achieves \u03b8 2 (1 \u2212 1/e) approximation ratio (Section 4). \u2022 To further boost efficiency, we optimize this framework with a progressive upper-bound estimation method, which achieves \u03b8 2 (1 \u2212 1/e \u2212 \u03f5) approximation ratio and significant reduction in running-time (Section 5).\n\u2022 We conduct extensive experiments on real-world trajectory and billboard datasets in the two largest cites of USA: NYC and LA. The results validate the effectiveness, efficiency and scalability of our methods (Section 6).", "publication_ref": ["b0", "b0", "b1", "b30", "b6", "b8", "b11", "b22", "b26", "b3", "b17", "b21", "b24", "b9", "b14", "b23", "b25", "b27"], "figure_ref": ["fig_10"], "table_ref": []}, {"heading": "RELATED WORK", "text": "In the following, we discuss the most relevant literature to this paper: Trajectory-driven Influential Billboard placement (TIP), Site Selection, and Location-aware IM (LIM). The main differences between existing works and ICOA are summarized in Table 1.\nTIP [32] is closely related to our problem, which also studies billboard placement to achieve the best advertising outcome. The core difference lies in the influence model. In particular, TIP assumes that a user (i.e., trajectory) can be influenced so long as one billboard is close enough to the trajectory the user travels along. Under such an influence model, when multiple billboards are close to a trajectory, the marginal influence is reduced to capture the property of diminishing returns. Therefore, TIP focuses on identifying and reducing the overlap of the influence among different billboards to the same trajectories, while keeping the budget constraint into consideration. That is, TIP can maximize the number of distinct users by impressing as many people as possible for one time. It does not consider the relationship between the influence effect and counts of impressions on one user because the model assumes one time impression is enough. ICOA is built upon a logistic influence model which has been widely adopted in consumer behavior studies. To maximize the influence to users, we need to control the overlap to some extent by impressing the same users several times. Unfortunately, the logistic influence model is non-submodular. Adapting the greedy approach to ICOA, which effectively solves TIP, could lead to arbitrarily bad solutions due to the non-submodular of the influence function.\nThe site selection problem has received lots of attention, due to its importance in a wide spectrum of applications. For example, the supply chain management problem involves a set of spatially distributed customers and a set of facilities to serve customer demands [2,5,15,20,21]. The potential locations of facilities and customers are inputted as a set of fixed locations. The given metrics are used to measure the distances, travel times or costs between customers and facilities. Despite the different metrics used, their goal is to minimize the objective function, e.g., the sum of the distance, time or cost. Another example is the Maximized Bichromatic Reverse k Nearest Neighbor (MaxBRkNN) problem. It aims to find an optimal location, where this location is a kNN of the maximum number of users based on the spatial distance between this location and users' locations [6,18,30,31,33]. Although the supply chain management problem, MaxBRkNN and ICOA fall under the general category of the site location problem, they are different in the following ways. ICOA aims to maximize the ad influence, whereas the rest seek to minimize the objective function. In addition to the differences in influence models, the supply chain management problem and MaxBRkNN assume that each user remains at a fixed location, whereas ICOA leverages moving trajectories to model the influence between users and billboards when a user travels along a trajectory and meets a number of billboards.\nThe Location-aware IM (LIM) problem [14,17] is extended from Influence Maximization (IM) problem, which aims to select a size-k subset from a given social network. The difference is that LIM only measures the spread of influence on users who are located in the given search region. Although IM/LIM and ICOA share the same ultimate goal, which is to maximize influence, they are different   whereas the logistic model is not. This implies that the simple greedy approach is not suitable for ICOA. Second, in the IM problem, the influence can be spread from a user to others. In our model, a user can be only impressed by a billboard through which this user passed under a range constraint.", "publication_ref": ["b30", "b1", "b4", "b13", "b18", "b19", "b5", "b16", "b28", "b29", "b31", "b12", "b15"], "figure_ref": [], "table_ref": ["tab_0"]}, {"heading": "PROBLEM FORMULATION", "text": "In this section, we introduce how billboards influence trajectories and the formulation of the ICOA problem. The frequently used notations are presented in Table 2. Although different ad companies use different strategies to set the renting cost, the cost is usually proportional to the real impression. How to measure the impression depends on the application needs, such as the panel size, the exposure frequency, the travel speed or the travel direction. Here we generate the cost of a billboard based on the number of trajectories impressed by this billboard. The detail is shown in Section 6.2. We also show that various strategies of setting the cost do not affect the performance of our methods in Appendix A.2.", "publication_ref": [], "figure_ref": [], "table_ref": ["tab_1"]}, {"heading": "Preliminary", "text": "We assume there are only two states of whether a user meets a billboard. When the user meets a billboard, we say this billboard impresses the user; otherwise, no impression is delivered. Therefore, we use the Bernoulli random variable I (o, t) denoting the states whether o impresses t, where I (o, t) = 1 denotes that o delivers an impression to t, otherwise I (o, t) = 0. Definition 3.1. We define that o impresses t, denoted as I (o, t) = 1, if \u2203t .p i , such that dist(t .p i , o.loc) \u2264 \u03bb, where dist(\u2022) computes the Euclidean distance between p i and o.loc, \u03bb is a given distance threshold.\nOur influence model is based on the logistic function. We use the following equation to compute the effective influence of an ad placed at a billboard set S which can impress a trajectory t:\np(S, t) = 1 1+exp {\u03b1 \u2212\u03b2 \u2022\u03a3 o i \u2208S I (o i ,t )} i f \u2203o i \u2208 S I (o i , t) = 1 0 otherwise (1)\n\u03b1 and \u03b2 are the parameters that control t's turning point for being influenced, where \u03b1 controls the overall influence of S to t and \u03b2 controls the incremental influence of o to t. The S-curve in Figure 1 shows the shape of the logistic influence model. When \u03b2 is fixed, with the increasing of \u03b1, it is hard to have any significant influence with a small number of billboard impressions. In contrast, when \u03b1 is fixed, with the increasing of \u03b2, each billboard impression triggers a noticeable influence impact. Next, we define the influence of S to a trajectory database T as follows:\nI (S) = t \u2208T p(S, t)(2)\nExample 3.1. Let S = {o 3 , o 4 } be a set of billboards chosen from all billboards in Figure 2, and trajectories t 1 , t 2 and t 3 are influenced by at least one billboard in S since there is at least one point p of each trajectory, which is in the red circle of a billboard. The red circle indicates the impression range of a billboard with its radius controlled by \u03bb. Assuming the parameters \u03b1 = 3, \u03b2 = 1, based on Equation 1, we have p(S, t 1 ) = 0.119, p(S, t 2 ) = p(S, t 3 ) = 0.269, and p(S, t 4 ) = 0, respectively. Hence, the overall influence of S is I (S) = 0.119 + 0.269 + 0.269 = 0.657.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Problem Definition", "text": "We are now ready to formally introduce the ICOA problem. Definition 3.2. (ICOA) Given a billboard database U, a trajectory database T , a budget constraint B and the influence model I (S), the ICOA problem is to find a subset S \u2286 U that maximizes the overall influence of S such that the total cost of S does not exceed B.\nFormally,\u015c = argmax cost (S )\u2264B I (S)(3)\nNon-submodularity of ICOA. Given two sets of billboards S 1 and S 2 , the marginal influence of adding\nS 2 into S 1 is \u2206(S 2 |S 1 ) = I (S 1 \u222a S 2 ) \u2212 I (S 1 )\n. Then, we define the monotonicity and submodularity of an influence function as follows. I (S) is monotone iff, I (S 1 ) \u2264 I (S 2 ) for all S 1 \u2286 S 2 . Furthermore, I (S) is submodular iff, given any set of billboards S * , it satisfies \u2206(S\n* |S 1 ) \u2265 \u2206(S * |S 2 ) for all S 1 \u2286 S 2 .\nThe following presents a counterexample for the influence function to be submodular. Due to the non-submodularity of ICOA, a greedy-based heuristic method cannot guarantee any constant approximation ratio.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Algorithm 1: Branch-and-Bound", "text": "Input: U, T , B Output:\n\u015c 1.1\u015c \u2190 \u03d5, S \u2190 \u03d5,S \u2190 U 1.2 L G \u2190 0, U G \u2190 \u221e 1.3 Initialize max heap H \u2190 (S,S, U ) 1.4 while L G < U G do 1.5 (S,S, U ) \u2190 top of H 1.6 Select o \u2208S 1.7 if cost {S } + o.w \u2264 B then 1.8S \u2190S\\{o} 1.9 S a \u2190 S \u222a {o} 1.10 S b \u2190 S 1.11 (S c , L a , U a ) \u2190 ComputeBound(S a ,S) 1.12 if L a > L G then 1.13 L G \u2190 L a ,\u015c \u2190 S c 1.14 if U a > L G then 1.15 H \u2190 H \u222a (S a ,S, U a ) 1.16\nRepeat Lines 1.11-1.15 for S b Theorem 3.1. The ICOA problem is NP-hard to approximate within a factor of O(|T | 1\u2212\u03b5 ) for any \u03b5 > 0 in polynomial time.\nProof. Kindly refer to the proof in Appendix A.4.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "OUR FRAMEWORK", "text": "According to Theorem 3.1, there does not exist any efficient algorithm with constant approximation ratio to ICOA. One na\u00efve solution is to enumerate all feasible billboard subsets and compute their influence. However, this is not scalable against thousands of billboards and millions of trajectories.\nThereby, we propose a branch-and-bound framework (Section 4.1). It explores branches, which represent respective feasible billboard sets that have not yet exhausted the budget and can be filled with more billboards. In particular, we propose a novel bound estimation technique for each branch under exploration by setting a submodular function to tightly upper bound p(S, t) \u2200t \u2208 T (Section 4.2). The estimation technique will obtain a candidate solution (i.e. the billboard set which cannot be further expanded due to the budget constraint) when calculating the upper bound score of a branch. The exploration terminates when the upper bound of all remaining branches does not exceed the influence value of the best candidate solution. Theoretically, the branch-and-bound framework achieves an approximation ratio of 1 2 (1 \u2212 1/e).", "publication_ref": ["b0"], "figure_ref": [], "table_ref": []}, {"heading": "Branch-and-Bound", "text": "Algorithm 1 depicts the pseudocode of the branch-and-bound framework. We first initialize the global upper bound U G and global lower bound L G , and a max heap H with each entry denoted as (S,S, U ) (Lines 1.1-1.3), where S is the set of billboards that have been selected as a feasible set,S is the set of billboards that have not been considered yet, and U is the upper bound influence of the corresponding search space. H is ordered by the upper bound value of each S. While L G < U G , H will pop the top entry that has the maximum upper bound influence (Lines 1.4-1.5). For each entry, as long as it matches the budget constraint, it will generate two new Based on S a (or S b ) and the correspondingS, ComputeBound(\u2022) will return a triple, i.e., (S c , L a , U a ) or (S c , L b , U b ), where S c is a candidate solution set returned by ComputeBound(\u2022). L a and U a are the lower-bound influence and upper bound influence of S c respectively (Line 1.11). If L a > L G , which means S c is better than the current best feasible solution\u015c, then\u015c will be replaced by S c , and the global L G is updated (Lines 1.12-1.13). If U a > L G , it is possible that S a is a subset of the optimal solution. Therefore, (S a ,S, U a ) will be pushed into H (Lines 1.14-1.15). We repeat the search loop for all branches until L G \u2265 U G .", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "ComputeBound", "text": "To estimate the upper bound of a branch w.r.t. a feasible set S a , we devise a submodular function (i.e., p \u2191 (S, t) and S = S a \u222a S * ) which tightly upper bounds the non-submoular influence function p(S, t) (Equation 1). Let x(S) denote the number of effective impressions to t obtained by placing ads in billboard set S (i.e., x(S) = \u03a3 o i \u2208S I (o i , t))\nand f (x(S)) = 1/(1 +exp{\u03b1 \u2212 \u03b2 \u2022x(S)}) = p(S, t). We draw a tangent line l(x) to upper bound f (x). l(x) intersects f (x) at two points: (x(S a ), f (x(S a ))) and (x S a t , f (x S a t )) where the latter denotes the tangential point (see Figure 1). Formally, we define the upper bound function p \u2191 (S, t) for S = S a \u222a S * as follows If l(x) exists:\np \u2191 (S, t) = l(x) if x(S a ) \u2264 x \u2264 x S a t f (x) if x S a t < x(4)\nOtherwise:\np \u2191 (S, t) = f (x)(5)\nAs shown in Figure 1, p \u2191 (S, t) is submodular as it concatenates two submodular functions: l(x) and f (x) for different domains of x. Furthermore, we define the following submodular function that upper bounds the influence function I (S) for S = S a \u222a S * .\nI \u2191 (S) = t \u2208T p \u2191 (S, t)(6)\nIt is easy to see that I \u2191 (S) \u2265 I (S) as p \u2191 (S, t) \u2265 p(S, t) for all S = S a \u222a S * . Furthermore, I \u2191 (S) is submodular because it is a sum of submodular functions. To ease our presentation, we define the marginal influence I \u2191 (\u2022) of adding S 2 into S 1 as below: Step 1\n\u2206 \u2191 (S 2 |S 1 ) = I \u2191 (S 1 \u222a S 2 ) \u2212 I \u2191 (S 1 )(7\nStep 2\nStep 3\nStep 4\n2 o 4 o 3 o\nStep 5\nStep 6\nStep 7\n\u2026\u2026 S b S S b U {} 2 3 { , } o o 0.3576 UG c S LG 0 {} \uf0a5 S a 0.4768 1 3 { , } o o \uf0a5 S b 0.6571 3 4 { , } o o \uf0a5 S a 0.6571 3 4 { , } o o \uf0a5 S b 0.6571 3 4 { , } o o \uf0a5 0.7657 S a 0.6571 3 4 { , } o o 0.7657 S b 0.6571 3 4 { , } o o 0.7657 S a 0.6571 3 4 { , } o o 0.7657 S b 0.6571 3 4 { , } o o\nStep 1 Step 0\nStep 4\nStep   The branches which U > L G will be added into H , such as the branch S b of step 5 and the branch S a of step 7. When L G is larger than U G , it means that, in the rest of branches in H , the one with the highest U is worse than the optimal solution. The algorithm thus terminates.\nThe upper bounding techniques lead to a constant approximation ratio for the solution returned by the branch-and-bound framework. It has been proven in the BMC work [11] that, based on the costeffective greedy method,\n\u2206 \u2191 (S * n |S a ) + \u2206 \u2191 ({o n+1 }|S a ) \u2265 \u2206 \u2191 (S * n \u222a {o n+1 }|S a ) \u2265 1 \u2212 1 e \u2022 \u2206 \u2191 (OPT |S a ) holds. Therefore, at least one of \u2206 \u2191 (S * n |S a ) and \u2206 \u2191 ({o n+1 }|S a ) is not smaller than 1 2 (1 \u2212 1 e ) \u2022 \u2206 \u2191 (OPT |S a ).\nWhile one of (S * n \u222a S a ) and {o n+1 \u222a S a } will be\u015c, we have\n\u2206 \u2191 (\u015c) \u2265 1 2 (1\u2212 1 e )\u2022\u2206 \u2191 (OPT |S a ) based on all explored S a . Hence, I \u2191 (\u015c) \u2265 1 2 (1 \u2212 1 e ) \u2022 I \u2191 (OPT |S a ).\nFor any branch that has not been searched, under the termination condition L < U , we have I (\u015c) \u2265 I \u2191 (S). Therefore, Algorithm 1 achieves I (\u015c) \u2265 1 2 (1 \u2212 1 e ) \u2022 I (OPT ).", "publication_ref": ["b10", "b0"], "figure_ref": [], "table_ref": []}, {"heading": "Branch-and-bound with \u03b8 -termination", "text": "It is noted that the search space of the branch-and-bound framework is exponential in the worst case. Although the upper bound estimation technique can prune a large number of branches, it inherently overestimates the influence value. As a result, there could be cases where the optimal solution has already been obtained but the search cannot terminate, because there exists an unexplored branch containing a solution which is also near optimal. In this case, the unexplored branch will have a higher upper bound value than the optimal influence value and the branch thereby cannot be pruned. It is unnecessarily expensive for exploring all remaining branches to reach other near-optimal solutions. Therefore, we introduce a tunable early termination method. In Algorithm 1 (Line 1.4), we utilize a parameter \u03b8 to control the termination condition -instead of using L G < U G , we use L G < \u03b8U G as the termination condition, where \u03b8 \u2208 (0, 1]. When L and U are close enough, the search process terminates. It can be easily shown that the early termination technique achieves \u03b8 2 (1 \u2212 1/e) approximation ratio. ", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "PROGRESSIVE BRANCH-AND-BOUND", "text": "The branch-and-bound framework heavily invokes Algorithm 2 for bound estimations. For every search iteration in Algorithm 2 (Lines 2.3-2.6), the greedy selection needs to recalculate the marginal gain \u2206 \u2191 ({o}|S a \u222a S * )/o.w for all o \u2208S, and chooses the maximum.  \n3.13 h \u2190 h 1+\u03f5 3.14 if h \u2264 \u2206 \u2191 (S * |S a ) r \u2022 e \u22121 1\u2212e \u22121 then 3.15 Break 3.16 S c \u2190 (S a \u222a S * ), L a \u2190 I (S a \u222a S * ), U a \u2190 I \u2191 (S * \u222a S a )\nWhen |S | is huge, such bound estimation approach incurs significant computation overhead. Motivated by this, we propose a progressive upper bound estimation method without traversing all billboards to estimate the bound with an approximation ratio of \u03b8 2 (1 \u2212 1/e \u2212 \u03f5), where \u03f5 is a tunable parameter that provides a trade-off between efficiency with accuracy.\nIn particular, instead of exploring all billboards to find the one with maximal \u03b4 \u2191 ({o}|S a )/o.w in each iteration, we sort them by \u03b4 \u2191 ({o}|S a )/o.w first (Line 3.1). Then, we set a threshold h as the maximal \u03b4 \u2191 ({o}|S * )/o.w (Line 3.2). We progressively decrease h by a factor of (1 + \u03f5) and add more o \u2208S into S * (Lines 3.5-3.13). The algorithm terminates when there is no billboard whose \u2206 \u2191 ({o}|S a )/o.w \u2265 h. As a result, we do not need to explore all billboards in order to find the best one, and when h is small enough, the algorithm can terminate early.\nIn the rest of this section, we analyze the approximation ratio of Algorithm 3.\nLemma 5.1. Let r = B \u2212 cost(S a ), which is the remaining budget. In Algorithm 3, at the ith iteration of search loop, after o i has been added into S * i\u22121 , the following holds:\n\u2206 \u2191 (S * i |S a ) \u2212 \u2206 \u2191 (S * i\u22121 |S a ) \u2265 o i .w (1 + \u03f5)r \u2022 (\u2206 \u2191 (OPT |S a ) \u2212 \u2206 \u2191 (S * i\u22121 |S a ))\nProof. Let OPT denote the optimal S * returned from Algorithm 3. Let o i denote the billboard to be added into S * i\u22121 at a given threshold h. Since I \u2191 (\u2022) is submodular, it holds that:\n\u03b4 ({o}, S * ) o.w \u2265 h if o = o i \u2264 h(1 + \u03f5) if o \u2208 OPT \\(S * \u222a {o i }) (8)\nwhere S * is the set of candidate billboards and \u03b4 ({o}, S * ) is defined as Line 3.7 of Algorithm 3. From Equation 8we can find that, for any o \u2208 OPT \\S * , \u03b4 ({o i }, S * )/o i .w \u2265 \u03b4 ({o}, S * )/o.w(1 + \u03f5). Therefore,\nwe have \u03b4 ({o i }, S * ) \u2265 o i .w (1+\u03f5 )(cost (O PT \\S * )) \u03a3 o \u2208O PT \\S * \u03b4 ({o}, S * ) \u2265 o i .w (1+\u03f5 )r \u03a3 o \u2208O PT \\S * \u03b4 ({o}, S * ).", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Let S *", "text": "i denote the feasible set that o i has been added into, i.e., S * i = {o 1 , ..., o i }. Then we have:\n\u03b4 ({o i }, S * i\u22121 ) \u2265 o i .w (1 + \u03f5)r \u03a3 o \u2208O PT \\S * i \u22121 \u03b4 ({o}, S * i\u22121 ) \u2265 o i .w (1 + \u03f5)r \u2022 \u2206 \u2191 (OPT \u222a S * i\u22121 |S a ) \u2212 \u2206 \u2191 (S * i\u22121 |S a ) \u2265 o i .w (1 + \u03f5)r \u2022 \u2206 \u2191 (OPT |S a ) \u2212 \u2206 \u2191 (S * i\u22121 |S a )\nThen by the definition of \u03b4 ({o}, S * ), we have:\n\u2206 \u2191 (S * i |S a ) \u2212 \u2206 \u2191 (S * i\u22121 |S a ) \u2265 o i .w (1 + \u03f5)r \u2022 (\u2206 \u2191 (OPT |S a ) \u2212 \u2206 \u2191 (S * i\u22121 |S a ))\nThus, the lemma is proved.\nTheorem 5.2. The branch-and-bound framework invoking Algorithm 3 achieves an approximation ratio of \u03b8 2 (1 \u2212 1/e \u2212 \u03f5). Proof. Based on Lemma 5.1, it is easy to get:\n\u2206 \u2191 (S * n \u2032 +1 |S a ) \u2265 1 \u2212 n+1 k =1 (1 \u2212 o k .w (1 + \u03f5)r ) \u2022 \u2206 \u2191 (OPT |S a ) \u2265 1 \u2212 e \u2212(n+1) (1+\u03f5 )(n \u2032 +1) ) \u2022 \u2206 \u2191 (OPT |S a )\nTherefore, we have:\n\u2206 \u2191 (S * n \u2032 |S a ) \u2265 1 2 1 \u2212 e \u2212(n+1) (1+\u03f5 )(n \u2032 +1) ) \u2022 \u2206 \u2191 (OPT |S a )\nwhere n = |S * n |, which is the number of billboards returned from Algorithm 3 when the budget is exhausted, n \u2032 is the number of billboards when the budget is not exhausted. Because Algorithm 3 will be terminated when h \u2264 \u2206 \u2191 (S * |S a ) r\n\u2022 e \u22121 1\u2212e \u22121 , we have n \u2032 \u2264 n. Case 1: when n \u2032 = n, we have:\n\u2206 \u2191 (S * |S a ) \u2265 1 2 (1 \u2212 e \u22121 \u2212 \u03f5) \u2022 \u2206 \u2191 (OPT |S a )\nCase 2: when n \u2032 < n, n \u2032 \u2022 o.w < r , we have:\n\u2206 \u2191 (OPT |S a ) \u2264 \u2206 \u2191 (OPT \u222a S * |S a ) \u2264 \u2206 \u2191 (S * |S a ) r \u2022 e \u22121 1 \u2212 e \u22121 \u2022 \u03a3 o \u2208O PT S * o.w + \u2206 \u2191 (S * |S a ) \u2264 1 1 \u2212 e \u22121 \u2206 \u2191 (S * |S a ) Therefore, \u2206 \u2191 (S * |S a ) \u2265 1 2 (1 \u2212 1 e \u2212 \u03f5) \u2022 \u2206 \u2191 (OPT |S a ).\nSimilar to the proof of Theorem 4.2, we have:\nI \u2191 (S) \u2265 \u03b8 2 (1 \u2212 1 e \u2212 \u03f5) \u2022 I \u2191 (OPT ). Theorem 5.2 is proved.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "EXPERIMENT 6.1 Experimental Setup", "text": "Datasets. The real-world billboard datasets for the two largest cities in the US (NYC and LA) are crawled from LAMAR [12], one of the largest outdoor advertising companies worldwide. The real-world trajectory datasets are obtained as follows. For NYC, we collect five hundred thousand taxi trips from TLC trip record 3 . Each trip record includes the pick-up and drop-off locations, time and trip distances. We use Google Maps API 4 to generate the trajectories. Similar to [32], we only keep the trajectory if (1) the distance of the generated     2) the travel time of the generated trajectory is close to that of the trip record (within 5% error rate). For LA, as there is no public taxi record, we collect the Foursquare check-in data and generate the trajectories using Google Maps API by randomly selecting the pick-up and drop-out locations from the check-ins.\nFigure 4a shows the distribution of trajectories according to the number of billboards that a trajectory can pass over in NYC. We find more than 50% trajectories can pass over more than 5 billboards, which validates the motivation of this work as well as our use of the logistic function for influence modelling. Figure 4b shows the distribution of billboard cost.", "publication_ref": ["b2", "b3", "b30"], "figure_ref": ["fig_10", "fig_10"], "table_ref": []}, {"heading": "Experiment Setting", "text": "Performance Measurement. For each method we evaluate the runtime and the influence value of the selected billboards. Each experiment is repeated ten times, and the average result is reported. Billboard Costs. There is no exact leasing cost of billboard provided by any advertising companies. To the best of our knowledge, they only provide a range of costs based on different areas. For example, according to the LAMAR company, the cost of the most expensive billboard is about thirty times higher than the cheapest one. Therefore, we generate the costs of billboard based on how many trajectories this billboard can influence, o.w = \u2308k\u03a3 t i \u2208T I (o, t i )\u2309, where k is a factor chosen from 0.5 to 2 randomly to simulate various ratio of influence to cost. Then we map the costs of billboards to an interval from $2,000 to $60,000. Experiment Environment. All codes are implemented in Java. Experiments are conducted on a laptop with Intel Core i7-8550U CPU and 16GB memory running Windows 10. Parameter Settings. Table 4 shows the settings of all parameters, and the default one is highlighted in bold. In all experiments, we only vary one parameter and keep the rest by default. \u03b1 and \u03b2 are the parameters in the logistic function that control t's turning point for influence. We set \u03b2 = 3, and vary \u03b1 from 7 to 11. \u03f5 is used in Algorithm 3 to trade efficiency with accuracy, and \u03b8 is used in Algorithm 1 to control the termination condition. The methodology on selecting the default settings is shown in Appendix A.\nMetrics & Methods for Comparison. In particular, we would like to evaluate the efficiency, effectiveness and scalability of our methods. To the best of our knowledge, this is the first work studying how to optimize outdoor ad influence by considering the impression counts over moving trajectories. Despite that, we compare the following baselines.\n\u2022 Greedy: A basic greedy algorithm. In each iteration, it adds o with the maximum ratio of marginal influence to cost (i.e.,\n\u2206 \u2191 ({o } |S * ) o .w\n) into S * until reaching the budget constraint. \u2022 Top-k: In each iteration, it chooses o which can influence the maximum number of trajectories until reaching the budget constraint.\n\u2022 BBS: The branch-and-bound framework with \u03b8 -termination and Algorithm 2 for bound estimations. \u2022 PBBS: The branch-and-bound framework with \u03b8 -termination and Algorithm 3 for bound estimations. \u2022 LazyProbe: The best-performing method in the most recent trajectory-driven billboard placement study [32]. Recall Section 2, our work and [32] are developed based on different influence models; LazyProbe can only work with a submodular influence function. Although it is not fair for our methods to be compared with a submodular influence model, we still compare our method with LazyProbe in Section 6.6, while we neglect it in other experiments.", "publication_ref": ["b30", "b30"], "figure_ref": [], "table_ref": ["tab_6"]}, {"heading": "Varying the Budget B", "text": "Figure 5 shows the effectiveness and efficiency of all algorithms when varying the budget B in NYC and LA, respectively. Effectiveness. From Figure 5a and Figure 5c, we make the following observations. First, when the budget raises from 100k to 500k, both BBS and PBBS outperform Greedy, from 10% to 95%. Second, PBBS is slightly worse than BBS by up to 8%. It is because Algorithm 3 may terminate early for some branches and miss some ideal selections. Third, Top-k has the worst performance, as it gives preference to the billboard with the highest influence in each iteration, which is usually the most expensive billboard in the real world. Hence, it can only choose a few of billboards when the budget is fewer. A few billboards are unlikely to overlap, which makes our solutions better than it by at most 25 times in NYC, and 15 times in LA, respectively. When the budget is big enough, the growing effectiveness is mainly contributed from a growing number of billboards, which makes the advantage of our solutions dwindle to about 3 times in NYC, and 1 time in LA, respectively. Last, the advantage of BBS and PBBS in LA is less than that in NYC. One possible reason is that the distribution of trajectories in LA is comparatively even, making it more possible to have influence overlaps among billboards. Efficiency. From Figure 5b and Figure 5d, we have three observations. First, the running time of BBS increases significantly w.r.t. the budget B. This is because in every branch, BBS has to invoke Algorithm 2, which needs to calculate the unit marginal influence for all o \u2208S in each iteration. When B increases, more billboards ", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Varying the Number of Trajectories |T |", "text": "Effectiveness. As shown in Figure 6a and Figure 6c, we have three observations. First, the influence of all methods increase because more trajectories can be influenced. Second, the effectiveness of BBS and PBBS consistently outperform that of Greedy and Top-k by up to 60% and 300%, respectively. Last, the advantage of efficiency of BBS and PBBS in LA is less than that in NYC for similar reason mentioned in Section 6.3. Efficiency. From Figure 6b and Figure 6d, we have the following observations. First, PBBS is about one order of magnitude faster than BBS. Second, the running time of all methods increase almost ", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Scalability Test", "text": "To evaluate the scalability of our methods BBS and PBBS, we vary |T | from 500k to 5M, and |U| from 1,500 to 15,000. As shown in Figure 7a, the efficiency of BBS is more sensitive than that of PBBS when varying |U|. With the increase of |U|, the growth rate of running time of BBS is larger than that of PBBS. In particular, PBBS is 15 times faster than BBS at |U| = 1, 500, while such performance gap increases to almost two orders of magnitude at |U| = 6, 000. Since BBS takes more than 10 4 seconds to complete when the number of billboards |U| exceeds 6,000, its result is omitted in Figure 7a. Varying |T | leads to a similar result. As shown in Figure 7b, the results are omitted for BBS since the approach cannot terminate within 10 4 seconds when |T | exceeds 3.5M.\n6.6 Our methods vs. LazyProbe [32] In this experiment, we try to compare our work with the related work [32], although its goal is to maximize the influence while reducing the influence overlap, which is different from ours. In particular, we choose the best-performing method in [32], LazyProbe, and use the default setting as specified in [32]. Since LazyProbe can only work with a submodular influence model while ours is non-submodular, we have to adapt our influence model to be submodular by adjusting \u03b1 and \u03b2, although it is actually not fair for our methods. It means if a trajectory is influenced by a billboard, i.e., if \u2203o i \u2208 S, I (o i , t) = 1, then p(S, t) = 1.\nFigure 8 shows the experiment result. LazyProbe has the best effectiveness , which outperforms BBS, Greedy and PBBS by up to 3%, 3% and 6% respectively. It is because LazyProbe enumerates all feasible billboard sets whose cardinality is no larger than 3, and invokes a greedy-based dynamic computation function to get the result, which makes it achieve (1 \u2212 1/e) approximation ratio. In contrast, BBS and PBBS are much faster than LazyProbe, around one order of magnitude and two orders of magnitude respectively. The reason lies in the influence function. As aforementioned, p(S, t) = 1 if \u2203o i \u2208 S, otherwise p(S, t) = 0. Therefore, the upper bound is equal to the lower bound. The branch-and-bound framework does not search for further, deeper branches. It will try to complete S c with or without a billboard and terminates after finishing the first iteration. Hence, BBS is slightly better than Greedy, but worse than LazyProbe on effectiveness. Since PBBS may miss some ideal selections, it is slightly worse than the rest except Top-k.", "publication_ref": ["b30", "b30", "b30", "b30"], "figure_ref": ["fig_12"], "table_ref": []}, {"heading": "CONCLUSION", "text": "We first introduced a non-submodular influence model, which is widely adopted in many areas such as consumer behaviour and advertising marketing, etc. Based on this influence model, we studied the ICOA problem and proved that it is NP-hard to approximate. More importantly, a simple cost-effective greedy method cannot work well since the logistic-based influence model is not submodular. Then, we proposed a method to compute the upper bound by using a dynamic tangent line to tightly bound the real influence. By utilizing this upper bound computation method, we built a branch-and-bound framework to solve ICOA problem. To reduce the computational cost, we further proposed a \u03b8 -termination method and a progressive bound computation algorithm. Lastly, we conducted experiments on real-world datasets to verify the efficiency, effectiveness adaptability, and scalability of our methods.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "A APPENDIX A.1 Parameter Sensitivity Test", "text": "In this part, we conduct the sensitivity experiments of our methods by varying parameters. We only vary one parameter and keep the rest by default setting as shown in Table 4. The experimental results will be explained, and we will describe how we choose the default settings.", "publication_ref": [], "figure_ref": [], "table_ref": ["tab_6"]}, {"heading": "A.1.1 Varying \u03b2/\u03b1", "text": "As we mentioned in Section 3.2, \u03b1 and \u03b2 are the parameters that control the turning point for the influence. The bigger the \u03b2/\u03b1 is, the more times of impression are needed to change a user's adoption. With the increase of \u03b2, the influence from one billboard to one user becomes larger. A huge \u03b2 leads to a sudden change of a user's adoption, whereas a small \u03b2 makes the changing process smooth.\nMoreover, studies show that there is a high chance that a person will change her adoption action after noticing a message more than four times [4,8,19,22]. Therefore, we make the parameter setting satisfy the above assumption, which means that, when a trajectory has been influenced more than four times, the influence is larger than 0.95 (i.e., p(S, t) > 0.95 when \u03a3 o i \u2208S I (o i , t) \u2265 4). Hence, we fix \u03b2 = 3 and vary \u03b1 from 7 to 11. Based on Equation 1, \u03b2/\u03b1 rises when \u03b1 drops, which increases the influence from o to t. It also leads to higher overall influence.\nFigure 9 shows the experimental results of varying \u03b2/\u03b1. We find that with the increase of \u03b2/\u03b1, our solutions outperform baselines by 50% to 100%. Note that, varying \u03b2/\u03b1 does not affect the efficiency of all methods. Therefore, we choose \u03b1 = 7 and \u03b2 = 3 as the default setting since our solutions have the smallest advantage of effectiveness for the setting.\nA.1.2 Varying \u03f5 \u03f5 is used to adjust the step distance of decreasing threshold h in Algorithm 3. Figure 10 shows the experimental results of varying \u03f5. When \u03f5 increases from 10 \u22124 to 1, our solutions decrease by at most 9% in effectiveness, but speed up by two orders of magnitude. We find that when \u03f5 > 10 \u22121 , the changing of effectiveness and efficiency tends to be stable. Therefore, we choose \u03f5 = 10 \u22121 as the default setting.", "publication_ref": ["b3", "b7", "b17", "b20"], "figure_ref": ["fig_14", "fig_15"], "table_ref": []}, {"heading": "A.1.3 Varying \u03b8", "text": "Recall Section 4.1, \u03b8 is the parameter controlling the termination condition. A smaller \u03b8 leads to better efficiency with worse effectiveness. Figure 11 shows the experimental results of varying \u03b8 . When \u03f5 decreases from 0.94 to 0.86, the effectiveness of our solutions decreases by at most 6%, while the performance is improved at around one order of magnitude speed ups. Therefore, we choose the median value 0.9 as the default setting, because it reaches an ideal balance of efficiency and effectiveness.", "publication_ref": [], "figure_ref": ["fig_16"], "table_ref": []}, {"heading": "A.1.4 Varying \u03bb", "text": "Figure 12 shows the influence of changing \u03bb on the effectiveness and efficiency. Recall Section 3.1, \u03bb is a given distance threshold. A user is impressed by a billboard only if the distance between them is smaller than \u03bb (i.e., dist(t .p i , o.loc) \u2264 \u03bb). We have the following observations. First, With the increase of \u03bb, the effectiveness     of all methods improves. The growing effectiveness is mainly contributed from a growing number of trajectories that the billboards can impress. Second, the advantage of our methods decreases, since overlaps become easier with larger \u03bb. Last, except for Top-k, the running-time of all methods increases. The reason for this is similar to that of the first observation. In this part, we study the effect of changing strategies of setting cost. DC is the default strategy as we mentioned in Section 6.2. WI is based on the weekly impression; that is, the impression statistic data from LAMAR [12]. Similar to DC, we map the weekly impression to the cost interval (i.e., $2,000 to $60,000). TC1 and TC2 are the trajectory-based strategies of setting cost. Under TC1, we first calculate the square of the number of trajectories impressed by this billboard, and then map this value to the cost interval. TC2 is similar to TC1, the difference is that we use the square root of the number of trajectories impressed by this billboard. As shown in Figure 13a, we make three observations. First, in WI, the effectiveness of all methods decreases. This is because in the LAMAR database, billboards that impress a large number of trajectories have a very high weekly impression. It leads to the consequence that, most billboards have a higher cost compared with WI. Therefore, all methods afford fewer billboards. Second, in TC1, the performance of Top-k is worse compared with itself in other strategies since for all billboards, the higher the cost, the worse the effectiveness. Last, in TC2, Greedy is only worse than BBS by 8%. The reason is that, billboards that have the higher impression is more cost-efficient. Therefore, both Greedy and our methods achieve an ideal result easily. As shown in Figure 13b, the different cost strategies do not affect efficiency.", "publication_ref": [], "figure_ref": ["fig_0", "fig_3", "fig_3"], "table_ref": []}, {"heading": "A.3 Number of Influenced Audiences", "text": "In this part, instead of calculating the total influence by Equation 2, we study how many audiences are influenced by S. We define an audience t to be influenced if p(S, t) \u2265 \u03c6, where \u03c6 \u2208 (0, 1]. In this case, we assume \u03c6 = 0.8, which means that an audience will be influenced after meeting at least three billboards. Figure 14 shows the experimental result. We have two observations. First, BBS and PBBS have similar effectiveness compared with themselves in Figure 5a. Second, the effectiveness of Greedy and Top-k is worse than themselves in Figure 5a. The reason is that, based on the influence model, the marginal influence decreases when p(S, t) \u2265 0.8. Before reaching the turning point of the influence model, our methods prefer to impress the same trajectory multiple times. Therefore, the influence areas of our methods are more concentrated, whereas that of Greedy and Top-k are more dispersed.\nA.4 Proof of Theorem 3.1\nThe NP-hardness of ICOA can be easily inferred by reducing the set cover problem to ICOA. Next, we show it is in fact NP-hard to approximate ICOA within any constant factor. To prove the theorem, we reduce the biclique detection (BD) problem to ICOA. Given a bipartite graph G = (U \u222a V , E) where U and V denote the vertex sets while E denotes the edge set containing the edges (u, v) \u2208 E such that u \u2208 U and v \u2208 V ; an instance of BD asks whether there exists vertex subsets Clearly, the reduction can be done in polynomial time. We establish the following relationship between BD and ICOA.\nU \u2032 \u2286 U , V \u2032 \u2286 V\nLemma A.1. Let OPT B and OPT I denote the optimal values of BD and the instance of ICOA that BD is reduced to, respectively. We have 2\n\u2022 OPT I \u2212 1 | T | \u2264 OPT B \u2264 2 \u2022 OPT I .\nProof. We show the second inequality first. Let U \u2032 such that |U \u2032 | = k represents the vertex set selected to achieve the largest biclique in G w.r.t. the size of |V \u2032 |. We choose the corresponding x u \u2200u \u2208 U \u2032 as the selected billboards. The influence achieved is thus lower bounded by OPT B /2. We can then conclude OPT I \u2265 OPT B /2.\nWe now show the first inequality. Suppose S is selected such that |S | = k as the billboards to place the ad on, we identify a trajectory set T S \u2208 T where all trajectories in T S meet all billboards in S. The following inequality holds: Finally, we are ready to prove the hardness of ICOA by a gap preserving reduction: let a constant \u03b8 \u2265 1, if OPT B \u2265 \u03b8 then OPT I \u2265 \u03b8 /2, and if OPT I \u2264 \u03b8 /|T | 1\u2212\u03b5 for any \u03b5 > 0, then OPT B \u2264\nI (S) =", "publication_ref": [], "figure_ref": ["fig_10"], "table_ref": []}, {"heading": "ACKNOWLEDGMENTS", "text": "Zhifeng Bao was partially supported by ARC DP170102726, DP18010 2050, and NSFC 61728204, 91646204, and Google Faculty Award. This research was supported by the Singapore Ministry of Education (MOE) Academic Research Fund (AcRF) Tier I grant MSS18C001.", "publication_ref": [], "figure_ref": [], "table_ref": []}], "references": [{"ref_id": "b0", "title": "Billboard Statistics", "journal": "", "year": "2016", "authors": "Advertising Penneco Outdoor"}, {"ref_id": "b1", "title": "Local-Search based Approximation Algorithms for Mobile Facility Location Problems", "journal": "", "year": "2013", "authors": "Sara Ahmadian; Zachary Friggstad; Chaitanya Swamy"}, {"ref_id": "b2", "title": "Inapproximability Results for Maximum Edge Biclique, Minimum Linear Arrangement, and Sparsest Cut", "journal": "SIAM J. Comput", "year": "2011", "authors": "Christoph Amb\u00fchl; Monaldo Mastrolilli; Ola Svensson"}, {"ref_id": "b3", "title": "Brand familiarity and advertising repetition effects", "journal": "Journal of consumer research", "year": "2003", "authors": "C Margaret; Kevin Lane Campbell;  Keller"}, {"ref_id": "b4", "title": "Warehouse Site Selection for Online Retailers in Inter-Connected Warehouse Networks", "journal": "", "year": "2017", "authors": "Can Chen; Junming Liu; Qiao Li; Yijun Wang; Hui Xiong; Shanshan Wu"}, {"ref_id": "b5", "title": "Finding the optimal location and keywords in obstructed and unobstructed space", "journal": "VLDB J", "year": "2018", "authors": "J Shane Farhana Murtaza Choudhury; Zhifeng Culpepper; Timos Bao;  Sellis"}, {"ref_id": "b6", "title": "Adoption of agricultural innovations in developing countries: A survey", "journal": "Economic development and cultural change", "year": "1985", "authors": "Gershon Feder; Richard E Just; David Zilberman"}, {"ref_id": "b7", "title": "Children's responses to repetitive television commercials", "journal": "Journal of Consumer Research", "year": "1980", "authors": "J Gerald; Marvin E Gorn;  Goldberg"}, {"ref_id": "b8", "title": "Econometric analysis", "journal": "Pearson Education India", "year": "2003", "authors": "H William;  Greene"}, {"ref_id": "b9", "title": "Advertising and the S-curve: A new approach", "journal": "Journal of Marketing Research", "year": "1979", "authors": " Johny K Johansson"}, {"ref_id": "b10", "title": "The Budgeted Maximum Coverage Problem", "journal": "Inf. Process. Lett", "year": "1999", "authors": "Samir Khuller; Anna Moss; Joseph Naor"}, {"ref_id": "b11", "title": "Examining the factors that influence early adopters' smartphone adoption: The case of college students", "journal": "Telematics and Informatics", "year": "2014", "authors": " Sang Yup Lee"}, {"ref_id": "b12", "title": "Efficient location-aware influence maximization", "journal": "", "year": "2014", "authors": "Guoliang Li; Shuo Chen; Jianhua Feng; Kian-Lee Tan; Wen-Syan Li"}, {"ref_id": "b13", "title": "On Facility Location with General Lower Bounds", "journal": "", "year": "2019", "authors": "Shi Li"}, {"ref_id": "b14", "title": "Aggregate advertising models: The state of the art", "journal": "Operations research", "year": "1979", "authors": "D C John;  Little"}, {"ref_id": "b15", "title": "SmartAdP: Visual Analytics of Large-scale Taxi Trajectories for Selecting Billboard Locations", "journal": "IEEE Trans. Vis. Comput. Graph", "year": "2017", "authors": "Dongyu Liu; Di Weng; Yuhong Li; Jie Bao; Yu Zheng; Huamin Qu; Yingcai Wu"}, {"ref_id": "b16", "title": "A new approach for maximizing bichromatic reverse nearest neighbor search", "journal": "Knowl. Inf. Syst", "year": "2013", "authors": "Yubao Liu; Raymond Chi-Wing Wong; Ke Wang; Zhijie Li; Cheng Chen; Zitong Chen"}, {"ref_id": "b17", "title": "The moderating influence of advertising context on ad repetition effects: The role of amount and type of elaboration", "journal": "Journal of Consumer Research", "year": "2007", "authors": "Prashant Malaviya"}, {"ref_id": "b18", "title": "Dynamic multi-commodity capacitated facility location: a mathematical modeling framework for strategic supply chain planning", "journal": "Computers & OR", "year": "2006", "authors": "M ; Teresa Melo; Stefan Nickel; Francisco Saldanha-Da-Gama"}, {"ref_id": "b19", "title": "Facility location and supply chain management -A review", "journal": "European Journal of Operational Research", "year": "2009", "authors": "M ; Teresa Melo; Stefan Nickel; Francisco Saldanha-Da-Gama"}, {"ref_id": "b20", "title": "The magical number seven, plus or minus two: Some limits on our capacity for processing information", "journal": "Psychological review", "year": "1956", "authors": "A George;  Miller"}, {"ref_id": "b21", "title": "The measurement of cumulative advertising effects", "journal": "The Journal of Business", "year": "1965", "authors": "S Kristian;  Palda"}, {"ref_id": "b22", "title": "The influence of financial incentives and other socio-economic factors on electric vehicle adoption", "journal": "Energy Policy", "year": "2014", "authors": "William Sierzchula; Sjoerd Bakker"}, {"ref_id": "b23", "title": "The shape of the advertising response function", "journal": "Journal of Advertising Research", "year": "1980", "authors": "L Julian; Johan Simon;  Arndt"}, {"ref_id": "b24", "title": "Is once really enough? Making generalizations about advertising's convex sales response function", "journal": "Journal of Advertising Research", "year": "2009", "authors": "Jennifer Taylor; Rachel Kennedy; Byron Sharp"}, {"ref_id": "b25", "title": "Advertising exposure, loyalty, and brand purchase: A two-stage model of choice", "journal": "Journal of marketing research", "year": "1988", "authors": "J Gerard;  Tellis"}, {"ref_id": "b26", "title": "Discrete choice methods with simulation", "journal": "Cambridge university press", "year": "2009", "authors": " Kenneth E Train"}, {"ref_id": "b27", "title": "The shape of advertising response functions revisited: A model of dynamic probabilistic thresholds", "journal": "Marketing Science", "year": "2004", "authors": "Demetrios Vakratsas; M Fred;  Feinberg; M Frank; Gurumurthy Bass;  Kalyanaram"}, {"ref_id": "b28", "title": "Reverse k Nearest Neighbor Search over Trajectories", "journal": "IEEE Trans. Knowl. Data Eng", "year": "2018", "authors": "Sheng Wang; Zhifeng Bao; J Shane Culpepper; Timos Sellis; Gao Cong"}, {"ref_id": "b29", "title": "Efficient Method for Maximizing Bichromatic Reverse Nearest Neighbor", "journal": "PVLDB", "year": "2009", "authors": "Raymond Chi-Wing Wong; M Tamer \u00d6zsu; Philip S Yu; Ada Wai-Chee; Lian Fu;  Liu"}, {"ref_id": "b30", "title": "Trajectory-driven Influential Billboard Placement", "journal": "", "year": "2018", "authors": "Ping Zhang; Zhifeng Bao; Yuchen Li; Guoliang Li; Yipeng Zhang; Zhiyong Peng"}, {"ref_id": "b31", "title": "MaxFirst for MaxBRkNN", "journal": "", "year": "2011", "authors": "Zenan Zhou; Wei Wu; Xiaohui Li; Mong-Li Lee; Wynne Hsu"}], "figures": [{"figure_label": "12", "figure_type": "figure", "figure_id": "fig_0", "figure_caption": "Figure 1 :Figure 2 :12Figure 1: The upper-bound influence function", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_1", "figure_caption": "Atrajectory database is denoted as T = {t 1 , t 2 , ..., t | T | }, where each trajectory t = {p 1 , p 2 , ..., p |t | } is a set of points generated from the trajectory of a user. Point p consists of the latitude lat and longitude lng. Given a billboard database U = {o 1 , o 2 , ..., o |U | }, each billboard o is a tuple {loc, w }, where loc is also a coordinate and w is the cost of billboard o.", "figure_data": ""}, {"figure_label": "32", "figure_type": "figure", "figure_id": "fig_2", "figure_caption": "Example 3 . 2 .32Assuming the same settings as in Example 3.1, we choose three billboard sets S 1 = {}, S 2 = {o 3 }, S 3 = {o 4 }. The respective influence and marginal influence values can be calculated as I (S 1 ) = 0, I (S 2 ) = 0.3576, I (S 3 ) = 0.2384, \u2206(S 3 |S 1 ) = 0.2384, \u2206(S 3 |S 2 ) = 0.657 \u2212 0.357 = 0.2994. Since S 1 \u2286 S 2 and \u2206(S 3 |S 1 ) < \u2206(S 3 |S 2 ). We thus conclude I (S) is not submodular.", "figure_data": ""}, {"figure_label": "3", "figure_type": "figure", "figure_id": "fig_3", "figure_caption": "Figure 3 :3Figure 3: A running example of branch-and-bound frameworkbranches under exploration in Algorithm 1.S is the set of billboards that have not yet been considered. S * is the set of billboards that have been chosen fromS by using the cost-effective greedy heuristic under the budget constraint. The algorithm terminates until adding any remaining billboards will exceed the budget (Lines 2.3-2.6). Then, a triple (S c , L a , U a ) is returned.Since I \u2191 (\u2022) is submodular, S c achieves a constant approximation ratio w.r.t. I \u2191 (\u2022) for all candidate solutions containing S a . It is noted that the tangent line of p \u2191 (S, t) for S = S a \u222a S * will be adjusted according to different S a before the launch of Algorithm 2. The adjustment of the tangent line ensures a tighter upper bound as depicted in Figure1. While the cardinality of S a increases, the point (x(S a ), f (x(S a ))) will move to the right. Therefore, the tangent line will shift from Line 1 to Line 2. Since the distance from l(x) to f (x) decreases, it achieves a tighter upper bound.Example 4.1.Figure 3 shows the running example of the branchand-bound framework. The top part is the search tree. Each node is an entry (S,S, U ). The table shows the values of S c , U G and L U for each search step. Let B = 50, o 1 .w = 10, o 2 .w = 30, o 3 .w = 30, o 4 .w = 20. The rest of the parameters are the same as Example 3.1.", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_4", "figure_caption": "Figure 3 shows the running example of the branchand-bound framework. The top part is the search tree. Each node is an entry (S,S, U ). The table shows the values of S c , U G and L U for each search step. Let B = 50, o 1 .w = 10, o 2 .w = 30, o 3 .w = 30, o 4 .w = 20. The rest of the parameters are the same as Example 3.1. We first initialize H with an entry ({}, {o 1 , o 2 , o 3 , o 4 }, \u221e) as the root node of the searching tree. Next, at step 1, we pop this entry, and invoke Algorithm 2 to generate two branches based on this entry, and push them into H . Since U b > U a > L G and L b > L a > L G , we update\u015c with S c = {o 3 , o 4 } and set L G = L b = 0.6571. Similarly, at step 4, the branch S a is pushed into H since U a > L G . Note that, the branch S b will be pruned since U b < L G . For now, all branches based on the root node have been generated, and those with U > L G have been pushed into H . Subsequently, the branch with S b = {} andS = {o 2 , o 3 , o 4 } is popped because it has the highest upper bound in H . U G will be replaced by U of this branch, which means U G = U = 0.7657. Six branches are generated with or without o 2 , o 3 and o 4 respectively.", "figure_data": ""}, {"figure_label": "41", "figure_type": "figure", "figure_id": "fig_5", "figure_caption": "Theorem 4 . 1 .41The branch-and-bound framework invoking Algorithm 2 achieves an approximation factor of1 2 (1 \u2212 1 e ) for the ICOA problem.Proof. Let OPT denote the optimal solution. Let\u015c denote the solution set from Algorithm 1. S * = {o 1 , ..., o n }. Let S * denote the feasible set returned from Algorithm 2. In each iteration, o will be added into S * . Let S * n = {o 1 , ..., o n } , where o n is the last one added into S * n\u22121 within the budget constraint. o n+1 is the first billboard considered but not added to S * n , because its addition would violate the budget B.", "figure_data": ""}, {"figure_label": "42", "figure_type": "figure", "figure_id": "fig_6", "figure_caption": "Theorem 4 . 2 .42The branch-and-bound framework invoking Algorithm 2 with \u03b8 -termination achieves an approximation ratio of \u03b8 2 (1 \u2212 1 e ) for the ICOA problem.", "figure_data": ""}, {"figure_label": "3315367", "figure_type": "figure", "figure_id": "fig_7", "figure_caption": "Algorithm 3 : 3 . 1 5 for o \u2208S do 3 . 6 if 7 \u03b43315367Progressive-ComputeBound Input: S a ,S,\u03f5 Output: (S c , L a , U a ) Reorder o \u2208S by \u2206 \u2191 ({o } |S a ) o .w 3.2 h \u2190 max o \u2208S \u2206 \u2191 ({o } |S a ) o .w , r = B \u2212 cost(S a ) 3.3 S * \u2190 \u03d5 3.4 while cost(S) + cost(S * ) \u2264 B do 3.cost(S a \u222a S * ) + o.cost \u2264 B then 3.({o}, S * ) = \u2206 \u2191 (S * \u222a {o}|S a ) \u2212 \u2206 \u2191 (S * |S a )", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_8", "figure_caption": "Break", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_9", "figure_caption": ", 300k, 400k, 500k | T | (NYC) 100k, 200k, 300k, 400k, 500k, (1m, ..., 5m) | T | (LA) 50k, 100k, 150k, 200k, 250k \u03b2 /\u03b1 3/7, 3/8, 3/9, 3/10, 3/11 \u03f5 10 \u22124 , 10 \u22123 , 10 \u22122 , 10 \u22121 , 1 \u03b8 0.86, 0.88, 0.90, 0.92, 0.94 \u03bb 25m, 50m, 75m, 100m 10 10-20 20-30 30-40 40-50 >50 Percentage of billboards (%) Cost (*k) (b) Billboard Cost", "figure_data": ""}, {"figure_label": "4", "figure_type": "figure", "figure_id": "fig_10", "figure_caption": "Figure 4 :4Figure 4: Distribution of Datasets in NYCtrajectory is close to that of the trip record, and (2) the travel time of the generated trajectory is close to that of the trip record (within 5% error rate). For LA, as there is no public taxi record, we collect the Foursquare check-in data and generate the trajectories using Google Maps API by randomly selecting the pick-up and drop-out locations from the check-ins.Figure4ashows the distribution of trajectories according to the number of billboards that a trajectory can pass over in NYC. We find more than 50% trajectories can pass over more than 5 billboards, which validates the motivation of this work as well as our use of the logistic function for influence modelling. Figure4bshows the distribution of billboard cost.", "figure_data": ""}, {"figure_label": "567", "figure_type": "figure", "figure_id": "fig_11", "figure_caption": "Figure 5 :Figure 6 :Figure 7 :567Figure 5: Varying the budget B", "figure_data": ""}, {"figure_label": "8", "figure_type": "figure", "figure_id": "fig_12", "figure_caption": "Figure 8 :8Figure 8: Comparison with LazyProbe linearly w.r.t. |T |, except for Top-k, because it chooses the billboards that can influence the most number of trajectories, which can be calculated off-line.", "figure_data": ""}, {"figure_label": "9", "figure_type": "figure", "figure_id": "fig_14", "figure_caption": "Figure 9 :9Figure 9: Varying \u03b2/\u03b1 in NYC", "figure_data": ""}, {"figure_label": "10", "figure_type": "figure", "figure_id": "fig_15", "figure_caption": "Figure 10 :10Figure 10: Varying \u03f5 in NYC", "figure_data": ""}, {"figure_label": "11", "figure_type": "figure", "figure_id": "fig_16", "figure_caption": "Figure 11 :11Figure 11: Varying \u03b8 in NYC", "figure_data": ""}, {"figure_label": "12", "figure_type": "figure", "figure_id": "fig_17", "figure_caption": "Figure 12 :12Figure 12: Varying \u03bb in NYC", "figure_data": ""}, {"figure_label": "1314", "figure_type": "figure", "figure_id": "fig_18", "figure_caption": "Figure 13 :Figure 14 :1314Figure 13: Test on different cost setting strategies", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_19", "figure_caption": "with |U \u2032 | \u2265 k, |V \u2032 | \u2265 k \u2032 and the induced subgraph of U \u2032 and V \u2032 is a biclique. The decision version of BD is equivalent to an optimization problem where we fix |U \u2032 | = k and ask what is the maximum |V \u2032 | s.t. the induced subgraph is a biclique. We reduce the optimization version of BD to ICOA with the following process: (1) \u2200u \u2208 U of BD, we create a billboard x u with a uniform cost of 1; (2) \u2200v \u2208 V of BD, we create a trajectory x v as the trajectory set T ; (3) \u2200(u, v) \u2208 E of BD, we make sure x u is close to x v so that dist(x u , x v ) \u2264 \u03bb; (4) We set the budget of ICOA as k, which is the same as the input of the optimization version of BD; (5) We set \u03b1 = k \u2022 |T | and \u03b2 = |T |.", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_20", "figure_caption": "proof for the lemma.", "figure_data": ""}, {"figure_label": "1", "figure_type": "table", "figure_id": "tab_0", "figure_caption": "Related work    ", "figure_data": "ICOATIPSite SelectionAudienceMoving trajectoryMoving trajectoryFixed locationInfluenceLogisticOne-time impressionN.A.|S|Budget ConstrainedBudget ConstrainedPredefined k -size"}, {"figure_label": "2", "figure_type": "table", "figure_id": "tab_1", "figure_caption": "Frequently used notations Symbol Description p(S , t ) (p \u2191 (S , t )) The (upper bound) influence of S to t I (S ) (I \u2191 (S ))The (upper bound) influence of S to T \u2206(S 2 |S 1 )The marginal influence of adding S 2 into S 1", "figure_data": "Influence( ) a xSS t xa"}, {"figure_label": "", "figure_type": "table", "figure_id": "tab_2", "figure_caption": "Algorithm 2: ComputeBound Input: S a ,S Output: (S c , L a , U a ) 2.1 S * \u2190 \u03d5 2.2 while cost(S a ) + cost(S * ) \u2264 B and |S | 0 do Select o \u2208S that maximize \u2206 \u2191 ({o } |S a \u222aS * ) o .w", "figure_data": "2.32.4if cost(S"}, {"figure_label": "", "figure_type": "table", "figure_id": "tab_3", "figure_caption": "Given the upper bound function I \u2191 (\u2022), we introduce Algorithm 2 to estimate the upper bound of a branch. S a is one of the two", "figure_data": "Sa{ } o 1 2 { , , } 3 4 o o oa S S{ o 3 2 { o} , o 4}Ua0.4768Ua0.47681 ob S S{} 2 { , , } 3 4 o o ob S S{} 3 { o,4 o}Ub0.7657Ub0.7657S{}2 oS U1 2 { , , , } 3 o o o o 4 \uf0a5o\u2026\u2026a3{ o}S4a{ o,o}S4 o {}S23a{ o,o,o}U0.7657S123aoU0.76574b{}S{ o,o,o}S123bU0.4768"}, {"figure_label": "3", "figure_type": "table", "figure_id": "tab_5", "figure_caption": "Statistics of datasets", "figure_data": "| T || U | AvgDistance AvgTravelTime AvgPointNYC 600k 15002.9km569s159LA250k 25002.7km511s138"}, {"figure_label": "4", "figure_type": "table", "figure_id": "tab_6", "figure_caption": "Parameter settings", "figure_data": ""}], "formulas": [{"formula_id": "formula_0", "formula_text": "p(S, t) = 1 1+exp {\u03b1 \u2212\u03b2 \u2022\u03a3 o i \u2208S I (o i ,t )} i f \u2203o i \u2208 S I (o i , t) = 1 0 otherwise (1)", "formula_coordinates": [3.0, 325.09, 156.3, 233.11, 24.32]}, {"formula_id": "formula_1", "formula_text": "I (S) = t \u2208T p(S, t)(2)", "formula_coordinates": [3.0, 407.08, 292.55, 151.12, 19.4]}, {"formula_id": "formula_2", "formula_text": "Formally,\u015c = argmax cost (S )\u2264B I (S)(3)", "formula_coordinates": [3.0, 317.96, 497.51, 240.25, 25.8]}, {"formula_id": "formula_3", "formula_text": "S 2 into S 1 is \u2206(S 2 |S 1 ) = I (S 1 \u222a S 2 ) \u2212 I (S 1 )", "formula_coordinates": [3.0, 317.69, 540.45, 240.52, 19.79]}, {"formula_id": "formula_4", "formula_text": "* |S 1 ) \u2265 \u2206(S * |S 2 ) for all S 1 \u2286 S 2 .", "formula_coordinates": [3.0, 429.23, 582.64, 112.98, 10.47]}, {"formula_id": "formula_5", "formula_text": "\u015c 1.1\u015c \u2190 \u03d5, S \u2190 \u03d5,S \u2190 U 1.2 L G \u2190 0, U G \u2190 \u221e 1.3 Initialize max heap H \u2190 (S,S, U ) 1.4 while L G < U G do 1.5 (S,S, U ) \u2190 top of H 1.6 Select o \u2208S 1.7 if cost {S } + o.w \u2264 B then 1.8S \u2190S\\{o} 1.9 S a \u2190 S \u222a {o} 1.10 S b \u2190 S 1.11 (S c , L a , U a ) \u2190 ComputeBound(S a ,S) 1.12 if L a > L G then 1.13 L G \u2190 L a ,\u015c \u2190 S c 1.14 if U a > L G then 1.15 H \u2190 H \u222a (S a ,S, U a ) 1.16", "formula_coordinates": [4.0, 49.8, 113.62, 185.9, 194.71]}, {"formula_id": "formula_6", "formula_text": "p \u2191 (S, t) = l(x) if x(S a ) \u2264 x \u2264 x S a t f (x) if x S a t < x(4)", "formula_coordinates": [4.0, 368.25, 506.59, 189.95, 27.72]}, {"formula_id": "formula_7", "formula_text": "p \u2191 (S, t) = f (x)(5)", "formula_coordinates": [4.0, 411.11, 544.98, 147.09, 11.06]}, {"formula_id": "formula_8", "formula_text": "I \u2191 (S) = t \u2208T p \u2191 (S, t)(6)", "formula_coordinates": [4.0, 403.3, 607.23, 154.9, 21.32]}, {"formula_id": "formula_9", "formula_text": "\u2206 \u2191 (S 2 |S 1 ) = I \u2191 (S 1 \u222a S 2 ) \u2212 I \u2191 (S 1 )(7", "formula_coordinates": [4.0, 380.03, 676.37, 175.0, 11.06]}, {"formula_id": "formula_10", "formula_text": "2 o 4 o 3 o", "formula_coordinates": [5.0, 217.91, 118.57, 9.79, 75.41]}, {"formula_id": "formula_11", "formula_text": "\u2026\u2026 S b S S b U {} 2 3 { , } o o 0.3576 UG c S LG 0 {} \uf0a5 S a 0.4768 1 3 { , } o o \uf0a5 S b 0.6571 3 4 { , } o o \uf0a5 S a 0.6571 3 4 { , } o o \uf0a5 S b 0.6571 3 4 { , } o o \uf0a5 0.7657 S a 0.6571 3 4 { , } o o 0.7657 S b 0.6571 3 4 { , } o o 0.7657 S a 0.6571 3 4 { , } o o 0.7657 S b 0.6571 3 4 { , } o o", "formula_coordinates": [5.0, 62.14, 103.7, 222.04, 182.23]}, {"formula_id": "formula_12", "formula_text": "\u2206 \u2191 (S * n |S a ) + \u2206 \u2191 ({o n+1 }|S a ) \u2265 \u2206 \u2191 (S * n \u222a {o n+1 }|S a ) \u2265 1 \u2212 1 e \u2022 \u2206 \u2191 (OPT |S a ) holds. Therefore, at least one of \u2206 \u2191 (S * n |S a ) and \u2206 \u2191 ({o n+1 }|S a ) is not smaller than 1 2 (1 \u2212 1 e ) \u2022 \u2206 \u2191 (OPT |S a ).", "formula_coordinates": [5.0, 317.96, 279.25, 240.25, 51.95]}, {"formula_id": "formula_13", "formula_text": "\u2206 \u2191 (\u015c) \u2265 1 2 (1\u2212 1 e )\u2022\u2206 \u2191 (OPT |S a ) based on all explored S a . Hence, I \u2191 (\u015c) \u2265 1 2 (1 \u2212 1 e ) \u2022 I \u2191 (OPT |S a ).", "formula_coordinates": [5.0, 317.82, 332.42, 241.36, 25.72]}, {"formula_id": "formula_14", "formula_text": "3.13 h \u2190 h 1+\u03f5 3.14 if h \u2264 \u2206 \u2191 (S * |S a ) r \u2022 e \u22121 1\u2212e \u22121 then 3.15 Break 3.16 S c \u2190 (S a \u222a S * ), L a \u2190 I (S a \u222a S * ), U a \u2190 I \u2191 (S * \u222a S a )", "formula_coordinates": [6.0, 49.4, 273.07, 206.53, 50.09]}, {"formula_id": "formula_15", "formula_text": "\u2206 \u2191 (S * i |S a ) \u2212 \u2206 \u2191 (S * i\u22121 |S a ) \u2265 o i .w (1 + \u03f5)r \u2022 (\u2206 \u2191 (OPT |S a ) \u2212 \u2206 \u2191 (S * i\u22121 |S a ))", "formula_coordinates": [6.0, 53.89, 557.45, 241.11, 21.19]}, {"formula_id": "formula_16", "formula_text": "\u03b4 ({o}, S * ) o.w \u2265 h if o = o i \u2264 h(1 + \u03f5) if o \u2208 OPT \\(S * \u222a {o i }) (8)", "formula_coordinates": [6.0, 87.13, 622.24, 206.92, 24.37]}, {"formula_id": "formula_17", "formula_text": "we have \u03b4 ({o i }, S * ) \u2265 o i .w (1+\u03f5 )(cost (O PT \\S * )) \u03a3 o \u2208O PT \\S * \u03b4 ({o}, S * ) \u2265 o i .w (1+\u03f5 )r \u03a3 o \u2208O PT \\S * \u03b4 ({o}, S * ).", "formula_coordinates": [6.0, 53.47, 683.24, 240.31, 27.77]}, {"formula_id": "formula_18", "formula_text": "\u03b4 ({o i }, S * i\u22121 ) \u2265 o i .w (1 + \u03f5)r \u03a3 o \u2208O PT \\S * i \u22121 \u03b4 ({o}, S * i\u22121 ) \u2265 o i .w (1 + \u03f5)r \u2022 \u2206 \u2191 (OPT \u222a S * i\u22121 |S a ) \u2212 \u2206 \u2191 (S * i\u22121 |S a ) \u2265 o i .w (1 + \u03f5)r \u2022 \u2206 \u2191 (OPT |S a ) \u2212 \u2206 \u2191 (S * i\u22121 |S a )", "formula_coordinates": [6.0, 326.11, 109.99, 220.09, 64.46]}, {"formula_id": "formula_19", "formula_text": "\u2206 \u2191 (S * i |S a ) \u2212 \u2206 \u2191 (S * i\u22121 |S a ) \u2265 o i .w (1 + \u03f5)r \u2022 (\u2206 \u2191 (OPT |S a ) \u2212 \u2206 \u2191 (S * i\u22121 |S a ))", "formula_coordinates": [6.0, 318.05, 189.59, 241.11, 21.19]}, {"formula_id": "formula_20", "formula_text": "\u2206 \u2191 (S * n \u2032 +1 |S a ) \u2265 1 \u2212 n+1 k =1 (1 \u2212 o k .w (1 + \u03f5)r ) \u2022 \u2206 \u2191 (OPT |S a ) \u2265 1 \u2212 e \u2212(n+1) (1+\u03f5 )(n \u2032 +1) ) \u2022 \u2206 \u2191 (OPT |S a )", "formula_coordinates": [6.0, 341.06, 274.81, 194.13, 46.1]}, {"formula_id": "formula_21", "formula_text": "\u2206 \u2191 (S * n \u2032 |S a ) \u2265 1 2 1 \u2212 e \u2212(n+1) (1+\u03f5 )(n \u2032 +1) ) \u2022 \u2206 \u2191 (OPT |S a )", "formula_coordinates": [6.0, 353.66, 341.78, 168.94, 18.46]}, {"formula_id": "formula_22", "formula_text": "\u2206 \u2191 (S * |S a ) \u2265 1 2 (1 \u2212 e \u22121 \u2212 \u03f5) \u2022 \u2206 \u2191 (OPT |S a )", "formula_coordinates": [6.0, 362.41, 426.85, 151.42, 16.31]}, {"formula_id": "formula_23", "formula_text": "\u2206 \u2191 (OPT |S a ) \u2264 \u2206 \u2191 (OPT \u222a S * |S a ) \u2264 \u2206 \u2191 (S * |S a ) r \u2022 e \u22121 1 \u2212 e \u22121 \u2022 \u03a3 o \u2208O PT S * o.w + \u2206 \u2191 (S * |S a ) \u2264 1 1 \u2212 e \u22121 \u2206 \u2191 (S * |S a ) Therefore, \u2206 \u2191 (S * |S a ) \u2265 1 2 (1 \u2212 1 e \u2212 \u03f5) \u2022 \u2206 \u2191 (OPT |S a ).", "formula_coordinates": [6.0, 317.69, 460.76, 238.88, 77.46]}, {"formula_id": "formula_24", "formula_text": "I \u2191 (S) \u2265 \u03b8 2 (1 \u2212 1 e \u2212 \u03f5) \u2022 I \u2191 (OPT ). Theorem 5.2 is proved.", "formula_coordinates": [6.0, 317.69, 537.9, 241.9, 19.34]}, {"formula_id": "formula_25", "formula_text": "\u2206 \u2191 ({o } |S * ) o .w", "formula_coordinates": [7.0, 343.63, 241.17, 33.98, 15.76]}, {"formula_id": "formula_26", "formula_text": "U \u2032 \u2286 U , V \u2032 \u2286 V", "formula_coordinates": [11.0, 446.68, 262.62, 57.46, 10.47]}, {"formula_id": "formula_27", "formula_text": "\u2022 OPT I \u2212 1 | T | \u2264 OPT B \u2264 2 \u2022 OPT I .", "formula_coordinates": [11.0, 324.21, 434.19, 122.44, 11.53]}, {"formula_id": "formula_28", "formula_text": "I (S) =", "formula_coordinates": [11.0, 317.82, 559.9, 22.18, 8.97]}], "doi": "10.1145/3292500.3330829"}