{"title": "RAFT: Recurrent All-Pairs Field Transforms for Optical Flow", "authors": "Zachary Teed; Jia Deng", "pub_date": "", "abstract": "We introduce Recurrent All-Pairs Field Transforms (RAFT), a new deep network architecture for optical flow. RAFT extracts perpixel features, builds multi-scale 4D correlation volumes for all pairs of pixels, and iteratively updates a flow field through a recurrent unit that performs lookups on the correlation volumes. RAFT achieves stateof-the-art performance. On KITTI, RAFT achieves an F1-all error of 5.10%, a 16% error reduction from the best published result (6.10%). On Sintel (final pass), RAFT obtains an end-point-error of 2.855 pixels, a 30% error reduction from the best published result (4.098 pixels). In addition, RAFT has strong cross-dataset generalization as well as high efficiency in inference time, training speed, and parameter count. Code is available at https://github.com/princeton-vl/RAFT.", "sections": [{"heading": "Introduction", "text": "Optical flow is the task of estimating per-pixel motion between video frames. It is a long-standing vision problem that remains unsolved. The best systems are limited by difficulties including fast-moving objects, occlusions, motion blur, and textureless surfaces.\nOptical flow has traditionally been approached as a hand-crafted optimization problem over the space of dense displacement fields between a pair of images [21,51,13]. Generally, the optimization objective defines a trade-off between a data term which encourages the alignment of visually similar image regions and a regularization term which imposes priors on the plausibility of motion. Such an approach has achieved considerable success, but further progress has appeared challenging, due to the difficulties in hand-designing an optimization objective that is robust to a variety of corner cases.\nRecently, deep learning has been shown as a promising alternative to traditional methods. Deep learning can side-step formulating an optimization problem and train a network to directly predict flow. Current deep learning methods [25,42,22,49,20] have achieved performance comparable to the best traditional methods while being significantly faster at inference time. A key question for further research is designing effective architectures that perform better, train more easily and generalize well to novel scenes.\nWe introduce Recurrent All-Pairs Field Transforms (RAFT), a new deep network architecture for optical flow. RAFT ", "publication_ref": ["b20", "b50", "b12", "b24", "b41", "b21", "b48", "b19"], "figure_ref": [], "table_ref": []}, {"heading": "4D Correlation Volumes", "text": "Fig. 1: RAFT consists of 3 main components: (1) A feature encoder that extracts per-pixel features from both input images, along with a context encoder that extracts features from only I 1 . (2) A correlation layer which constructs a 4D W \u00d7 H \u00d7 W \u00d7 H correlation volume by taking the inner product of all pairs of feature vectors. The last 2-dimensions of the 4D volume are pooled at multiple scales to construct a set of multi-scale volumes. (3) An update operator which recurrently updates optical flow by using the current estimate to look up values from the set of correlation volumes.\n-State-of-the-art accuracy: On KITTI [18], RAFT achieves an F1-all error of 5.10%, a 16% error reduction from the best published result (6.10%). On Sintel [11] (final pass), RAFT obtains an end-point-error of 2.855 pixels, a 30% error reduction from the best published result (4.098 pixels). -Strong generalization: When trained only on synthetic data, RAFT achieves an end-point-error of 5.04 pixels on KITTI [18], a 40% error reduction from the best prior deep network trained on the same data (8.36 pixels). -High efficiency: RAFT processes 1088\u00d7436 videos at 10 frames per second on a 1080Ti GPU. It trains with 10X fewer iterations than other architectures. A smaller version of RAFT with 1/5 of the parameters runs at 20 frames per second while still outperforming all prior methods on Sintel.\nRAFT consists of three main components: (1) a feature encoder that extracts a feature vector for each pixel; (2) a correlation layer that produces a 4D correlation volume for all pairs of pixels, with subsequent pooling to produce lower resolution volumes; (3) a recurrent GRU-based update operator that retrieves values from the correlation volumes and iteratively updates a flow field initialized at zero. Fig. 1 illustrates the design of RAFT.\nThe RAFT architecture is motivated by traditional optimization-based approaches. The feature encoder extracts per-pixel features. The correlation layer computes visual similarity between pixels. The update operator mimics the steps of an iterative optimization algorithm. But unlike traditional approaches, features and motion priors are not handcrafted but learned-learned by the feature encoder and the update operator respectively.\nThe design of RAFT draws inspiration from many existing works but is substantially novel. First, RAFT maintains and updates a single fixed flow field at high resolution. This is different from the prevailing coarse-to-fine design in prior work [42,49,22,23,50], where flow is first estimated at low resolution and upsampled and refined at high resolution. By operating on a single high-resolution flow field, RAFT overcomes several limitations of a coarse-to-fine cascade: the difficulty of recovering from errors at coarse resolutions, the tendency to miss small fast-moving objects, and the many training iterations (often over 1M) typically required for training a multi-stage cascade.\nSecond, the update operator of RAFT is recurrent and lightweight. Many recent works [24,42,49,22,25] have included some form of iterative refinement, but do not tie the weights across iterations [42,49,22] and are therefore limited to a fixed number of iterations. To our knowledge, IRR [24] is the only deep learning approach [24] that is recurrent. It uses FlowNetS [15] or PWC-Net [42] as its recurrent unit. When using FlowNetS, it is limited by the size of the network (38M parameters) and is only applied up to 5 iterations. When using PWC-Net, iterations are limited by the number of pyramid levels. In contrast, our update operator has only 2.7M parameters and can be applied 100+ times during inference without divergence.\nThird, the update operator has a novel design, which consists of a convolutional GRU that performs lookups on 4D multi-scale correlation volumes; in contrast, refinement modules in prior work typically use only plain convolution or correlation layers.\nWe conduct experiments on Sintel [11] and KITTI [18]. Results show that RAFT achieves state-of-the-art performance on both datasets. In addition, we validate various design choices of RAFT through extensive ablation studies.", "publication_ref": ["b17", "b10", "b17", "b41", "b48", "b21", "b22", "b49", "b23", "b41", "b48", "b21", "b24", "b41", "b48", "b21", "b23", "b23", "b14", "b41", "b10", "b17"], "figure_ref": [], "table_ref": []}, {"heading": "Related Work", "text": "Optical Flow as Energy Minimization Optical flow has traditionally been treated as an energy minimization problem which imposes a tradeoff between a data term and a regularization term. Horn and Schnuck [21] formulated optical flow as a continuous optimization problem using a variational framework, and were able to estimate a dense flow field by performing gradient steps. Black and Anandan [9] addressed problems with oversmoothing and noise sensitivity by introducing a robust estimation framework. TV-L1 [51] replaced the quadratic penalties with an L1 data term and total variation regularization, which allowed for motion discontinuities and was better equipped to handle outliers. Improvements have been made by defining better matching costs [45,10] and regularization terms [38].\nSuch continuous formulations maintain a single estimate of optical flow which is refined at each iteration. To ensure a smooth objective function, a first order Taylor approximation is used to model the data term. As a result, they only work well for small displacements. To handle large displacements, the coarse-to-fine strategy is used, where an image pyramid is used to estimate large displacements at low resolution, then small displacements refined at high resolution. But this coarse-to-fine strategy may miss small fast-moving objects and have difficulty recovering from early mistakes. Like continuous methods, we maintain a single estimate of optical flow which is refined with each iteration. However, since we build correlation volumes for all pairs at both high resolution and low resolution, each local update uses information about both small and large displacements. In addition, instead of using a subpixel Taylor approximation of the data term, our update operator learns to propose the descent direction.\nMore recently, optical flow has also been approached as a discrete optimization problem [35,13,47] using a global objective. One challenge of this approach is the massive size of the search space, as each pixel can be reasonably paired with thousands of points in the other frame. Menez et al [35] pruned the search space using feature descriptors and approximated the global MAP estimate using message passing. Chen et al. [13] showed that by using the distance transform, solving the global optimization problem over the full space of flow fields is tractable. DCFlow [47] showed further improvements by using a neural network as a feature descriptor, and constructed a 4D cost volume over all pairs of features. The 4D cost volume was then processed using the Semi-Global Matching (SGM) algorithm [19]. Like DCFlow, we also constructed 4D cost volumes over learned features. However, instead of processing the cost volumes using SGM, we use a neural network to estimate flow. Our approach is end-to-end differentiable, meaning the feature encoder can be trained with the rest of the network to directly minimize the error of the final flow estimate. In contrast, DCFlow requires their network to be trained using an embedding loss between pixels; it cannot be trained directly on optical flow because their cost volume processing is not differentiable.\nDirect Flow Prediction Neural networks have been trained to directly predict optical flow between a pair of frames, side-stepping the optimization problem completely. Coarse-to-fine processing has emerged as a popular ingredient in many recent works [42,50,22,23,24,49,20,8,52]. In contrast, our method maintains and updates a single high-resolution flow field.\nIterative Refinement for Optical Flow Many recent works have used iterative refinement to improve results on optical flow [25,39,42,22,49] and related tasks [29,53,44,28]. Ilg et al. [25] applied iterative refinement to optical flow by stacking multiple FlowNetS and FlowNetC modules in series. SpyNet [39], PWC-Net [42], LiteFlowNet [22], and VCN [49] apply iterative refinement using coarse-to-fine pyramids. The main difference of these approaches from ours is that they do not share weights between iterations.\nMore closely related to our approach is IRR [24], which builds off of the FlownetS and PWC-Net architecture but shares weights between refinement networks. When using FlowNetS, it is limited by the size of the network (38M parameters) and is only applied up to 5 iterations. When using PWC-Net, iterations are limited by the number of pyramid levels. In contrast, we use a much simpler refinement module (2.7M parameters) which can be applied for 100+ iterations during inference without divergence. Our method also shares similarites with Devon [31], namely the construction of the cost volume without warping and fixed resolution updates. However, Devon does not have any recurrent unit. It also differs from ours regarding large displacements. Devon handles large displacements using a dilated cost volume while our approach pools the correlation volume at multiple resolutions.\nOur method also has ties to TrellisNet [5] and Deep Equilibrium Models (DEQ) [6]. Trellis net uses depth tied weights over a large number of layers, DEQ simulates an infinite number of layers by solving for the fixed point directly. TrellisNet and DEQ were designed for sequence modeling tasks, but we adopt the core idea of using a large number of weight-tied units. Our update operator uses a modified GRU block [14], which is similar to the LSTM block used in TrellisNet. We found that this structure allows our update operator to more easily converge to a fixed flow field. Learning to Optimize Many problems in vision can be formulated as an optimization problem. This has motivated several works to embed optimization problems into network architectures [4,3,43,32,44]. These works typically use a network to predict the inputs or parameters of the optimization problem, and then train the network weights by backpropogating the gradient through the solver, either implicitly [4,3] or unrolling each step [32,43]. However, this technique is limited to problems with an objective that can be easily defined.\nAnother approach is to learn iterative updates directly from data [1,2]. These approaches are motivated by the fact that first order optimizers such as Primal Dual Hybrid Gradient (PDHG) [12] can be expressed as a sequence of iterative update steps. Instead of using an optimizer directly, Adler et al. [1] proposed building a network which mimics the updates of a first order algorithm. This approach has been applied to inverse problems such as image denoising [26], tomographic reconstruction [2], and novel view synthesis [17]. TVNet [16] implemented the TV-L1 algorithm as a computation graph, which enabled the training the TV-L1 parameters. However, TVNet operates directly based on intensity gradients instead of learned features, which limits the achievable accuracy on challenging datasets such as Sintel.\nOur approach can be viewed as learning to optimize: our network uses a large number of update blocks to emulate the steps of a first-order optimization algorithm. However, unlike prior work, we never explicitly define a gradient with respect to some optimization objective. Instead, our network retrieves features from correlation volumes to propose the descent direction.", "publication_ref": ["b20", "b8", "b50", "b44", "b9", "b37", "b34", "b12", "b46", "b34", "b12", "b46", "b18", "b41", "b49", "b21", "b22", "b23", "b48", "b19", "b7", "b51", "b24", "b38", "b41", "b21", "b48", "b28", "b52", "b43", "b27", "b24", "b38", "b41", "b21", "b48", "b23", "b30", "b4", "b5", "b13", "b3", "b2", "b42", "b31", "b43", "b3", "b2", "b31", "b42", "b0", "b1", "b11", "b0", "b25", "b1", "b16", "b15"], "figure_ref": [], "table_ref": []}, {"heading": "Approach", "text": "Given a pair of consecutive RGB images, I 1 , I 2 , we estimate a dense displacement field (f 1 , f 2 ) which maps each pixel (u, v) in I 2 to its corresponding coordinates (u , v ) = (u + f 1 (u), v + f 2 (v)) in I 2 . An overview of our approach is given in Figure 1. Our method can be distilled down to three stages: (1) feature extraction, (2) computing visual similarity, and (3) iterative updates, where all stages are differentiable and composed into an end-to-end trainable architecture.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Image 1", "text": "Image 2\n\u2208 \u00d7 \u00d7 \u00d7 1 \u2208 \u00d7 \u00d7 / 2 \u00d7 / 2 2 \u2208 \u00d7 \u00d7 / 4 \u00d7 / 4\n3 Fig. 2: Building correlation volumes. Here we depict 2D slices of a full 4D volume. For a feature vector in I 1 , we take take the inner product with all pairs in I 2 , generating a 4D W \u00d7H \u00d7W \u00d7H volume (each pixel in I 2 produces a 2D response map). The volume is pooled using average pooling with kernel sizes {1, 2, 4, 8}.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Feature Extraction", "text": "Features are extracted from the input images using a convolutional network. The feature encoder network is applied to both I 1 and I 2 and maps the input images to dense feature maps at a lower resolution. Our encoder, g \u03b8 outputs features at 1/8 resolution g \u03b8 : R H\u00d7W \u00d73 \u2192 R H/8\u00d7W/8\u00d7D where we set D = 256. The feature encoder consists of 6 residual blocks, 2 at 1/2 resolution, 2 at 1/4 resolution, and 2 at 1/8 resolution (more details in the supplemental material). We additionally use a context network. The context network extracts features only from the first input image I 1 . The architecture of the context network, h \u03b8 is identical to the feature extraction network. Together, the feature network g \u03b8 and the context network h \u03b8 form the first stage of our approach, which only need to be performed once.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Computing Visual Similarity", "text": "We compute visual similarity by constructing a full correlation volume between all pairs. Given image features g \u03b8 (I 1 ) \u2208 R H\u00d7W \u00d7D and g \u03b8 (I 2 ) \u2208 R H\u00d7W \u00d7D , the correlation volume is formed by taking the dot product between all pairs of feature vectors. The correlation volume, C, can be efficiently computed as a single matrix multiplication.\nC(g \u03b8 (I 1 ), g \u03b8 (I 2 )) \u2208 R H\u00d7W \u00d7H\u00d7W , C ijkl = h g \u03b8 (I 1 ) ijh \u2022 g \u03b8 (I 2 ) klh (1)\nCorrelation Pyramid: We construct a 4-layer pyramid {C 1 , C 2 , C 3 , C 4 } by pooling the last two dimensions of the correlation volume with kernel sizes 1, 2, 4, and 8 and equivalent stride (Figure 2). Thus, volume C k has dimensions\nH \u00d7 W \u00d7 H/2 k \u00d7 W/2 k .\nThe set of volumes gives information about both large and small displacements; however, by maintaining the first 2 dimensions (the I 1 dimensions) we maintain high resolution information, allowing our method to recover the motions of small fast-moving objects.\nCorrelation Lookup: We define a lookup operator L C which generates a feature map by indexing from the correlation pyramid. Given a current estimate of optical flow (f 1 , f 2 ), we map each pixel x = (u, v) in I 1 to its estimated correspondence in I 2 : x = (u + f 1 (u), v + f 2 (v)). We then define a local grid around\nx N (x ) r = {x + dx | dx \u2208 Z 2 , ||dx|| 1 \u2264 r} (2)\nas the set of integer offsets which are within a radius of r units of x using the L1 distance. We use the local neighborhood N (x ) r to index from the correlation volume. Since N (x ) r is a grid of real numbers, we use bilinear sampling.\nWe perform lookups on all levels of the pyramid, such that the correlation volume at level k, C k , is indexed using the grid N (x /2 k ) r . A constant radius across levels means larger context at lower levels: for the lowest level, k = 4 using a radius of 4 corresponds to a range of 256 pixels at the original resolution. The values from each level are then concatenated into a single feature map.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Efficient Computation for High Resolution Images:", "text": "The all pairs correlation scales O(N 2 ) where N is the number of pixels, but only needs to be computed once and is constant in the number of iterations M . However, there exists an equivalent implementation of our approach which scales O(N M ) exploiting the linearity of the inner product and average pooling. Consider the cost volume at level m, C m ijkl , and feature maps g (1) = g \u03b8 (I 1 ), g (2) = g \u03b8 (I 2 ):\nC m ijkl = 1 2 2m 2 m p 2 m q g (1) i,j , g (2) 2 m k+p,2 m l+q = g (1) i,j , 1 2 2m ( 2 m p 2 m q g (2)\n2 m k+p,2 m l+q ) which is the average over the correlation response in the 2 m \u00d7 2 m grid. This means that the value at C m ijkl can be computed as the inner product between the feature vector g \u03b8 (I 1 ) ij and g \u03b8 (I 2 ) pooled with kernel size 2 m \u00d7 2 m .\nIn this alternative implementation, we do not precompute the correlations, but instead precompute the pooled image feature maps. In each iteration, we compute each correlation value on demand-only when it is looked up. This gives a complexity of O(N M ).\nWe found empirically that precomputing all pairs is easy to implement and not a bottleneck, due to highly optimized matrix routines on GPUs-even for 1088x1920 videos it takes only 17% of total inference time. Note that we can always switch to the alternative implementation should it become a bottleneck.", "publication_ref": ["b0", "b1"], "figure_ref": [], "table_ref": []}, {"heading": "Iterative Updates", "text": "Our update operator estimates a sequence of flow estimates {f 1 , ..., f N } from an initial starting point f 0 = 0. With each iteration, it produces an update direction \u2206f which is applied to the current estimate:\nf k+1 = \u2206f + f k+1 .\nThe update operator takes flow, correlation, and a latent hidden state as input, and outputs the update \u2206f and an updated hidden state. The architecture of our update operator is designed to mimic the steps of an optimization algorithm. As such, we used tied weights across depth and use bounded activations to encourage convergence to a fixed point. The update operator is trained to perform updates such that the sequence converges to a fixed point f k \u2192 f * .\nInitialization: By default, we initialize the flow field to 0 everywhere, but our iterative approach gives us the flexibility to experiment with alternatives. When applied to video, we test warm-start initialization, where optical flow from the previous pair of frames is forward projected to the next pair of frames with occlusion gaps filled in using nearest neighbor interpolation. Inputs: Given the current flow estimate f k , we use it to retrieve correlation features from the correlation pyramid as described in Sec. 3.2. The correlation features are then processed by 2 convolutional layers. Additionally, we apply 2 convolutional layers to the flow estimate itself to generate flow features. Finally, we directly inject the input from the context network. The input feature map is then taken as the concatenation of the correlation, flow, and context features. Update: A core component of the update operator is a gated activation unit based on the GRU cell, with fully connected layers replaced with convolutions:\nz t = \u03c3(Conv 3x3 ([h t\u22121 , x t ], W z )) (3) r t = \u03c3(Conv 3x3 ([h t\u22121 , x t ], W r )) (4\n)\nh t = tanh(Conv 3x3 ([r t h t\u22121 , x t ], W h )) (5\n) h t = (1 \u2212 z t ) h t\u22121 + z t h t (6)\nwhere x t is the concatenation of flow, correlation, and context features previously defined. We also experiment with a separable ConvGRU unit, where we replace the 3 \u00d7 3 convolution with two GRUs: one with a 1 \u00d7 5 convolution and one with a 5 \u00d7 1 convolution to increase the receptive field without significantly increasing the size of the model. Flow Prediction: The hidden state outputted by the GRU is passed through two convolutional layers to predict the flow update \u2206f . The output flow is at 1/8 resolution of the input image. During training and evaluation, we upsample the predicted flow fields to match the resolution of the ground truth.\nUpsampling: The network outputs optical flow at 1/8 resolution. We upsample the optical flow to full resolution by taking the full resolution flow at each pixel to be the convex combination of a 3x3 grid of its coarse resolution neighbors. We use two convolutional layers to predict a H/8\u00d7W/8\u00d7(8\u00d78\u00d79) mask and perform softmax over the weights of the 9 neighbors. The final high resolution flow field is found by using the mask to take a weighted combination over the neighborhood, then permuting and reshaping to a H \u00d7 W \u00d7 2 dimensional flow field. This layer can be directly implemented in PyTorch using the unfold function.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Supervision", "text": "We supervised our network on the l 1 distance between the predicted and ground truth flow over the full sequence of predictions, {f 1 , ..., f N }, with exponentially increasing weights. Given ground truth flow f gt , the loss is defined as where we set \u03b3 = 0.8 in our experiments.\nL = N i=1 \u03b3 N \u2212i ||f gt \u2212 f i || 1 (7)", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Experiments", "text": "We evaluate RAFT on Sintel [11] and KITTI [18]. Following previous works, we pretrain our network on FlyingChairs [15] and FlyingThings [33], followed by dataset specific finetuning. Our method achieves state-of-the-art performance on both Sintel (both clean and final passes) and KITTI. Additionally, we test our method on 1080p video from the DAVIS dataset [37] to demonstrate that our method scales to videos of very high resolutions.\nImplementation Details: RAFT is implemented in PyTorch [36]. All modules are initialized from scratch with random weights. During training, we use the AdamW [30] optimizer and clip gradients to the range [\u22121, 1]. Unless otherwise noted, we evaluate after 32 flow updates on Sintel and 24 on KITTI. For every update, \u2206f + f k , we only backpropgate the gradient through the \u2206f branch, and zero the gradient through the f k branch as suggested by [20].\nTraining Schedule: We train RAFT using two 2080Ti GPUs. We pretrain on FlyingThings for 100k iterations with a batch size of 12, then train for 100k iterations on FlyingThings3D with a batch size of 6. We finetune on Sintel for another 100k by combining data from Sintel [11], KITTI-2015 [34], and HD1K [27] similar to MaskFlowNet [52] and PWC-Net+ [41]. Finally, we finetune on KITTI-2015 for an additionally 50k iterations using the weights from the model finetuned on Sintel. Details on training and data augmentation are provided in the supplemental material. For comparison with prior work, we also include results from our model when finetuning only on Sintel and only on KITTI.", "publication_ref": ["b10", "b17", "b14", "b32", "b36", "b35", "b29", "b19", "b10", "b33", "b26", "b51", "b40"], "figure_ref": [], "table_ref": []}, {"heading": "Sintel", "text": "We train our model using the FlyingChairs\u2192FlyingThings schedule and then evaluate on the Sintel dataset using the train split for validation. Results are shown in Table 1 and Figure 3, and we split results based on the data used for training. C + T means that the models are trained on FlyingChairs(C) and FlyingThings(T), while +ft indicates the model is finetuned on Sintel data. Like PWC-Net+ [41] and MaskFlowNet [52] we include data from KITTI and HD1K Fig. 4: Flow predictions on the KITTI test set.\nwhen finetuning. We train 3 times with different seeds, and report results using the model with the median accuracy on the clean pass of Sintel (train). When using C+T for training, our method outperforms all existing approaches, despite using a significantly shorter training schedule. Our method achieves an average EPE (end-point-error) of 1.43 on the Sintel(train) clean pass, which is a 29% lower error than FlowNet2. These results demonstrates good cross dataset generalization. One of the reasons for better generalization is the structure of our network. By constraining optical flow to be the product of a series of identical update steps, we force the network to learn an update operator which mimics the updates of a first-order descent algorithm. This constrains the search space, reduces the risk of over-fitting, and leads to faster training and better generalization.\nWhen evaluating on the Sintel(test) set, we finetune on the combined clean and final passes of the training set along with KITTI and HD1K data. Our method ranks 1st on both the Sintel clean and final passes, and outperforms all prior work by 0.9 pixels (36%) on the clean pass and 1.2 pixels (30%) on the final pass. We evaluate two versions of our model, Ours (two-frame) uses zero initialization, while Ours (warp-start) initializes flow by forward projecting the flow estimate from the previous frame. Since our method operates at a single resolution, we can initialize the flow estimate to utilize motion smoothness from past frames, which cannot be easily done using the coarse-to-fine model.", "publication_ref": ["b40", "b51"], "figure_ref": ["fig_0"], "table_ref": ["tab_2"]}, {"heading": "KITTI", "text": "We also evaluate RAFT on KITTI and provide results in Table 1 and Figure 4. We first evaluate cross-dataset generalization by evaluating on the KITTI-15 (train) split after training on Chairs(C) and FlyingThings(T). Our method outperforms prior works by a large margin, improving EPE (end-point-error) from 8.36 to 5.04, which shows that the underlying structure of our network facilitates generalization. Our method ranks 1st on the KITTI leaderboard among all optical flow methods.", "publication_ref": [], "figure_ref": [], "table_ref": ["tab_2"]}, {"heading": "Ablations", "text": "We perform a set of ablation experiments to show the relative importance of each component. All ablated versions are trained on FlyingChairs(C) + Fly-ingThings(T). Results of the ablations are shown in  the table, we test a specific component of our approach in isolation, the settings which are used in our final model is underlined. Below we describe each of the experiments in more detail.\nArchitecture of Update Operator: We use a gated activation unit based on the GRU cell. We experiment with replacing the convolutional GRU with a set of 3 convolutional layers with ReLU activation. We achieve better performance by using the GRU block, likely because the gated activation makes it easier for the sequence of flow estimates to converge. Weight Tying: By default, we tied the weights across all instances of the update operator. Here, we test a version of our approach where each update operator learns a separate set of weights. Accuracy is better when weights are tied and the parameter count is significantly lower.  Directly injecting image features into the update operator likely allows spatial information to be better aggregated within motion boundaries.\nFeature Scale: By default, we extract features at a single resolution. We also try extracting features at multiple resolutions by building a correlation volume at each scale separately. Single resolution features simplifies the network architecture and allows fine-grained matching even at large displacements.\nLookup Radius: The lookup radius specifies the dimensions of the grid used in the lookup operation. When a radius of 0 is used, the correlation volume is retrieved at a single point. Surprisingly, we can still get a rough estimate of flow when the radius is 0, which means the network is learning to use 0'th order information. However, we see better results as the radius is increased.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Correlation Pooling:", "text": "We output features at a single resolution and then perform pooling to generate multiscale volumes. Here we test the impact when this pooling is removed. Results are better with pooling, because large and small displacements are both captured.\nCorrelation Range: Instead of all-pairs correlation, we also try constructing the correlation volume only for a local neighborhood around each pixel. We try a range of 32 pixels, 64 pixels, and 128 pixels. Overall we get the best results when the all-pairs are used, although a 128px range is sufficient to perform well on Sintel because most displacements fall within this range. That said, all-pairs is still preferable because it eliminates the need to specify a range. It is also more convenient to implement: it can be computed using matrix multiplication allowing our approach to be implemented entirely in PyTorch.\nFeatures for Refinement: We compute visual similarity by building a correlation volume between all pairs of pixels. In this experiment, we try replacing the correlation volume with a warping layer, which uses the current estimate of optical flow to warp features from I 2 onto I 1 and then estimates the residual displacement. While warping is still competitive with prior work on Sintel, correlation performs significantly better, especially on KITTI.\nUpsampling: RAFT outputs flow fields at 1/8 resolution. We compare bilinear upsampling to our learned upsampling module. The upsampling module produces better results, particularly near motion boundaries.\nInference Updates: Although we unroll 12 updates during training, we can apply an arbitrary number of updates during inference. In Table 2 we provide numerical results for selected number of updates, and test an extreme case of 200 to show that our method doesn't diverge. Our method quickly converges, surpassing PWC-Net after 3 updates and FlowNet2 after 6 updates, but continues to improve with more updates.", "publication_ref": [], "figure_ref": [], "table_ref": ["tab_1"]}, {"heading": "Timing and Parameter Counts", "text": "Inference time and parameter counts are shown in Figure 5. Accuracy is determined by performance on the Sintel(train) final pass after training on Fly-ingChairs and FlyingThings (C+T). In these plots, we report accuracy and timing after 10 iterations, and we time our method using a GTX 1080Ti GPU. Parameters counts for other methods are taken as reported in their papers, and we report times when run on our hardware. RAFT is more efficient in terms of parameter count, inference time, and training iterations. Ours-S uses only 1M parameters, but outperforms PWC-Net and VCN which are more than 6x larger. We provide an additional table with numerical values for parameters, timing, and training iterations in the supplemental material.  ", "publication_ref": [], "figure_ref": ["fig_1"], "table_ref": []}, {"heading": "Video of Very High Resolution", "text": "To demonstrate that our method scales well to videos of very high resolution we apply our network to HD video from the DAVIS [37] dataset. We use 1080p (1088x1920) resolution video and apply 12 iterations of our approach. Inference takes 550ms for 12 iterations on 1080p video, with all-pairs correlation taking 95ms. Fig. 6 visualizes example results on DAVIS.", "publication_ref": ["b36"], "figure_ref": ["fig_2"], "table_ref": []}, {"heading": "Conclusions", "text": "We have proposed RAFT-Recurrent All-Pairs Field Transforms-a new endto-end trainable model for optical flow. RAFT is unique in that it operates at a single resolution using a large number of lightweight, recurrent update operators.\nOur method achieves state-of-the-art accuracy across a diverse range of datasets, strong cross dataset generalization, and is efficient in terms of inference time, parameter count, and training iterations. ", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "B Upsampling Module", "text": "Fig. 8: Illistration of the upsampling module. Each pixel of the high resolution flow field (small boxes) is taken to be the convex combination of its 9 coarse resolution neighbors using weights predicted by the network.   Photometric Augmentation: We perform photometric augmentation by randomly perturbing brightness, contrast, saturation, and hue. We use the Torchvision ColorJitter with brightness 0.4, contrast 0.4, saturation 0.4, and hue 0.5/\u03c0. On KITTI, we reduce the degree of augmentation to brightness 0.3, contrast 0.3, saturation 0.3, and hue 0.3/\u03c0. With probablity 0.2, color augmentation is performed to each of the images independently. Spatial Augmentation: We perform spatial augmentation by randomly rescaling and stretching the images. The degree of random scaling depends on the dataset. For FlyingChairs, we perform spatial augmentation in the range 2 [\u22120.2,1.0] , FlyingThings 2 [\u22120.4,0.8] , Sintel 2 [\u22120.2,0.6] , and KITTI 2 [\u22120.2,0.4] . Spatial augmentation is performed with probability 0.8. Occlusion Augmentation: Following HSM-Net [48], we also randomly erase rectangular regions in I 2 with probability 0.5 to simulate occlusions.   the Sintel (train) final pass. We report the timing and accuracy of our method after 10 updates using a GTX 1080Ti GPU. If possible, we download the code from the other methods and re-time using our machine. If the model is trained using more than one GPU, we report the number of GPUs used to train in parenthesis. We can also train RAFT using mixed precision training Ours(mixed) and achieve similar results while training on only a single GPU. Overall, RAFT requires fewer training iterations and parameters when compared to prior work.\nD", "publication_ref": ["b47"], "figure_ref": [], "table_ref": []}], "references": [{"ref_id": "b0", "title": "Solving ill-posed inverse problems using iterative deep neural networks", "journal": "Inverse Problems", "year": "2017", "authors": "J Adler; O \u00d6ktem"}, {"ref_id": "b1", "title": "Learned primal-dual reconstruction", "journal": "IEEE transactions on medical imaging", "year": "2018", "authors": "J Adler; O \u00d6ktem"}, {"ref_id": "b2", "title": "Differentiable convex optimization layers", "journal": "", "year": "2019", "authors": "A Agrawal; B Amos; S Barratt; S Boyd; S Diamond; J Z Kolter"}, {"ref_id": "b3", "title": "Optnet: Differentiable optimization as a layer in neural networks", "journal": "", "year": "2017", "authors": "B Amos; J Z Kolter"}, {"ref_id": "b4", "title": "Trellis networks for sequence modeling", "journal": "", "year": "2018", "authors": "S Bai; J Z Kolter; V Koltun"}, {"ref_id": "b5", "title": "Deep equilibrium models", "journal": "", "year": "2019", "authors": "S Bai; J Z Kolter; V Koltun"}, {"ref_id": "b6", "title": "Flow fields: Dense correspondence fields for highly accurate large displacement optical flow estimation", "journal": "", "year": "2015", "authors": "C Bailer; B Taetz; D Stricker"}, {"ref_id": "b7", "title": "Scopeflow: Dynamic scene scoping for optical flow", "journal": "", "year": "2020", "authors": "A Bar-Haim; L Wolf"}, {"ref_id": "b8", "title": "A framework for the robust estimation of optical flow", "journal": "IEEE", "year": "1993", "authors": "M J Black; P Anandan"}, {"ref_id": "b9", "title": "Large displacement optical flow", "journal": "IEEE", "year": "2009", "authors": "T Brox; C Bregler; J Malik"}, {"ref_id": "b10", "title": "A naturalistic open source movie for optical flow evaluation", "journal": "Springer", "year": "2012", "authors": "D J Butler; J Wulff; G B Stanley; M J Black"}, {"ref_id": "b11", "title": "A first-order primal-dual algorithm for convex problems with applications to imaging", "journal": "Journal of mathematical imaging and vision", "year": "2011", "authors": "A Chambolle; T Pock"}, {"ref_id": "b12", "title": "Full flow: Optical flow estimation by global optimization over regular grids", "journal": "", "year": "2016", "authors": "Q Chen; V Koltun"}, {"ref_id": "b13", "title": "On the properties of neural machine translation", "journal": "", "year": "2014", "authors": "K Cho; B Van Merri\u00ebnboer; D Bahdanau; Y Bengio"}, {"ref_id": "b14", "title": "Proceedings of the IEEE international conference on computer vision", "journal": "", "year": "2015", "authors": "A Dosovitskiy; P Fischer; E Ilg; P Hausser; C Hazirbas; V Golkov; P Van Der Smagt; D Cremers; T Brox"}, {"ref_id": "b15", "title": "End-to-end learning of motion representation for video understanding", "journal": "", "year": "2018", "authors": "L Fan; W Huang; C Gan; S Ermon; B Gong; J Huang"}, {"ref_id": "b16", "title": "Deepview: High-quality view synthesis by learned gradient descent", "journal": "", "year": "2019", "authors": "J Flynn; M Broxton; P Debevec; M Duvall; G Fyffe; R S Overbeck; N Snavely; R Tucker"}, {"ref_id": "b17", "title": "Vision meets robotics: The kitti dataset", "journal": "The International Journal of Robotics Research", "year": "2013", "authors": "A Geiger; P Lenz; C Stiller; R Urtasun"}, {"ref_id": "b18", "title": "Stereo processing by semiglobal matching and mutual information", "journal": "IEEE Transactions", "year": "2007", "authors": "H Hirschmuller"}, {"ref_id": "b19", "title": "Improving optical flow on a pyramidal level", "journal": "ECCV", "year": "2020", "authors": "M Hofinger; S R Bul\u00f2; L Porzi; A Knapitsch; P Kontschieder"}, {"ref_id": "b20", "title": "Determining optical flow", "journal": "", "year": "1981", "authors": "B K Horn; B G Schunck"}, {"ref_id": "b21", "title": "Liteflownet: A lightweight convolutional neural network for optical flow estimation", "journal": "", "year": "2018", "authors": "T W Hui; X Tang; C Loy"}, {"ref_id": "b22", "title": "A lightweight optical flow cnn-revisiting data fidelity and regularization", "journal": "", "year": "2019", "authors": "T W Hui; X Tang; C C Loy"}, {"ref_id": "b23", "title": "Iterative residual refinement for joint optical flow and occlusion estimation", "journal": "", "year": "2019", "authors": "J Hur; S Roth"}, {"ref_id": "b24", "title": "Flownet 2.0: Evolution of optical flow estimation with deep networks", "journal": "", "year": "2017", "authors": "E Ilg; N Mayer; T Saikia; M Keuper; A Dosovitskiy; T Brox"}, {"ref_id": "b25", "title": "Variational networks: connecting variational methods and deep learning", "journal": "Springer", "year": "2017", "authors": "E Kobler; T Klatzer; K Hammernik; T Pock"}, {"ref_id": "b26", "title": "The hci benchmark suite: Stereo and flow ground truth with uncertainties for urban autonomous driving", "journal": "", "year": "2016", "authors": "D Kondermann; R Nair; K Honauer; K Krispin; J Andrulis; A Brock; B Gussefeld; M Rahimimoghaddam; S Hofmann; C Brenner"}, {"ref_id": "b27", "title": "Recurrent squeeze-and-excitation context aggregation net for single image deraining", "journal": "", "year": "2018", "authors": "X Li; J Wu; Z Lin; H Liu; H Zha"}, {"ref_id": "b28", "title": "Learning for disparity estimation through feature constancy", "journal": "", "year": "2018", "authors": "Z Liang; Y Feng; Y Guo; H Liu; W Chen; L Qiao; L Zhou; J Zhang"}, {"ref_id": "b29", "title": "Decoupled weight decay regularization", "journal": "", "year": "2017", "authors": "I Loshchilov; F Hutter"}, {"ref_id": "b30", "title": "Devon: Deformable volume network for learning optical flow", "journal": "", "year": "2020", "authors": "Y Lu; J Valmadre; H Wang; J Kannala; M Harandi; P Torr"}, {"ref_id": "b31", "title": "Taking a deeper look at the inverse compositional algorithm", "journal": "", "year": "2019", "authors": "Z Lv; F Dellaert; J M Rehg; A Geiger"}, {"ref_id": "b32", "title": "A large dataset to train convolutional networks for disparity, optical flow, and scene flow estimation", "journal": "", "year": "2016", "authors": "N Mayer; E Ilg; P Hausser; P Fischer; D Cremers; A Dosovitskiy; T Brox"}, {"ref_id": "b33", "title": "Object scene flow for autonomous vehicles", "journal": "", "year": "2015", "authors": "M Menze; A Geiger"}, {"ref_id": "b34", "title": "Discrete optimization for optical flow", "journal": "Springer", "year": "2015", "authors": "M Menze; C Heipke; A Geiger"}, {"ref_id": "b35", "title": "Automatic differentiation in pytorch", "journal": "", "year": "2017", "authors": "A Paszke; S Gross; S Chintala; G Chanan; E Yang; Z Devito; Z Lin; A Desmaison; L Antiga; A Lerer"}, {"ref_id": "b36", "title": "The 2017 davis challenge on video object segmentation", "journal": "", "year": "2017", "authors": "J Pont-Tuset; F Perazzi; S Caelles; P Arbel\u00e1ez; A Sorkine-Hornung; L Van Gool"}, {"ref_id": "b37", "title": "Non-local total generalized variation for optical flow estimation", "journal": "Springer", "year": "2014", "authors": "R Ranftl; K Bredies; T Pock"}, {"ref_id": "b38", "title": "Optical flow estimation using a spatial pyramid network", "journal": "", "year": "2017", "authors": "A Ranjan; M J Black"}, {"ref_id": "b39", "title": "Flowfields++: Accurate optical flow correspondences meet robust interpolation", "journal": "IEEE", "year": "2018", "authors": "R Schuster; C Bailer; O Wasenm\u00fcller; D Stricker"}, {"ref_id": "b40", "title": "Models matter, so does training: An empirical study of cnns for optical flow estimation", "journal": "", "year": "2018", "authors": "D Sun; X Yang; M Y Liu; J Kautz"}, {"ref_id": "b41", "title": "Pwc-net: Cnns for optical flow using pyramid, warping, and cost volume", "journal": "", "year": "2018", "authors": "D Sun; X Yang; M Y Liu; J Kautz"}, {"ref_id": "b42", "title": "Ba-net: Dense bundle adjustment network", "journal": "", "year": "2018", "authors": "C Tang; P Tan"}, {"ref_id": "b43", "title": "Deepv2d: Video to depth with differentiable structure from motion", "journal": "", "year": "2018", "authors": "Z Teed; J Deng"}, {"ref_id": "b44", "title": "Deepflow: Large displacement optical flow with deep matching", "journal": "", "year": "2013", "authors": "P Weinzaepfel; J Revaud; Z Harchaoui; C Schmid"}, {"ref_id": "b45", "title": "Optical flow in mostly rigid scenes", "journal": "", "year": "2017", "authors": "J Wulff; L Sevilla-Lara; M J Black"}, {"ref_id": "b46", "title": "Accurate optical flow via direct cost volume processing", "journal": "", "year": "2017", "authors": "J Xu; R Ranftl; V Koltun"}, {"ref_id": "b47", "title": "Hierarchical deep stereo matching on high-resolution images", "journal": "", "year": "2019", "authors": "G Yang; J Manela; M Happold; D Ramanan"}, {"ref_id": "b48", "title": "Volumetric correspondence networks for optical flow", "journal": "", "year": "2019", "authors": "G Yang; D Ramanan"}, {"ref_id": "b49", "title": "Hierarchical discrete distribution decomposition for match density estimation", "journal": "", "year": "2019", "authors": "Z Yin; T Darrell; F Yu"}, {"ref_id": "b50", "title": "A duality based approach for realtime tv-l 1 optical flow", "journal": "Springer", "year": "2007", "authors": "C Zach; T Pock; H Bischof"}, {"ref_id": "b51", "title": "Maskflownet: Asymmetric feature matching with learnable occlusion mask", "journal": "", "year": "2020", "authors": "S Zhao; Y Sheng; Y Dong; E I Chang; Y Xu"}, {"ref_id": "b52", "title": "Deeptam: Deep tracking and mapping", "journal": "", "year": "2018", "authors": "H Zhou; B Ummenhofer; T Brox"}], "figures": [{"figure_label": "3", "figure_type": "figure", "figure_id": "fig_0", "figure_caption": "Fig. 3 :3Fig. 3: Flow predictions on the Sintel test set.", "figure_data": ""}, {"figure_label": "5", "figure_type": "figure", "figure_id": "fig_1", "figure_caption": "Fig. 5 :5Fig. 5: Plots comparing parameter counts, inference time, and training iterations vs. accuracy. Accuracy is measured by the EPE on the Sintel(train) final pass after training on C+T. Left: Parameter count vs. accuracy compared to other methods. RAFT is more parameter efficient while achieving lower EPE. Middle: Inference time vs. accuracy timed using our hardware Right: Training iterations vs. accuracy (taken as product of iterations and GPUs used).", "figure_data": ""}, {"figure_label": "6", "figure_type": "figure", "figure_id": "fig_2", "figure_caption": "Fig. 6 :6Fig. 6: Results on 1080p (1088x1920) video from DAVIS (550 ms per frame).", "figure_data": ""}, {"figure_label": "9", "figure_type": "figure", "figure_id": "fig_3", "figure_caption": "Fig. 9 :9Fig. 9: Our upsampling module improves accuracy near motion boundaries, and also allows RAFT to recover the flow of small fast moving objects such as the birds shown in the figure.", "figure_data": ""}, {"figure_label": "10", "figure_type": "figure", "figure_id": "fig_4", "figure_caption": "Fig. 10 :10Fig. 10: (Left) EPE on the Sintel set as a function of the number of iterations at inference time. (Right) Magnitude of each update ||\u2206f k || 2 averaged over all pixels indicating convergence to a fixed point f k \u2192 f * .", "figure_data": ""}, {"figure_label": "", "figure_type": "table", "figure_id": "tab_0", "figure_caption": "enjoys the following strengths: arXiv:2003.12039v3 [cs.CV] 25 Aug 2020", "figure_data": "HWH/2W/2H/4W/4\u27e8 \u22c5 ,\u22c5 \u27e9Frame 110+ iter.Frame 2Feature EncoderText0Optical FlowFrame 1Context Encoder"}, {"figure_label": "2", "figure_type": "table", "figure_id": "tab_1", "figure_caption": "In each section of", "figure_data": "Training DataMethodSintel (train) Clean FinalKITTI-15 (train) F1-epe F1-allSintel (test) Clean FinalKITTI-15 (test) F1-all-FlowFields[7]----3.755.8115.31-FlowFields++[40]----2.945.4914.82SDCFlow[47]----3.545.1214.86SMRFlow[46]----2.535.3812.19HD3[50]3.848.7713.1724.0---LiteFlowNet[22]2.484.0410.3928.5---PWC-Net[42]2.553.9310.3533.7---LiteFlowNet2[23]2.243.788.9725.9---C + TVCN[49]2.213.688.3625.1---MaskFlowNet[52]2.253.61-23.1---FlowNet2[25]2.023.54 110.0830.03.966.02-Ours (small)2.213.357.5126.9---Ours (2-view)1.432.715.0417.4---FlowNet2 [25](1.45)(2.01)(2.30)(6.8)4.165.7411.48HD3 [50](1.87)(1.17)(1.31)(4.1)4.794.676.55C+T+S/KIRR-PWC [24](1.92)(2.51)(1.63)(5.3)3.844.587.65ScopeFlow[8]----3.594.106.82Ours (2-view)(0.77)(1.20)(0.64)(1.5)2.083.415.27LiteFlowNet2 2 [23](1.30)(1.62)(1.47)(4.8)3.484.697.74PWC-Net+[41](1.71)(2.34)(1.50)(5.3)3.454.607.72C+T+S+K+HVCN [49] MaskFlowNet[52](1.66) -(2.24) -(1.16) -(4.1) -2.81 2.524.40 4.176.30 6.10Ours (2-view)(0.76)(1.22)(0.63)(1.5)1.943.185.10Ours (warm-start)(0.77)(1.27)--1.612.86-"}, {"figure_label": "1", "figure_type": "table", "figure_id": "tab_2", "figure_caption": "Results on Sintel and KITTI datasets. We test the generalization performance on Sintel(train) after training on FlyingChairs(C) and FlyingThing(T), and outperform all existing methods on both the clean and final pass. The bottom two sections show the performance of our model on public leaderboards after dataset specific finetuning. S/K includes methods which use only Sintel data for finetuning on Sintel and only KITTI data when finetuning on KITTI. +S+K+H includes methods which combine KITTI, HD1K, and Sintel data when finetuning on Sintel. Ours (warm-start) ranks 1st on both the Sintel clean and final passes, and 1st among all flow approaches on KITTI. ( 1 FlowNet2 originally reported results on the disparity split of Sintel, 3.54 is the EPE when their model is evaluated on the standard data[22].2 [23] finds that HD1K data does not help significantly during Sintel finetuning and reports results without it. )", "figure_data": ""}, {"figure_label": "2", "figure_type": "table", "figure_id": "tab_4", "figure_caption": "Ablation experiments. Settings used in our final model are underlined. See Sec. 4.3 for details. We test the importance of context by training a model with the context network removed. Without context, we still achieve good results, outperforming all existing works on both Sintel and KITTI. But context is helpful.", "figure_data": ""}, {"figure_label": "", "figure_type": "table", "figure_id": "tab_5", "figure_caption": "Network architecture details for the full 4.8M parameter model (5.3M with upsampling module) and the small 1.0M parameter model. The context and feature encoders have the same architecture, the only difference is that the feature encoder uses instance normalization while the context encoder uses batch normalization. In RAFT-S, we replace the residual units with bottleneck residual units. The update block takes in context features, correlation features, and flow features to update the latent hidden state. The updated hidden status is used to predict the flow update. The full model uses two convolutional GRU update blocks with 1x5 filters and 5x1 filters respectively, while the small model uses a single GRU with 3x3 filters.", "figure_data": "A Network ArchitectureContextRAFT (4.8M)Conv7x7 (64)Res. Unit (64) Feature / Context Encoder Res. Unit (64) Res. Unit (128) Res. Unit (128) Res. Unit (192) Res. Unit(192)Conv3x3(256)Corr Flow Update Block (hidden dim 128) Conv1x1(256) Conv7x7(128) Conv3x3(128) Conv3x3(128) Conv3x3(64) \u210e \u2212 1ConvGRU(1x5)ConvGRU(5x1)Conv3x3(256)\u210eConv1x1(2)\u0394ContextRAFT-S (1M)Conv7x7 (32)Res. Unit (32) Feature / Context Encoder Res. Unit (32) Res. Unit (64) Res. Unit (64) Res. Unit (96) Res. Unit(96)Conv3x3(128)Corr Flow Update Block (hidden dim 96) Conv1x1(96) Conv7x7(64) Conv3x3(80) Conv3x3(32) \u210e \u2212 1ConvGRU(3xx)\u210eConv3x3(128)Conv1x1(2)\u0394Fig. 7:"}, {"figure_label": "3", "figure_type": "table", "figure_id": "tab_7", "figure_caption": "Details of the training schedule. Dataset abbreviations: C: FlyingChairs, T: FlyingThings, S: Sintel, K: KITTI-2015, H: HD1K. During the Sintel Finetuning phase, the dataset distribution is S(.71), T(.135), K(.135), H(.02).", "figure_data": ""}, {"figure_label": "4", "figure_type": "table", "figure_id": "tab_9", "figure_caption": "Parameter counts, inference time, training iterations, and accuracy on", "figure_data": ""}], "formulas": [{"formula_id": "formula_0", "formula_text": "\u2208 \u00d7 \u00d7 \u00d7 1 \u2208 \u00d7 \u00d7 / 2 \u00d7 / 2 2 \u2208 \u00d7 \u00d7 / 4 \u00d7 / 4", "formula_coordinates": [6.0, 189.67, 75.79, 170.51, 4.53]}, {"formula_id": "formula_1", "formula_text": "C(g \u03b8 (I 1 ), g \u03b8 (I 2 )) \u2208 R H\u00d7W \u00d7H\u00d7W , C ijkl = h g \u03b8 (I 1 ) ijh \u2022 g \u03b8 (I 2 ) klh (1)", "formula_coordinates": [6.0, 50.83, 425.34, 329.01, 22.21]}, {"formula_id": "formula_2", "formula_text": "H \u00d7 W \u00d7 H/2 k \u00d7 W/2 k .", "formula_coordinates": [6.0, 34.02, 497.84, 106.14, 10.31]}, {"formula_id": "formula_3", "formula_text": "x N (x ) r = {x + dx | dx \u2208 Z 2 , ||dx|| 1 \u2264 r} (2)", "formula_coordinates": [7.0, 67.81, 49.1, 312.04, 22.38]}, {"formula_id": "formula_4", "formula_text": "C m ijkl = 1 2 2m 2 m p 2 m q g (1) i,j , g (2) 2 m k+p,2 m l+q = g (1) i,j , 1 2 2m ( 2 m p 2 m q g (2)", "formula_coordinates": [7.0, 43.66, 261.83, 278.11, 31.67]}, {"formula_id": "formula_5", "formula_text": "f k+1 = \u2206f + f k+1 .", "formula_coordinates": [7.0, 230.27, 502.29, 78.1, 9.68]}, {"formula_id": "formula_6", "formula_text": "z t = \u03c3(Conv 3x3 ([h t\u22121 , x t ], W z )) (3) r t = \u03c3(Conv 3x3 ([h t\u22121 , x t ], W r )) (4", "formula_coordinates": [8.0, 121.4, 204.49, 404.78, 24.6]}, {"formula_id": "formula_7", "formula_text": ")", "formula_coordinates": [8.0, 526.18, 219.44, 79.53, 8.74]}, {"formula_id": "formula_8", "formula_text": "h t = tanh(Conv 3x3 ([r t h t\u22121 , x t ], W h )) (5", "formula_coordinates": [8.0, 121.4, 236.29, 254.2, 9.65]}, {"formula_id": "formula_9", "formula_text": ") h t = (1 \u2212 z t ) h t\u22121 + z t h t (6)", "formula_coordinates": [8.0, 121.4, 236.29, 258.44, 26.51]}, {"formula_id": "formula_10", "formula_text": "L = N i=1 \u03b3 N \u2212i ||f gt \u2212 f i || 1 (7)", "formula_coordinates": [8.0, 154.83, 556.12, 225.01, 30.32]}], "doi": ""}