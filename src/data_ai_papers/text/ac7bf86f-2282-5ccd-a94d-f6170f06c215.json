{"title": "Understanding and evaluating blind deconvolution algorithms", "authors": "Anat Levin; Yair Weiss; Fredo Durand; William T Freeman; Mit Csail", "pub_date": "", "abstract": "Blind deconvolution is the recovery of a sharp version of a blurred image when the blur kernel is unknown. Recent algorithms have afforded dramatic progress, yet many aspects of the problem remain challenging and hard to understand. The goal of this paper is to analyze and evaluate recent blind deconvolution algorithms both theoretically and experimentally. We explain the previously reported failure of the naive MAP approach by demonstrating that it mostly favors no-blur explanations. On the other hand we show that since the kernel size is often smaller than the image size a MAP estimation of the kernel alone can be well constrained and accurately recover the true blur. The plethora of recent deconvolution techniques makes an experimental evaluation on ground-truth data important. We have collected blur data with ground truth and compared recent algorithms under equal settings. Additionally, our data demonstrates that the shift-invariant blur assumption made by most algorithms is often violated.", "sections": [{"heading": "Introduction", "text": "Blind deconvolution is the problem of recovering a sharp version of an input blurry image when the blur kernel is unknown [13]. Mathematically, we wish to decompose a blurred image y as\ny = k \u2297 x (1)\nwhere x is a visually plausible sharp image, and k is a non negative blur kernel, whose support is small compared to the image size. This problem is severely ill-posed and there is an infinite set of pairs (x, k) explaining any observed y. For example, One undesirable solution that perfectly satisfies eq. 1 is the no-blur explanation: k is the delta (identity) kernel and x = y. The ill-posed nature of the problem implies that additional assumptions on x or k must be introduced.\nBlind deconvolution is the subject of numerous papers in the signal and image processing literature, to name a few consider [1,11,24,17,19] and the survey in [13]. Despite the exhaustive research, results on real world images are rarely produced. Recent algorithms have proposed to address the ill-posedness of blind deconvolution by characterizing x using natural image statistics [18,4,16,9,10,3,22]. While this principle has lead to tremendous progress, the results are still far from perfect. Blind deconvolution algorithms exhibit some common building principles, and vary in others. The goal of this paper is to analyze the problem and shed new light on recent algorithms. What are the key challenges and what are the important components that make blind deconvolution possible? Additionally, which aspects of the problem should attract further research efforts?\nOne of the puzzling aspects of blind deconvolution is the failure of the MAP approach. Recent papers emphasize the usage of a sparse derivative prior to favor sharp images. However, a direct application of this principle has not yielded the expected results and all algorithms have required additional components, such as marginalization across all possible images [18,4,16], spatially-varying terms [10,21], or solvers that vary their optimization energy over time [21]. In this paper we analyze the source of the MAP failure. We show that counter-intuitively, the most favorable solution under a sparse prior is usually a blurry image and not a sharp one. Thus, the global optimum of the MAP approach is the no-blur explanation. We discuss solutions to the problem and analyze the answers provided by existing algorithms. We show that one key property making blind deconvolution possible is the strong asymmetry between the dimensionalities of x and k. While the number of unknowns in x increases with image size, the dimensionality of k remains small. Therefore, while a simultaneous MAP estimation of both x and k fails, a MAP estimation of k alone (marginalizing over x), is well constrained and recovers an accurate kernel. We suggest that while the sparse prior is helpful, the key component making blind deconvolution possible is not the choice of prior, but the thoughtful choice of estimator. Furthermore, we show that with a proper estimation rule, blind deconvolution can be performed even with a weak Gaussian prior.\nFinally, we collect motion-blurred data with ground truth. This data allows us to quantitatively compare recent blind deconvolution algorithms. Our evaluation suggest that the variational Bayes approach of [4] outperforms all existing alternatives. This data also shows that the shift invariance convolution model involved in most existing algorithms is often violated and that realistic camera shake includes in-plane rotations.", "publication_ref": ["b12", "b0", "b10", "b23", "b16", "b18", "b12", "b17", "b3", "b15", "b8", "b9", "b2", "b21", "b17", "b3", "b15", "b9", "b20", "b20", "b3"], "figure_ref": [], "table_ref": []}, {"heading": "MAP x,k estimation and its limitations", "text": "In this paper y denotes an observed blurry image, which is a convolution of an unknown sharp image x with an unknown blur kernel k, plus noise n (this paper assumes i.i.d. Gaussian noise):\ny = k \u2297 x + n.(2)\nUsing capital letters for the Fourier transform of a signal:\nY\u03c9 = K\u03c9X\u03c9 + N\u03c9.(3)\nThe goal of blind deconvolution is to infer both k and x given a single input y. Additionally, k is non negative, and its support is often small compared to the image size.\nThe simplest approach is a maximum-a-posteriori (MAP x,k 1 ) estimation, seeking a pair (x,k) maximizing:\np(x, k|y) \u221d p(y|x, k)p(x)p(k).\nFor simplicity of the exposition, we assume a uniform prior on k. The likelihood term p(y|x, k) is the data fitting term log p(y|x, k) = \u2212\u03bb k \u2297 x \u2212 y 2 . The prior p(x) favors natural images, usually based on the observation that their gradient distribution is sparse. A common measure is\nlog p(x) = \u2212 X i |gx,i(x)| \u03b1 + |gy,i(x)| \u03b1 + C(5)\nwhere g x,i (x) and g y,i (x) denote the horizontal and vertical derivatives at pixel i (we use the simple [\u22121 1] filter) and C is a constant normalization term. Exponent values \u03b1 < 1 lead to sparse priors and natural images usually correspond to \u03b1 in the range of [0.5, 0.8] [23]. Other choices include a Laplacian prior \u03b1 = 1, and a Gaussian prior \u03b1 = 2. While natural image gradients are very non-Gaussian, we examine this model because it enables an analytical treatment.\nThe MAP x,k approach seeks (x,k) minimizing\n(x,k) = arg min x,k \u03bb k \u2297 x \u2212 y 2 + X i |gx,i(x)| \u03b1 + |gy,i(x)| \u03b1 .(6)\nEq. ( 6) reveals an immediate limitation:\nClaim 1 Let x be an arbitrarily large image sampled from the prior p(x), and y = k \u2297 x. The pair (x, k) optimizing the MAP x,k score satisfies |x| \u2192 0 and |k| \u2192 \u221e.\nProof: For every pair (x, k) we use a scalar s to define a new pair\nx \u2032 = s \u2022 x, k \u2032 = 1/s \u2022 k with equal data fitting k \u2297 x \u2212 y 2 = k \u2032 \u2297 x \u2032 \u2212 y 2 .\nWhile the data fitting term is constant, the prior term improves as s \u2192 0.\nThis observation is not surprising. The most likely image under the prior in Eq. ( 5) is a flat image with no gradients. One attempt to fix the problem is to assume the mean intensity of the blurred and sharp images should be equal, and constrain the sum of k: i k i = 1. This eliminates the zero solution, but usually the no-blur solution is still favored.\nTo understand this, consider the 1D signals x in Fig. 1 that were convolved with a (truncated) Gaussian kernel k * of standard deviation 4 pixels. We compare two interpretations: 1) the true kernel: y = k * \u2297 x. 2) the delta kernel (no blur) y = k 0 \u2297 y. We evaluate the \u2212 log p(x, k|y) score (Eq. (6)), while varying the \u03b1 parameter in the prior.\nFor step edges (Fig. 1(a)) MAP x,k usually succeeds. The edge is sharper than its blurred version and while the Gaussian prior favors the blurry explanation, appropriate sparse priors (\u03b1 < 1) favor the correct sharp explanation. 1 We keep estimation variables in subscript to distinguish between a MAP estimation of both x and k, to a MAP estimation of k alone. In contrast, Fig. 1(b) presents a narrow peak. Blurring reduces the peak height, and as a result, the Laplacian prior \u03b1 = 1 favors the blurry x (k is delta) because the absolute sum of gradients is lower. Examining Fig. 1(b-right) suggests that the blurred explanation is winning for smaller \u03b1 values as well. The sharp explanation is favored only for low alpha values, approaching a binary penalty. However, the sparse models describing natural images are not binary, they are usually in the range \u03b1 \u2208 [0.5, 0.8] [23].\nThe last signal considered in Fig. 1(c) is a row cropped from a natural image, illustrating that natural images contain a lot of medium contrast texture and noise, corresponding to the narrow peak structure. This dominates the statistics more than step edges. As a result, blurring a natural image reduces the overall contrast and, as in Fig. 1(b), even sparse priors favor the blurry x explanation. To confirm the above observation, we blurred the image in Fig. 2 with a Gaussian kernel of standard deviation 3 pixels. We compared the sum of the gradients in the blurred and sharp images using \u03b1 = 0.5. For 15 \u00d7 15 windows the blurred image is favored over 97% of the windows, and this phenomenon increases with window size. For 45 \u00d7 45 windows, the blurred version is favored at all windows. Another observation is that if the sharp explanation does win, it happens next to significant edges.\nTo understand this, note that blur has two opposite effects on the image likelihood: 1) it makes the signal derivatives less sparse, and that reduces the likelihood. 2) It reduces the derivatives variance and that increases its likelihood. For very specific images, like ideal step edges, the first effect dominants and blur reduces the likelihood. However, for most natural images the second effect is stronger and blur increases the likelihood. To illustrate this, let x 0 be a sequence sampled i.i.d. from p 0 (x 0 i ) \u221d e \u2212\u03b3|x 0 i | \u03b1 , x \u2113 a sequence obtained by convolving x 0 with a width \u2113 box filter (normalizing the kernel sum to 1), and p \u2113 its probability distribution. The expected negative log likelihood (effecting the MAP x,k ) of x \u2113 under the sharp distribution p 0 is: Revisiting the literature on the subject, Fergus et al. [4] report that their initial attempts to approach blind deconvolution with MAP x,k failed, resulting in either the original blurred explanation or a binary two-tone image, depending on parameter tunings.\nE p \u2113 [\u2212 log p 0 (x \u2113 )] = \u2212 p \u2113 (x) log p 0 (x)dx.\nAlgorithms like [10,9] explicitly detect edges in the image (either manually or automatically), and seek a kernel which transfers these edges into binary ones. This is motivated by the example in Fig. 2, suggesting that MAP x,k could do the right thing around step edges. Another algorithm which makes usage of this property is [21]. It optimizes a semi-MAP x,k score, but explicitly detects smooth image regions and reweights their contribution. Thus, the MAP x,k score is dominated by edges. We discuss this algorithm in detail in the appendix. Earlier blind deconvolution papers which exploit a MAP x,k approach avoid the delta solution using other assumptions which are less applicable for real world images. For example, [1] assumes x contains an object on a flat background with a known compact support.\nAll these examples highlight the fact that the prior alone does not favor the desired result. The source of the problem is that for all \u03b1 values, the most likely event of the prior in Eq. ( 5) is the fully flat image. This phenomenon is robust to the exact choice of prior, and replacing the model in Eq. (5) with higher order derivatives or with more sophisticated natural image priors [20,25] does not change the result. We also note that the problem is present even if the derivatives signal is sampled exactly from p(x) and the prior is perfectly correct in the generative sense.\nIn the next section we suggest that, to overcome the MAP x,k limitation, one should reconsider the choice of estimator. We revisit a second group of blind deconvolution algorithms derived from this idea.", "publication_ref": ["b22", "b0", "b22", "b3", "b9", "b8", "b20", "b0", "b19", "b24"], "figure_ref": [], "table_ref": []}, {"heading": "MAP k estimation", "text": "The limitations of MAP estimation in the case of few measurements have been pointed out many times in estimation theory and statistical signal processing [12,2]. Indeed, in the MAP x,k problem we can never collect enough measurements because the number of unknowns grows with the image size. In contrast, estimation theory tells us [12] that, given enough measurements, MAP estimators do approach the true solution. Therefore, the key to success is to exploit a special property of blind deconvolution: the strong asymmetry between the dimensionalities of the two unknowns. While the dimensionality of x increases with the image size, the support of the kernel is fixed and small relative to the image size. The image y does provide a large number of measurements for estimating k. As we prove below, for an increasing image size, a MAP k estimation of k alone (marginalizing over x) can recover the true kernel with an increasing accuracy. This result stands in contrast to Claim 1 which stated that a MAP x,k estimator continues to fail even as the number of measurements goes to infinity. This leads to an alternative blind deconvolution strategy: use a MAP k estimator to recover the kernel and, given the kernel, solve for x using a non blind deconvolution algorithm.\nBefore providing a formal proof, we attempt to gain an intuition about the difference between MAP k and MAP x,k scores. A MAP k estimator selectsk = arg max k p(k|y), where p(k|y) = p(y|k)p(k)/p(y), and p(y|k) is obtained by marginalizing over x, and evaluating the full volume of possible x interpretations:\np(y|k) = Z p(x, y|k)dx.(7)\nTo see the role of marginalization, consider the scalar blind deconvolution problem illustrated in [2]. Suppose a scalar y is observed, and should be decomposed as y = k \u2022 x + n. Assume a zero mean Gaussian prior on the noise and signal, x \u223c N (0, \u03c3 2 ), n \u223c N (0, \u03b7 2 ). Then\nP (x, k|y) \u221d e \u2212 1 2\u03b7 2 |kx\u2212y| 2 \u2212 x 2 2\u03c3 2 . (8\n)\nFig. 4(a) illustrate the 2D distribution P (x, k|y). Unsurprisingly, it is maximized by x \u2192 0, k \u2192 \u221e. On the other hand, p(y|k) is the integral over all x explanations:\nP (y|k) \u221d Z e \u2212 1 2\u03b7 2 |kx\u2212y| 2 \u2212 x 2 2\u03c3 2 dx. (9\n)\nThis integral is not maximized by k \u2192 \u221e. In fact, if we consider the first term only e\n\u2212 1 2\u03b7 2 |kx\u2212y| 2\ndx, it clearly favors k \u2192 0 values because they allow a larger volume of possible x values. To see that, note that for every k and every \u01eb > 0 the size of the set of x values satisfying |kx \u2212 y| < \u01eb is 2\u01eb/k, maximized as k \u2192 0. Combining the two terms in (9) leads to an example in the middle of the range, and we show in Sec. 3.2.1 that x \u2248 \u03c3, which make sense because x now behaves like a typical sample from the prior. This is the principle of genericity described in Bayesian terms by [2]. Fig. 4(b) plots P (y|k), which is essentially summing the columns of Fig. 4(a). Now consider blur in real images: for the delta kernel there is only a single solution x = y satisfying k \u2297 x = y. However, while the delta spectrum is high everywhere, the true kernel is usually a low pass, and has low spectrum values. Referring to the notation of Eq. (3), if K \u03c9 = 0, an infinite subspace of possible explanations is available as X \u03c9 can be arbitrary (and with noise, any low |K \u03c9 | values increase the uncertainty, even if they are not exactly 0). Hence, the true kernel gets an advantage in the p(y|k) score.\nWe prove that for sufficiently large images, p(k|y) is guaranteed to favor the true kernel.", "publication_ref": ["b11", "b1", "b11", "b1", "b1"], "figure_ref": ["fig_3", "fig_3", "fig_3"], "table_ref": []}, {"heading": "Claim 2 Let", "text": "x be an arbitrarily large image, sampled from the prior p(x), and y = k \u2297 x + n. Then p(k|y) is maximized by the true kernel k * . Moreover, if arg max k p(y|k) is unique, p(k|y) approaches a delta function 2 .\nProof: We divide the image into small disjoint windows {y 1 , ..., y n } and treat them as i.i.d. samples y j \u223c p(y|k * ). We then select k ML = arg max k j p(y j |k). Applying the standard consistency theorem for maximum likelihood estimators [12] we know that given enough samples, the ML approaches the true parameters. That is, when n \u2192 \u221e\np(k M L ({y 1 , ..., y n }) = k * ) \u2192 1.(10)\nDue to the local form of the prior p(x) (Eq. ( 5)), taking sufficiently far away disjoint windows will ensure that p(y|k) \u2248 j p(y j |k). Thus, p(y|k) is maximized by k ML . Also, if we select a m times larger image y \u2032 , p(y \u2032 |k) = p(y|k) m . Thus, if p(y|k) < max k p(y|k) then p(y|k) \u2192 0. Finally, if p(k * ) > 0, then k MAP , k ML are equal on large images since arg max k p(y|k) = arg max k p(y|k)p(k), and thus, k MAP \u2192 k * . Similarly, if max k p(y|k) is unique, p(k|y) approaches a delta function. Fig. 4(c) plots p(y|k) for a scalar blind deconvolution task with N observations y j = kx j + n j , illustrating that as N increases, the uncertainty around the solution decreases (compare with Fig. 4(b)).", "publication_ref": ["b11"], "figure_ref": ["fig_3", "fig_3"], "table_ref": []}, {"heading": "The loss function perspective", "text": "As another way to understand the difference between the MAP x,k and MAP k estimators, we return to the definition of a Bayesian estimator. A Bayesian estimator involves a loss function L(x \u2212 x,k \u2212 k) on both parameters, specifying the price for an estimation error. The expected loss is minimized by:\n(x,k) = arg min Z Z p(x, k|y)L(x \u2212 x,k \u2212 k)dxdk. (11)\nOne simple choice of loss function yielding the MAP x,k solution is the Dirac delta loss function:\nL(x \u2212 x,k \u2212 k) = 1 \u2212 \u03b4 (x,k) \u2212 (x, k)\n. The limitations of this loss have been pointed out many times [12,2]. This \"all or nothing\" loss is too harsh for many signal processing applications, as it completely ignores all information around the mode. Instead, it is common to use loss functions that increase more smoothly with estimation error, such as the mean squared error (MSE) loss: where \u00b5 (k) = p(x|y, k)xdx, is a \"non blind\" MMSE x estimation of x given k. From Claim 2, p(k|y) is a delta function and thus:x = \u00b5 (k M AP ) .\nL(x, k) = |x \u2212x| 2 + |k \u2212k| 2 ,", "publication_ref": ["b11", "b1"], "figure_ref": [], "table_ref": []}, {"heading": "Examples of MAP k estimation", "text": "Claim 2 reduces to a robust blind deconvolution strategy: use MAP k estimator to recover k MAP = arg max k p(k|y), and then use k MAP to solve for x using some non blind deconvolution algorithm. To illustrate the MAP k approach, we start with the simple case of a Gaussian prior on p(x), as it permits a derivation in closed form.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "The Gaussian prior", "text": "The prior on X in Eq. ( 5) is a convolution and thus diagonal in the frequency domain. If G x , G y denote the Fourier transform of the derivatives g x , g y , then:\nX \u223c N (0, diag(\u03c3 2 \u03c9 )) \u03c3 2 \u03c9 = \u03b2( Gx,\u03c9 2 + Gy,\u03c9 2 ) \u22121 . (13)\nNote that since a derivative filter is zero at low frequencies and high at higher frequencies, this is similar to the classical 1/f 2 power spectrum law for images. Denoting noise variance by \u03b7, we can express p(X, Y ; K) = p(Y |X; K)p(X) as:\np(X, Y ; K) \u221d e \u2212 1 2\u03b7 2 K\u03c9 X\u03c9 \u2212Y\u03c9 2 \u2212 1 2\u03c3 2 \u03c9 X\u03c9 2 .(14)\n(see the appendix for details). Conditioned on k, the mean and mode of a Gaussian are equal:\nX M AP \u03c9 = \" |K\u03c9| 2 + \u03b7 2 \u03c3 2 \u03c9 \u00ab \u22121 K T \u03c9 Y\u03c9.(15)\nEq. ( 15) is the classic Wiener filter [7]. One can also integrate X and express p(Y |K) analytically. This is also a diagonal zero mean Gaussian with\nY \u223c N (0, diag(\u03c6 2 \u03c9 )), \u03c6 2 \u03c9 = \u03c3 2 \u03c9 |K\u03c9| 2 + \u03b7 2 . (16\n)\nEq. ( 16) is maximized when \u03c6 2 \u03c9 = |Y \u03c9 | 2 , and for blind deconvolution, this implies:\n|K\u03c9| 2 = max \" 0, |Y\u03c9| 2 \u2212 \u03b7 2 \u03c3 2 \u03c9 \u00ab .(17)\nThe image estimated usingK satisfies |X \u03c9 | 2 \u2248 \u03c3 2 \u03c9 . Therefore MAP k does not result in a trivial X = 0 solution as MAP x,k would, but in a solution whose variance matches the prior variance \u03c3 2 , that is, a solution which looks like a typical sample from the prior p(X).\nAnother way to interpret the MAP k , is to note that\nlog p(Y |K) = log p(X M AP , Y ; K)\u2212 1 2 X \u03c9 log \" |K\u03c9| 2 \u03b7 2 + 1 \u03c3 2 \u03c9 \u00ab +C(18)\nReferring to Eq. ( 14), the second term is just the log determinant of the covariance of p(X|Y ; K). This second term is optimized when K \u03c9 = 0, i.e. by kernels with more blur. That is, log p(Y |K) is equal to the MAP x,k score of the mode plus a term favoring kernels with blur.\nThe discussion above suggests that the Gaussian MAP k provides a reasonable solution to blind deconvolution. In the experiment section we evaluate this algorithm and show that, while weaker than the sparse prior, it can provide acceptable solutions. This stands in contrast to the complete failure of a MAP x,k approach, even with the seemingly better sparse prior. This demonstrates that a careful choice of estimator is actually more critical than the choice of prior.\nNote that Eq. ( 17) is accurate if every frequency is estimated independently. In practice, the solution can be further constrained, because the limited spatial support of k implies that the frequency coefficients {K \u03c9 } are linearly dependent. Another important issue is that Eq. ( 17) provides information on the kernel power spectrum alone but leaves uncertainty about the phase. Many variants of Gaussian blind deconvolution algorithms are available in the image processing literature (e.g. [11,17]) but in most cases only symmetric kernels are considered since their phase is known to be zero. However, realistic camera shake kernels are usually not symmetric. In the appendix we describe a Gaussian blind deconvoltion algorithm which attempts to recover non symmetric kernels as well.", "publication_ref": ["b6", "b10", "b16"], "figure_ref": [], "table_ref": []}, {"heading": "Approximation strategies with a sparse prior", "text": "The challenge with the MAP k approach is that for a general sparse prior, p(k|y) (Eq. ( 7)) cannot be computed in closed form. Several previous blind deconvolution algorithms can be viewed as approximation strategies for MAP k , although the authors might not have motivated them in this way.\nA simple approximation is proposed by Levin [16], for the 1D blur case. It assumes that the observed derivatives of y are independent (this is usually weaker than assuming independent derivatives of x): log p(y|k)\n= i log p(g x,i (y)|k). Since p(g x,i (y)|k) is a 1D distribu- tions, it can be expressed as a 1D table, or a histogram h k .\nThe independence assumption implies that instead of summing over image pixels, one can express p(y|k) by summing over histogram bins:\nlog p(y|k) = X i log p(gx,i(y)|k) = X j hj log(h k j )(19)\nwhere h denotes the gradients histogram in the observed image and j is a bin index. In a second step, note that maximizing Eq. ( 19) is equivalent to minimizing the histogram dis-tance between the observed and expected histograms h,h k . This is because the Kullback Leibler divergence is equal to the negative log likelihood, plus a constant that does not depend on k (the negative entropy):\nDKL(h, h k ) = X j hj log(hj ) \u2212 X j hj log(h k j ).(20)\nSince the KL divergence is non-negative, the likelihood is maximized when the histograms h, h k are equal. This very simple approach is already able to avoid the delta solution but as we demonstrate in Sec. 4.1 it is not accurately identifying the exact filter width.\nA stronger approximation is the variational Bayes meanfield approach taken by Fergus et al. [4]. The idea is to build an approximating distribution with a simpler parametric form:\np(x, k|y) \u2248 q(x, k) = Y i q(gi,x(x))q(gi,y(x)) Y j q(kj ). (21\n)\nSince q is expressed in the gradient domain this does not recover x directly. Thus, they also pick the MAP k kernel from q and then solve for x using non blind deconvolution.\nA third way to approximate the MAP k is the Laplace approximation [2], which is a generalization of Eq. (18):\nlog p(y|k) \u2248 log p(x M AP , y; k) \u2212 1 2 log |A| + C (22) A = \u2202 2 \u2202xi\u2202xj log p(x, y; k)| x=x M AP .(23)\nThe Laplace approximation states that p(y|k) can be expressed by the probability of the mode x MAP plus the log determinant of the variance around the mode. As discussed above, higher variance is usually achieved when k contains more zero frequencies, i.e. more blur. Therefore, the Laplace approximation suggests that p(y|k) is the MAP x,k score plus a term pulling toward kernels with more blur. Unfortunately, in the non Gaussian case the covariance matrix isn't diagonal and exact inversion is less trivial. Some earlier blind deconvolution approaches [24,19] can be viewed as simplified forms of a blur favoring term. For example, they bias towered blurry kernels by adding a term penalizing the high frequencies of k or with an explicit prior on the kernel. Another approach was exploit by Bronstein et al. [3]. They note that in the absence of noise and with invertible kernels p(k|y) can be exactly evaluated for sparse priors as well. This reduces to optimizing the sparsity of the image plus the log determinant of the kernel spectrum.", "publication_ref": ["b15", "b3", "b1", "b23", "b18", "b2"], "figure_ref": [], "table_ref": []}, {"heading": "Evaluating blind deconvolution algorithms", "text": "In this section we qualitatively compare blind deconvolution strategies on the same data. We start with a synthetic 1D example and in the second part turn to real 2D motion.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "1D evaluation", "text": "As a first test, we use a set of 1000 signals of size 10 \u00d7 1 cropped from a natural image. These small 1D signals allow us to evaluate the marginalization integral in Eq. (7)  We tested the zero sheet separation (e.g. [14]), an earlier image processing approach with no probabilistic formulation. This algorithm measures the Fourier magnitude of y at the zero frequencies of each box filter k. If the image was indeed convolved with that filter, low Fourier content is expected. However, this approach considers the zero frequencies alone ignoring all other information, and is known to be noise sensitive. It is also limited to kernel families from a simple parametric form and with a clear zeros structure.\nSupporting the example in Sec. 2, a pure MAP x,k approach (p(y|k) \u2248 p(x MAP , y|k)) favors no-blur (\u2113 = 1). Reweighting the derivative penalty around edges can improve the situation, but the delta solution still provides a noticeable local optimum.\nThe correct minimum is favored with a variational Bayes approximation [4] and with the semi Laplace approximation of [3]. The independence approximation [16] is able to overcome the delta solution, but does not localize the solution very accurately (minimum at \u2113 = 4 instead of \u2113 = 5.) Finally, the correct solution is identified even with the poor image prior provided by a Gaussian model, demonstrating that the choice of estimator (MAP x,k v.s. MAP k ), is more critical than the actual prior (Gaussian v.s. sparse).\nSince claim 2 guaranties success only for large images, we attempt to evaluate how large an image should be in practice. Fig. 6 plots the uncertainty in p(k|y) for multiple random samples of N 10 \u00d7 1 columns. The probability is tightly peaked at the right answer for as little as N = 20 columns. The search space in Fig. 6 is limited to the single parameter family of box filters. In real motion deblurring one searches over a larger family of kernels and a larger uncertainty is expected.", "publication_ref": ["b13", "b3", "b2", "b15"], "figure_ref": [], "table_ref": []}, {"heading": "2D evaluation", "text": "To compare blind deconvolution algorithms we have collected blurred data with ground truth. We capture a sharp version a planar scene (Fig. 7(a)) by mounting the camera on a tripod, as well as a few blurred shots. Using the sharp reference we solve for a non-negative kernel k minimizing k\u2297x\u2212y 2 . The scene in Fig. 7(a) includes high frequency noise patterns which helps stabilizing the constraints on k. The central area of the frame includes four real images used as input to the various blind deconvolution algorithms.\nWe first observed that assuming a uniform blur over the image is not realistic even for planar scenes. For example Fig. 7(b) shows traces of points at 4 corners of an image captured by a hand-held camera, with a clear variation between the corners. This suggests that an in-plane rotation (rotation around the z-axis) is a significant component of human hand shake. Yet, since a uniform assumption is made by most algorithms, we need to evaluate them on data which obeys their assumption. To capture images with spatially invariant blur we placed the camera on a tripod, locking the Z-axis rotation handle of the tripod but loosening the X and Y handles. We calibrated the blur of 8 such images and cropped 4 255 \u00d7 255 windows from each, leading to 32 test images displayed in Fig. 8 and available online 4 . We used an 85mm lens and a 0.3 seconds exposure. The kernels' support varied from 10 to 25 pixels. We can measure the SSD error between a deconvolved output and the ground truth. However, wider kernels result in larger deconvolution error even with the true kernel. To normalize this effect, we measure the ratio between deconvolution error with the estimated kernel and deconvolution with the truth kernel. In Fig. 9 we plot the cumulative histogram of error ratios (e.g. bin r = 3 counts the percentage of test examples achieving error ratio below 3). Empirically, we noticed that error ratios above 2 are already visually implausible. The dataset and all deconvolution results are included at the end of this manuscript.\nWe have evaluated the algorithms of Fergus et al. [4] and Shan et al. [21] (each using the authors' implementation), as well as MAP k estimation using a Gaussian prior (described in the appendix), and a simplified MAP x,k approach constraining k i = 1 (we used coordinate descent, iterating between holding x constant and solving for k, and then holding k constant and solving for x using the sparse deconvolution algorithm of [15]). The algorithms of [16,10,3] were not tested because the first was designed for 1D motion only, and the others focus on smaller blur kernels.\nWe made our best attempt to adjust the parameters of Shan et al. [21], but run all test images with equal parameters. Fergus et al. [4] used Richardson-Lucy non blind deconvolution in their code. Since this algorithm is a source for ringing artifacts, we improved the results using the kernel estimated by the authors' code with the (non blind) sparse deconvolution of [15]. Similarly, we used sparse deconvolution with the kernel estimated by Shan et al.\nThe bars in Fig. 9 and the visual results in the appendix suggest that Fergus et al.'s algorithm [4] significantly outperforms all other alternatives. Many of the artifacts in the results of [4] can be attributed to the Richardson-Lucy non blind deconvolution artifacts, or to non uniform blur in their test images. Our comparison also suggests that applying sparse deconvolution using the kernels outputted by Shan et al. [21] improves their results. As expected, the naive MAP x,k approach outputs small kernels approaching the delta solution.", "publication_ref": ["b3", "b20", "b14", "b15", "b9", "b2", "b20", "b3", "b14", "b3", "b3", "b20"], "figure_ref": [], "table_ref": []}, {"heading": "Discussion", "text": "This paper analyzes the major building blocks of recent blind deconvolution algorithms. We illustrate the limitation of the simple MAP x,k approach, favoring the no-blur (delta kernel) explanation. One class of solutions involves explicit edge detection. A more principled strategy exploits the dimensionality asymmetry, and estimates MAP k while marginalizing over x. While the computational aspects involved with this marginalization are more challenging, existing approximations are powerful.\nWe have collected motion blur data with ground truth and quantitatively compared existing algorithms. Our comparison suggests that the variational Bayes approximation [4] significantly outperforms all existing alternatives.\nThe conclusions from our analysis are useful for directing future blind deconvolution research. In particular, we note that modern natural image priors [20,25] do not overcome the MAP x,k limitation (and in our tests did not change the observation in Sec. 2). While it is possible that blind deconvolution can benefit from future research on natural image statistics, this paper suggests that better estimators for existing priors may have more impact on future blind deconvolution algorithms. Additionally, we observed that the popular spatially uniform blur assumption is usually unrealistic. Thus, it seems that blur models which can relax this assumption [22] have a high potential to improve blind deconvolution results. Acknowledgments: We thank the Israel Science Foundation, the Royal Dutch/Shell Group, NGA NEGI-1582-04-0004, MURI Grant N00014-06-1-0734, NSF CAREER award 0447561. Fredo Durand acknowledges a Microsoft Research New Faculty Fellowship and a Sloan Fellowship.", "publication_ref": ["b3", "b19", "b24", "b21"], "figure_ref": [], "table_ref": []}, {"heading": "Appendix A: Blind deconvolution with a Gaussian prior", "text": "To complete section 3.2.1 of the main paper, we provide a detailed derivation of a MAP k estimation algorithm using a Gaussian prior. The simple analytic treatment of a Gaussian prior is attractive both from a computational viewpoint and from a research viewpoint, as it affords intuition. While the algorithm is not as powerful as sparse deconvolution algorithms, it approaches the solution using second order statistics alone.\nTo derive the Gaussian algorithm, we rewrite the generative model explicitly for a Gaussian prior and, to simplify notation, use the frequency domain. p(Y|X; K): The spatial i.i.d. Gaussian observation noise is invariant to the frequency basis change. Therefore\n(Y\u03c9|X\u03c9; K\u03c9) \u223c N (K\u03c9X\u03c9, \u03b7 2 ) (24\n)\nwhere \u03b7 denotes the noise variance.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "p(X):", "text": "The prior on X uses a convolution and is diagonal in the frequency domain. If G x , G y denote the Fourier transform of the derivative filters g x , g y , the convolution and Parseval's theorems result in i |g x,i (x\n)| 2 + |g y,i (x)| 2 = \u03c9 |G x,\u03c9 X \u03c9 | 2 + |G y,\u03c9 X \u03c9 | 2 .\nTherefore X follows a zero mean Gaussian distribution with diagonal covariance:\nX \u223c N (0, diag(\u03c3 2 \u03c9 )) \u03c3 2 \u03c9 = \u03b2( Gx,\u03c9 2 + Gy,\u03c9 2 ) \u22121 . (25\n)\n(the scale \u03b2 can be fitted based on the derivative histogram in a natural image). Note that since a derivative filter is zero at the low frequencies and high at the higher frequencies, this is very similar to the classical 1/f 2 power spectrum law (and our algorithm produced very similar results with an explicit 1/f 2 prior). Therefore, solving for the MAP x (using Eqs. (24,25)) is a least square minimization:", "publication_ref": ["b23", "b24"], "figure_ref": [], "table_ref": []}, {"heading": "MAP x estimation:", "text": "X M AP = arg max p(X, Y ; K) = arg max p(Y |X; K)p(X).(26)\nX MAP \u03c9 = arg min 1 \u03b7 2 K \u03c9 X \u03c9 \u2212 Y \u03c9 2 + 1 \u03c3 2 \u03c9 X \u03c9 2(27)\nX MAP \u03c9 = |K \u03c9 | 2 + \u03b7 2 \u03c3 2 \u03c9 \u22121 K T \u03c9 Y \u03c9 .(28)\nEq. ( 28) is essentially the famous Wiener filter [7]. The prior term in Eq. (28) pulls the estimation toward zero, pulling stronger at high frequencies where the expected signal magnitude is small (\u03c3 \u03c9 \u2192 0) and noise contribution is higher. When the filter value K \u03c9 = 0, the signal value cannot be recovered and the prior leads the estimation to X \u03c9 = 0.\np(Y): One can also integrate X and express p(Y |K) analytically. This is also a diagonal zero mean Gaussian with\nY \u223c N (0, diag(\u03c6 2 \u03c9 )), \u03c6 2 \u03c9 = \u03c3 2 \u03c9 |K\u03c9| 2 + \u03b7 2 .(29)\nGiven Eqs. (24-29), we can return to blind deconvolution. If we were to estimate every frequency K \u03c9 independently, we could differentiate Eq. (29) and conclude it is maximized when \u03c6 2 \u03c9 = |Y \u03c9 | 2 , which results in:\n|K\u03c9| 2 = max(0, |Y\u03c9| 2 \u2212 \u03b7 2 \u03c3 2 \u03c9 ).(30)\nEq. (30) essentially states that the optimal K leads to an X whose power spectrum equals the expected power spectrum \u03c3 2 . However, for frequencies \u03c9 in which the observed signal value is below the noise variance (i.e. |Y \u03c9 | 2 < \u03b7 2 ), the estimator acknowledges that K \u03c9 cannot be recovered and outputs 0. Below we make usage of this point to derive a coarse-to-fine algorithm. In Fig. 10(b) we show the filter estimated using Eq. (30). The estimation nicely resembles the overall shape and power spectrum of the true filter (Fig. 10(a)) but is far too noisy to be acceptable. This noise is not surprising as every component of K was estimated from a single measurement.\nThe signal processing literature [12] addresses the problem of power spectrum estimation (also known as the periodigram), suggesting that the power spectrum of the observed signal Y should be smoothed before applying Eq. (30). While such smoothing operation increases the bias of the estimation, it significantly reduces its variance. Fig. 10(c) demonstrates the estimation from a smoothed power spectrum. One can note that as smoothing reduces the fluctuation in the frequency domain, the support of the filter in the primal domain becomes more compact. This leads to another important property of the problem that was ignored so far: while Eq. (30) estimate every Fourier coefficient independently, the number of free parameters to estimate in K is much smaller than the image size, since a typical filter is assumed to have only a small compact support. Fig. 10(d) presents the estimated kernel, once a compact support was enforced (according to the algorithm described below). This constraint significantly increases the stability of the estimation.", "publication_ref": ["b6", "b11"], "figure_ref": ["fig_8", "fig_8", "fig_8", "fig_8"], "table_ref": []}, {"heading": "Phase estimation", "text": "While Eq. (30) defines the power spectrum of K, it leaves us with a complete ambiguity regarding its phase. In fact, for every solution K, X such that Y \u03c9 = K \u03c9 X \u03c9 and for any phase vector \u03b8 \u03c9 , the pair K \u03c9 = K \u03c9 e i\u03b8\u03c9 , X \u03c9 = X \u03c9 e \u2212i\u03b8\u03c9 is an equally valid solution, satisfying Y \u03c9 = K \u03c9 X \u03c9 . The prior on X does not help resolving this ambiguity -as the Gaussian prior in Eq. (25) depends only on the power spectrum, p( X) = p(X). However, while ev- ery phase can maintain the convolution model, most random phase choices destroy the finite support of K. The question of estimating the signal phase given the power spectrum has a long history in signal processing. [8] states that for most of kernels, a finite support constraint uniquely defines the signal phase, up to (1) shift and ( 2) flipping (mirroring). While a shift ambiguity in deconvolution is reasonable and does not effect the visual quality of the deconvolved image, deconvolving the image with the mirrored filter leads to noticeable artifacts, as illustrated in Fig. 12. For the implementation in this paper we escape this ambiguity by noticing that while the original image x (in the spatial domain) be non negative, deconvolving y with the mirrored filter often leads to negative x values. Yet, this ambiguity highlights one of the weaknesses of second order statistics. While the second order statistics of the images in Fig. 12(a,b) are equal, it is clear that every simple sparse measure will favor Fig. 12(a). Nevertheless, we show that the second order statistics plus finite support constraint can get us surprisingly close to the true solution.\nWhile a bounded support constraint removes most phase ambiguity, recovering the phase algorithmically is not a trivial question. A popular gradient based optimization scheme is the Gerchberg-Saxton [6,5] algorithm. This algorithm initializes the kernel phase randomly, and then alternates between primal-frequency transformations, enforcing the finite support constraint in the primal domain and the required power spectrum in the frequency domain.", "publication_ref": ["b7", "b5", "b4"], "figure_ref": ["fig_0", "fig_0", "fig_0"], "table_ref": []}, {"heading": "EM optimization", "text": "Applying the Gerchberg-Saxton algorithm [6,5] to the independent power spectrum estimated from Eq. (29) provides a reasonable initialization for our algorithm. We then proceed with an EM algorithm. The E-step computed the expected mean and variance for the deblurred image X. The M-step uses the second order statistics of X to solve for k, enforcing two constraints: the finite support constraint discussed above, plus the simple requirement that the blur kernel k (in the spatial domain) is non negative. E-step: Applying Eq. (28):\n< X \u03c9 > = |K \u03c9 | 2 + \u03b7 2 \u03c3 2 \u03c9 \u22121 K T \u03c9 Y \u03c9 (31) < X T \u03c9 X \u03c9 > = |K \u03c9 | 2 + \u03b7 2 \u03c3 2 \u03c9 + < X \u03c9 > T < X \u03c9 > (32)\nM-step Transform < X > and < XX > to the spatial domain and solve for k minimizing < k \u2297 x \u2212 y > subject to finite support and non negativity.\nTo express this minimization, suppose that k is an l \u00d7 l filter. We denote by x wi the l \u00d7 l window around the i'th pixel, such that y i = j\u2208wi k j x j . Let A be an m \u00d7 l 2 matrix whose rows are the windows x wi , and m is the number of windows included in the image. If x, y are known, the best filter k is the one minimizing Note that the number of unknowns in this system is equal to the kernel size l 2 , which is much lower than the number of pixels in the image. In practice we do not precisely know x, but from the E-stp we have access to < A T A > and < A >. This is a quadratic minimization subject to linear constraints, and thus a convex problem that can be solved using quadratic programming.", "publication_ref": ["b5", "b4"], "figure_ref": [], "table_ref": []}, {"heading": "Coarse-to-fine", "text": "Fergus et al. [4] estimated the kernel in a coarse-to-fine scheme. In our case, Eq. (29) provides an easy way to implement this. We initialize the optimization with a high noise variance \u03b7. As a result all frequencies with observation below the noise variance (usually the high frequencies) are set to zero, and we mostly optimize the low frequencies of the kernel. Once the low frequency optimization starts to converge we gradually reduce the noise variance \u03b7, allowing more and more bands of frequencies to be nailed down. The kernels estimated with varying \u03b7 values are illustrated in Fig. 11.", "publication_ref": ["b3"], "figure_ref": [], "table_ref": []}, {"heading": "Appendix B: Shan et al.'s algorithm", "text": "We discuss the blind deconvolution algorithm of [21] and try to understand how it is working. This algorithm attempts to optimize a semi-MAP x,k score, seeking a solution k, x that minimizes:\n\u03bb x \u2212 y 2 + X i wi|gx,i(x)| \u03b1 + wi|gy,i(x)| \u03b1 .(34)\nThere are two main components that distinguish this algorithm from a naive MAP x,k optimization: edge reweighting and iterative update of the likelihood weight.\nEdge rewighting: One main component that prevents Eq. (34) from outputting the delta solution is the usage of non uniform weights w i on the gradient penalty. The authors explicitly detect low contrast image regions and increase their smoothness penalty.\nTo test this idea, we have implemented a simplified coordinate descent variant of the algorithm. We attempt to minimize the cost in Eq. (34), alternating between minimization with respect to x and minimization with respect to k (holding the other constant). We use \u03b1 = 0.8 for the sparse prior, and solve for x using iterative reweighted least squares, as in [15]. Gradients are reweighted using an edge detector. We emphasize that the goal of our implementation is to test the basic idea of a MAP x,k approach with edge reweighting, and not to reproduce the algorithm of [21] exactly. This algorithm involves a sophisticated number of additional details which affect the final output. Our observation is that while edge reweighting helps in avoiding the delta solution, edge rewighting alone is not always sufficient.\nIterative likelihood update: Another important component in [21] is to start the optimization with a low likelihood weight \u03bb, and gradually increase it during subsequent iterations. To understand this, Fig. 13 shows an image deconvolved with two kernels -the true kernel and a delta kernel. We have performed the deconvolution with a set of \u03bb values and compared the sum of gradients in the deconvolved image. Examining Fig. 13 we note that for low \u03bb values, there is no need to explain all low contrast texture in y. These low contrast details are interpreted as noise, and the resulting latent image x is piecewise constant with step edges. Given the piecewise constant structure, the derivatives response is low. Therefore, for low \u03bb values the true blur is indeed favored over the delta kernel. However, the situation is usually inverted when the likelihood weight is increased to a realistic level, and a delta kernel wins.\nThe fact that the true kernel is favored when the likelihood weight is low can help steer the algorithm toward \u03bb = 0.1 2 \u03bb = 0.1 3 \u03bb = 0. the desired solution. As suggested by [21], we have initialized our coordinate descent algorithm with a low \u03bb value and gradually increased it during iterations. Since \u03bb is initially low the algorithm is steered toward the true kernel and when \u03bb is increased, the algorithm is already trapped in a local minimum and does not move significantly away from it. Some iterations from our coordinate descent implementation are available in Fig. 14. To evaluate this, Fig. 14(f) illustrates the likelihood changes during optimization. While \u03bb is updated during optimization, at the end we traced back the kernels estimated in previous iterations, and evaluated their score using the final realistic (high) \u03bb value. Fig. 14(f) plots the scores with this final \u03bb. The interesting observation is that the score of the solution is increasing during optimization and the score of the first iteration (a delta kernel) is actually better than the final one. That is, by changing likelihood weight during optimization, the algorithm is steered toward a local minimum of the cost in Eq. (34), but this local minimum often happens to be the desired one.\nAs another way to evaluate this, we blurred the image in Figs.13,14 with a box kernel of width 13 pixels. We have computed the MAP x,k score for this image, varying two parameters: the kernel (running over box filters of size 1 to 15 pixels) and the likelihood weight \u03bb. The 2D surfaces of scores is visualized in Fig. 15. Two ridges are observed, and one can also notice that while the minima with the delta solution is much lower, the ridge from the low \u03bb values is leading toward the true kernel local minima, and not toward the delta solution.     ", "publication_ref": ["b20", "b14", "b20", "b20", "b20"], "figure_ref": ["fig_1", "fig_1", "fig_3", "fig_3", "fig_3", "fig_5"], "table_ref": []}], "references": [{"ref_id": "b0", "title": "Interative blind deconvolution method and its applications", "journal": "Opt. Lett", "year": "1988", "authors": "G R Ayers; J C Dainty"}, {"ref_id": "b1", "title": "", "journal": "Bayesian color constancy. JOSA", "year": "1997", "authors": "D Brainard; W Freeman"}, {"ref_id": "b2", "title": "Blind deconvolution of images using optimal sparse representations. Image Processing", "journal": "IEEE Transactions on", "year": "2005", "authors": "M M Bronstein; A M Bronstein; M Zibulevsky; Y Y Zeevi"}, {"ref_id": "b3", "title": "Removing camera shake from a single photograph", "journal": "", "year": "2006", "authors": "R Fergus; B Singh; A Hertzmann; S T Roweis; W T Freeman"}, {"ref_id": "b4", "title": "Phase retrieval algorithms: a comparison", "journal": "Applied Optics", "year": "1982-08", "authors": "J R Fienup"}, {"ref_id": "b5", "title": "A practical algorithm for the determination of phase from image and diffraction plane pictures", "journal": "Optik", "year": "1972", "authors": "R W Gerchberg; W O Saxton"}, {"ref_id": "b6", "title": "Digital Image Processing", "journal": "Prentice Hall", "year": "2002-01", "authors": "R C Gonzalez; R E Woods"}, {"ref_id": "b7", "title": "The reconstruction of a multidimensional sequence from the phase or magnitude of its fourier transform", "journal": "IEEE Trans. On Acoustics, Speech, and Signal Processing", "year": "1982", "authors": "M Hayes"}, {"ref_id": "b8", "title": "Single image motion deblurring using transparency", "journal": "", "year": "2007", "authors": "Jiaya Jia"}, {"ref_id": "b9", "title": "Psf estimation using sharp edge prediction", "journal": "", "year": "2008", "authors": "N Joshi; R Szeliski; D Kriegman"}, {"ref_id": "b10", "title": "Maximum likelihood blur identification and image restoration using the em algorithm", "journal": "IEEE Trans. Signal Processing", "year": "1991", "authors": "A K Katsaggelos; K T Lay"}, {"ref_id": "b11", "title": "Fundamentals of Statistical Signal Processing: Estimation Theory", "journal": "Prentice Hall", "year": "1997", "authors": "S M Kay"}, {"ref_id": "b12", "title": "Blind image deconvolution", "journal": "IEEE Signal Processing Magazine", "year": "1996", "authors": "D Kundur; D Hatzinakos"}, {"ref_id": "b13", "title": "Automatic multidimensional deconvolution", "journal": "J. Opt. Soc. Am. A", "year": "1987", "authors": "R G Lane; R H T Bates"}, {"ref_id": "b14", "title": "Image and depth from a conventional camera with a coded aperture", "journal": "SIGGRAPH", "year": "2007", "authors": "A Levin; R Fergus; F Durand; W Freeman"}, {"ref_id": "b15", "title": "Blind motion deblurring using image statistics", "journal": "", "year": "2006", "authors": "Anat Levin"}, {"ref_id": "b16", "title": "A variational approach for bayesian blind image deconvolution", "journal": "IEEE Trans. on Signal Processing", "year": "2004", "authors": "A C Likas; N P Galatsanos"}, {"ref_id": "b17", "title": "Ensemble learning for blind image separation and deconvolution", "journal": "Springer", "year": "2000", "authors": "J W Miskin; D J C Mackay"}, {"ref_id": "b18", "title": "A bayesian approach to blind deconvolution based on dirichlet distributions", "journal": "", "year": "1997", "authors": "R Molina; A K Katsaggelos; J Abad; J Mateos"}, {"ref_id": "b19", "title": "Fields of experts: A framework for learning image priors", "journal": "", "year": "2005", "authors": "S Roth; M J Black"}, {"ref_id": "b20", "title": "High-quality motion deblurring from a single image", "journal": "SIGGRAPH", "year": "2008", "authors": "Q Shan; J Jia; A Agarwala"}, {"ref_id": "b21", "title": "Rotational motion deblurring of a rigid object from a single image", "journal": "", "year": "2007", "authors": "Q Shan; W Xiong; J Jia"}, {"ref_id": "b22", "title": "Bayesian denoising of visual images in the wavelet domain", "journal": "Springer-Verlag", "year": "1999", "authors": "E P Simoncelli"}, {"ref_id": "b23", "title": "Strict a priori constraints for maximum-likelihood blind deconvolution", "journal": "J. Opt. Soc. Am. A", "year": "1995", "authors": "E Thi\u00e9baut; J.-M Conan"}, {"ref_id": "b24", "title": "What makes a good model of natural images", "journal": "", "year": "2007", "authors": "Y Weiss; W T Freeman"}, {"ref_id": "b25", "title": "", "journal": "", "year": "", "authors": "Fergus "}, {"ref_id": "b26", "title": "SSD err=83.5, err ratio=2", "journal": "", "year": "", "authors": ""}, {"ref_id": "b27", "title": "", "journal": "", "year": "", "authors": " Shan"}, {"ref_id": "b28", "title": "", "journal": "", "year": "", "authors": " Shan"}], "figures": [{"figure_label": "12", "figure_type": "figure", "figure_id": "fig_0", "figure_caption": "Figure 1 .Figure 2 .12Figure 1. The MAP x,k score evaluated on toy 1D signals. Left: sharp and blurred signals. Right: sum of gradients \u2212 log p(x) = P i |gi(x)| \u03b1 as a function of \u03b1.", "figure_data": ""}, {"figure_label": "3", "figure_type": "figure", "figure_id": "fig_1", "figure_caption": "Figure 3 .3Figure 3. (a) Comparison of gradient histograms for blurred and unblurred images sampled from p 0 (x). Blur reduces the average gradient magnitude. (b) Expected negative likelihood reduces (probability increases) with blur.", "figure_data": ""}, {"figure_label": "3", "figure_type": "figure", "figure_id": "fig_2", "figure_caption": "Fig. 3 (3a) plots p \u2113 for \u03b1 = 0.5, and Fig.3(b) the expected likelihood as a function of \u2113. The variance is reduced by convolution, and hence the negative log-likelihood reduces as well.", "figure_data": ""}, {"figure_label": "4", "figure_type": "figure", "figure_id": "fig_3", "figure_caption": "Figure 4 .4Figure 4. A toy blind deconvolution problem with one scalar y = kx + n (replotted from [2]). (a) The joint distribution p(x, k|y). A maximum is obtained for x \u2192 0, k \u2192 \u221e. (b) The marginalized score p(k|y) produce an optimum closer to the true k * . (c) The uncertainty of p(k|y) reduces given multiple observations yj = kxj + nj .", "figure_data": ""}, {"figure_label": "5", "figure_type": "figure", "figure_id": "fig_5", "figure_caption": "Figure 5 .5Figure 5. log p(y|k) scores using various approximation strategies on 1D image signals. Successful algorithms locate the minimum score at the true kernel width, denoted by the dashed line.", "figure_data": ""}, {"figure_label": "67", "figure_type": "figure", "figure_id": "fig_6", "figure_caption": "Figure 6 .Figure 7 .67Figure 6. The uncertainty in kernel estimation decreses with more samples. For as little at N = 20 columns it is already tightly peaked at the true answer.", "figure_data": ""}, {"figure_label": "89", "figure_type": "figure", "figure_id": "fig_7", "figure_caption": "Figure 8 .Figure 9 .89Figure 8. Ground truth data: 4 images and 8 blur kernels, resulting in 32 test images", "figure_data": ""}, {"figure_label": "10", "figure_type": "figure", "figure_id": "fig_8", "figure_caption": "Figure 10 .10Figure 10. Power spectrum estimation and the compact support constraint. Top: power spectrum, Bottom: kernel in primal domain", "figure_data": ""}, {"figure_label": "1112", "figure_type": "figure", "figure_id": "fig_9", "figure_caption": "Figure 11 .Figure 12 .1112Figure 11. Coarse to fine kernel estimation. (a) Ground truth. (b-f) estimated kernels with decreasing \u03b7 values", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_10", "figure_caption": "Ak(:) \u2212 y(:) 2 = k(:) T A T Ak(:) \u2212 2y(:) T Ak(:) + y(:) T y(:) s.t. k \u2265 0.(33)", "figure_data": ""}, {"figure_label": "14", "figure_type": "figure", "figure_id": "fig_11", "figure_caption": "Figure 14 .14Figure 14. coordinate descent Kernel optimization with an edge reweighted MAP x,k score. Likelihood weight is increased during optimization.", "figure_data": ""}, {"figure_label": "15", "figure_type": "figure", "figure_id": "fig_12", "figure_caption": "Figure 15 .15Figure 15. -MAP x,k scores as a function of likelihood weight \u03bb and kernel width (dark values favored).", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_13", "figure_caption": "FigureFigure 4. Comparing deconvolution algorithms, im 3, kernel 4", "figure_data": ""}, {"figure_label": "78910111213141516", "figure_type": "figure", "figure_id": "fig_14", "figure_caption": "Figure 7 .Figure 8 .Figure 9 .Figure 10 .Figure 11 .Figure 12 .Figure 13 .Figure 14 .Figure 15 .Figure 16 .78910111213141516Figure 7. Comparing deconvolution algorithms, im 3, kernel 7", "figure_data": ""}, {"figure_label": "", "figure_type": "table", "figure_id": "tab_0", "figure_caption": "SE x image estimation, is equivalent to a simultaneous MMSE x,k estimation of both x and k 3 .Proof: The mean squared error is minimized by the mean, and in our case MMSE x,k provide\u015d", "figure_data": "x =p(x, k|y)x dxdk=p(k|y)p(x|y, k)x dxdk=p(k|y)\u00b5 (k) dk(12)"}, {"figure_label": "", "figure_type": "table", "figure_id": "tab_2", "figure_caption": "SSD err=315.3, err ratio=18.6 Shan et al. kernel, sparse deconv SSD err=237.5, err ratio=14.0 MAP x,k , edges reweighting SSD err=394.8, err ratio=23.3 MAP x,k , no edges reweighting SSD err=175.0, err ratio=10.3 Gaussian", "figure_data": "SSD err=15.2, err ratio=1 SSD err=10.6, err ratio=1 SSD err=16.9, err ratio=1input input inputGround truth Ground truth Ground truthDeconvolution with ground truth kernel Deconvolution with ground truth kernel Deconvolution with ground truth kernelSSD err=22.0, err ratio=1.4 SSD err=33.6, err ratio=3.1 SSD err=139.8, err ratio=8.2SSD err=39.9, err ratio=2.6 SSD err=84.9, err ratio=7.9 SSD err=326.5, err ratio=19.2SSD err=33.7, err ratio=2.2 SSD err=71.2, err ratio=6.6Fergus et al. Fergus et al. Fergus et al.Shan et al. Shan et al. Shan et al.Shan et al. kernel, sparse deconv Shan et al. kernel, sparse deconvSSD err=84.09, err ratio=5.5 SSD err=156.1, err ratio=14.6SSD err=113.3, err ratio=7.4 SSD err=209.6, err ratio=19.6SSD err=50.6, err ratio=3.3 SSD err=80, err ratio=7.5MAP x,k , edges reweighting MAP x,k , edges reweightingMAP x,k , no edges reweighting MAP x,k , no edges reweightingGaussian Gaussian4. Comparing deconvolution algorithms, im 3, kernel 4 Figure 5. Comparing deconvolution algorithms, im 3, kernel 5 Figure 6. Comparing deconvolution algorithms, im 3, kernel 6"}], "formulas": [{"formula_id": "formula_0", "formula_text": "y = k \u2297 x (1)", "formula_coordinates": [1.0, 148.92, 434.56, 137.38, 8.97]}, {"formula_id": "formula_1", "formula_text": "y = k \u2297 x + n.(2)", "formula_coordinates": [1.0, 397.92, 655.36, 147.11, 8.97]}, {"formula_id": "formula_2", "formula_text": "Y\u03c9 = K\u03c9X\u03c9 + N\u03c9.(3)", "formula_coordinates": [2.0, 130.32, 41.31, 155.99, 8.96]}, {"formula_id": "formula_4", "formula_text": "log p(x) = \u2212 X i |gx,i(x)| \u03b1 + |gy,i(x)| \u03b1 + C(5)", "formula_coordinates": [2.0, 83.52, 194.37, 202.79, 20.25]}, {"formula_id": "formula_5", "formula_text": "(x,k) = arg min x,k \u03bb k \u2297 x \u2212 y 2 + X i |gx,i(x)| \u03b1 + |gy,i(x)| \u03b1 .(6)", "formula_coordinates": [2.0, 50.76, 328.17, 235.55, 29.01]}, {"formula_id": "formula_6", "formula_text": "x \u2032 = s \u2022 x, k \u2032 = 1/s \u2022 k with equal data fitting k \u2297 x \u2212 y 2 = k \u2032 \u2297 x \u2032 \u2212 y 2 .", "formula_coordinates": [2.0, 55.2, 422.13, 231.18, 22.72]}, {"formula_id": "formula_7", "formula_text": "E p \u2113 [\u2212 log p 0 (x \u2113 )] = \u2212 p \u2113 (x) log p 0 (x)dx.", "formula_coordinates": [3.0, 50.16, 443.85, 177.21, 12.36]}, {"formula_id": "formula_8", "formula_text": "p(y|k) = Z p(x, y|k)dx.(7)", "formula_coordinates": [3.0, 380.28, 593.51, 164.74, 14.41]}, {"formula_id": "formula_9", "formula_text": "P (x, k|y) \u221d e \u2212 1 2\u03b7 2 |kx\u2212y| 2 \u2212 x 2 2\u03c3 2 . (8", "formula_coordinates": [4.0, 107.64, 203.0, 175.19, 15.52]}, {"formula_id": "formula_10", "formula_text": ")", "formula_coordinates": [4.0, 282.83, 210.16, 3.48, 8.07]}, {"formula_id": "formula_11", "formula_text": "P (y|k) \u221d Z e \u2212 1 2\u03b7 2 |kx\u2212y| 2 \u2212 x 2 2\u03c3 2 dx. (9", "formula_coordinates": [4.0, 102.0, 269.84, 180.83, 15.52]}, {"formula_id": "formula_12", "formula_text": ")", "formula_coordinates": [4.0, 282.83, 277.0, 3.48, 8.07]}, {"formula_id": "formula_13", "formula_text": "\u2212 1 2\u03b7 2 |kx\u2212y| 2", "formula_coordinates": [4.0, 173.4, 308.48, 47.31, 9.91]}, {"formula_id": "formula_14", "formula_text": "p(k M L ({y 1 , ..., y n }) = k * ) \u2192 1.(10)", "formula_coordinates": [4.0, 364.8, 107.52, 180.23, 11.05]}, {"formula_id": "formula_15", "formula_text": "(x,k) = arg min Z Z p(x, k|y)L(x \u2212 x,k \u2212 k)dxdk. (11)", "formula_coordinates": [4.0, 320.16, 398.39, 224.86, 14.42]}, {"formula_id": "formula_16", "formula_text": "L(x \u2212 x,k \u2212 k) = 1 \u2212 \u03b4 (x,k) \u2212 (x, k)", "formula_coordinates": [4.0, 308.88, 445.33, 236.23, 24.84]}, {"formula_id": "formula_17", "formula_text": "L(x, k) = |x \u2212x| 2 + |k \u2212k| 2 ,", "formula_coordinates": [4.0, 383.4, 531.21, 128.49, 11.32]}, {"formula_id": "formula_18", "formula_text": "X \u223c N (0, diag(\u03c3 2 \u03c9 )) \u03c3 2 \u03c9 = \u03b2( Gx,\u03c9 2 + Gy,\u03c9 2 ) \u22121 . (13)", "formula_coordinates": [5.0, 54.72, 344.16, 231.58, 11.58]}, {"formula_id": "formula_19", "formula_text": "p(X, Y ; K) \u221d e \u2212 1 2\u03b7 2 K\u03c9 X\u03c9 \u2212Y\u03c9 2 \u2212 1 2\u03c3 2 \u03c9 X\u03c9 2 .(14)", "formula_coordinates": [5.0, 80.76, 425.84, 205.55, 14.68]}, {"formula_id": "formula_20", "formula_text": "X M AP \u03c9 = \" |K\u03c9| 2 + \u03b7 2 \u03c3 2 \u03c9 \u00ab \u22121 K T \u03c9 Y\u03c9.(15)", "formula_coordinates": [5.0, 98.64, 478.56, 187.67, 24.42]}, {"formula_id": "formula_21", "formula_text": "Y \u223c N (0, diag(\u03c6 2 \u03c9 )), \u03c6 2 \u03c9 = \u03c3 2 \u03c9 |K\u03c9| 2 + \u03b7 2 . (16", "formula_coordinates": [5.0, 81.24, 550.34, 201.35, 11.07]}, {"formula_id": "formula_22", "formula_text": ")", "formula_coordinates": [5.0, 282.59, 552.52, 3.72, 8.07]}, {"formula_id": "formula_23", "formula_text": "|K\u03c9| 2 = max \" 0, |Y\u03c9| 2 \u2212 \u03b7 2 \u03c3 2 \u03c9 \u00ab .(17)", "formula_coordinates": [5.0, 107.04, 599.66, 179.27, 22.36]}, {"formula_id": "formula_24", "formula_text": "log p(Y |K) = log p(X M AP , Y ; K)\u2212 1 2 X \u03c9 log \" |K\u03c9| 2 \u03b7 2 + 1 \u03c3 2 \u03c9 \u00ab +C(18)", "formula_coordinates": [5.0, 308.88, 65.06, 253.18, 34.0]}, {"formula_id": "formula_25", "formula_text": "= i log p(g x,i (y)|k). Since p(g x,i (y)|k) is a 1D distribu- tions, it can be expressed as a 1D table, or a histogram h k .", "formula_coordinates": [5.0, 308.88, 528.01, 236.36, 33.84]}, {"formula_id": "formula_26", "formula_text": "log p(y|k) = X i log p(gx,i(y)|k) = X j hj log(h k j )(19)", "formula_coordinates": [5.0, 324.24, 604.77, 220.79, 20.13]}, {"formula_id": "formula_27", "formula_text": "DKL(h, h k ) = X j hj log(hj ) \u2212 X j hj log(h k j ).(20)", "formula_coordinates": [6.0, 70.44, 77.85, 215.87, 20.13]}, {"formula_id": "formula_28", "formula_text": "p(x, k|y) \u2248 q(x, k) = Y i q(gi,x(x))q(gi,y(x)) Y j q(kj ). (21", "formula_coordinates": [6.0, 55.32, 212.15, 227.27, 20.23]}, {"formula_id": "formula_29", "formula_text": ")", "formula_coordinates": [6.0, 282.59, 214.6, 3.72, 8.07]}, {"formula_id": "formula_30", "formula_text": "log p(y|k) \u2248 log p(x M AP , y; k) \u2212 1 2 log |A| + C (22) A = \u2202 2 \u2202xi\u2202xj log p(x, y; k)| x=x M AP .(23)", "formula_coordinates": [6.0, 69.96, 301.36, 216.35, 46.1]}, {"formula_id": "formula_31", "formula_text": "(Y\u03c9|X\u03c9; K\u03c9) \u223c N (K\u03c9X\u03c9, \u03b7 2 ) (24", "formula_coordinates": [8.0, 368.04, 375.5, 173.27, 10.54]}, {"formula_id": "formula_32", "formula_text": ")", "formula_coordinates": [8.0, 541.31, 377.68, 3.72, 8.07]}, {"formula_id": "formula_33", "formula_text": ")| 2 + |g y,i (x)| 2 = \u03c9 |G x,\u03c9 X \u03c9 | 2 + |G y,\u03c9 X \u03c9 | 2 .", "formula_coordinates": [8.0, 319.32, 462.93, 225.79, 24.6]}, {"formula_id": "formula_34", "formula_text": "X \u223c N (0, diag(\u03c3 2 \u03c9 )) \u03c3 2 \u03c9 = \u03b2( Gx,\u03c9 2 + Gy,\u03c9 2 ) \u22121 . (25", "formula_coordinates": [8.0, 313.44, 508.44, 227.87, 11.58]}, {"formula_id": "formula_35", "formula_text": ")", "formula_coordinates": [8.0, 541.31, 511.12, 3.72, 8.07]}, {"formula_id": "formula_36", "formula_text": "X M AP = arg max p(X, Y ; K) = arg max p(Y |X; K)p(X).(26)", "formula_coordinates": [8.0, 313.32, 641.97, 231.71, 20.97]}, {"formula_id": "formula_37", "formula_text": "X MAP \u03c9 = arg min 1 \u03b7 2 K \u03c9 X \u03c9 \u2212 Y \u03c9 2 + 1 \u03c3 2 \u03c9 X \u03c9 2(27)", "formula_coordinates": [9.0, 55.92, 301.45, 230.6, 25.04]}, {"formula_id": "formula_38", "formula_text": "X MAP \u03c9 = |K \u03c9 | 2 + \u03b7 2 \u03c3 2 \u03c9 \u22121 K T \u03c9 Y \u03c9 .(28)", "formula_coordinates": [9.0, 55.92, 328.17, 230.6, 28.44]}, {"formula_id": "formula_39", "formula_text": "Y \u223c N (0, diag(\u03c6 2 \u03c9 )), \u03c6 2 \u03c9 = \u03c3 2 \u03c9 |K\u03c9| 2 + \u03b7 2 .(29)", "formula_coordinates": [9.0, 81.24, 488.18, 205.07, 11.08]}, {"formula_id": "formula_40", "formula_text": "|K\u03c9| 2 = max(0, |Y\u03c9| 2 \u2212 \u03b7 2 \u03c3 2 \u03c9 ).(30)", "formula_coordinates": [9.0, 111.72, 558.51, 174.59, 22.47]}, {"formula_id": "formula_41", "formula_text": "< X \u03c9 > = |K \u03c9 | 2 + \u03b7 2 \u03c3 2 \u03c9 \u22121 K T \u03c9 Y \u03c9 (31) < X T \u03c9 X \u03c9 > = |K \u03c9 | 2 + \u03b7 2 \u03c3 2 \u03c9 + < X \u03c9 > T < X \u03c9 > (32)", "formula_coordinates": [10.0, 311.28, 248.49, 233.96, 56.64]}, {"formula_id": "formula_42", "formula_text": "\u03bb x \u2212 y 2 + X i wi|gx,i(x)| \u03b1 + wi|gy,i(x)| \u03b1 .(34)", "formula_coordinates": [11.0, 81.72, 149.61, 204.59, 20.13]}], "doi": ""}