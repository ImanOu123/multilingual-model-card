{"title": "Algorithms for Non-negative Matrix Factorization", "authors": "Daniel D Lee; H Sebastian Seung", "pub_date": "", "abstract": "Non-negative matrix factorization (NMF) has previously been shown to be a useful decomposition for multivariate data. Two different multiplicative algorithms for NMF are analyzed. They differ only slightly in the multiplicative factor used in the update rules. One algorithm can be shown to minimize the conventional least squares error while the other minimizes the generalized Kullback-Leibler divergence. The monotonic convergence of both algorithms can be proven using an auxiliary function analogous to that used for proving convergence of the Expectation-Maximization algorithm. The algorithms can also be interpreted as diagonally rescaled gradient descent, where the rescaling factor is optimally chosen to ensure convergence.", "sections": [{"heading": "Introduction", "text": "Unsupervised learning algorithms such as principal components analysis and vector quantization can be understood as factorizing a data matrix subject to different constraints. Depending upon the constraints utilized, the resulting factors can be shown to have very different representational properties. Principal components analysis enforces only a weak orthogonality constraint, resulting in a very distributed representation that uses cancellations to generate variability [1,2]. On the other hand, vector quantization uses a hard winnertake-all constraint that results in clustering the data into mutually exclusive prototypes [3].\nWe have previously shown that nonnegativity is a useful constraint for matrix factorization that can learn a parts representation of the data [4,5]. The nonnegative basis vectors that are learned are used in distributed, yet still sparse combinations to generate expressiveness in the reconstructions [6,7]. In this submission, we analyze in detail two numerical algorithms for learning the optimal nonnegative factors from data.", "publication_ref": ["b0", "b1", "b2", "b3", "b4", "b5", "b6"], "figure_ref": [], "table_ref": []}, {"heading": "Non-negative matrix factorization", "text": "We formally consider algorithms for solving the following problem: Non-negative matrix factorization (NMF) Given a non-negative matrix V, find non-negative matrix factors Wand H such that:\nV~WH (1)\ncolumns of an n x m matrix V where m is the number of examples in the data set. This matrix is then approximately factorized into an n x r matrix Wand an r x m matrix H. Usually r is chosen to be smaller than nor m , so that Wand H are smaller than the original matrix V. This results in a compressed version of the original data matrix.\nWhat is the significance of the approximation in Eq. (1)? It can be rewritten column by column as v ~ Wh, where v and h are the corresponding columns of V and H. In other words, each data vector v is approximated by a linear combination of the columns of W, weighted by the components of h. Therefore W can be regarded as containing a basis that is optimized for the linear approximation of the data in V. Since relatively few basis vectors are used to represent many data vectors, good approximation can only be achieved if the basis vectors discover structure that is latent in the data.\nThe present submission is not about applications of NMF, but focuses instead on the technical aspects of finding non-negative matrix factorizations. Of course, other types of matrix factorizations have been extensively studied in numerical linear algebra, but the nonnegativity constraint makes much of this previous work inapplicable to the present case [8].\nHere we discuss two algorithms for NMF based on iterative updates of Wand H. Because these algorithms are easy to implement and their convergence properties are guaranteed, we have found them very useful in practical applications. Other algorithms may possibly be more efficient in overall computation time, but are more difficult to implement and may not generalize to different cost functions. Algorithms similar to ours where only one of the factors is adapted have previously been used for the deconvolution of emission tomography and astronomical images [9,10,11,12].\nAt each iteration of our algorithms, the new value of W or H is found by multiplying the current value by some factor that depends on the quality ofthe approximation in Eq. (1). We prove that the quality of the approximation improves monotonically with the application of these multiplicative update rules. In practice, this means that repeated iteration of the update rules is guaranteed to converge to a locally optimal matrix factorization.", "publication_ref": ["b7", "b8", "b9", "b10", "b11"], "figure_ref": [], "table_ref": []}, {"heading": "Cost functions", "text": "To find an approximate factorization V ~ W H, we first need to define cost functions that quantify the quality of the approximation. Such a cost function can be constructed using some measure of distance between two non-negative matrices A and B . One useful measure is simply the square of the Euclidean distance between A and B [13],\nIIA -BI12 = L(Aij -Bij)2 ij", "publication_ref": ["b12"], "figure_ref": [], "table_ref": []}, {"heading": "This is lower bounded by zero, and clearly vanishes if and only if", "text": "A = B . Another useful measure is ( k\u2022 ) D(AIIB) = 2: Aij log B:~ -Aij + Bij \"J (2)(3)\nLike the Euclidean distance this is also lower bounded by zero, and vanishes if and only if A = B . But it cannot be called a \"distance\", because it is not symmetric in A and B, so we will refer to it as the \"divergence\" of A from B. Although the functions IIV -W HI12 and D(VIIW H) are convex in W only or H only, they are not convex in both variables together. Therefore it is unrealistic to expect an algorithm to solve Problems 1 and 2 in the sense of finding global minima. However, there are many techniques from numerical optimization that can be applied to find local minima.\nGradient descent is perhaps the simplest technique to implement, but convergence can be slow. Other methods such as conjugate gradient have faster convergence, at least in the vicinity of local minima, but are more complicated to implement than gradient descent [8] . The convergence of gradient based methods also have the disadvantage of being very sensitive to the choice of step size, which can be very inconvenient for large applications.", "publication_ref": ["b7"], "figure_ref": [], "table_ref": []}, {"heading": "Multiplicative update rules", "text": "We have found that the following \"multiplicative update rules\" are a good compromise between speed and ease of implementation for solving Problems 1 and 2. The divergence is invariant under these updates if and only ifW and H are at a stationary point of the divergence.\nProofs of these theorems are given in a later section. For now, we note that each update consists of multiplication by a factor. In particular, it is straightforward to see that this multiplicative factor is unity when V = W H, so that perfect reconstruction is necessarily a fixed point of the update rules.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Multiplicative versus additive update rules", "text": "It is useful to contrast these multiplicative updates with those arising from gradient descent [14]. In particular, a simple additive update for H that reduces the squared distance can be written as (6) If 'flatt are all set equal to some small positive number, this is equivalent to conventional gradient descent. As long as this number is sufficiently small, the update should reduce", "publication_ref": ["b13", "b5"], "figure_ref": [], "table_ref": []}, {"heading": "IIV -WHII\u2022", "text": "", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Now if we diagonally rescale the variables and set", "text": "Halt \"Ialt = (WTW H)alt ' (7) then we obtain the update rule for H that is given in Theorem 1. Note that this rescaling results in a multiplicative factor with the positive component of the gradient in the denominator and the absolute value of the negative component in the numerator of the factor.\nFor the divergence, diagonally rescaled gradient descent takes the form  (9) then we obtain the update rule for H that is given in Theorem 2. This rescaling can also be interpretated as a multiplicative rule with the positive component of the gradient in the denominator and negative component as the numerator of the multiplicative factor.\nSince our choices for \"Ialt are not small, it may seem that there is no guarantee that such a rescaled gradient descent should cause the cost function to decrease. Surprisingly, this is indeed the case as shown in the next section.", "publication_ref": ["b6", "b8"], "figure_ref": [], "table_ref": []}, {"heading": "Proofs of convergence", "text": "To prove Theorems 1 and 2, we will make use of an auxiliary function similar to that used in the Expectation-Maximization algorithm [15,16].", "publication_ref": ["b14", "b15"], "figure_ref": [], "table_ref": []}, {"heading": "Definition 1 G(h, h') is an auxiliary functionfor F(h) if the conditions", "text": "G(h, h') ~ F(h), G(h, h) = F(h) (10) are satisfied.\nThe auxiliary function is a useful concept because of the following lemma, which is also graphically illustrated in Fig. 1.", "publication_ref": [], "figure_ref": ["fig_0"], "table_ref": []}, {"heading": "Lemma 1 IfG is an auxiliary junction, then F is nonincreasing under the update", "text": "ht+1 = argmlnG (h,h t ) (11) Proof: F(ht+1) ~ G(ht+1, ht) ~ G(ht, ht) = F(ht) \u2022 Note that F(ht+1) = F(ht) only if ht is a local minimum of G(h, ht).\nIf the derivatives of F exist and are continuous in a small neighborhood of h t , this also implies that the derivatives 'V F(ht) = O. Thus, by iterating the update in Eq. (11) we obtain a sequence of estimates that converge to a local minimum hmin = argminh F(h) of the objective function:\nWe will show that by defining the appropriate auxiliary functions G(h, ht) for both IIV -W HII and D(V, W H), the update rules in Theorems 1 and 2 easily follow from Eq. (11). \nF(ht) for h n + 1 = argminh G(h, ht).", "publication_ref": ["b10"], "figure_ref": [], "table_ref": []}, {"heading": "Lemma 2 If K(ht) is the diagonal matrix", "text": "Kab(ht) = <5ab(WTwht)a/h~ (13) then G(h, ht) = F(ht) + (h -ht)T\\l F(ht) + ~(h -ht)T K(ht)(h -ht) (14)\nis an auxiliary function for (15) Proof: Since G(h, h) = F(h) is obvious, we need only show that G(h, ht) 2:: F(h). To do this, we compare (18)\nF(h) = ~ ~)Vi -L W ia h a)2 i a\nF(h) = F(ht) + (h -htf\\l F(ht) + ~(h -ht)T(WTW)(h -ht) (16)\nwhich is just a rescaling of the components of K -WTW. Then K -WTW is positive semidefinite if and only if M is, and 'One can also show that K -WTW is positive semidefinite by considering the matrix K (I-\nV T M v = L\n1 T 1) 1 . / (T ) 1 T K-2 W W K-2 K 2.\nThen v M W W ht a is a positive eigenvector of K-2 W W Kwith unity eigenvalue, and application of the Frobenius-Perron theorem shows that Eq. 17 holds.", "publication_ref": ["b14"], "figure_ref": [], "table_ref": []}, {"heading": "\u2022", "text": "We can now demonstrate the convergence of Theorem 1:\nProof of Theorem 1 Replacing G(h, ht) in Eq. (11) by Eq. ( 14) results in the update rule: ht+1 = ht -K(ht)-l\\1F(ht)\n(24)\nSince Eq. ( 14) is an auxiliary function, F is nonincreasing under this update rule, according to Lemma 1. Writing the components of this equation explicitly, we obtain ht+1 = ht (WT V )a a a (WTWht)a .\n(25)\nBy reversing the roles of Wand H in Lemma 1 and 2, F can similarly be shown to be nonincreasing under the update rules for W .\u2022\nWe now consider the following auxiliary function for the divergence cost function:\nLemma 3 Define G(h,ht) ia \" Wiah~ ( Wiah~ ) -~ Vi,\"\", W -ht logWiaha -log,\"\", W -ht ia ub ,b b ub ,b b\nThis is an auxiliary function for\nF(h) = L Vi log (~ ~_ h ) -Vi + LWiaha i a 'l,a a a (26) (27)(28)\nProof: It is straightforward to verify that G(h, h) = F(h) . To show that G(h, ht) 2: F(h), \nProof of Theorem 2: The minimum of G(h, ht) with respect to h is determined by setting the gradient to zero: --,(,---,h,_h--,-t \n_ dG-\nThus, the update rule of Eq. (11) takes the form t+1 h~\"\nVi ha = ' \"' \" w ~ ' \"' \" W-ht W ia \u2022 ub kb i ub ,b b\n(33)\nSince G is an auxiliary function, F in Eq. (28) is nonincreasing under this update. Rewritten in matrix form, this is equivalent to the update rule in Eq. (5). By reversing the roles of Hand W, the update rule for W can similarly be shown to be nonincreasing .\u2022", "publication_ref": ["b4"], "figure_ref": [], "table_ref": []}, {"heading": "", "text": "We have shown that application of the update rules in Eqs. (4) and ( 5) are guaranteed to find at least locally optimal solutions of Problems 1 and 2, respectively. The convergence proofs rely upon defining an appropriate auxiliary function . We are currently working to generalize these theorems to more complex constraints. The update rules themselves are extremely easy to implement computationally, and will hopefully be utilized by others for a wide variety of applications.\nWe acknowledge the support of Bell Laboratories. We would also like to thank Carlos Brody, Ken Clarkson, Corinna Cortes, Roland Freund, Linda Kaufman, Yann Le Cun, Sam Rowei s, Larry Saul, and Margaret Wright for helpful discussions.", "publication_ref": [], "figure_ref": [], "table_ref": []}], "references": [{"ref_id": "b0", "title": "Principal Component Analysis", "journal": "Springer-Verlag", "year": "1986", "authors": "I T Jolliffe"}, {"ref_id": "b1", "title": "Eigenfaces for recognition", "journal": "J. Cogn. Neurosci", "year": "1991", "authors": "M & Turk; A Pentland"}, {"ref_id": "b2", "title": "Vector Quantization and Signal Compression", "journal": "Kluwer Acad. Press", "year": "1992", "authors": "A & Gersho;  Gray"}, {"ref_id": "b3", "title": "Unsupervised learning by convex and conic coding", "journal": "", "year": "1997", "authors": " Lee; H S Seung"}, {"ref_id": "b4", "title": "Learning the parts of objects by non-negative matrix factorization", "journal": "Nature", "year": "1999", "authors": " Lee;  Seung;  Hs"}, {"ref_id": "b5", "title": "What is the goal of sensory coding?", "journal": "Neural Comput", "year": "1994", "authors": "D J Field"}, {"ref_id": "b6", "title": "Sparse coding in the primate cortex. The Handbook of Brain Theory and Neural Networks", "journal": "MIT Press", "year": "1995", "authors": "P & Foldiak; M Young"}, {"ref_id": "b7", "title": "Numerical recipes: the art of scientific computing", "journal": "Cambridge University Press", "year": "1993", "authors": "W H Press;  Teukolsky;  Sa;  Vetterling;  Flannery;  Bp"}, {"ref_id": "b8", "title": "Maximum likelihood reconstruction for emission tomography", "journal": "IEEE Trans . MI", "year": "1982", "authors": "La & Shepp; Y Vardi"}, {"ref_id": "b9", "title": "Bayesian-based iterative method of image restoration. 1", "journal": "Opt. Soc. Am", "year": "1972", "authors": "W H Richardson"}, {"ref_id": "b10", "title": "An iterative technique for the rectification of observed distributions", "journal": "Astron. J", "year": "1974", "authors": "L B Lucy"}, {"ref_id": "b11", "title": "A unified approach to statistical tomography using coordinate descent optimization", "journal": "IEEE Trans. Image Proc", "year": "1996", "authors": "Ca & Bouman; K Sauer"}, {"ref_id": "b12", "title": "Least squares formulation of robust non-negative factor analysis", "journal": "Chemometr. Intell. Lab", "year": "1997", "authors": "P & Paatero; U Tapper"}, {"ref_id": "b13", "title": "Additive versus exponentiated gradient updates for linear prediction", "journal": "Journal of Tnformation and Computation", "year": "1997", "authors": "J & Kivinen; M Warmuth"}, {"ref_id": "b14", "title": "Maximum likelihood from incomplete data via the EM algorithm", "journal": "J. Royal Stat. Soc", "year": "1977", "authors": "A P Dempster;  Laird;  Rubin;  Db"}, {"ref_id": "b15", "title": "Aggregate and mixed-order Markov models for statistical language processing", "journal": "ACL Press", "year": "1997", "authors": "L & Saul; F Pereira"}], "figures": [{"figure_label": "1", "figure_type": "figure", "figure_id": "fig_0", "figure_caption": "Figure 1 :1Figure 1: Minimizing the auxiliary function G(h, ht) 2:: F(h) guarantees that F(ht+1) :::;", "figure_data": ""}, {"figure_label": "2", "figure_type": "figure", "figure_id": "fig_1", "figure_caption": "2 with2Eq.(14) to find that G(h, ht) 2:: F(h) is equivalent to 0:::; (h -htf[K(ht) -WTW](h -ht) (17)To prove positive semidefiniteness, consider the matrix 1:", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_2", "figure_caption": "we use convexity of the log function to derive the inequality \" \" W i a h a -log ~ Wiaha ::; -~ Q a log --~ Wiaha ::; -~ '\"'\" Wht log Wiahalog,\"\", Wht a a ub ,b b ub ,b bFrom this inequality it follows that F(h) ::; G(h, ht) .\u2022 Theorem 2 then follows from the application of Lemma 1:", "figure_data": ""}, {"figure_label": "", "figure_type": "table", "figure_id": "tab_0", "figure_caption": "It reduces to the Kullback-Leibler divergence, or relative entropy, when 2:ij Aij = 2:ij Bij = 1, so that A and B can be regarded as normalized probability distributions. Minimize IIV -W HI12 with respect to Wand H, subject to the constraints W,H~O. Problem 2 Minimize D(VIIW H) with re. lpect to Wand H, subject to the constraints", "figure_data": "Problem 1"}, {"figure_label": "", "figure_type": "table", "figure_id": "tab_2", "figure_caption": "Halt f-Halt + \"Ialt [~Wia (:;;)ilt -~ Wia]. Again, if the \"Ialt are small and positive, this update should reduce D (V II W H).", "figure_data": "(8)If we nowsetHalt \"Ialt= ~ W. ' ui za"}], "formulas": [{"formula_id": "formula_0", "formula_text": "V~WH (1)", "formula_coordinates": [1.0, 285.61, 659.28, 164.49, 8.56]}, {"formula_id": "formula_1", "formula_text": "IIA -BI12 = L(Aij -Bij)2 ij", "formula_coordinates": [2.0, 244.76, 518.24, 122.45, 23.24]}, {"formula_id": "formula_2", "formula_text": "A = B . Another useful measure is ( k\u2022 ) D(AIIB) = 2: Aij log B:~ -Aij + Bij \"J (2)(3)", "formula_coordinates": [2.0, 126.22, 521.61, 359.6, 87.31]}, {"formula_id": "formula_3", "formula_text": "G(h, h') ~ F(h), G(h, h) = F(h) (10) are satisfied.", "formula_coordinates": [4.0, 126.18, 420.56, 359.92, 28.89]}, {"formula_id": "formula_4", "formula_text": "ht+1 = argmlnG (h,h t ) (11) Proof: F(ht+1) ~ G(ht+1, ht) ~ G(ht, ht) = F(ht) \u2022 Note that F(ht+1) = F(ht) only if ht is a local minimum of G(h, ht).", "formula_coordinates": [4.0, 126.17, 510.28, 359.89, 55.76]}, {"formula_id": "formula_5", "formula_text": "F(ht) for h n + 1 = argminh G(h, ht).", "formula_coordinates": [5.0, 126.56, 205.52, 151.24, 13.5]}, {"formula_id": "formula_6", "formula_text": "Kab(ht) = <5ab(WTwht)a/h~ (13) then G(h, ht) = F(ht) + (h -ht)T\\l F(ht) + ~(h -ht)T K(ht)(h -ht) (14)", "formula_coordinates": [5.0, 126.37, 254.64, 359.69, 41.7]}, {"formula_id": "formula_7", "formula_text": "F(h) = ~ ~)Vi -L W ia h a)2 i a", "formula_coordinates": [5.0, 239.36, 318.24, 133.07, 27.11]}, {"formula_id": "formula_8", "formula_text": "F(h) = F(ht) + (h -htf\\l F(ht) + ~(h -ht)T(WTW)(h -ht) (16)", "formula_coordinates": [5.0, 168.08, 382.56, 317.71, 16.5]}, {"formula_id": "formula_9", "formula_text": "V T M v = L", "formula_coordinates": [5.0, 185.41, 502.4, 61.65, 13.5]}, {"formula_id": "formula_10", "formula_text": "1 T 1) 1 . / (T ) 1 T K-2 W W K-2 K 2.", "formula_coordinates": [5.0, 126.58, 646.76, 310.59, 11.15]}, {"formula_id": "formula_11", "formula_text": "(24)", "formula_coordinates": [6.0, 469.7, 123.83, 16.09, 8.05]}, {"formula_id": "formula_12", "formula_text": "Lemma 3 Define G(h,ht) ia \" Wiah~ ( Wiah~ ) -~ Vi,\"\", W -ht logWiaha -log,\"\", W -ht ia ub ,b b ub ,b b", "formula_coordinates": [6.0, 126.19, 239.13, 312.41, 66.05]}, {"formula_id": "formula_13", "formula_text": "F(h) = L Vi log (~ ~_ h ) -Vi + LWiaha i a 'l,a a a (26) (27)(28)", "formula_coordinates": [6.0, 200.0, 256.17, 286.07, 93.43]}, {"formula_id": "formula_15", "formula_text": "_ dG-", "formula_coordinates": [6.0, 200.91, 563.75, 5.87, 9.27]}, {"formula_id": "formula_17", "formula_text": "(33)", "formula_coordinates": [6.0, 469.81, 614.25, 16.25, 8.1]}], "doi": ""}