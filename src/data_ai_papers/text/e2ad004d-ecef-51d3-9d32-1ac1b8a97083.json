{"title": "", "authors": "Joseph Redmon; Ali Farhadi", "pub_date": "2016-12-25", "abstract": "We introduce YOLO9000, a state-of-the-art, real-time object detection system that can detect over 9000 object categories. First we propose various improvements to the YOLO detection method, both novel and drawn from prior work. The improved model, YOLOv2, is state-of-the-art on standard detection tasks like PASCAL VOC and COCO. Using a novel, multi-scale training method the same YOLOv2 model can run at varying sizes, offering an easy tradeoff between speed and accuracy. At 67 FPS, YOLOv2 gets 76.8 mAP on VOC 2007. At 40 FPS, YOLOv2 gets 78.6 mAP, outperforming state-of-the-art methods like Faster R-CNN with ResNet and SSD while still running significantly faster. Finally we propose a method to jointly train on object detection and classification. Using this method we train YOLO9000 simultaneously on the COCO detection dataset and the ImageNet classification dataset. Our joint training allows YOLO9000 to predict detections for object classes that don't have labelled detection data. We validate our approach on the ImageNet detection task. YOLO9000 gets 19.7 mAP on the ImageNet detection validation set despite only having detection data for 44 of the 200 classes. On the 156 classes not in COCO, YOLO9000 gets 16.0 mAP. But YOLO can detect more than just 200 classes; it predicts detections for more than 9000 different object categories. And it still runs in real-time.", "sections": [{"heading": "Introduction", "text": "General purpose object detection should be fast, accurate, and able to recognize a wide variety of objects. Since the introduction of neural networks, detection frameworks have become increasingly fast and accurate. However, most detection methods are still constrained to a small set of objects.\nCurrent object detection datasets are limited compared to datasets for other tasks like classification and tagging. The most common detection datasets contain thousands to hundreds of thousands of images with dozens to hundreds of tags [3] [10] [2]. Classification datasets have millions of images with tens or hundreds of thousands of categories [20] [2].\nWe would like detection to scale to level of object classification. However, labelling images for detection is far more expensive than labelling for classification or tagging (tags are often user-supplied for free). Thus we are unlikely to see detection datasets on the same scale as classification datasets in the near future.\nWe propose a new method to harness the large amount of classification data we already have and use it to expand the scope of current detection systems. Our method uses a hierarchical view of object classification that allows us to combine distinct datasets together.\nWe also propose a joint training algorithm that allows us to train object detectors on both detection and classification data. Our method leverages labeled detection images to learn to precisely localize objects while it uses classification images to increase its vocabulary and robustness.\nUsing this method we train YOLO9000, a real-time object detector that can detect over 9000 different object categories. First we improve upon the base YOLO detection system to produce YOLOv2, a state-of-the-art, real-time detector. Then we use our dataset combination method and joint training algorithm to train a model on more than 9000 classes from ImageNet as well as detection data from COCO.\nAll of our code and pre-trained models are available online at http://pjreddie.com/yolo9000/.", "publication_ref": ["b2", "b1", "b19", "b1"], "figure_ref": [], "table_ref": []}, {"heading": "Better", "text": "YOLO suffers from a variety of shortcomings relative to state-of-the-art detection systems. Error analysis of YOLO compared to Fast R-CNN shows that YOLO makes a significant number of localization errors. Furthermore, YOLO has relatively low recall compared to region proposal-based methods. Thus we focus mainly on improving recall and localization while maintaining classification accuracy.\nComputer vision generally trends towards larger, deeper networks [6] [18] [17]. Better performance often hinges on training larger networks or ensembling multiple models together. However, with YOLOv2 we want a more accurate detector that is still fast. Instead of scaling up our network, we simplify the network and then make the representation easier to learn. We pool a variety of ideas from past work with our own novel concepts to improve YOLO's performance. A summary of results can be found in Table 2.\nBatch Normalization. Batch normalization leads to significant improvements in convergence while eliminating the need for other forms of regularization [7]. By adding batch normalization on all of the convolutional layers in YOLO we get more than 2% improvement in mAP. Batch normalization also helps regularize the model. With batch normalization we can remove dropout from the model without overfitting.\nHigh Resolution Classifier. All state-of-the-art detection methods use classifier pre-trained on ImageNet [16]. Starting with AlexNet most classifiers operate on input images smaller than 256 \u00d7 256 [8]. The original YOLO trains the classifier network at 224 \u00d7 224 and increases the resolution to 448 for detection. This means the network has to simultaneously switch to learning object detection and adjust to the new input resolution.\nFor YOLOv2 we first fine tune the classification network at the full 448 \u00d7 448 resolution for 10 epochs on ImageNet. This gives the network time to adjust its filters to work better on higher resolution input. We then fine tune the resulting network on detection. This high resolution classification network gives us an increase of almost 4% mAP.\nConvolutional With Anchor Boxes. YOLO predicts the coordinates of bounding boxes directly using fully connected layers on top of the convolutional feature extractor. Instead of predicting coordinates directly Faster R-CNN predicts bounding boxes using hand-picked priors [15]. Using only convolutional layers the region proposal network (RPN) in Faster R-CNN predicts offsets and confidences for anchor boxes. Since the prediction layer is convolutional, the RPN predicts these offsets at every location in a feature map. Predicting offsets instead of coordinates simplifies the problem and makes it easier for the network to learn.\nWe remove the fully connected layers from YOLO and use anchor boxes to predict bounding boxes. First we eliminate one pooling layer to make the output of the network's convolutional layers higher resolution. We also shrink the network to operate on 416 input images instead of 448\u00d7448. We do this because we want an odd number of locations in our feature map so there is a single center cell. Objects, especially large objects, tend to occupy the center of the image so it's good to have a single location right at the center to predict these objects instead of four locations that are all nearby. YOLO's convolutional layers downsample the image by a factor of 32 so by using an input image of 416 we get an output feature map of 13 \u00d7 13.\nWhen we move to anchor boxes we also decouple the class prediction mechanism from the spatial location and instead predict class and objectness for every anchor box. Following YOLO, the objectness prediction still predicts the IOU of the ground truth and the proposed box and the class predictions predict the conditional probability of that class given that there is an object.\nUsing anchor boxes we get a small decrease in accuracy. YOLO only predicts 98 boxes per image but with anchor boxes our model predicts more than a thousand. Without anchor boxes our intermediate model gets 69.5 mAP with a recall of 81%. With anchor boxes our model gets 69.2 mAP with a recall of 88%. Even though the mAP decreases, the increase in recall means that our model has more room to improve.\nDimension Clusters. We encounter two issues with anchor boxes when using them with YOLO. The first is that the box dimensions are hand picked. The network can learn to adjust the boxes appropriately but if we pick better priors for the network to start with we can make it easier for the network to learn to predict good detections.\nInstead of choosing priors by hand, we run k-means clustering on the training set bounding boxes to automat- \nd(box, centroid) = 1 \u2212 IOU(box, centroid)\nWe run k-means for various values of k and plot the average IOU with closest centroid, see Figure 2. We choose k = 5 as a good tradeoff between model complexity and high recall. The cluster centroids are significantly different than hand-picked anchor boxes. There are fewer short, wide boxes and more tall, thin boxes.\nWe compare the average IOU to closest prior of our clustering strategy and the hand-picked anchor boxes in Table 1. At only 5 priors the centroids perform similarly to 9 anchor boxes with an average IOU of 61.0 compared to 60.9. If we use 9 centroids we see a much higher average IOU. This indicates that using k-means to generate our bounding box starts the model off with a better representation and makes the task easier to learn. The average IOU of objects on VOC 2007 to their closest, unmodified prior using different generation methods. Clustering gives much better results than using hand-picked priors.\nDirect location prediction. When using anchor boxes with YOLO we encounter a second issue: model instability, especially during early iterations. Most of the instability comes from predicting the (x, y) locations for the box. In region proposal networks the network predicts values t x and t y and the (x, y) center coordinates are calculated as:\nx = (t x * w a ) \u2212 x a y = (t y * h a ) \u2212 y a\nFor example, a prediction of t x = 1 would shift the box to the right by the width of the anchor box, a prediction of t x = \u22121 would shift it to the left by the same amount.\nThis formulation is unconstrained so any anchor box can end up at any point in the image, regardless of what location predicted the box. With random initialization the model takes a long time to stabilize to predicting sensible offsets.\nInstead of predicting offsets we follow the approach of YOLO and predict location coordinates relative to the location of the grid cell. This bounds the ground truth to fall between 0 and 1. We use a logistic activation to constrain the network's predictions to fall in this range.\nThe network predicts 5 bounding boxes at each cell in the output feature map. The network predicts 5 coordinates for each bounding box, t x , t y , t w , t h , and t o . If the cell is offset from the top left corner of the image by (c x , c y ) and the bounding box prior has width and height p w , p h , then the predictions correspond to:\nb x = \u03c3(t x ) + c x b y = \u03c3(t y ) + c y b w = p w e tw b h = p h e t h P r(object) * IOU (b, object) = \u03c3(t o )\nSince we constrain the location prediction the parametrization is easier to learn, making the network more stable. Using dimension clusters along with directly predicting the bounding box center location improves YOLO by almost 5% over the version with anchor boxes.\nFine-Grained Features.This modified YOLO predicts detections on a 13 \u00d7 13 feature map. While this is sufficient for large objects, it may benefit from finer grained features for localizing smaller objects. Faster R-CNN and SSD both run their proposal networks at various feature maps in the network to get a range of resolutions. We take a different approach, simply adding a passthrough layer that brings features from an earlier layer at 26 \u00d7 26 resolution.\nThe passthrough layer concatenates the higher resolution features with the low resolution features by stacking adjacent features into different channels instead of spatial locations, similar to the identity mappings in ResNet. This prediction. We predict the width and height of the box as offsets from cluster centroids. We predict the center coordinates of the box relative to the location of filter application using a sigmoid function.\nturns the 26 \u00d7 26 \u00d7 512 feature map into a 13 \u00d7 13 \u00d7 2048 feature map, which can be concatenated with the original features. Our detector runs on top of this expanded feature map so that it has access to fine grained features. This gives a modest 1% performance increase.\nMulti-Scale Training. The original YOLO uses an input resolution of 448 \u00d7 448. With the addition of anchor boxes we changed the resolution to 416\u00d7416. However, since our model only uses convolutional and pooling layers it can be resized on the fly. We want YOLOv2 to be robust to running on images of different sizes so we train this into the model.\nInstead of fixing the input image size we change the network every few iterations. Every 10 batches our network randomly chooses a new image dimension size. Since our model downsamples by a factor of 32, we pull from the following multiples of 32: {320, 352, ..., 608}. Thus the smallest option is 320 \u00d7 320 and the largest is 608 \u00d7 608. We resize the network to that dimension and continue training.\nThis regime forces the network to learn to predict well across a variety of input dimensions. This means the same network can predict detections at different resolutions. The network runs faster at smaller sizes so YOLOv2 offers an easy tradeoff between speed and accuracy.\nAt  with other frameworks on VOC 2007. Figure 4 Further Experiments. We train YOLOv2 for detection on VOC 2012. Table 4 shows the comparative performance of YOLOv2 versus other state-of-the-art detection systems. YOLOv2 achieves 73.4 mAP while running far faster than competing methods. We also train on COCO and compare to other methods in Table 5. On the VOC metric (IOU = .5) YOLOv2 gets 44.0 mAP, comparable to SSD and Faster R-CNN.", "publication_ref": ["b5", "b16", "b6", "b15", "b7", "b14"], "figure_ref": ["fig_2"], "table_ref": ["tab_4", "tab_1", "tab_5", "tab_6"]}, {"heading": "Detection Frameworks", "text": "Train mAP FPS Fast R-CNN [ YOLOv2 is faster and more accurate than prior detection methods. It can also run at different resolutions for an easy tradeoff between speed and accuracy. Each YOLOv2 entry is actually the same trained model with the same weights, just evaluated at a different size. All timing information is on a Geforce GTX Titan X (original, not Pascal model).", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Faster", "text": "We want detection to be accurate but we also want it to be fast. Most   Darknet-19. We propose a new classification model to be used as the base of YOLOv2. Our model builds off of prior work on network design as well as common knowledge in the field. Similar to the VGG models we use mostly 3 \u00d7 3 filters and double the number of channels after every pooling step [17]. Following the work on Network in Network (NIN) we use global average pooling to make predictions as well as 1 \u00d7 1 filters to compress the feature representation between 3 \u00d7 3 convolutions [9]. We use batch normalization to stabilize training, speed up convergence, and regularize the model [7].\nOur final model, called Darknet-19, has 19 convolutional layers and 5 maxpooling layers. For a full description see Table 6. Darknet-19 only requires 5.58 billion operations to process an image yet achieves 72.9% top-1 accuracy and 91.2% top-5 accuracy on ImageNet.\nTraining for classification. We train the network on the standard ImageNet 1000 class classification dataset for 160 epochs using stochastic gradient descent with a starting learning rate of 0.1, polynomial rate decay with a power of 4, weight decay of 0.0005 and momentum of 0.9 using the Darknet neural network framework [13]. During training we use standard data augmentation tricks including random crops, rotations, and hue, saturation, and exposure shifts.\nAs discussed above, after our initial training on images at 224 \u00d7 224 we fine tune our network at a larger size, 448. For this fine tuning we train with the above parameters but for only 10 epochs and starting at a learning rate of 10 \u22123 . At this higher resolution our network achieves a top-1 accuracy of 76.5% and a top-5 accuracy of 93.3%.\nTraining for detection. We modify this network for detection by removing the last convolutional layer and instead adding on three 3 \u00d7 3 convolutional layers with 1024 filters each followed by a final 1 \u00d7 1 convolutional layer with the number of outputs we need for detection. For VOC we predict 5 boxes with 5 coordinates each and 20 classes per box so 125 filters. We also add a passthrough layer from the final 3 \u00d7 3 \u00d7 512 layer to the second to last convolutional layer so that our model can use fine grain features.\nWe train the network for 160 epochs with a starting learning rate of 10 \u22123 , dividing it by 10 at 60 and 90 epochs.   We use a weight decay of 0.0005 and momentum of 0.9. We use a similar data augmentation to YOLO and SSD with random crops, color shifting, etc. We use the same training strategy on COCO and VOC.", "publication_ref": ["b16", "b8", "b6", "b12"], "figure_ref": [], "table_ref": ["tab_7"]}, {"heading": "Stronger", "text": "We propose a mechanism for jointly training on classification and detection data. Our method uses images labelled for detection to learn detection-specific information like bounding box coordinate prediction and objectness as well as how to classify common objects. It uses images with only class labels to expand the number of categories it can detect.\nDuring training we mix images from both detection and classification datasets. When our network sees an image labelled for detection we can backpropagate based on the full YOLOv2 loss function. When it sees a classification image we only backpropagate loss from the classificationspecific parts of the architecture. This approach presents a few challenges. Detection datasets have only common objects and general labels, like \"dog\" or \"boat\". Classification datasets have a much wider and deeper range of labels. ImageNet has more than a hundred breeds of dog, including \"Norfolk terrier\", \"Yorkshire terrier\", and \"Bedlington terrier\". If we want to train on both datasets we need a coherent way to merge these labels.\nMost approaches to classification use a softmax layer across all the possible categories to compute the final probability distribution. Using a softmax assumes the classes are mutually exclusive. This presents problems for combining datasets, for example you would not want to combine ImageNet and COCO using this model because the classes \"Norfolk terrier\" and \"dog\" are not mutually exclusive.\nWe could instead use a multi-label model to combine the datasets which does not assume mutual exclusion. This approach ignores all the structure we do know about the data, for example that all of the COCO classes are mutually exclusive.\nHierarchical classification. ImageNet labels are pulled from WordNet, a language database that structures concepts and how they relate [12]. In WordNet, \"Norfolk terrier\" and \"Yorkshire terrier\" are both hyponyms of \"terrier\" which is a type of \"hunting dog\", which is a type of \"dog\", which is a \"canine\", etc. Most approaches to classification assume a flat structure to the labels however for combining datasets, structure is exactly what we need.\nWordNet is structured as a directed graph, not a tree, because language is complex. For example a \"dog\" is both a type of \"canine\" and a type of \"domestic animal\" which are both synsets in WordNet. Instead of using the full graph structure, we simplify the problem by building a hierarchical tree from the concepts in ImageNet.\nTo build this tree we examine the visual nouns in Ima-geNet and look at their paths through the WordNet graph to the root node, in this case \"physical object\". Many synsets only have one path through the graph so first we add all of those paths to our tree. Then we iteratively examine the concepts we have left and add the paths that grow the tree by as little as possible. So if a concept has two paths to the root and one path would add three edges to our tree and the other would only add one edge, we choose the shorter path.\nThe final result is WordTree, a hierarchical model of visual concepts. To perform classification with WordTree we predict conditional probabilities at every node for the probability of each hyponym of that synset given that synset. For example, at the \"terrier\" node we predict: P r(Norfolk terrier|terrier) P r(Yorkshire terrier|terrier) P r(Bedlington terrier|terrier)\n...\nIf we want to compute the absolute probability for a particular node we simply follow the path through the tree to the root node and multiply to conditional probabilities. So if we want to know if a picture is of a Norfolk terrier we compute: P r(Norfolk terrier) = P r(Norfolk terrier|terrier) * P r(terrier|hunting dog) * . . . * * P r(mammal|P r(animal) * P r(animal|physical object)\nFor classification purposes we assume that the the image contains an object: P r(physical object) = 1.\nTo validate this approach we train the Darknet-19 model on WordTree built using the 1000 class ImageNet. To build WordTree1k we add in all of the intermediate nodes which expands the label space from 1000 to 1369. During training we propagate ground truth labels up the tree so that if an image is labelled as a \"Norfolk terrier\" it also gets labelled as a \"dog\" and a \"mammal\", etc. To compute the conditional probabilities our model predicts a vector of 1369 values and we compute the softmax over all sysnsets that are hyponyms of the same concept, see Figure 5.\nUsing the same training parameters as before, our hierarchical Darknet-19 achieves 71.9% top-1 accuracy and 90.4% top-5 accuracy. Despite adding 369 additional concepts and having our network predict a tree structure our accuracy only drops marginally. Performing classification in this manner also has some benefits. Performance degrades gracefully on new or unknown object categories. For example, if the network sees a picture of a dog but is uncertain what type of dog it is, it will still predict \"dog\" with high confidence but have lower confidences spread out among the hyponyms.\nThis formulation also works for detection. Now, instead of assuming every image has an object, we use YOLOv2's objectness predictor to give us the value of P r(physical object). The detector predicts a bounding box and the tree of probabilities. We traverse the tree down, taking the highest confidence path at every split until we reach some threshold and we predict that object class. Dataset combination with WordTree. We can use WordTree to combine multiple datasets together in a sensible fashion. We simply map the categories in the datasets to synsets in the tree. Figure 6 shows an example of using WordTree to combine the labels from ImageNet and COCO. WordNet is extremely diverse so we can use this technique with most datasets.\nJoint classification and detection. Now that we can combine datasets using WordTree we can train our joint model on classification and detection. We want to train an extremely large scale detector so we create our combined dataset using the COCO detection dataset and the top 9000 classes from the full ImageNet release. We also need to evaluate our method so we add in any classes from the ImageNet detection challenge that were not already included. The corresponding WordTree for this dataset has 9418 classes. ImageNet is a much larger dataset so we balance the dataset by oversampling COCO so that ImageNet is only larger by a factor of 4:1.\nUsing this dataset we train YOLO9000. We use the base YOLOv2 architecture but only 3 priors instead of 5 to limit the output size. When our network sees a detection image we backpropagate loss as normal. For classification loss, we only backpropagate loss at or above the corresponding level of the label. For example, if the label is \"dog\" we do assign any error to predictions further down in the tree, \"German Shepherd\" versus \"Golden Retriever\", because we do not have that information.  When it sees a classification image we only backpropagate classification loss. To do this we simply find the bounding box that predicts the highest probability for that class and we compute the loss on just its predicted tree. We also assume that the predicted box overlaps what would be the ground truth label by at least .3 IOU and we backpropagate objectness loss based on this assumption.\nUsing this joint training, YOLO9000 learns to find objects in images using the detection data in COCO and it learns to classify a wide variety of these objects using data from ImageNet.\nWe evaluate YOLO9000 on the ImageNet detection task. The detection task for ImageNet shares on 44 object categories with COCO which means that YOLO9000 has only seen classification data for the majority of the test images, not detection data. YOLO9000 gets 19.7 mAP overall with 16.0 mAP on the disjoint 156 object classes that it has never seen any labelled detection data for. This mAP is higher than results achieved by DPM but YOLO9000 is trained on different datasets with only partial supervision [4]. It also is simultaneously detecting 9000 other object categories, all in real-time.\nWhen we analyze YOLO9000's performance on Ima-geNet we see it learns new species of animals well but struggles with learning categories like clothing and equipment.  New animals are easier to learn because the objectness predictions generalize well from the animals in COCO. Conversely, COCO does not have bounding box label for any type of clothing, only for person, so YOLO9000 struggles to model categories like \"sunglasses\" or \"swimming trunks\".", "publication_ref": ["b11", "b3"], "figure_ref": ["fig_4", "fig_5"], "table_ref": []}, {"heading": "Conclusion", "text": "We introduce YOLOv2 and YOLO9000, real-time detection systems. YOLOv2 is state-of-the-art and faster than other detection systems across a variety of detection datasets. Furthermore, it can be run at a variety of image sizes to provide a smooth tradeoff between speed and accuracy.\nYOLO9000 is a real-time framework for detection more than 9000 object categories by jointly optimizing detection and classification. We use WordTree to combine data from various sources and our joint optimization technique to train simultaneously on ImageNet and COCO. YOLO9000 is a strong step towards closing the dataset size gap between detection and classification.\nMany of our techniques generalize outside of object detection. Our WordTree representation of ImageNet offers a richer, more detailed output space for image classification. Dataset combination using hierarchical classification would be useful in the classification and segmentation domains. Training techniques like multi-scale training could provide benefit across a variety of visual tasks.\nFor future work we hope to use similar techniques for weakly supervised image segmentation. We also plan to improve our detection results using more powerful matching strategies for assigning weak labels to classification data during training. Computer vision is blessed with an enormous amount of labelled data. We will continue looking for ways to bring different sources and structures of data together to make stronger models of the visual world.", "publication_ref": [], "figure_ref": [], "table_ref": []}], "references": [{"ref_id": "b0", "title": "Insideoutside net: Detecting objects in context with skip pooling and recurrent neural networks", "journal": "", "year": "2015", "authors": "S Bell; C L Zitnick; K Bala; R Girshick"}, {"ref_id": "b1", "title": "Imagenet: A large-scale hierarchical image database", "journal": "IEEE", "year": "2009", "authors": "J Deng; W Dong; R Socher; L.-J Li; K Li; L Fei-Fei"}, {"ref_id": "b2", "title": "The pascal visual object classes (voc) challenge", "journal": "International journal of computer vision", "year": "2010", "authors": "M Everingham; L Van Gool; C K Williams; J Winn; A Zisserman"}, {"ref_id": "b3", "title": "Discriminatively trained deformable part models", "journal": "", "year": "", "authors": "P F Felzenszwalb; R B Girshick; D Mcallester"}, {"ref_id": "b4", "title": "", "journal": "", "year": "2015", "authors": "R B Girshick; R-Cnn Fast;  Corr"}, {"ref_id": "b5", "title": "Deep residual learning for image recognition", "journal": "", "year": "2004", "authors": "K He; X Zhang; S Ren; J Sun"}, {"ref_id": "b6", "title": "Batch normalization: Accelerating deep network training by reducing internal covariate shift", "journal": "", "year": "2015", "authors": "S Ioffe; C Szegedy"}, {"ref_id": "b7", "title": "Imagenet classification with deep convolutional neural networks", "journal": "", "year": "2012", "authors": "A Krizhevsky; I Sutskever; G E Hinton"}, {"ref_id": "b8", "title": "Network in network", "journal": "", "year": "2013", "authors": "M Lin; Q Chen; S Yan"}, {"ref_id": "b9", "title": "Microsoft coco: Common objects in context", "journal": "Springer", "year": "2014", "authors": "T.-Y Lin; M Maire; S Belongie; J Hays; P Perona; D Ramanan; P Doll\u00e1r; C L Zitnick"}, {"ref_id": "b10", "title": "SSD: single shot multibox detector", "journal": "CoRR", "year": "2015", "authors": "W Liu; D Anguelov; D Erhan; C Szegedy; S E Reed"}, {"ref_id": "b11", "title": "Introduction to wordnet: An on-line lexical database", "journal": "International journal of lexicography", "year": "1990", "authors": "G A Miller; R Beckwith; C Fellbaum; D Gross; K J Miller"}, {"ref_id": "b12", "title": "Darknet: Open source neural networks in c", "journal": "", "year": "2013", "authors": "J Redmon"}, {"ref_id": "b13", "title": "You only look once: Unified, real-time object detection", "journal": "", "year": "2015", "authors": "J Redmon; S Divvala; R Girshick; A Farhadi"}, {"ref_id": "b14", "title": "Faster r-cnn: Towards real-time object detection with region proposal networks", "journal": "", "year": "2006", "authors": "S Ren; K He; R Girshick; J Sun"}, {"ref_id": "b15", "title": "ImageNet Large Scale Visual Recognition Challenge", "journal": "International Journal of Computer Vision (IJCV)", "year": "2015", "authors": "O Russakovsky; J Deng; H Su; J Krause; S Satheesh; S Ma; Z Huang; A Karpathy; A Khosla; M Bernstein; A C Berg; L Fei-Fei"}, {"ref_id": "b16", "title": "Very deep convolutional networks for large-scale image recognition", "journal": "", "year": "2014", "authors": "K Simonyan; A Zisserman"}, {"ref_id": "b17", "title": "Inception-v4, inception-resnet and the impact of residual connections on learning", "journal": "", "year": "2016", "authors": "C Szegedy; S Ioffe; V Vanhoucke"}, {"ref_id": "b18", "title": "Going deeper with convolutions. CoRR, abs/1409", "journal": "", "year": "2014", "authors": "C Szegedy; W Liu; Y Jia; P Sermanet; S Reed; D Anguelov; D Erhan; V Vanhoucke; A Rabinovich"}, {"ref_id": "b19", "title": "Yfcc100m: The new data in multimedia research", "journal": "Communications of the ACM", "year": "2016", "authors": "B Thomee; D A Shamma; G Friedland; B Elizalde; K Ni; D Poland; D Borth; L.-J Li"}], "figures": [{"figure_label": "1", "figure_type": "figure", "figure_id": "fig_0", "figure_caption": "Figure 1 :1Figure 1: YOLO9000. YOLO9000 can detect a wide variety of object classes in real-time.", "figure_data": ""}, {"figure_label": "3", "figure_type": "figure", "figure_id": "fig_1", "figure_caption": "Figure 3 :3Figure 3: Bounding boxes with dimension priors and location", "figure_data": ""}, {"figure_label": "4", "figure_type": "figure", "figure_id": "fig_2", "figure_caption": "Figure 4 :4Figure 4: Accuracy and speed on VOC 2007.", "figure_data": ""}, {"figure_label": "5", "figure_type": "figure", "figure_id": "fig_4", "figure_caption": "i n g m a t t e r o b j e c t p h e n o m e n oFigure 5 :5Figure 5: Prediction on ImageNet vs WordTree. Most Ima-geNet models use one large softmax to predict a probability distribution. Using WordTree we perform multiple softmax operations over co-hyponyms.", "figure_data": ""}, {"figure_label": "6", "figure_type": "figure", "figure_id": "fig_5", "figure_caption": "Figure 6 :6Figure6: Combining datasets using WordTree hierarchy. Using the WordNet concept graph we build a hierarchical tree of visual concepts. Then we can merge datasets together by mapping the classes in the dataset to synsets in the tree. This is a simplified view of WordTree for illustration purposes.", "figure_data": ""}, {"figure_label": "1", "figure_type": "table", "figure_id": "tab_1", "figure_caption": "", "figure_data": "Box Generation# Avg IOUCluster SSE558.7Cluster IOU561.0Anchor Boxes [15] 960.9Cluster IOU967.2"}, {"figure_label": "", "figure_type": "table", "figure_id": "tab_2", "figure_caption": "low resolutions YOLOv2 operates as a cheap, fairly accurate detector. At 288 \u00d7 288 it runs at more than 90 FPS with mAP almost as good as Fast R-CNN. This makes it ideal for smaller GPUs, high framerate video, or multiple video streams. At high resolution YOLOv2 is a state-of-the-art detector with 78.6 mAP on VOC 2007 while still operating above real-time speeds. See Table 3 for a comparison of YOLOv2", "figure_data": "Mean Average Precision80 70 60R-CNN Fast R-CNN Faster R-CNN Faster R-CNN Resnet SSD512YOLO SSD300Y O L O v 203050100Frames Per Second"}, {"figure_label": "3", "figure_type": "table", "figure_id": "tab_3", "figure_caption": "", "figure_data": "5]2007+201270.00.5Faster R-CNN VGG-16[15] 2007+201273.27Faster R-CNN ResNet[6]2007+201276.45YOLO [14]2007+201263.445SSD300 [11]2007+201274.346SSD500 [11]2007+201276.819YOLOv2 288 \u00d7 2882007+201269.091YOLOv2 352 \u00d7 3522007+201273.781YOLOv2 416 \u00d7 4162007+201276.867YOLOv2 480 \u00d7 4802007+201277.859YOLOv2 544 \u00d7 5442007+201278.640"}, {"figure_label": "2", "figure_type": "table", "figure_id": "tab_4", "figure_caption": "applications for detection, like robotics or selfdriving cars, rely on low latency predictions. In order to The path from YOLO to YOLOv2. Most of the listed design decisions lead to significant increases in mAP. Two exceptions are switching to a fully convolutional network with anchor boxes and using the new network. Switching to the anchor box style approach increased recall without changing mAP while using the new network cut computation by 33%.Faster R-CNN [15] 07++12 70.4 84.9 79.8 74.3 53.9 49.8 77.5 75.9 88.5 45.6 77.1 55.3 86.9 81.7 80.9 79.6 40.1 72.6 60.9 81.2 61.", "figure_data": "YOLOYOLOv2batch norm?hi-res classifier?convolutional?anchor boxes?new network?dimension priors?location prediction?passthrough?multi-scale?hi-res detector?VOC2007 mAP 63.4 65.8 69.5 69.2 69.6 74.4 75.4 76.878.6"}, {"figure_label": "4", "figure_type": "table", "figure_id": "tab_5", "figure_caption": "as the base feature extractor[17]. VGG-16 is a powerful, accurate classification network but it is needlessly complex. The convolutional layers of VGG-16 require 30.69 billion floating point operations for a single pass over a single image at 224 \u00d7 224 resolution.The YOLO framework uses a custom network based on the Googlenet architecture[19]. This network is faster than VGG-16, only using 8.52 billion operations for a forward pass. However, it's accuracy is slightly worse than VGG-16. For single-crop, top-5 accuracy at 224 \u00d7 224, YOLO's custom model gets 88.0% ImageNet compared to 90.0% for VGG-16.", "figure_data": ""}, {"figure_label": "5", "figure_type": "table", "figure_id": "tab_6", "figure_caption": "Results on COCO test-dev2015. Table adapted from[11] ", "figure_data": "TypeFiltersSize/StrideOutputConvolutional323 \u00d7 3224 \u00d7 224Maxpool2 \u00d7 2/2112 \u00d7 112Convolutional643 \u00d7 3112 \u00d7 112Maxpool2 \u00d7 2/256 \u00d7 56Convolutional1283 \u00d7 356 \u00d7 56Convolutional641 \u00d7 156 \u00d7 56Convolutional1283 \u00d7 356 \u00d7 56Maxpool2 \u00d7 2/228 \u00d7 28Convolutional2563 \u00d7 328 \u00d7 28Convolutional1281 \u00d7 128 \u00d7 28Convolutional2563 \u00d7 3\u00d7 28Maxpool2 \u00d7 2/214 \u00d7 14Convolutional5123 \u00d7 314 \u00d7 14Convolutional2561 \u00d7 114 \u00d7 14Convolutional5123 \u00d7 314 \u00d7 14Convolutional2561 \u00d7 114 \u00d7 14Convolutional5123 \u00d7 314 \u00d7 14Maxpool2 \u00d7 2/27 \u00d7 7Convolutional10243 \u00d7 37 \u00d7 7Convolutional5121 \u00d7 17 \u00d7 7Convolutional10243 \u00d7 37 \u00d7 7Convolutional5121 \u00d7 17 \u00d7 7Convolutional10243 \u00d7 37 \u00d7 7Convolutional10001 \u00d7 17 \u00d7 7AvgpoolGlobal1000Softmax"}, {"figure_label": "6", "figure_type": "table", "figure_id": "tab_7", "figure_caption": " ", "figure_data": ""}, {"figure_label": "7", "figure_type": "table", "figure_id": "tab_9", "figure_caption": "YOLO9000 Best and Worst Classes on ImageNet.The classes with the highest and lowest AP from the 156 weakly supervised classes. YOLO9000 learns good models for a variety of animals but struggles with new classes like clothing or equipment.", "figure_data": ""}], "formulas": [{"formula_id": "formula_0", "formula_text": "d(box, centroid) = 1 \u2212 IOU(box, centroid)", "formula_coordinates": [3.0, 81.8, 392.92, 172.87, 8.96]}, {"formula_id": "formula_1", "formula_text": "x = (t x * w a ) \u2212 x a y = (t y * h a ) \u2212 y a", "formula_coordinates": [3.0, 387.29, 163.51, 78.89, 24.24]}, {"formula_id": "formula_2", "formula_text": "b x = \u03c3(t x ) + c x b y = \u03c3(t y ) + c y b w = p w e tw b h = p h e t h P r(object) * IOU (b, object) = \u03c3(t o )", "formula_coordinates": [3.0, 340.5, 424.39, 172.49, 70.56]}], "doi": ""}