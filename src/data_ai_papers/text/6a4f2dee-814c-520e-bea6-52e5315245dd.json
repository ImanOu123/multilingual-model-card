{"title": "Densely Connected Convolutional Networks", "authors": "Gao Huang; Zhuang Liu; Laurens Van Der; Maaten Facebook; A I Research; Kilian Q Weinberger", "pub_date": "2018-01-28", "abstract": "Recent work has shown that convolutional networks can be substantially deeper, more accurate, and efficient to train if they contain shorter connections between layers close to the input and those close to the output. In this paper, we embrace this observation and introduce the Dense Convolutional Network (DenseNet), which connects each layer to every other layer in a feed-forward fashion. Whereas traditional convolutional networks with L layers have L connections-one between each layer and its subsequent layer-our network has L(L+1) 2 direct connections. For each layer, the feature-maps of all preceding layers are used as inputs, and its own feature-maps are used as inputs into all subsequent layers. DenseNets have several compelling advantages: they alleviate the vanishing-gradient problem, strengthen feature propagation, encourage feature reuse, and substantially reduce the number of parameters. We evaluate our proposed architecture on four highly competitive object recognition benchmark tasks (CIFAR-10, CIFAR-100, SVHN, and ImageNet). DenseNets obtain significant improvements over the state-of-the-art on most of them, whilst requiring less computation to achieve high performance. Code and pre-trained models are available at https://github.com/liuzhuang13/DenseNet.", "sections": [{"heading": "Introduction", "text": "Convolutional neural networks (CNNs) have become the dominant machine learning approach for visual object recognition. Although they were originally introduced over 20 years ago [18], improvements in computer hardware and network structure have enabled the training of truly deep CNNs only recently. The original LeNet5 [19] consisted of 5 layers, VGG featured 19 [29], and only last year Highway * Authors contributed equally Each layer takes all preceding feature-maps as input.\nNetworks [34] and Residual Networks (ResNets) [11] have surpassed the 100-layer barrier.\nAs CNNs become increasingly deep, a new research problem emerges: as information about the input or gradient passes through many layers, it can vanish and \"wash out\" by the time it reaches the end (or beginning) of the network. Many recent publications address this or related problems. ResNets [11] and Highway Networks [34] bypass signal from one layer to the next via identity connections. Stochastic depth [13] shortens ResNets by randomly dropping layers during training to allow better information and gradient flow. FractalNets [17] repeatedly combine several parallel layer sequences with different number of convolutional blocks to obtain a large nominal depth, while maintaining many short paths in the network. Although these different approaches vary in network topology and training procedure, they all share a key characteristic: they create short paths from early layers to later layers.\nIn this paper, we propose an architecture that distills this insight into a simple connectivity pattern: to ensure maximum information flow between layers in the network, we connect all layers (with matching feature-map sizes) directly with each other. To preserve the feed-forward nature, each layer obtains additional inputs from all preceding layers and passes on its own feature-maps to all subsequent layers. Figure 1 illustrates this layout schematically. Crucially, in contrast to ResNets, we never combine features through summation before they are passed into a layer; instead, we combine features by concatenating them. Hence, the th layer has inputs, consisting of the feature-maps of all preceding convolutional blocks. Its own feature-maps are passed on to all L\u2212 subsequent layers. This introduces\nL(L+1) 2\nconnections in an L-layer network, instead of just L, as in traditional architectures. Because of its dense connectivity pattern, we refer to our approach as Dense Convolutional Network (DenseNet).\nA possibly counter-intuitive effect of this dense connectivity pattern is that it requires fewer parameters than traditional convolutional networks, as there is no need to relearn redundant feature-maps. Traditional feed-forward architectures can be viewed as algorithms with a state, which is passed on from layer to layer. Each layer reads the state from its preceding layer and writes to the subsequent layer. It changes the state but also passes on information that needs to be preserved. ResNets [11] make this information preservation explicit through additive identity transformations. Recent variations of ResNets [13] show that many layers contribute very little and can in fact be randomly dropped during training. This makes the state of ResNets similar to (unrolled) recurrent neural networks [21], but the number of parameters of ResNets is substantially larger because each layer has its own weights. Our proposed DenseNet architecture explicitly differentiates between information that is added to the network and information that is preserved. DenseNet layers are very narrow (e.g., 12 filters per layer), adding only a small set of feature-maps to the \"collective knowledge\" of the network and keep the remaining featuremaps unchanged-and the final classifier makes a decision based on all feature-maps in the network.\nBesides better parameter efficiency, one big advantage of DenseNets is their improved flow of information and gradients throughout the network, which makes them easy to train. Each layer has direct access to the gradients from the loss function and the original input signal, leading to an implicit deep supervision [20]. This helps training of deeper network architectures. Further, we also observe that dense connections have a regularizing effect, which reduces overfitting on tasks with smaller training set sizes.\nWe evaluate DenseNets on four highly competitive benchmark datasets (CIFAR-10, CIFAR-100, SVHN, and ImageNet). Our models tend to require much fewer param-eters than existing algorithms with comparable accuracy. Further, we significantly outperform the current state-ofthe-art results on most of the benchmark tasks.", "publication_ref": ["b17", "b18", "b28", "b33", "b10", "b10", "b33", "b12", "b16", "b10", "b12", "b20", "b19"], "figure_ref": ["fig_0"], "table_ref": []}, {"heading": "Related Work", "text": "The exploration of network architectures has been a part of neural network research since their initial discovery. The recent resurgence in popularity of neural networks has also revived this research domain. The increasing number of layers in modern networks amplifies the differences between architectures and motivates the exploration of different connectivity patterns and the revisiting of old research ideas.\nA cascade structure similar to our proposed dense network layout has already been studied in the neural networks literature in the 1980s [3]. Their pioneering work focuses on fully connected multi-layer perceptrons trained in a layerby-layer fashion. More recently, fully connected cascade networks to be trained with batch gradient descent were proposed [40]. Although effective on small datasets, this approach only scales to networks with a few hundred parameters. In [9,23,31,41], utilizing multi-level features in CNNs through skip-connnections has been found to be effective for various vision tasks. Parallel to our work, [1] derived a purely theoretical framework for networks with cross-layer connections similar to ours.\nHighway Networks [34] were amongst the first architectures that provided a means to effectively train end-to-end networks with more than 100 layers. Using bypassing paths along with gating units, Highway Networks with hundreds of layers can be optimized without difficulty. The bypassing paths are presumed to be the key factor that eases the training of these very deep networks. This point is further supported by ResNets [11], in which pure identity mappings are used as bypassing paths. ResNets have achieved impressive, record-breaking performance on many challenging image recognition, localization, and detection tasks, such as ImageNet and COCO object detection [11]. Recently, stochastic depth was proposed as a way to successfully train a 1202-layer ResNet [13]. Stochastic depth improves the training of deep residual networks by dropping layers randomly during training. This shows that not all layers may be needed and highlights that there is a great amount of redundancy in deep (residual) networks. Our paper was partly inspired by that observation. ResNets with pre-activation also facilitate the training of state-of-the-art networks with > 1000 layers [12].\nAn orthogonal approach to making networks deeper (e.g., with the help of skip connections) is to increase the network width. The GoogLeNet [36,37] uses an \"Inception module\" which concatenates feature-maps produced by filters of different sizes. In [38], a variant of ResNets with wide generalized residual blocks was proposed. In fact, simply increasing the number of filters in each layer of ResNets can improve its performance provided the depth is sufficient [42]. FractalNets also achieve competitive results on several datasets using a wide network structure [17]. Instead of drawing representational power from extremely deep or wide architectures, DenseNets exploit the potential of the network through feature reuse, yielding condensed models that are easy to train and highly parameterefficient. Concatenating feature-maps learned by different layers increases variation in the input of subsequent layers and improves efficiency. This constitutes a major difference between DenseNets and ResNets. Compared to Inception networks [36,37], which also concatenate features from different layers, DenseNets are simpler and more efficient.\nThere are other notable network architecture innovations which have yielded competitive results. The Network in Network (NIN) [22] structure includes micro multi-layer perceptrons into the filters of convolutional layers to extract more complicated features. In Deeply Supervised Network (DSN) [20], internal layers are directly supervised by auxiliary classifiers, which can strengthen the gradients received by earlier layers. Ladder Networks [27,25] introduce lateral connections into autoencoders, producing impressive accuracies on semi-supervised learning tasks. In [39], Deeply-Fused Nets (DFNs) were proposed to improve information flow by combining intermediate layers of different base networks. The augmentation of networks with pathways that minimize reconstruction losses was also shown to improve image classification models [43].", "publication_ref": ["b2", "b39", "b8", "b22", "b30", "b40", "b0", "b33", "b10", "b10", "b12", "b11", "b35", "b36", "b37", "b41", "b16", "b35", "b36", "b21", "b19", "b26", "b24", "b38", "b42"], "figure_ref": [], "table_ref": []}, {"heading": "DenseNets", "text": "Consider a single image x 0 that is passed through a convolutional network. The network comprises L layers, each of which implements a non-linear transformation H (\u2022), where indexes the layer. H (\u2022) can be a composite function of operations such as Batch Normalization (BN) [14], rectified linear units (ReLU) [6], Pooling [19], or Convolution (Conv). We denote the output of the th layer as x .\nResNets. Traditional convolutional feed-forward networks connect the output of the th layer as input to the ( + 1) th layer [16], which gives rise to the following layer transition: x = H (x \u22121 ). ResNets [11] add a skip-connection that bypasses the non-linear transformations with an identity function:\nx\n= H (x \u22121 ) + x \u22121 .(1)\nAn advantage of ResNets is that the gradient can flow directly through the identity function from later layers to the earlier layers. However, the identity function and the output of H are combined by summation, which may impede the information flow in the network.\nDense connectivity. To further improve the information flow between layers we propose a different connectivity pattern: we introduce direct connections from any layer to all subsequent layers. Figure 1 illustrates the layout of the resulting DenseNet schematically. Consequently, the th layer receives the feature-maps of all preceding layers, x 0 , . . . , x \u22121 , as input:\nx = H ([x 0 , x 1 , . . . , x \u22121 ]),(2)\nwhere\n[x 0 , x 1 , . . . , x \u22121 ]\nrefers to the concatenation of the feature-maps produced in layers 0, . . . , \u2212 1. Because of its dense connectivity we refer to this network architecture as Dense Convolutional Network (DenseNet). For ease of implementation, we concatenate the multiple inputs of H (\u2022) in eq. (2) into a single tensor.\nComposite function. Motivated by [12], we define H (\u2022) as a composite function of three consecutive operations: batch normalization (BN) [14], followed by a rectified linear unit (ReLU) [6] and a 3 \u00d7 3 convolution (Conv).\nPooling layers. The concatenation operation used in Eq. ( 2) is not viable when the size of feature-maps changes. However, an essential part of convolutional networks is down-sampling layers that change the size of feature-maps.\nTo facilitate down-sampling in our architecture we divide the network into multiple densely connected dense blocks; see Figure 2. We refer to layers between blocks as transition layers, which do convolution and pooling. The transition layers used in our experiments consist of a batch normalization layer and an 1\u00d71 convolutional layer followed by a 2\u00d72 average pooling layer.\nGrowth rate. If each function H produces k featuremaps, it follows that the th layer has k 0 + k \u00d7 ( \u2212 1) input feature-maps, where k 0 is the number of channels in the input layer. An important difference between DenseNet and existing network architectures is that DenseNet can have very narrow layers, e.g., k = 12. We refer to the hyperparameter k as the growth rate of the network. We show in Section 4 that a relatively small growth rate is sufficient to  obtain state-of-the-art results on the datasets that we tested on. One explanation for this is that each layer has access to all the preceding feature-maps in its block and, therefore, to the network's \"collective knowledge\". One can view the feature-maps as the global state of the network. Each layer adds k feature-maps of its own to this state. The growth rate regulates how much new information each layer contributes to the global state. The global state, once written, can be accessed from everywhere within the network and, unlike in traditional network architectures, there is no need to replicate it from layer to layer.\n\u00d7 1 conv 3 \u00d7 3 conv \u00d7 6 1 \u00d7 1 conv 3 \u00d7 3 conv \u00d7 6 1 \u00d7 1 conv 3 \u00d7 3 conv \u00d7 6 1 \u00d7 1 conv 3 \u00d7 3 conv \u00d7 6 Transition Layer (1) 56 \u00d7 56 1 \u00d7 1 conv 28 \u00d7 28 2 \u00d7 2 average pool, stride 2 Dense Block (2) 28 \u00d7 28 1 \u00d7 1 conv 3 \u00d7 3 conv \u00d7 12 1 \u00d7 1 conv 3 \u00d7 3 conv \u00d7 12 1 \u00d7 1 conv 3 \u00d7 3 conv \u00d7 12 1 \u00d7 1 conv 3 \u00d7 3 conv \u00d7 12 Transition Layer (2) 28 \u00d7 28 1 \u00d7 1 conv 14 \u00d7 14 2 \u00d7 2 average pool, stride 2 Dense Block (3) 14 \u00d7 14 1 \u00d7 1 conv 3 \u00d7 3 conv \u00d7 24 1 \u00d7 1 conv 3 \u00d7 3 conv \u00d7 32 1 \u00d7 1 conv 3 \u00d7 3 conv \u00d7 48 1 \u00d7 1 conv 3 \u00d7 3 conv \u00d7 64 Transition Layer (3) 14 \u00d7 14 1 \u00d7 1 conv 7 \u00d7 7 2 \u00d7 2 average pool, stride 2 Dense Block (4) 7 \u00d7 7 1 \u00d7 1 conv 3 \u00d7 3 conv \u00d7 16 1 \u00d7 1 conv 3 \u00d7 3 conv \u00d7 32 1 \u00d7 1 conv 3 \u00d7 3 conv \u00d7 32 1 \u00d7 1 conv 3 \u00d7 3 conv \u00d7 48 Classification Layer 1 \u00d7 1 7 \u00d7 7 global average pool 1000D fully-connected, softmax\nBottleneck layers. Although each layer only produces k output feature-maps, it typically has many more inputs. It has been noted in [37,11] that a 1\u00d71 convolution can be introduced as bottleneck layer before each 3\u00d73 convolution to reduce the number of input feature-maps, and thus to improve computational efficiency. We find this design especially effective for DenseNet and we refer to our network with such a bottleneck layer, i.e., to the BN-ReLU-Conv(1\u00d7 1)-BN-ReLU-Conv(3\u00d73) version of H , as DenseNet-B. In our experiments, we let each 1\u00d71 convolution produce 4k feature-maps.\nCompression. To further improve model compactness, we can reduce the number of feature-maps at transition layers. If a dense block contains m feature-maps, we let the following transition layer generate \u03b8m output featuremaps, where 0 < \u03b8 \u2264 1 is referred to as the compression factor. When \u03b8 = 1, the number of feature-maps across transition layers remains unchanged. We refer the DenseNet with \u03b8 < 1 as DenseNet-C, and we set \u03b8 = 0.5 in our experiment. When both the bottleneck and transition layers with \u03b8 < 1 are used, we refer to our model as DenseNet-BC.\nImplementation Details. On all datasets except Ima-geNet, the DenseNet used in our experiments has three dense blocks that each has an equal number of layers. Before entering the first dense block, a convolution with 16 (or twice the growth rate for DenseNet-BC) output channels is performed on the input images. For convolutional layers with kernel size 3\u00d73, each side of the inputs is zero-padded by one pixel to keep the feature-map size fixed. We use 1\u00d71 convolution followed by 2\u00d72 average pooling as transition layers between two contiguous dense blocks. At the end of the last dense block, a global average pooling is performed and then a softmax classifier is attached. The feature-map sizes in the three dense blocks are 32\u00d7 32, 16\u00d716, and 8\u00d78, respectively. We experiment with the basic DenseNet structure with configurations {L = 40, k = 12}, {L = 100, k = 12} and {L = 100, k = 24}. For DenseNet-BC, the networks with configurations {L = 100, k = 12}, {L = 250, k = 24} and {L = 190, k = 40} are evaluated.\nIn our experiments on ImageNet, we use a DenseNet-BC structure with 4 dense blocks on 224\u00d7224 input images. The initial convolution layer comprises 2k convolutions of size 7\u00d77 with stride 2; the number of feature-maps in all other layers also follow from setting k. The exact network configurations we used on ImageNet are shown in Table 1.", "publication_ref": ["b13", "b5", "b18", "b15", "b10", "b11", "b13", "b5", "b36", "b10"], "figure_ref": ["fig_0", "fig_1"], "table_ref": ["tab_1"]}, {"heading": "Experiments", "text": "We empirically demonstrate DenseNet's effectiveness on several benchmark datasets and compare with state-of-theart architectures, especially with ResNet and its variants.  ", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Datasets", "text": "CIFAR. The two CIFAR datasets [15] consist of colored natural images with 32\u00d732 pixels. CIFAR-10 (C10) consists of images drawn from 10 and CIFAR-100 (C100) from 100 classes. The training and test sets contain 50,000 and 10,000 images respectively, and we hold out 5,000 training images as a validation set. We adopt a standard data augmentation scheme (mirroring/shifting) that is widely used for these two datasets [11,13,17,22,28,20,32,34]. We denote this data augmentation scheme by a \"+\" mark at the end of the dataset name (e.g., C10+). For preprocessing, we normalize the data using the channel means and standard deviations. For the final run we use all 50,000 training images and report the final test error at the end of training.  [8,11,12], and apply a single-crop or 10-crop with size 224\u00d7224 at test time. Following [11,12,13], we report classification errors on the validation set.", "publication_ref": ["b14", "b10", "b12", "b16", "b21", "b27", "b19", "b31", "b33", "b7", "b10", "b11", "b10", "b11", "b12"], "figure_ref": [], "table_ref": []}, {"heading": "Training", "text": "All the networks are trained using stochastic gradient descent (SGD). On CIFAR and SVHN we train using batch size 64 for 300 and 40 epochs, respectively. The initial learning rate is set to 0.1, and is divided by 10 at 50% and 75% of the total number of training epochs. On ImageNet, we train models for 90 epochs with a batch size of 256. The learning rate is set to 0.1 initially, and is lowered by 10 times at epoch 30 and 60. Note that a naive implementation of DenseNet may contain memory inefficiencies. To reduce the memory consumption on GPUs, please refer to our technical report on the memory-efficient implementation of DenseNets [26].\nFollowing [8], we use a weight decay of 10 \u22124 and a Nesterov momentum [35] of 0.9 without dampening. We adopt the weight initialization introduced by [10]. For the three datasets without data augmentation, i.e., C10, C100   and SVHN, we add a dropout layer [33] after each convolutional layer (except the first one) and set the dropout rate to 0.2. The test errors were only evaluated once for each task and model setting.", "publication_ref": ["b25", "b7", "b34", "b9", "b32"], "figure_ref": [], "table_ref": []}, {"heading": "Classification Results on CIFAR and SVHN", "text": "We train DenseNets with different depths, L, and growth rates, k. The main results on CIFAR and SVHN are shown in Table 2. To highlight general trends, we mark all results that outperform the existing state-of-the-art in boldface and the overall best result in blue.\nAccuracy. Possibly the most noticeable trend may originate from the bottom row of Table 2, which shows that DenseNet-BC with L = 190 and k = 40 outperforms the existing state-of-the-art consistently on all the CIFAR datasets. Its error rates of 3.46% on C10+ and 17.18% on C100+ are significantly lower than the error rates achieved by wide ResNet architecture [42]. Our best results on C10 and C100 (without data augmentation) are even more encouraging: both are close to 30% lower than Fractal-Net with drop-path regularization [17]. On SVHN, with dropout, the DenseNet with L = 100 and k = 24 also surpasses the current best result achieved by wide ResNet. However, the 250-layer DenseNet-BC doesn't further improve the performance over its shorter counterpart. This may be explained by that SVHN is a relatively easy task, and extremely deep models may overfit to the training set.\nCapacity. Without compression or bottleneck layers, there is a general trend that DenseNets perform better as L and k increase. We attribute this primarily to the corresponding growth in model capacity. This is best demonstrated by the column of C10+ and C100+. On C10+, the error drops from 5.24% to 4.10% and finally to 3.74% as the number of parameters increases from 1.0M, over 7.0M to 27.2M. On C100+, we observe a similar trend. This suggests that DenseNets can utilize the increased representational power of bigger and deeper models. It also indicates that they do not suffer from overfitting or the optimization difficulties of residual networks [11].\nParameter Efficiency. The results in Table 2 indicate that DenseNets utilize parameters more efficiently than alternative architectures (in particular, ResNets). The DenseNet-BC with bottleneck structure and dimension reduction at transition layers is particularly parameter-efficient. For example, our 250-layer model only has 15.3M parameters, but it consistently outperforms other models such as FractalNet and Wide ResNets that have more than 30M parameters. We also highlight that DenseNet-BC with L = 100 and k = 12 achieves comparable performance (e.g., 4.51% vs 4.62% error on C10+, 22.27% vs 22.71% error on C100+) as the 1001-layer pre-activation ResNet using 90% fewer parameters. Figure 4 (right panel) shows the training loss and test errors of these two networks on C10+. The 1001-layer deep ResNet converges to a lower training loss value but a similar test error. We analyze this effect in more detail below.\nOverfitting. One positive side-effect of the more efficient use of parameters is a tendency of DenseNets to be less prone to overfitting. We observe that on the datasets without data augmentation, the improvements of DenseNet architectures over prior work are particularly pronounced. On C10, the improvement denotes a 29% relative reduction in error from 7.33% to 5.19%. On C100, the reduction is about 30% from 28.20% to 19.64%. In our experiments, we observed potential overfitting in a single setting: on C10, a 4\u00d7 growth of parameters produced by increasing k = 12 to k = 24 lead to a modest increase in error from 5.77% to 5.83%. The DenseNet-BC bottleneck and compression layers appear to be an effective way to counter this trend.", "publication_ref": ["b41", "b16", "b10"], "figure_ref": ["fig_3"], "table_ref": ["tab_3", "tab_3", "tab_3"]}, {"heading": "Classification Results on ImageNet", "text": "We evaluate DenseNet-BC with different depths and growth rates on the ImageNet classification task, and compare it with state-of-the-art ResNet architectures. To ensure a fair comparison between the two architectures, we eliminate all other factors such as differences in data preprocessing and optimization settings by adopting the publicly available Torch implementation for ResNet by [8] 1 .\n1 https://github.com/facebook/fb.resnet.torch We simply replace the ResNet model with the DenseNet-BC network, and keep all the experiment settings exactly the same as those used for ResNet.\nWe report the single-crop and 10-crop validation errors of DenseNets on ImageNet in Table 3. Figure 3 shows the single-crop top-1 validation errors of DenseNets and ResNets as a function of the number of parameters (left) and FLOPs (right). The results presented in the figure reveal that DenseNets perform on par with the state-of-the-art ResNets, whilst requiring significantly fewer parameters and computation to achieve comparable performance. For example, a DenseNet-201 with 20M parameters model yields similar validation error as a 101-layer ResNet with more than 40M parameters. Similar trends can be observed from the right panel, which plots the validation error as a function of the number of FLOPs: a DenseNet that requires as much computation as a ResNet-50 performs on par with a ResNet-101, which requires twice as much computation.\nIt is worth noting that our experimental setup implies that we use hyperparameter settings that are optimized for ResNets but not for DenseNets. It is conceivable that more extensive hyper-parameter searches may further improve the performance of DenseNet on ImageNet.", "publication_ref": [], "figure_ref": ["fig_2"], "table_ref": ["tab_6"]}, {"heading": "Discussion", "text": "Superficially, DenseNets are quite similar to ResNets: Eq. (2) differs from Eq. (1) only in that the inputs to H (\u2022) are concatenated instead of summed. However, the implications of this seemingly small modification lead to substantially different behaviors of the two network architectures.\nModel compactness. As a direct consequence of the input concatenation, the feature-maps learned by any of the DenseNet layers can be accessed by all subsequent layers. This encourages feature reuse throughout the network, and leads to more compact models.\nThe left two plots in Figure 4 show the result of an experiment that aims to compare the parameter efficiency of all variants of DenseNets (left) and also a comparable ResNet architecture (middle). We train multiple small networks with varying depths on C10+ and plot their test accuracies as a function of network parameters. In comparison with other popular network architectures, such as AlexNet [16] or VGG-net [29], ResNets with pre-activation use fewer parameters while typically achieving better results [12]. Hence, we compare DenseNet (k = 12) against this architecture. The training setting for DenseNet is kept the same as in the previous section.\nThe graph shows that DenseNet-BC is consistently the most parameter efficient variant of DenseNet. Further, to achieve the same level of accuracy, DenseNet-BC only requires around 1/3 of the parameters of ResNets (middle plot). This result is in line with the results on ImageNet we presented in Figure 3. The right plot in Figure 4 shows that a DenseNet-BC with only 0.8M trainable parameters is able to achieve comparable accuracy as the 1001-layer (pre-activation) ResNet [12] with 10.2M parameters. Implicit Deep Supervision. One explanation for the improved accuracy of dense convolutional networks may be that individual layers receive additional supervision from the loss function through the shorter connections. One can interpret DenseNets to perform a kind of \"deep supervision\". The benefits of deep supervision have previously been shown in deeply-supervised nets (DSN; [20]), which have classifiers attached to every hidden layer, enforcing the intermediate layers to learn discriminative features.\nDenseNets perform a similar deep supervision in an implicit fashion: a single classifier on top of the network provides direct supervision to all layers through at most two or three transition layers. However, the loss function and gradient of DenseNets are substantially less complicated, as the same loss function is shared between all layers.", "publication_ref": ["b15", "b28", "b11", "b11", "b19"], "figure_ref": ["fig_3", "fig_2", "fig_3"], "table_ref": []}, {"heading": "Stochastic vs. deterministic connection.", "text": "There is an interesting connection between dense convolutional networks and stochastic depth regularization of residual networks [13]. In stochastic depth, layers in residual networks are randomly dropped, which creates direct connections be-tween the surrounding layers. As the pooling layers are never dropped, the network results in a similar connectivity pattern as DenseNet: there is a small probability for any two layers, between the same pooling layers, to be directly connected-if all intermediate layers are randomly dropped. Although the methods are ultimately quite different, the DenseNet interpretation of stochastic depth may provide insights into the success of this regularizer.\nFeature Reuse. By design, DenseNets allow layers access to feature-maps from all of its preceding layers (although sometimes through transition layers). We conduct an experiment to investigate if a trained network takes advantage of this opportunity. We first train a DenseNet on C10+ with L = 40 and k = 12. For each convolutional layer within a block, we compute the average (absolute) weight assigned to connections with layer s. Figure 5 shows a heat-map for all three dense blocks. The average absolute weight serves as a surrogate for the dependency of a convolutional layer on its preceding layers. A red dot in position ( , s) indicates that the layer makes, on average, strong use of feature-maps produced s-layers before. Several observations can be made from the plot:\n1. All layers spread their weights over many inputs within the same block. This indicates that features extracted by very early layers are, indeed, directly used by deep layers throughout the same dense block. 2. The weights of the transition layers also spread their weight across all layers within the preceding dense block, indicating information flow from the first to the last layers of the DenseNet through few indirections. 3. The layers within the second and third dense block consistently assign the least weight to the outputs of the transition layer (the top row of the triangles), indicating that the transition layer outputs many redundant features (with low weight on average). This is in keeping with the strong results of DenseNet-BC where exactly these outputs are compressed. 4. Although the final classification layer, shown on the very right, also uses weights across the entire dense block, there seems to be a concentration towards final feature-maps, suggesting that there may be some more high-level features produced late in the network.", "publication_ref": ["b12"], "figure_ref": ["fig_5"], "table_ref": []}, {"heading": "Conclusion", "text": "We proposed a new convolutional network architecture, which we refer to as Dense Convolutional Network (DenseNet). It introduces direct connections between any two layers with the same feature-map size. We showed that DenseNets scale naturally to hundreds of layers, while exhibiting no optimization difficulties. In our experiments, Target layer (\uf06c) Target layer (\uf06c) DenseNets tend to yield consistent improvement in accuracy with growing number of parameters, without any signs of performance degradation or overfitting. Under multiple settings, it achieved state-of-the-art results across several highly competitive datasets. Moreover, DenseNets require substantially fewer parameters and less computation to achieve state-of-the-art performances. Because we adopted hyperparameter settings optimized for residual networks in our study, we believe that further gains in accuracy of DenseNets may be obtained by more detailed tuning of hyperparameters and learning rate schedules.\nWhilst following a simple connectivity rule, DenseNets naturally integrate the properties of identity mappings, deep supervision, and diversified depth. They allow feature reuse throughout the networks and can consequently learn more compact and, according to our experiments, more accurate models. Because of their compact internal representations and reduced feature redundancy, DenseNets may be good feature extractors for various computer vision tasks that build on convolutional features, e.g., [4,5]. We plan to study such feature transfer with DenseNets in future work.", "publication_ref": ["b3", "b4"], "figure_ref": [], "table_ref": []}], "references": [{"ref_id": "b0", "title": "Adanet: Adaptive structural learning of artificial neural networks", "journal": "", "year": "2016", "authors": "C Cortes; X Gonzalvo; V Kuznetsov; M Mohri; S Yang"}, {"ref_id": "b1", "title": "Imagenet: A large-scale hierarchical image database", "journal": "", "year": "2009", "authors": "J Deng; W Dong; R Socher; L.-J Li; K Li; L Fei-Fei"}, {"ref_id": "b2", "title": "The cascade-correlation learning architecture", "journal": "", "year": "1989", "authors": "S E Fahlman; C Lebiere"}, {"ref_id": "b3", "title": "Deep manifold traversal: Changing labels with convolutional features", "journal": "", "year": "2015", "authors": "J R Gardner; M J Kusner; Y Li; P Upchurch; K Q Weinberger; J E Hopcroft"}, {"ref_id": "b4", "title": "A neural algorithm of artistic style", "journal": "Nature Communications", "year": "2015", "authors": "L Gatys; A Ecker; M Bethge"}, {"ref_id": "b5", "title": "Deep sparse rectifier neural networks", "journal": "", "year": "2011", "authors": "X Glorot; A Bordes; Y Bengio"}, {"ref_id": "b6", "title": "Maxout networks", "journal": "", "year": "2013", "authors": "I Goodfellow; D Warde-Farley; M Mirza; A Courville; Y Bengio"}, {"ref_id": "b7", "title": "Training and investigating residual nets", "journal": "", "year": "2016", "authors": "S Gross; M Wilber"}, {"ref_id": "b8", "title": "Hypercolumns for object segmentation and fine-grained localization", "journal": "", "year": "2015", "authors": "B Hariharan; P Arbel\u00e1ez; R Girshick; J Malik"}, {"ref_id": "b9", "title": "Delving deep into rectifiers: Surpassing human-level performance on imagenet classification", "journal": "", "year": "2015", "authors": "K He; X Zhang; S Ren; J Sun"}, {"ref_id": "b10", "title": "Deep residual learning for image recognition", "journal": "", "year": "2006", "authors": "K He; X Zhang; S Ren; J Sun"}, {"ref_id": "b11", "title": "Identity mappings in deep residual networks", "journal": "", "year": "2007", "authors": "K He; X Zhang; S Ren; J Sun"}, {"ref_id": "b12", "title": "Deep networks with stochastic depth", "journal": "", "year": "2008", "authors": "G Huang; Y Sun; Z Liu; D Sedra; K Q Weinberger"}, {"ref_id": "b13", "title": "Batch normalization: Accelerating deep network training by reducing internal covariate shift", "journal": "", "year": "2015", "authors": "S Ioffe; C Szegedy"}, {"ref_id": "b14", "title": "Learning multiple layers of features from tiny images", "journal": "", "year": "2009", "authors": "A Krizhevsky; G Hinton"}, {"ref_id": "b15", "title": "Imagenet classification with deep convolutional neural networks", "journal": "", "year": "2012", "authors": "A Krizhevsky; I Sutskever; G E Hinton"}, {"ref_id": "b16", "title": "Fractalnet: Ultra-deep neural networks without residuals", "journal": "", "year": "2006", "authors": "G Larsson; M Maire; G Shakhnarovich"}, {"ref_id": "b17", "title": "Backpropagation applied to handwritten zip code recognition", "journal": "Neural computation", "year": "1989", "authors": "Y Lecun; B Boser; J S Denker; D Henderson; R E Howard; W Hubbard; L D "}, {"ref_id": "b18", "title": "Gradientbased learning applied to document recognition. Proceedings of the IEEE", "journal": "", "year": "1998", "authors": "Y Lecun; L Bottou; Y Bengio; P Haffner"}, {"ref_id": "b19", "title": "Deeplysupervised nets", "journal": "", "year": "2007", "authors": "C.-Y Lee; S Xie; P Gallagher; Z Zhang; Z Tu"}, {"ref_id": "b20", "title": "Bridging the gaps between residual learning, recurrent neural networks and visual cortex", "journal": "", "year": "2016", "authors": "Q Liao; T Poggio"}, {"ref_id": "b21", "title": "Network in network", "journal": "", "year": "2014", "authors": "M Lin; Q Chen; S Yan"}, {"ref_id": "b22", "title": "Fully convolutional networks for semantic segmentation", "journal": "", "year": "2015", "authors": "J Long; E Shelhamer; T Darrell"}, {"ref_id": "b23", "title": "Reading digits in natural images with unsupervised feature learning", "journal": "", "year": "2011", "authors": "Y Netzer; T Wang; A Coates; A Bissacco; B Wu; A Y Ng"}, {"ref_id": "b24", "title": "Deconstructing the ladder network architecture", "journal": "", "year": "2016", "authors": "M Pezeshki; L Fan; P Brakel; A Courville; Y Bengio"}, {"ref_id": "b25", "title": "Memory-efficient implementation of densenets", "journal": "", "year": "2017", "authors": "G Pleiss; D Chen; G Huang; T Li; L Van Der Maaten; K Q Weinberger"}, {"ref_id": "b26", "title": "Semi-supervised learning with ladder networks", "journal": "", "year": "2015", "authors": "A Rasmus; M Berglund; M Honkala; H Valpola; T Raiko"}, {"ref_id": "b27", "title": "Fitnets: Hints for thin deep nets", "journal": "", "year": "2015", "authors": "A Romero; N Ballas; S E Kahou; A Chassang; C Gatta; Y Bengio"}, {"ref_id": "b28", "title": "", "journal": "", "year": "", "authors": "O Russakovsky; J Deng; H Su; J Krause; S Satheesh; S Ma; Z Huang; A Karpathy; A Khosla; M Bernstein"}, {"ref_id": "b29", "title": "Convolutional neural networks applied to house numbers digit classification", "journal": "IEEE", "year": "2012", "authors": "P Sermanet; S Chintala; Y Lecun"}, {"ref_id": "b30", "title": "Pedestrian detection with unsupervised multi-stage feature learning", "journal": "", "year": "2013", "authors": "P Sermanet; K Kavukcuoglu; S Chintala; Y Lecun"}, {"ref_id": "b31", "title": "Striving for simplicity: The all convolutional net", "journal": "", "year": "2014", "authors": "J T Springenberg; A Dosovitskiy; T Brox; M Riedmiller"}, {"ref_id": "b32", "title": "Dropout: a simple way to prevent neural networks from overfitting", "journal": "JMLR", "year": "2014", "authors": "N Srivastava; G E Hinton; A Krizhevsky; I Sutskever; R Salakhutdinov"}, {"ref_id": "b33", "title": "Training very deep networks", "journal": "", "year": "2005", "authors": "R K Srivastava; K Greff; J Schmidhuber"}, {"ref_id": "b34", "title": "On the importance of initialization and momentum in deep learning", "journal": "", "year": "2013", "authors": "I Sutskever; J Martens; G Dahl; G Hinton"}, {"ref_id": "b35", "title": "Going deeper with convolutions", "journal": "", "year": "2015", "authors": "C Szegedy; W Liu; Y Jia; P Sermanet; S Reed; D Anguelov; D Erhan; V Vanhoucke; A Rabinovich"}, {"ref_id": "b36", "title": "Rethinking the inception architecture for computer vision", "journal": "", "year": "2004", "authors": "C Szegedy; V Vanhoucke; S Ioffe; J Shlens; Z Wojna"}, {"ref_id": "b37", "title": "Resnet in resnet: Generalizing residual architectures", "journal": "", "year": "2016", "authors": "S Targ; D Almeida; K Lyman"}, {"ref_id": "b38", "title": "", "journal": "", "year": "2016", "authors": "J Wang; Z Wei; T Zhang; W Zeng"}, {"ref_id": "b39", "title": "Neural network learning without backpropagation", "journal": "IEEE Transactions on Neural Networks", "year": "2010", "authors": "B M Wilamowski; H Yu"}, {"ref_id": "b40", "title": "Multi-scale recognition with dagcnns", "journal": "", "year": "2015", "authors": "S Yang; D Ramanan"}, {"ref_id": "b41", "title": "Wide residual networks", "journal": "", "year": "2005", "authors": "S Zagoruyko; N Komodakis"}, {"ref_id": "b42", "title": "Augmenting supervised neural networks with unsupervised objectives for large-scale image classification", "journal": "", "year": "2016", "authors": "Y Zhang; K Lee; H Lee"}], "figures": [{"figure_label": "1", "figure_type": "figure", "figure_id": "fig_0", "figure_caption": "Figure 1 :1Figure 1: A 5-layer dense block with a growth rate of k = 4.Each layer takes all preceding feature-maps as input.", "figure_data": ""}, {"figure_label": "2", "figure_type": "figure", "figure_id": "fig_1", "figure_caption": "Figure 2 :2Figure 2: A deep DenseNet with three dense blocks. The layers between two adjacent blocks are referred to as transition layers and change feature-map sizes via convolution and pooling.", "figure_data": ""}, {"figure_label": "3", "figure_type": "figure", "figure_id": "fig_2", "figure_caption": "Figure 3 :3Figure 3: Comparison of the DenseNets and ResNets top-1 error rates (single-crop testing) on the ImageNet validation dataset as a function of learned parameters (left) and FLOPs during test-time (right).", "figure_data": ""}, {"figure_label": "4", "figure_type": "figure", "figure_id": "fig_3", "figure_caption": "Figure 4 :4Figure 4: Left: Comparison of the parameter efficiency on C10+ between DenseNet variations. Middle: Comparison of the parameter efficiency between DenseNet-BC and (pre-activation) ResNets. DenseNet-BC requires about 1/3 of the parameters as ResNet to achieve comparable accuracy. Right: Training and testing curves of the 1001-layer pre-activation ResNet[12] with more than 10M parameters and a 100-layer DenseNet with only 0.8M parameters.", "figure_data": ""}, {"figure_label": "5", "figure_type": "figure", "figure_id": "fig_5", "figure_caption": "Figure 5 :5Figure 5: The average absolute filter weights of convolutional layers in a trained DenseNet. The color of pixel (s, ) encodes the average L1 norm (normalized by number of input feature-maps) of the weights connecting convolutional layer s to within a dense block. Three columns highlighted by black rectangles correspond to two transition layers and the classification layer. The first row encodes weights connected to the input layer of the dense block.", "figure_data": ""}, {"figure_label": "1", "figure_type": "table", "figure_id": "tab_1", "figure_caption": "DenseNet architectures for ImageNet. The growth rate for all the networks is k = 32. Note that each \"conv\" layer shown in the table corresponds the sequence BN-ReLU-Conv.", "figure_data": ""}, {"figure_label": "2", "figure_type": "table", "figure_id": "tab_3", "figure_caption": "", "figure_data": ""}, {"figure_label": "3", "figure_type": "table", "figure_id": "tab_6", "figure_caption": "The top-1 and top-5 error rates on the ImageNet validation set, with single-crop / 10crop testing.", "figure_data": ""}], "formulas": [{"formula_id": "formula_0", "formula_text": "L(L+1) 2", "formula_coordinates": [2.0, 51.31, 241.0, 27.25, 14.38]}, {"formula_id": "formula_1", "formula_text": "= H (x \u22121 ) + x \u22121 .(1)", "formula_coordinates": [3.0, 131.82, 706.16, 154.54, 9.68]}, {"formula_id": "formula_2", "formula_text": "x = H ([x 0 , x 1 , . . . , x \u22121 ]),(2)", "formula_coordinates": [3.0, 366.24, 334.53, 178.87, 9.68]}, {"formula_id": "formula_3", "formula_text": "[x 0 , x 1 , . . . , x \u22121 ]", "formula_coordinates": [3.0, 336.1, 352.03, 73.21, 9.68]}, {"formula_id": "formula_4", "formula_text": "\u00d7 1 conv 3 \u00d7 3 conv \u00d7 6 1 \u00d7 1 conv 3 \u00d7 3 conv \u00d7 6 1 \u00d7 1 conv 3 \u00d7 3 conv \u00d7 6 1 \u00d7 1 conv 3 \u00d7 3 conv \u00d7 6 Transition Layer (1) 56 \u00d7 56 1 \u00d7 1 conv 28 \u00d7 28 2 \u00d7 2 average pool, stride 2 Dense Block (2) 28 \u00d7 28 1 \u00d7 1 conv 3 \u00d7 3 conv \u00d7 12 1 \u00d7 1 conv 3 \u00d7 3 conv \u00d7 12 1 \u00d7 1 conv 3 \u00d7 3 conv \u00d7 12 1 \u00d7 1 conv 3 \u00d7 3 conv \u00d7 12 Transition Layer (2) 28 \u00d7 28 1 \u00d7 1 conv 14 \u00d7 14 2 \u00d7 2 average pool, stride 2 Dense Block (3) 14 \u00d7 14 1 \u00d7 1 conv 3 \u00d7 3 conv \u00d7 24 1 \u00d7 1 conv 3 \u00d7 3 conv \u00d7 32 1 \u00d7 1 conv 3 \u00d7 3 conv \u00d7 48 1 \u00d7 1 conv 3 \u00d7 3 conv \u00d7 64 Transition Layer (3) 14 \u00d7 14 1 \u00d7 1 conv 7 \u00d7 7 2 \u00d7 2 average pool, stride 2 Dense Block (4) 7 \u00d7 7 1 \u00d7 1 conv 3 \u00d7 3 conv \u00d7 16 1 \u00d7 1 conv 3 \u00d7 3 conv \u00d7 32 1 \u00d7 1 conv 3 \u00d7 3 conv \u00d7 32 1 \u00d7 1 conv 3 \u00d7 3 conv \u00d7 48 Classification Layer 1 \u00d7 1 7 \u00d7 7 global average pool 1000D fully-connected, softmax", "formula_coordinates": [4.0, 90.71, 106.31, 409.35, 165.08]}], "doi": ""}