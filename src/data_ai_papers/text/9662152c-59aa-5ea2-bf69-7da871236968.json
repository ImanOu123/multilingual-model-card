{"title": "Unweighted Coalitional Manipulation Under the Borda Rule Is NP-Hard", "authors": "Nadja Betzler; Rolf Niedermeier; Gerhard J Woeginger", "pub_date": "", "abstract": "The Borda voting rule is a positional scoring rule where, for m candidates, for every vote the first candidate receives m \u2212 1 points, the second m \u2212 2 points and so on. A Borda winner is a candidate with highest total score. It has been a prominent open problem to determine the computational complexity of UNWEIGHTED COALITIONAL MANIP-ULATION UNDER BORDA: Can one add a certain number of additional votes (called manipulators) to an election such that a distinguished candidate becomes a winner? We settle this open problem by showing NP-hardness even for two manipulators and three input votes. Moreover, we discuss extensions and limitations of this hardness result.", "sections": [{"heading": "Introduction", "text": "In their recent overview on \"AI's war on manipulation\" Faliszewski and Procaccia [2010] write \"An enigmatic open problem is the complexity of Unweighted Coalitional Manipulation under Borda.\" Here, we settle this open problem by showing NP-hardness for UNWEIGHTED COALITIONAL MANIPULATION UNDER BORDA, 1 which we subsequently refer to as BORDA MANIPULATION. Informally speaking, BORDA MANIPULATION asks whether under the Borda rule (see Section 2 for a formal definition) a distinguished candidate can be made a winner by adding a certain number of manipulative votes (called manipulators).\nPrevious work. There is a large amount of work for over two decades concerning the study of the computational complexity of manipulation in elections [Faliszewski and Procaccia, 2010;Faliszewski et al., 2010]. Hence, here we only highlight few previous publications related to BORDA MA-NIPULATION. For one manipulator, the problem can be easily solved in polynomial time [Bartholdi III et al., 1989]. Zuckerman et al. [2009] showed that for BORDA MANIPU-LATION a greedy algorithm can always find a set of x manipulators if the given input allows x \u2212 1 manipulators to make a distinguished candidate win. In other words, this means that the optimization version of BORDA MANIPULATION is polynomial-time approximable with an additive error one. Regarding the computational complexity of UNWEIGHTED COALITIONAL MANIPULATION for scoring rules in general, there is only one NP-hardness result for an artificially constructed scoring rule [Xia et al., 2010]. Similarly to our NP-hardness result it is based on an NP-hard scheduling problem. By way of contrast, WEIGHTED COALITIONAL MANIPULATION UNDER BORDA is known to be NP-hard even for (at least) three candidates [Conitzer et al., 2007;Hemaspaandra and Hemaspaandra, 2007].\nRegarding practical relevance, there is evidence that BORDA MANIPULATION \"usually\" is an easy-to-solve problem.This is justified by experimental work  as well as by considering some forms of average case analysis [Procaccia and Rosenschein, 2007;Xia and Conitzer, 2008].\nFinally, we mention that BORDA MANIPULATION is fixedparameter tractable with respect to the number of candidates, that is, it can be solved in a running time whose exponential part only depends on a computable function in the number of candidates. This is a direct consequence of some integer linear programming formulation in combination with a result of Lenstra [1983] for more general problems (see e.g. [Betzler et al., 2009;Dorn and Schlotter, 2010]).\nOur results. Our central result is to show that BORDA MA-NIPULATION is NP-hard even in case of three input votes and two manipulators. The key to prove this result is to devise a polynomial-time many-one reduction from a \"close\" NP-hard problem from scheduling theory. The problem is called 2-NUMERICAL MATCHING WITH TARGET SUMS and its NP-hardness has been proven by Yu et al. [2004]. Notably, Xia et al. [2010] used a general version of this problem for their already mentioned NP-hardness result for an \"artificial\" scoring rule. We also show that BORDA MANIPU-LATION remains NP-hard not only for three input votes but also for any other number greater than three. Moreover, we provide a close analysis of our reduction and reveal that it requires very special \"settings\" in order to work, partially explaining why attempts to prove NP-hardness have failed so far. In particular, our findings also make clear that the (worstcase) NP-hardness of BORDA MANIPULATION has little to say concerning the practical feasibility of manipulating Borda elections (also see  for making this point in a more general way).", "publication_ref": ["b1", "b0", "b3", "b3", "b0", "b1", "b3", "b2", "b0", "b1", "b3", "b3"], "figure_ref": [], "table_ref": []}, {"heading": "Preliminaries and basic observations", "text": "An election (V, C) consists of a multiset V of votes and a set C of candidates (or alternatives). A vote is a linear order (that is, a transitive, antisymmetric, and total relation) on C. The Borda voting rule determines a winner as follows. In every vote v, the best candidate is at position 1 and the leastliked candidate is at position |C|. For every vote v, the candidate at position i is assigned |C| \u2212 i points, that is, the score of c in v is s(v, c) := |C| \u2212 \"position of c in v\". Each candidate with the highest total score is a Borda winner, that is, we mainly focus on the case that there may be several co-winners. Moreover, let s(V, c) := v\u2208V s(v, c) denote the score of candidate c under all votes in V .\nThe UNWEIGHTED COALITIONAL MANIPULATION problem for Borda (BORDA MANIPULATION for short) is defined as follows.\nInput: An election (V, C), a distinguished candidate c \u2208 C, and a positive integer t. Question: Is there a multiset W (called coalition) consisting of t votes over C such that c is a Borda winner of (V \u222a W, C)? We denote the votes from V as nonmanipulative and the votes from W as manipulative votes. Without loss of generality, we assume that c takes the first position in every vote of W . Regarding the nonmanipulative votes, one is mainly interested in the scores of the candidates. To this end, we introduce the following notion (analogously to [Davies et al., 2010, Definition 1]): For an election E = (V, C) with C := {c , c 1 , . . . , c m } and coalition size t, the gap of candidate\nc i , 1 \u2264 i \u2264 m, is g E,t (c i ) := s(V, c ) + t \u2022 m \u2212 s(V, c i ).\nIf the context is clear, we refer to the gap of candidate c i simply by g i . Intuitively, g i denotes the number of points that c i can make within W such that c is still a winner. Throughout the paper, we assume that g 1 \u2264 g 2 \u2264 . . . \u2264 g m . Then, the following necessary condition for a yes-instance is easy to see [Davies et al., 2010, Observation 1]. In a yes-instance, for j \u2208 {1, . . . , m},\nj i=1 g i \u2265 t \u2022 j(j \u2212 1)/2 (1)\nsince the candidates assigned to the last j positions of a vote make together j(j \u2212 1)/2 points. A crucial concept used for our NP-hardness proof regards tightness with respect to an index j, that is, one has j i=1 g i = t \u2022 j(j \u2212 1)/2. This leads to the following easyto-verify observation. Observation 2.1 If an instance is tight with respect to an index j \u2208 {1, . . . , m}, then, in every solution, the candidates c 1 , . . . , c j take the last j positions in every manipulative vote and s(W, c i ) = g i for every i \u2208 {1, . . . , j}.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "The NP-hardness proof", "text": "In the first subsection, we show that BORDA MANIPULATION is NP-hard with two manipulative and three nonmanipulative votes. In the second subsection, we then discuss to which other settings this hardness proof can be extended.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Two manipulators and three input votes", "text": "Yu, Hoogeveen & Lenstra [2004, Theorem 23] provided a very sophisticated proof that the following special case of NUMERICAL MATCHING WITH TARGET SUMS is NPcomplete. 2", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "2-NUMERICAL MATCHING WITH TARGET SUMS (2NMTS)", "text": "Input: A sequence a 1 , . . . , a k of positive integers with\nk i=1 a i = k(k + 1) and 1 \u2264 a i \u2264 2k for 1 \u2264 i \u2264 k.\nQuestion: Are there two permutations \u03c8 1 and \u03c8 2 of the integers 1, . . . , k such that \u03c8 1\n(i) + \u03c8 2 (i) = a i for 1 \u2264 i \u2264 k?\nThroughout the paper, we assume that a 1 \u2264 . . . \u2264 a k . We devise a polynomial-time many-one reduction from 2NMTS to show that BORDA MANIPULATION is NP-hard in case of two manipulative and three nonmanipulative votes. We first describe the main idea based on specific gap values and the manipulative votes and then show how these gap values can be obtained by setting the nonmanipulative votes accordingly.\nConsider an arbitrary instance a 1 , . . . , a k of 2NMTS. Assume that one can construct a BORDA MANIPULATION instance\n(V, C, c , 2) with C = {c , c 1 , . . . , c k } such that gap g i = 2k\u2212a i for every i, 1 \u2264 i \u2264 k.\nThen, the constructed instance is a yes-instance of BORDA MANIPULATION if and only if the 2NMTS instance is a yes-instance: Given a solution for the 2NMTS instance, a solution for the BORDA MA-NIPULATION instance can be obtained as follows. Let c take the first positions in the manipulative votes. For every integer i, set the corresponding candidate c i to position \u03c8 1 (i) + 1 in the first manipulative vote and to position \u03c8 2 (i) + 1 in the second manipulative vote. In this way, every candidate c i makes 2k + 2 \u2212 a i \u2212 2 = g i points in W and c wins.\nTo see the reverse direction, first note that\nk i=1 g i = k i=1 (2k \u2212 a i ) = 2k 2 \u2212 k(k + 1) = k(k \u2212 1).\nHence, the BORDA MANIPULATION instance is tight with respect to k, implying that every candidate c i makes exactly g i points in a solution (see Observation 2.1). Let p 1 (i) and p 2 (i) denote the positions of c i in the two manipulative votes, respectively. Since c i makes exactly g i points, p 1 (i) + p 2 (i) = a i + 2 and hence setting \u03c8 1 (i) := p 1 (i) \u2212 1 and \u03c8 2 (i) := p 2 (i) \u2212 1 results in a solution for 2NMTS.\nIt remains to construct a set of nonmanipulative votes such that the gap g i for every candidate c i is realized, that is, the difference between the scores of c and c i in the nonmanipulative votes is set such that c i can make at most g i points in the manipulative votes without beating c . We show NPhardness even in case of having three nonmanipulative and two manipulative votes. To realize this, we will introduce a further set D of \"dummy\" candidates (described later) such that we end up with a new candidate set C D with cardinality m + 1 (which will be specified later in the proof). The tightness with respect to k will ensure that the candidates from C \\ {c } must be at the last k positions in the manipulative votes in every solution.\nTo define the three nonmanipulative votes we will first fix the positions of the candidates from C and then fill the remaining positions with dummy candidates from D. To assign positions to the candidates from C, we rename the candidates c 1 , . . . , c k as follows. In an instance, several candidates might have the same gap value. Let G 1 , . . . , G h denote the different gap values. Consider a gap value G j , 1 \u2264 j \u2264 h, that occurs s j times; that is, there are s j indices such that the corresponding gap values equal G j . Denote the s j corresponding candidates by c 1 j , . . . , c sj j . Let z be the maximum over all s j , that is, the maximum number of occurrences of one gap value. Then, let D consist of 8zk new candidates. This means that m := 8zk + k and we end up with m + 1 candidates in total. To ease the representation, we assume that m is divisible by four 3 . Then, the distinguished candidate c is assigned to position 3m/4 in every nonmanipulative vote.\nMoreover, for candidate c x j , 1 \u2264 j \u2264 h, 1 \u2264 x \u2264 s j , we compute the number b(c x j ) of candidates with \"smaller\" indices as follows b(c x j ) := |{c x j \u2208 C with j < j or (j = j and x < x)}|. Then, the positions of every candidate c x j in the three nonmanipulative votes are as follows.\n\u2022 First vote: c x j is assigned to position m/4 \u2212 2xk + G j . \u2022 Second vote: c x j is assigned to position b(c x j ) + 1. \u2022 Third vote: c x j is assigned to position 2xk \u2212 (b(c x j ) + 1). We first show that every assigned position is within the range of 1 and m + 1. Let p denote the position assigned to c x j 3 This is no restriction. Since in the following we will also need that |D| = 8zk is divisible by three, we sketch how to construct an equivalent instance of 2NMTS such that k (and thus also m and |D|) are divisible by 12 as follows. Let p := k mod 12. Add the target sums a k+1 , . . . , a k+p with a k+i = 2(k + i). Then, it is easy to verify that this results in a valid new instance. Moreover, the new instance is a yes-instance if and only if the old instance is a yes-instance. To establish the equivalence the crucial idea is that in solutions for the new and the old instance the old target sums correspond to the same positions while every new a k+i must correspond to position k + i in both permutations of the new instance. This is easy to observe for a k+p since the only possibility to build the target sum of 2(k + p) is to choose the position k + p twice and this can be inductively shown for every other a k+i with p > i \u2265 1.\nin the first vote. Since x \u2264 z and m = 8zk + k, one has p > 0. Since there are at most k different gap values, one has G j \u2264 k, and hence x \u2265 1 implies p < m/4. Regarding the second and the third vote, the required range follows directly from the conditions 0 \u2264 b(c x j ) \u2264 k \u2212 1 and x \u2265 1. More specifically, all assigned positions are even smaller than m/4.\nFurthermore, we show that in one vote every position is assigned to at most one candidate from C. For the second and the third vote two candidates from C \\ {c } do not coincide because of the order induced by the function b. Moreover, in all three votes, c appears at position 3m/4 while the other candidates take a position smaller than m/4 (see above). In the first vote, if two candidates from C have the same gap value, then they must have different x-indices and hence different positions. Two candidates with different gap values do clearly assume different positions when having the same xindex and every candidate with other x-index is more than 2k > G j positions away (for all j). The score of c x j in the three nonmanipulative votes is\n3(m + 1) \u2212 m/4 \u2212 G j + 2xk \u2212 2xk \u2212 b(c x j ) \u2212 1 + b(c x j ) + 1 = (2 + 3/4) \u2022 m \u2212 G j + 3.\nSince c makes 2m points in the manipulative votes and 3 \u2022 m/4 + 3 points in the nonmanipulative votes, the gap of candidate c x j is G j , the gap value required for every candidate c x j . Finally, we describe how to fill the remaining positions, that is, positions that are not already assigned to candidates from C, with the dummy candidates from D. To this end, we partition D into three subsets D 1 , D 2 , and D 3 of equal size (assuming that |D| divisible by three; see second footnote). Then, in the first vote one has D 1 > D 2 > D 3 , in the second vote D 2 > D 3 > D 1 , and in the third vote D 3 > D 1 > D 2 , where D i > D j means that every candidate d i \u2208 D i has a smaller position than every candidate d j \u2208 D j . Regarding the internal order of the candidates from D 1 := {d 1 , . . . , d l }, we assume that for every i \u2208 {1, . . . , l \u2212 1}, we have d i > d i+1 in the first vote and d i+1 > d i in the second vote, and an arbitrary order in the third vote. Since every d i from D 1 in the first and the second vote together makes at most m + 1 points (due to the reverse orders) and in the third vote the |D|/3 candidates from D 3 have smaller positions, every candidate from D 1 makes at most\nm + 1 + (m + 1 \u2212 |D|/3) = (1 + 2/3) \u2022 m \u2212 k/3 + 2 points, using that |D| = m \u2212 k.\nThe internal order of the candidates from D 2 and D 3 can be fixed analogously, resulting in the same upper bound for their scores. We show that every candidate d \u2208 D can make at least m + k points in the manipulative votes and is still beaten by c :\ns(V \u222a W, c ) \u2212 s(V, d) \u2212 (m + k) \u2265 (2 + 3/4) \u2022 m + 3 \u2212 (1 + 2/3) \u2022 m + k/3 \u2212 2 \u2212 m \u2212 k = m/12 \u2212 2k/3 + 1 > 0\nsince k = m/(8z + 1) \u2264 m/9 and hence 2k/3 \u2264 2m/27 < m/12. It follows that in the manipulative votes the candidates from D can assume all positions from 2 to |D| + 1 without beating c (by putting them in arbitrary order in the first vote and in the reverse order in the second vote). Moreover, because of the tightness with respect to k, the candidates c 1 , . . . , c k must be assigned to the last k positions in every possible solution (see Observation 2.1).\nAltogether, since BORDA MANIPULATION clearly is in NP, one arrives at the following.\nTheorem 3.1 BORDA MANIPULATION is NP-complete for three nonmanipulative and two manipulative votes.\nNote that for the unique-winner case, that is, a candidate is a Borda winner only if it makes strictly more points than every other candidate, the construction can easily modified by setting c to position 3m/4 \u2212 1 in the first nonmanipulative vote. Then, since c makes one point more in the nonmanipulative votes, the gap values remain the same and one can argue in complete analogy.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Other NP-hard cases", "text": "In the previous subsection, we showed NP-hardness for BORDA MANIPULATION in case of three nonmanipulative and two manipulative votes. In this section, we discuss further settings to which this result can be extended.\nFirst, the NP-hardness reduction described in Subsection 3.1 can be extended to any number of nonmanipulative votes greater than three. ). Then, the gap values for c x j remains the same since it \"loses\" b(c x j )+1 points against c in the second vote but wins b(c x j )+ 1 points against c in the fourth vote. The dummy candidates can be adapted to this case appropriately.\nMoreover, every other number of manipulative votes can be achieved by adding pairs of any vote and its \"reversal\" without changing the relative scores.\nSecond, we briefly discuss the case a coalition size greater than two. Yu [1996] was convinced to have a proof for the conjecture that the construction of Yu et al. [2004] can be adapted so that it yields NP-hardness of d-NUMERICAL MATCHING WITH TARGET SUMS for any fixed d \u2265 3 where d denotes the number of permutations. 4 If the conjecture holds, arguments analogous to the one in Subsection 3.1 would imply that for any fixed coalition size d \u2265 2, BORDA MANIPULATION is NP-hard.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "A more refined look at the reduction", "text": "The NP-hardness of BORDA MANIPULATION stands in sharp contrast to the problem being easy to solve in practice . Moreover, in probabilistic settings, it is provably often polynomial-time solvable [Procaccia and Rosenschein, 2007;Xia and Conitzer, 2008]. In contrast to study ways of assessing \"average hardness\", in the following we pursue the approach of \"deconstructing intractability\" [Niedermeier, 2010]. To this end, we investigate the structure of instances resulting from the NP-hardness reduction (going back to the NP-hardness proof of 2NMTS). We reveal that the instance resulting from the reduction does not resemble realistic settings. Clearly, this does not directly provide any information about instances that are not obtained by the reduction but nevertheless it helps on the way to identify and characterize \"easy\" instances. Moreover, this also helps to understand what makes the problem difficult and leads the way to interesting questions for future research.\nThe NP-hardness proof for BORDA MANIPULATION relies on a \"series\" of polynomial-time many-one reductions starting from the \"classical\" strongly NP-complete 3-PARTITION problem.\nInput: A multiset of 3q positive integers X = {x 1 , . . . , x 3q } and a positive integer b such that b < x j < 2b for j \u2208 {1, . . . , 3q} and 3q j=1 x j = 4qb. Question: Is there a partition of X into k disjoint subsets X 1 , . . . , X q such that xj \u2208Xi x j = 4b for i \u2208 {1, . . . , q}?\nMore specifically, 3-PARTITION is reduced to a scheduling problem which in turn can be reduced to 2NMTS [Yu et al., 2004] and which then can be reduced to BORDA MANIPU-LATION (see the proof of Theorem 3.1).\nA BORDA MANIPULATION instance resulting from the reductions is as follows. The number k of nondistinguished candidates is 4q 2 b+4qb in the construction resulting from [Yu et al., 2004]. Herein, following Subsection 3.1, k denotes the number of integers of the 2NMTS instance. We omit the dummy candidates from further consideration (since they are only an auxiliary tool to show NP-hardness for a constant number of nonmanipulative votes). Moreover, the corresponding gap values are as follows. There are \u2022 4q 2 b candidates with gap k + 4b + 1,\n\u2022 4qb \u2212 3q candidates with gap k \u2212 4qb \u2212 2, and \u2022 one candidate with gap k \u2212 4qb \u2212 2 + x j for every integer x j from the 3-PARTITION instance with x j < 2b.\nIn the constructed instance the gaps imply that the distinguished candidate has a strictly smaller score than every other candidate in the nonmanipulative votes. Note that, although very restrictive, this \"requirement\" in general does not lead to NP-hardness: An instance with 2k > g i \u2265 k + 1 for every i \u2208 {1, . . . , k} allows for a trivial solution although the distinguished candidate makes less points than every other candidate in the nonmanipulative votes (by setting the candidates in an arbitrary order in the first manipulative vote and the reverse order in the second vote). This observation leads to the following question. Call a candidate c i a strong opponent if Note that in the given construction the number of strong opponents exceeds the number of elements from the 3-PARTITION instance and hence the reduction does not show \"fixed-parameter intractability\" with respect to n s .\nIn the remainder of this section, we discuss another property of the reduction that might be unlikely to hold in realistic settings and whose \"relaxation\" leads to a sufficient condition for an instance being a yes-instance.\nRelaxing Tightness. One crucial property for showing the hardness of 2NMTS and BORDA MANIPULATION was that there is an index j of \"unbounded\" size such that j i=1 g i = j(j \u2212 1), while for almost all indices j < j it holds that j i=1 g i > j (j \u2212 1). An instance getting tight (only) for a large number of candidates seems unlikely for realistic settings. In the following, we discuss aspects of \"relaxing\" or \"strengthening\" the tightness requirements, ending up with cases for which BORDA MANIPULATION for two manipulative votes is easy to solve.\nFirst, note that when an instance is tight for every index i, then it can be solved by simply putting c i to position |C| \u2212 i in every vote. This observation can be extended as follows. Let t 1 \u2264 . . . \u2264 t x denote the x indices for which tightness holds.\nObservation 4.1 BORDA MANIPULATION is fixedparameter tractable with respect to the parameter max 1\u2264i<x {t i+1 \u2212 t i }.\nObservation 4.1 follows directly from the fact that the candidates corresponding to the gaps between two tight indices must also be in the corresponding position range in every solution and for every such \"range\" one can apply a simple ILPformulation from which fixed-parameter tractability follows via a result from Lenstra [1983].\nSecond, we describe a condition relaxing the tightness for all indices that leads to a sufficient condition for a yesinstance of BORDA MANIPULATION. Recall that for the gaps we assume that g i \u2264 g i+1 for i \u2208 {1, . . . , m \u2212 1} and nondistinguished candidates c 1 , . . . , c m . Proposition 4.2 For a BORDA MANIPULATION instance with j i=1 g i \u2265 1.5 \u2022 j(j \u2212 1) for all 1 \u2264 j \u2264 m, two manipulative voters can always make the distinguished candidate win.\nProof. We show that under the given condition a simple greedy strategy always leads to a solution: In the first manipulative vote, order the candidates according to their gap values in decreasing order (ties are broken arbitrarily). More specifically, the first position is assigned to c , the second position to c m , and so on (see Table 1). 5 We show by contradiction that there is a candidate c j such that c j can take the second position (that is, the next position after c ) in the second manipulative vote without beating c ; in other words, g j \u2265 m + j \u2212 2. Now, assume that such an index j does not exist. This implies g j < m + j \u2212 2 for every j. Then,\nm i=1 g i < m i=1 (m + i \u2212 2) = m 2 \u2212 2m + 0.5 \u2022 m(m + 1) = 1.5 \u2022 m 2 \u2212 1.5 \u2022 m = 1.5 \u2022 m(m \u2212 1),\na contradiction to the condition of the proposition. Now, the second manipulative vote can be \"filled\" as follows. Put a candidate c j with g j \u2265 m + j \u2212 2 at position 2. Moreover, all positions up to position j in the second vote can be assigned to the candidates c j+1 , . . . , c m in this order. This is true since g j \u2264 g i for j < i and by this assignment every such candidate makes exactly the same score as g j . To fill the positions greater than m\u2212j +2, we apply the described strategy again, that is, find a j < j such that c j can take position m \u2212 j + 3 and so on.\nSummarizing, the condition j i=1 g i \u2265 j(j \u2212 1) (see Inequality 1 in Section 2) provides a necessary condition for an instance being a yes-instance of BORDA MANIPULATION while j i=1 g i \u2265 1.5 \u2022 j(j \u2212 1) provides a sufficient condition (from Proposition 4.2). It is interesting to find stronger bounds for both cases, for example, what happens when j i=1 g i \u2265 j 2 for every j? Finally, note that Proposition 4.2 may also apply to instances with strong opponents, that is, candidates with gap at most m. For example, there can be one candidate c i with g i = 0 or m/4 candidates each with g i = m (which are allowed to make m 2 /4 > 1.5 \u2022 m/4 \u2022 (m/4 \u2212 1) points).", "publication_ref": ["b3", "b0", "b3", "b3", "b2"], "figure_ref": [], "table_ref": ["tab_0"]}, {"heading": "Conclusion", "text": "We showed NP-hardness for BORDA MANIPULATION even for very restricted settings such as having constant numbers of input votes and manipulators. Our NP-hardness proof is of theoretical nature in the sense that it is a purely worst-case result with little impact on practical aspects of solving BORDA MANIPULATION. This also motivates the issue of parameterizing NP-hard problems such as BORDA MANIPULATION in the spirit of multivariate algorithmics [Niedermeier, 2010]. In this context, our results still leave a number of interesting challenges for future work. For instance, we still miss a combinatorial algorithm (not based on integer linear pro-gramming) to solve BORDA MANIPULATION efficiently 6 in case of few candidates and an \"unbounded\" coalition size. It is also of interest whether in case of two manipulators one can solve the problem in less than O(|C|!) time.\nMoreover, with Inequality 1 (see Section 2) and Proposition 4.2 one now has one necessary and one sufficient condition for a BORDA MANIPULATION instance being a yesinstance. Besides improving the \"gap\" between the two corresponding bounds, it might be also interesting to \"evaluate\" the instances so far used for experimental studies or further realworld instances by answering the following question. What percentage of typically tested instances can not be decided based on the necessary or sufficient condition? Furthermore, all our NP-hardness results rely on having a constant number of manipulative votes and an unbounded number of candidates. However, in many realistic voting scenarios one has only a small number of candidates but a large number of votes. Hence, it might be interesting to investigate whether BORDA MANIPULATION becomes \"easy\" when the coalition size is much larger than the number of candidates.\nFinally, this paper explores a close connection between BORDA MANIPULATION and 2NMTS as well as the corresponding scheduling problem from [Yu et al., 2004] to show computational hardness. On the positive side, it seems interesting to investigate whether some of the algorithmic results from the scheduling or matching literature can also be applied to BORDA MANIPULATION or can be helpful to design algorithms for manipulation problems in general. Some results in this direction have already been obtained by Xia et al. [2010] but this still might be a fruitful field.", "publication_ref": ["b0", "b1", "b3", "b3"], "figure_ref": [], "table_ref": []}, {"heading": "", "text": "Acknowledgements. NB was supported by the DFG project \"PAWS\", NI 369/10. We are very grateful to the anonymous referees whose detailed and constructive feedback helped to significantly improve our presentation.", "publication_ref": [], "figure_ref": [], "table_ref": []}], "references": [{"ref_id": "b0", "title": "A multivariate complexity analysis of determining possible winners given incomplete votes", "journal": "", "year": "1989", "authors": "Iii Bartholdi"}, {"ref_id": "b1", "title": "Complexity of and algorithms for Borda manipulation", "journal": "Hemaspaandra and Hemaspaandra", "year": "2007", "authors": " Davies"}, {"ref_id": "b2", "title": "Junta distributions and the average-case complexity of manipulating elections", "journal": "", "year": "1983", "authors": "; H W Lenstra; ; R Lenstra; ; T Niedermeier;  Walsh"}, {"ref_id": "b3", "title": "Minimizing makespan in a two-machine flow shop with delays and unit-time operations is NP-hard", "journal": "ACM", "year": "1996", "authors": "; L Conitzer; V Xia;  Conitzer;  Xia"}], "figures": [{"figure_label": "2", "figure_type": "figure", "figure_id": "fig_0", "figure_caption": "Proposition 3. 2 \u20222For two manipulative and more than three nonmanipulative votes BORDA MANIPULATION remains NP-hard. Proof. (Sketch) For four nonmanipulative votes one can modify the construction from Subsection 3.1 roughly as follows. In the second vote assign candidate c x j to position 2b(c x j ) + 2 while c remains at the old position. \u2022 In the (new) fourth vote let c be at position k + 1 and c x j at position k \u2212 b(c x j", "figure_data": ""}, {"figure_label": "1", "figure_type": "table", "figure_id": "tab_0", "figure_caption": "Two manipulative votes v 1 and v 2 illustrating the strategy used in the proof of Proposition 4.2.pos.1 2 . . . . . . m \u2212 j + 2 . . . m + 1 score m m \u2212 1 . . . . . . j \u2212 1 . . . 0 v 1 : c c m c m\u22121 . . . c j . . . c 1 v 2 : c c j c j+1 . . . c m . . . . . . g i < k + 1.Moreover, let n s denote the number of strong opponents. Now, the question arises whether BORDA MA-NIPULATION is fixed-parameter tractable with respect to n s .", "figure_data": ""}], "formulas": [{"formula_id": "formula_0", "formula_text": "c i , 1 \u2264 i \u2264 m, is g E,t (c i ) := s(V, c ) + t \u2022 m \u2212 s(V, c i ).", "formula_coordinates": [2.0, 96.56, 445.7, 172.89, 24.95]}, {"formula_id": "formula_1", "formula_text": "j i=1 g i \u2265 t \u2022 j(j \u2212 1)/2 (1)", "formula_coordinates": [2.0, 130.04, 554.57, 166.96, 31.65]}, {"formula_id": "formula_2", "formula_text": "k i=1 a i = k(k + 1) and 1 \u2264 a i \u2264 2k for 1 \u2264 i \u2264 k.", "formula_coordinates": [2.0, 334.93, 225.77, 203.14, 23.69]}, {"formula_id": "formula_3", "formula_text": "(i) + \u03c8 2 (i) = a i for 1 \u2264 i \u2264 k?", "formula_coordinates": [2.0, 334.93, 265.9, 202.65, 20.92]}, {"formula_id": "formula_4", "formula_text": "(V, C, c , 2) with C = {c , c 1 , . . . , c k } such that gap g i = 2k\u2212a i for every i, 1 \u2264 i \u2264 k.", "formula_coordinates": [2.0, 315.0, 391.29, 243.01, 21.67]}, {"formula_id": "formula_5", "formula_text": "k i=1 g i = k i=1 (2k \u2212 a i ) = 2k 2 \u2212 k(k + 1) = k(k \u2212 1).", "formula_coordinates": [2.0, 327.71, 530.15, 218.3, 31.18]}, {"formula_id": "formula_6", "formula_text": "3(m + 1) \u2212 m/4 \u2212 G j + 2xk \u2212 2xk \u2212 b(c x j ) \u2212 1 + b(c x j ) + 1 = (2 + 3/4) \u2022 m \u2212 G j + 3.", "formula_coordinates": [3.0, 315.0, 271.65, 243.0, 32.47]}, {"formula_id": "formula_7", "formula_text": "m + 1 + (m + 1 \u2212 |D|/3) = (1 + 2/3) \u2022 m \u2212 k/3 + 2 points, using that |D| = m \u2212 k.", "formula_coordinates": [3.0, 314.99, 546.33, 232.41, 28.14]}, {"formula_id": "formula_8", "formula_text": "s(V \u222a W, c ) \u2212 s(V, d) \u2212 (m + k) \u2265 (2 + 3/4) \u2022 m + 3 \u2212 (1 + 2/3) \u2022 m + k/3 \u2212 2 \u2212 m \u2212 k = m/12 \u2212 2k/3 + 1 > 0", "formula_coordinates": [3.0, 319.08, 626.53, 234.83, 37.86]}, {"formula_id": "formula_9", "formula_text": "m i=1 g i < m i=1 (m + i \u2212 2) = m 2 \u2212 2m + 0.5 \u2022 m(m + 1) = 1.5 \u2022 m 2 \u2212 1.5 \u2022 m = 1.5 \u2022 m(m \u2212 1),", "formula_coordinates": [5.0, 361.73, 163.37, 150.27, 75.35]}], "doi": ""}