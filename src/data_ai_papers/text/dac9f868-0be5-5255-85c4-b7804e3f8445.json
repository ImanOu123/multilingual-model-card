{"title": "Sample Selection for Statistical Parsers: Cognitively Driven Algorithms and Evaluation Measures", "authors": "Roi Reichart; Ari Rappoport", "pub_date": "", "abstract": "Creating large amounts of manually annotated training data for statistical parsers imposes heavy cognitive load on the human annotator and is thus costly and error prone. It is hence of high importance to decrease the human efforts involved in creating training data without harming parser performance. For constituency parsers, these efforts are traditionally evaluated using the total number of constituents (TC) measure, assuming uniform cost for each annotated item. In this paper, we introduce novel measures that quantify aspects of the cognitive efforts of the human annotator that are not reflected by the TC measure, and show that they are well established in the psycholinguistic literature. We present a novel parameter based sample selection approach for creating good samples in terms of these measures. We describe methods for global optimisation of lexical parameters of the sample based on a novel optimisation problem, the constrained multiset multicover problem, and for cluster-based sampling according to syntactic parameters. Our methods outperform previously suggested methods in terms of the new measures, while maintaining similar TC performance.", "sections": [{"heading": "Introduction", "text": "State of the art statistical parsers require large amounts of manually annotated data to achieve good performance. Creating such data imposes heavy cognitive load on the human annotator and is thus costly and error prone. Statistical parsers are major components in NLP applications such as QA (Kwok et al., 2001), MT (Marcu et al., 2006) and SRL (Toutanova et al., 2005). These often operate over the highly variable Web, which consists of texts written in many languages and genres. Since the performance of parsers markedly degrades when training and test data come from different domains (Lease and Charniak, 2005), large amounts of training data from each domain are required for using them effectively. Thus, decreasing the human efforts involved in creating training data for parsers without harming their performance is of high importance.\nIn this paper we address this problem through sample selection: given a parsing algorithm and a large pool of unannotated sentences S, select a subset S 1 \u2282 S for human annotation such that the human efforts in annotating S 1 are minimized while the parser performance when trained with this sample is maximized.\nPrevious works addressing training sample size vs. parser performance for constituency parsers (Section 2) evaluated training sample size using the total number of constituents (TC). Sentences differ in length and therefore in annotation efforts, and it has been argued (see, e.g, (Hwa, 2004)) that TC reflects the number of decisions the human annotator makes when syntactically annotating the sample, assuming uniform cost for each decision.\nIn this paper we posit that important aspects of the efforts involved in annotating a sample are not reflected by the TC measure. Since annotators analyze sentences rather than a bag of constituents, sentence structure has a major impact on their cognitive efforts. Sizeable psycholinguistic literature points to the connection between nested structures in the syntactic structure of a sentence and its annotation efforts. This has motivated us to introduce (Section 3) three sample size measures, the total and av-erage number of nested structures of degree k in the sample, and the average number of constituents per sentence in the sample.\nActive learning algorithms for sample selection focus on sentences that are difficult for the parsing algorithm when trained with the available training data (Section 2). In Section 5 we show that active learning samples contain a high number of complex structures, much higher than their number in a randomly selected sample that achieves the same parser performance level. To avoid that, we introduce (Section 4) a novel parameter based sample selection (PBS) approach which aims to select a sample that enables good estimation of the model parameters, without focusing on difficult sentences. In Section 5 we show that the methods derived from our approach select substantially fewer complex structures than active learning methods and the random baseline.\nWe propose two different methods. In cluster based sampling (CBS), we aim to select a sample in which the distribution of the model parameters is similar to their distribution in the whole unlabelled pool. To do that we build a vector representation for each sentence in the unlabelled pool reflecting the distribution of the model parameters in this sentence, and use a clustering algorithm to divide these vectors into clusters. In the second method we use the fact that a sample containing many examples of a certain parameter yields better estimation of this parameter. If this parameter is crucial for model performance and the selection process does not harm the distribution of other parameters, then the selected sample is of high quality. To select such a sample we introduce a reduction between this selection problem and a variant of the NP-hard multiset-multicover problem (Hochbaum, 1997). We call this problem the constrained multiset multicover (CMM) problem, and present an algorithm to approximate it.\nWe experiment (Section 5) with the WSJ Pen-nTreebank (Marcus et al., 1994) and Collins' generative parser (Collins, 1999), as in previous work. We show that PBS algorithms achieve good results in terms of both the traditional TC measure (significantly better than the random selection baseline and similar to the results of the state of the art tree entropy (TE) method of (Hwa, 2004)) and our novel cognitively driven measures (where PBS algorithms significantly outperform both TE and the random baseline). We thus argue that PBS provides a way to select a sample that imposes reduced cognitive load on the human annotator.", "publication_ref": ["b12", "b18", "b27", "b13", "b11", "b10", "b20", "b7", "b11"], "figure_ref": [], "table_ref": []}, {"heading": "Related Work", "text": "Previous work on sample selection for statistical parsers applied active learning (AL) (Cohn and Ladner, 1994) to corpora of various languages and syntactic annotation schemes and to parsers of different performance levels. In order to be able to compare our results to previous work targeting high parser performance, we selected the corpus and parser used by the method reporting the best results (Hwa, 2004), WSJ and Collins' parser. Hwa (2004) used uncertainty sampling with the tree entropy (TE) selection function 1 to select training samples for the Collins parser. In each iteration, each of the unlabelled pool sentences is parsed by the parsing model, which outputs a list of trees ranked by their probabilities. The scored list is treated as a random variable and the sentences whose variable has the highest entropy are selected for human annotation. Sample size was measured in TC and ranged from 100K to 700K WSJ constituents. The initial size of the unlabelled pool was 800K constituents (the 40K sentences of sections 2-21 of WSJ). A detailed comparison between the results of TE and our methods is given in Section 5.\nThe following works addressed the task of sample selection for statistical parsers, but in significantly different experimental setups. Becker and Osborne (2005) addressed lower performance levels of the Collins parser. Their uncertainty sampling protocol combined bagging with the TE function, achieving a 32% TC reduction for reaching a parser f-score level of 85.5%. The target sample size set contained a much smaller number of sentences (\u223c5K) than ours. Baldridge and Osborne (2004) addressed HPSG parse selection using a feature based log-linear parser, the Redwoods corpus and committee based active learning, obtaining 80% reduction in annotation cost. Their annotation cost measure was related to the number of possible parses of the sentence. Tang et al. (2002) addressed a shallow parser trained on a semantically annotated corpus.\nThey used an uncertainty sampling protocol, where in each iteration the sentences of the unlabelled pool are clustered using a distance measure defined on parse trees to a predefined number of clusters. The most uncertain sentences are selected from the clusters, the training taking into account the densities of the clusters. They reduced the number of training sentences required for their parser to achieve its best performance from 1300 to 400.\nThe importance of cognitively driven measures of sentences' syntactic complexity has been recognized by Roark et al. (2007) who demonstrated their utility for mild cognitive impairment diagnosis. Zhu et al. (2008) used a clustering algorithm for sampling the initial labeled set in an AL algorithm for word sense disambiguation and text classification. In contrast to our CBS method, they proceeded with iterative uncertainty AL selection. Melville et al. (2005) used parameter-based sample selection for a classifier in a classic active learning setting, for a task very different from ours.\nSample selection has been applied to many NLP applications. Examples include base noun phrase chunking (Ngai, 2000), named entity recognition (Tomanek et al., 2007) and multi-task annotation (Reichart et al., 2008).", "publication_ref": ["b6", "b11", "b11", "b3", "b2", "b25", "b24", "b28", "b19", "b22", "b26", "b23"], "figure_ref": [], "table_ref": []}, {"heading": "Cognitively Driven Evaluation Measures", "text": "While the resources, capabilities and constraints of the human parser have been the subject of extensive research, different theories predict different aspects of its observed performance. We focus on structures that are widely agreed to impose a high cognitive load on the human annotator and on theories considering the cognitive resources required in parsing a complete sentence. Based on these, we derive measures for the cognitive load on the human parser when syntactically annotating a set of sentences.\nNested structures. A nested structure is a parse tree node representing a constituent created while another constituent is still being processed ('open'). The degree K of a nested structure is the number of such open constituents. In this paper, we enumerate the constituents in a top-down left-right order, and thus when a constituent is created, only its ancestors are processed 2 . A constituent is processed 2 A good review on node enumeration of the human parser in given in (Abney and Johnson, 1991). until the processing of its children is completed. For example, in Figure 1, when the constituent NP3 is created, it starts a nested structure of degree 2, since two levels of its ancestors (VP, S) are still processed. Its parent (VP) starts a nested structure of degree 1.\nThe difficulty of deeply nested structures for the human parser is well established in the psycholinguistics literature. We review here some of the various explanations of this phenomenon; for a comprehensive review see (Gibson, 1998).\nAccording to the classical stack overflow theory (Chomsky and Miller, 1963) and its extension, the incomplete syntactic/thematic dependencies theory (Gibson, 1991), the human parser should track the open structures in its short term memory. When the number of these structures is too large or when the structures are nested too deeply, the short term memory fails to hold them and the sentence becomes uninterpretable.\nAccording to the perspective shifts theory (MacWhinney, 1982), processing deeply nested structures requires multiple shifts of the annotator perspective and is thus more difficult than processing shallow structures. The difficulty of deeply nested structured has been demonstrated for many languages (Gibson, 1998).\nWe thus propose the total number of nested structures of degree K in a sample (TNSK) as a measure of the cognitive efforts that its annotation requires. The higher K is, the more demanding the structure.\nSentence level resources. In the psycholinguistic literature of sentence processing there are many theories describing the cognitive resources required during a complete sentence processing. These resources might be allocated during the processing of a certain word and are needed long after its constituent is closed. We briefly discuss two lines of theory, focusing on their predictions that sentences consisting of a large number of structures (e.g., con-stituents or nested structures) require more cognitive resources for longer periods.\nLevelt ( 2001) suggested a layered model of the mental lexicon organization, arguing that when one hears or reads a sentence s/he activates word forms (lexemes) that in turn activate lemma information. The lemma information contains information about syntactic properties of the word (e.g., whether it is a noun or a verb) and about the possible sentence structures that can be generated given that word. The process of reading words and retrieving their lemma information is incremental and the lemma information for a given word is used until its syntactic structure is completed. The information about a word include all syntactic predictions, obligatory (e.g., the prediction of a noun following a determiner) and optional (e.g., optional arguments of a verb, modifier relationships). This information might be relevant long after the constituents containing the word are closed, sometimes till the end of the sentence.\nAnother line of research focuses on working memory, emphasizing the activation decay principle. It stresses that words and structures perceived during sentence processing are forgotten over time. As the distance between two related structures in a sentence grows, it is more demanding to reactivate one when seeing the other. Indeed, supported by a variety of observations, many of the theories of the human parser (see (Lewis et al., 2006) for a survey) predict that processing items towards the end of longer sentences should be harder, since they most often have to be integrated with items further back. Thus, sentences with a large number of structures impose a special cognitive load on the annotator.\nWe thus propose to use the number of structures (constituents or nested structures) in a sentence as a measure of its difficulty for human annotation. The measures we use for a sample (a sentence set) are the average number of constituents (AC) and the average number of nested structures of degree k (ANSK) per sentence in the set. Higher AC or ANSK values of a set imply higher annotation requirements 3 .\nPschycolinguistics research makes finer observa-tions about the human parser than those described here. A complete survey of that literature is beyond the scope of this paper. We consider the proposed measures a good approximation of some of the human parser characteristics.", "publication_ref": ["b0", "b9", "b5", "b8", "b17", "b9", "b15"], "figure_ref": ["fig_0"], "table_ref": []}, {"heading": "Parameter Based Sampling (PBS)", "text": "Our approach is to sample the unannotated pool with respect to the distribution of the model parameters in its sentences. In this paper, in order to compare to previous works, we apply our methods to the Collins generative parser (Collins, 1999). For any sentence s and parse tree t it assigns a probability p(s, t), and finds the tree for which this probability is maximized. To do that, it writes p(t, s) as a product of the probabilities of the constituents in t and decomposes the latter using the chain rule. In simplified notation, it uses:\np(t, s) = P (S 1 \u2192 S 2 . . . Sn) = P (S 1 )\u2022. . .\u2022P (Sn|\u03c6(S 1 . . . Sn))(1)\nWe refer to the conditional probabilities as the model parameters.\nCluster Based Sampling (CBS). We describe here a method for sampling subsets that leads to a parameter estimation that is similar to the parameter estimation we would get if annotating the whole unannotated set.\nTo do that, we randomly select M sentences from the unlabelled pool N , manually annotate them, train the parser with these sentences and parse the rest of the unlabelled pool (G = N \u2212 M ). Using this annotation we build a syntactic vector representation for each sentence in G. We then cluster these sentences and sample the clusters with respect to their weights to preserve the distribution of the syntactic features. The selected sentences are manually annotated and combined with the group of M sentences to train the final parser. The size of this combined sample is measured when the annotation efforts are evaluated.\nDenote the left hand side nonterminal of a constituent by P and the unlexicalized head of the constituent by H. The domain of P is the set of nonterminals (excluding POS tags) and the domain of H is the set of nonterminals and POS tags of WSJ. In all the parameters of the Collins parser P and H are conditioned upon. We thus use (P, H) pairs as the features in the vector representation of each sentence in G. The i-th coordinate is given by the equation:\nc\u2208t(s) i F i (Q(c) == i) \u2022 L(c) (2)\nWhere c are the constituents of the sentence parse t(s), Q is a function that returns the (P, H) pair of the constituent c, F i is a predicate that returns 1 iff it is given pair number i as an argument and 0 otherwise, and L is the number of modifying nonterminals in the constituent plus 1 (for the head), counting the number of parameters that condition on (P, H). Following equation ( 2), the ith coordinate of the vector representation of a sentence in G contains the number of parameters that will be calculated conditioned on the ith (P, H) pair.\nWe use the k-means clustering algorithm, with the L 2 norm as a distance metric (MacKay, 2002), to divide vectors into clusters. Clusters created by this algorithm contain adjacent vectors in a Euclidean space. Clusters represent sentences with similar features values. To initialize k-means, we sample the initial centers values from a uniform distribution over the data points.\nWe do not decide on the number of clusters in advance but try to find inherent structure in the data. Several methods for estimating the 'correct' number of clusters are known (Milligan and Cooper, 1985). We used a statistical heuristic called the elbow test. We define the 'within cluster dispersion' W k as follows. Suppose that the data is divided into k clusters C 1 . . . C k with |C j | points in the jth cluster.\nLet D t = i,j\u2208Ct d i,j where d i,j is the squared Euclidean distance, then W k := k t=1 1 2|Ct| D t . W k tends to decrease monotonically as k increases. In many cases, from some k this decrease flattens markedly. The heuristic is that the location of such an 'elbow' indicates the appropriate number of clusters. In our experiments, an obvious elbow occurred for 15 clusters. k i sentences are randomly sampled from each cluster,\nk i = D |C i | j |C j | ,\nwhere D is the number of sentences to be sampled from G. That way we ensure that in the final sample each cluster is represented according to its size.\nCMM Sampling. All of the parameters in the Collins parser are conditioned on the constituent's head word. Since word statistics are sparse, sampling from clusters created according to a lexical vector representation of the sentences does not seem promising 4 .\nAnother way to create a sample from which the parser can extract robust head word statistics is to select a sample containing many examples of each word. More formally, we denote the words that occur in the unlabelled pool at least t times by t-words, where t is a parameter of the algorithm. We want to select a sample containing at least t examples of as many t-words as possible.\nTo select such a sample we introduce a novel optimisation problem. Our problem is a variant of the multiset multicover (MM) problem, which we call the constrained multiset multicover (CMM) problem. The setting of the MM problem is as follows (Hochbaum, 1997): Given a set I of m elements to be covered each b i times, a collection of multisets S j \u2282 I, j \u2208 J = {1, . . . , n} (a multiset is a set in which members' multiplicity may be greater than 1), and weights w j , find a subcollection C of multisets that covers each i \u2208 I at least b i times, and such that j\u2208C w j is minimized.\nCMM differs from MM in that in CMM the sum of the weights (representing the desired number of sentences to annotate) is bounded, while the number of covered elements (representing the t-words) should be maximized. In our case, I is the set of words that occur at least t times in the unlabelled pool, b i = t, \u2200i \u2208 I, the multisets are the sentences in that pool and w j = 1, \u2200j \u2208 J.\nMultiset multicover is NP-hard. However, there is a good greedy approximation algorithm for it. Define a(s j , i) = min(R(s j , i), d i ), where d i is the difference between b i and the number of instances of item i that are present in our current sample, and R(s j , i) is the multiplicity of the i-th element in the multiset s j . Define A(s j ) to be the multiset containing exactly a(s j , i) copies of any element i if s j is not already in the set cover and the empty set if it is. The greedy algorithm repeatedly adds a set minimizing w j |A(s j) | . This algorithm provenly achieves an approximation ratio between ln(m) and ln(m) + 1.\nIn our case all weights are 1, so the algorithm would simply add the sentence that maximizes A(s j ) to the set cover.\nThe problem in directly applying the algorithm to our case is that it does not take into account the desired sample size. We devised a variant of the algorithm where we use a binary tree to 'push' upwards the number of t-words in the whole batch of unannotated sentences that occurs at least t times in the selected one. Below is a detailed description. D denotes the desired number of items to sample.\nThe algorithm has two steps. First, we iteratively sample (without replacement) D multisets (sentences) from a uniform distribution over the multisets. In each iteration we calculate for the selected multiset its 'contribution' -the number of items that cross the threshold of t occurrences with this multiset minus the number of items that cross the t threshold without this multiset (i.e. the contribution of the first multiset is the number of t-words occurring more than t times in it). For each multiset we build a node with a key that holds its contribution, and insert these nodes in a binary tree. Insertion is done such that all downward paths are sorted in decreasing order of key values.\nSecond, we iteratively sample (from a uniform distribution, without replacement) the rest of the multisets pool. For each multiset we perform two steps. First, we prepare a node with a key as described above. We then randomly choose Z leaves 5 in the binary tree (if the number of leaves is smaller than Z all of the leaves are chosen). For each leaf we find the place of the new node in the path from the root to the leaf (paths are sorted in decreasing order of key values). We insert the new node to the highest such place found (if the new key is not smaller than the existing paths), add its multiset to the set of selected multisets, and remove the multiset that corresponds to the leaf of this path from the batch and the leaf itself from the binary tree. We finally choose the multisets that correspond to the highest D nodes in the tree.\nAn empirical demonstration of the quality of approximation that the algorithm provides is given in Figure 2. We ran our algorithm with the threshold parameter set to t \u2208 [2, 14] and counted the num- 5 We tried Z values from 10 to 100 in steps of 10 and observed very similar results. We report results for Z = 100.  with different values of the threshold parameter t and in a randomly selected sample. CMM with t = 5 is significantly higher. All the lines except for the line for t = 5 are unified. For clarity, we do not show all t values: their curves are also similar to the t = 5 lines.  The compared samples are the smallest samples selected by each of the methods that achieve certain f-score levels. Reduction is calculated by: 100 \u2212 100 \u00d7 (T C method /T C random ).\nber of words occurring at least 5 times in the selected sample. We followed the same experimental protocol as in Section 5. The graph shows that the number of words occurring at least 5 times in a sample selected by our algorithm when t = 5 is significantly higher (by about a 1000) than the number of such words in a randomly selected sample and in samples selected by our algorithm with other t parameter values. We got the same pattern of results when counting words occurring at least t times for the other values of the t parameter -only the run of the algorithm with the corresponding t value created a sample with significantly higher number of words not below threshold. The other runs and random selection resulted in samples containing significantly lower number of words not below threshold.\nIn Section 5 we show that the parser performance when it is trained with a sample selected by CMM is significantly better than when it is trained with a randomly selected sample. Improvement is similar across the t parameter values.  The compared samples are the smallest selected by each of the methods that achieve certain f-score levels. Each column represents the reduction in total or average number of structures of degree 1-6 or 7-22. Reduction for each measure is calculated by: 100 \u2212 100 \u00d7 (measure method /measure random ). Negative reduction is an addition. Samples with a higher reduction in a certain measure are better in terms of that measure.  The curves are unified. The 0 curve is given for reference. Samples selected by CMM and CBS have more nested structures of degrees 1-6 and less nested structures of degrees 7-22. Results are presented for the smallest samples required for achieving f-score of 88. Similar patterns are observed for other f-score values. Second: Average number of nested structures of degree K as a function of K for the smallest sample required for achieving f-score of 88. Results for each of the methods are normalized by the average number of nested structures of degree K in the smallest randomly selected sample required for achieving f-score of 88. The sentences in CMM and CBS samples are not more complex than sentences in a randomly selected sample. In TE samples sentences are more complex. Third: Average number of constituents (AC) for the smallest sample of each of the methods that is required for achieving a given f-score. CMM and CBS samples contain sentences with a smaller number of constituents. Fourth: AC values for the samples created by the methods (normalized by AC values of a randomly selected sample). The sentences in TE samples, but not in CMM and CBS samples, are more complex than sentences in a randomly selected sample.", "publication_ref": ["b7", "b16", "b21", "b10"], "figure_ref": ["fig_2"], "table_ref": []}, {"heading": "Results", "text": "Experimental setup. We used Bikel's reimplementation of Collins' parsing model 2 (Bikel, 2004). Sections 02-21 and 23 of the WSJ were stripped from their annotation. Sections 2-21 (39832 sentences, about 800K constituents) were used for training, Section 23 (2416 sentences) for testing. No development set was used. We used the gold standard POS tags in two cases: in the test section (23) in all experiments, and in Sections 02-21 in the CBS method when these sections are to be parsed in the process of vector creation. In active learning methods the unlabelled pool is parsed in each iteration and thus should be tagged with POS tags. Hwa (2004) (to whom we compare our results) used the gold standard POS tags for the same sections in her work 6 . We implemented a random baseline 6 Personal communication with Hwa. Collins' parser uses an where sentences are uniformly selected from the unlabelled pool for annotation. For reliability we repeated each experiment with the algorithms and the random baseline 10 times, each time with different random selections (M sentences for creating syntactic tagging and k-means initialization for CBS, sentence order in CMM), and averaged the results.\nEach experiment contained 38 runs. In each run a different desired sample size was selected, from 1700 onwards, in steps of 1000. Parsing performance is measured in terms of f-score Results. We compare the performance of our CBS and CMM algorithms to the TE method (Hwa, 2004) 7 , which is the only sample selection work adinput POS tag only if it cannot tag its word using the statistics learned from the training set. 7 Hwa has kindly sent us the samples selected by her TE. We evaluated these samples with TC and the new measures. The TC of the minimal sample she sent us needed for achieving f-score dressing our experimental setup. Unless otherwise stated, we report the reduction in annotation cost: 100 \u2212 100 \u00d7 (measure method /measure random ).\nCMM results are very similar for t \u2208 {2, 3, . . . , 14}, and presented for t = 8.\nTable 1 presents reduction in annotation cost in TC terms. CBS achieves greater reduction for f = 86, 87.5, TE for f = 86.5, 87, 88. For f = 88, TE and CMM performance are almost similar. Examining the f-score vs. TC sample size over the whole constituents range (not shown due to space constraints) reveals that CBS, CMM and TE outperform random selection over the whole range. CBS and TE performance are quite similar with TE being better in the ranges of 170-300K and 520-650K constituents (42% of the 620K constituents compared) and CBS being better in the ranges of 130-170K and 300-520K constituents (44% of the range). CMM performance is worse than CBS and TE until 540K constituents. From 650K constituents on, where the parser achieves its best performance, the performance of CMM and TE methods are similar, outperforming CBS.\nTable 2 shows the annotation cost reduction in ANSK and TNSK terms. TE achieves remarkable reduction in the total number of relatively shallow structures (TNSK K = 1-6). Our methods, in contrast, achieve remarkable reduction in the number of deep structures (TNSK K = 7-22) 8 . This is true for all f-score values. Moreover, the average number of nested structures per sentence, for every degree K (ANSK for every K) in TE sentences is much higher than in sentences of a randomly selected sample. In samples selected by our methods, the ANSK values are very close to the ANSK values of randomly selected samples. Thus, sentences in TE samples are much more complex than in CBS and CMM samples.\nThe two leftmost graphs in Figure 3 demonstrate (for the minimal samples required for f-score of 88) that these reductions hold for each K value (ANSK) and for each K \u2208 [7, 22] (TNSK) not just on the avof 88 is different from the number reported in (Hwa, 2004). We compare our TC results with the TC result in the sample sent us by Hwa. 8 We present results where the border between shallow and deep structures is set to be K border = 6. For every K border \u2208 {7, 8, . . . , 22} TNSK reductions with CBS and CMM are much more impressive than with TE for structures whose degree is K \u2208 [K border , 22]. erage over these K values. We observed similar results for other f-score values.\nThe two rightmost graphs of Figure 3 demonstrates AC results. The left of them shows that for every f-score value, the AC measure of the minimal TE sample required to achieve that f-score is higher than the AC value of PBS samples (which are very similar to the AC values of randomly selected samples). The right graph demonstrates that for every sample size, the AC value of TE samples is higher than that of PBS samples.\nAll AL based previous work (including TE) is iterative. In each iteration thousands of sentences are parsed, while PBS algorithms perform a single iteration. Consequently, PBS computational complexity is dramatically lower. Empirically, using a Pentium 4 2.4GHz machine, CMM requires about an hour and CBS about 16.5 hours, while the TE parsing steps alone take 662 hours (27.58 days).", "publication_ref": ["b11", "b11"], "figure_ref": ["fig_4", "fig_4"], "table_ref": ["tab_1", "tab_3"]}, {"heading": "Discussion and Future Work", "text": "We introduced novel evaluation measures: AC, TNSK and ANSK for the task of sample selection for statistical parsers. Based on the psycholinguistic literature we argue that these measures reflect aspects of the cognitive efforts of the human annotator that are not reflected by the traditional TC measure. We introduced the parameter based sample selection (PBS) approach and its CMM and CBS algorithms that do not deliberately select difficult sentences. Therefore, our intuition was that they should select a sample that leads to an accurate parameter estimation but does not contain a high number of complex structures. We demonstrated that CMM and CBS achieve results that are similar to the state of the art TE method in TC terms and outperform it when the cognitively driven measures are considered.\nThe measures we suggest do not provide a full and accurate description of human annotator efforts. In future work we intend to extend and refine our measures and to revise our algorithms accordingly.\nWe also intend to design stopping criteria for the PBS methods. These are criteria that decide when the selected sample suffices for the parser best performance and further annotation is not needed.", "publication_ref": [], "figure_ref": [], "table_ref": []}], "references": [{"ref_id": "b0", "title": "Memory requirements and local ambiguities of parsing strategies", "journal": "Psycholinguistic Research", "year": "1991", "authors": "Steven Abney; Mark Johnson"}, {"ref_id": "b1", "title": "Intricacies of Collins' parsing model", "journal": "Computational Linguistics", "year": "2004", "authors": "M Daniel;  Biken"}, {"ref_id": "b2", "title": "Active learning and the total cost of annotation", "journal": "", "year": "2004", "authors": "Jason Baldridge; Miles Osborne"}, {"ref_id": "b3", "title": "A two-stage method for active learning of statistical grammars", "journal": "", "year": "2005", "authors": "Markus Becker; Miles Osborne"}, {"ref_id": "b4", "title": "Active learning -an explicit treatment of unreliable parameters", "journal": "", "year": "2008", "authors": "Markus Becker"}, {"ref_id": "b5", "title": "Finitary models of language users", "journal": "John Wiley", "year": "1963", "authors": "Noam Chomsky; George A Miller"}, {"ref_id": "b6", "title": "Improving generalization with active learning", "journal": "", "year": "1994", "authors": "David Cohn; Les Atlas; Richard E Ladner"}, {"ref_id": "b7", "title": "Head-driven statistical models for natural language parsing", "journal": "", "year": "1999", "authors": "Michael Collins"}, {"ref_id": "b8", "title": "A computational theory of human linguistic processing: memory limitations and processing breakdowns", "journal": "", "year": "1991", "authors": "Edward Gibson"}, {"ref_id": "b9", "title": "Linguistic complexity: locality of syntactic dependencies", "journal": "Cognition", "year": "1998", "authors": "Edward Gibson"}, {"ref_id": "b10", "title": "Approximation algorithms for NP-hard problems", "journal": "PWS Publishing", "year": "1997", "authors": "Dorit Hochbaum"}, {"ref_id": "b11", "title": "Sample selection for statistical parsing", "journal": "Computational Linguistics", "year": "2004", "authors": "Rebecca Hwa"}, {"ref_id": "b12", "title": "Scaling question answering to the Web", "journal": "", "year": "2001", "authors": "Cody Kwok; Oren Etzioni; Daniel S Weld"}, {"ref_id": "b13", "title": "", "journal": "", "year": "2005", "authors": "Matthew Lease; Eugene Charniak"}, {"ref_id": "b14", "title": "Spoken word production: A theory of lexical access", "journal": "PNAS", "year": "2001", "authors": "J M Willem;  Levelt"}, {"ref_id": "b15", "title": "Computational principles of working memory in sentence comprehension", "journal": "Trends in Cognitive Science", "year": "2006-10", "authors": "Richard L Lewis; Shravan Vasishth; Julie Van Dyke"}, {"ref_id": "b16", "title": "Information theory, inference and learning algorithms", "journal": "Cambridge University Press", "year": "2002", "authors": "David Mackay"}, {"ref_id": "b17", "title": "Mechanisms of language acquisition", "journal": "Lawrence Erlbaum", "year": "1982", "authors": "Brian Macwhinney"}, {"ref_id": "b18", "title": "SPMT: Statistical machine translation with syntactified target language phrases", "journal": "", "year": "2006", "authors": "Daniel Marcu; Wei Wang; Abdessamabad Echihabi; Kevin Knight"}, {"ref_id": "b19", "title": "An expected utility approach to active feature-value acquisition", "journal": "", "year": "2005", "authors": "P Melville; M Saar-Tsechansky; F Provost; R J Mooney"}, {"ref_id": "b20", "title": "Building a large annotated corpus of English: The Penn treebank", "journal": "Computational Linguistics", "year": "1994", "authors": "Mitchell P Marcus; Beatrice Santorini; Mary Ann Marcinkiewicz"}, {"ref_id": "b21", "title": "An examination of procedures for determining the number of clusters in a data set", "journal": "Psychometrika", "year": "1985", "authors": "G W Milligan; M Cooper"}, {"ref_id": "b22", "title": "Rule writing or annotation: cost-efficient resource usage for base noun phrase chunking", "journal": "", "year": "2000", "authors": "Grace Ngai; David Yarowski"}, {"ref_id": "b23", "title": "Multi-task active learning for linguistic annotations", "journal": "", "year": "2008", "authors": "Roi Reichart; Katrin Tomanek"}, {"ref_id": "b24", "title": "Syntactic complexity measures for detecting mild cognitive impairment", "journal": "BioNLP workshop", "year": "2007", "authors": "Brian Roark; Margaret Mitchell; Kristy Hollingshead"}, {"ref_id": "b25", "title": "Active learning for statistical natural language parsing", "journal": "", "year": "2002", "authors": "Min Tang; Xiaoqiang Luo; Salim Roukos"}, {"ref_id": "b26", "title": "An approach to text corpus construction which cuts annotation costs and maintains reusability of annotated data", "journal": "", "year": "2007", "authors": "Katrin Tomanek; Joachim Wermtre; Udo Hahn"}, {"ref_id": "b27", "title": "Joint learning improves semantic role labeling", "journal": "", "year": "2005", "authors": "Kristina Toutanova; Aria Haghighi; Christopher D Manning"}, {"ref_id": "b28", "title": "Active learning with sampling by uncertainty and density for word sense disambiguation and text classification", "journal": "", "year": "2008", "authors": "Jingbo Zhu; Huizhen Wang; Tianshun Yao; Benjamin K Tsou"}], "figures": [{"figure_label": "1", "figure_type": "figure", "figure_id": "fig_0", "figure_caption": "Figure 1 :1Figure 1: An example parse tree.", "figure_data": ""}, {"figure_label": "2", "figure_type": "figure", "figure_id": "fig_2", "figure_caption": "Figure 2 :2Figure2: Number of t-words for t = 5 in samples selected by CMM runs with different values of the threshold parameter t and in a randomly selected sample. CMM with t = 5 is significantly higher. All the lines except for the line for t = 5 are unified. For clarity, we do not show all t values: their curves are also similar to the t = 5 lines.", "figure_data": ""}, {"figure_label": "3", "figure_type": "figure", "figure_id": "fig_4", "figure_caption": "Figure 3 :3Figure 3: Left to right: First: The difference between the number of nested structures of degree K of CMM and TE and of CBS and TE.The curves are unified. The 0 curve is given for reference. Samples selected by CMM and CBS have more nested structures of degrees 1-6 and less nested structures of degrees 7-22. Results are presented for the smallest samples required for achieving f-score of 88. Similar patterns are observed for other f-score values. Second: Average number of nested structures of degree K as a function of K for the smallest sample required for achieving f-score of 88. Results for each of the methods are normalized by the average number of nested structures of degree K in the smallest randomly selected sample required for achieving f-score of 88. The sentences in CMM and CBS samples are not more complex than sentences in a randomly selected sample. In TE samples sentences are more complex. Third: Average number of constituents (AC) for the smallest sample of each of the methods that is required for achieving a given f-score. CMM and CBS samples contain sentences with a smaller number of constituents. Fourth: AC values for the samples created by the methods (normalized by AC values of a randomly selected sample). The sentences in TE samples, but not in CMM and CBS samples, are more complex than sentences in a randomly selected sample.", "figure_data": ""}, {"figure_label": "1", "figure_type": "table", "figure_id": "tab_1", "figure_caption": "Reduction in annotation cost in TC terms compared to the random baseline for tree entropy (TE), syntactic clustering (CBS) and CMM.", "figure_data": ""}, {"figure_label": "2", "figure_type": "table", "figure_id": "tab_3", "figure_caption": "Annotation cost reduction in TNSK and ANSK compared to the random baseline for tree entropy (TE), syntactic clustering (CBS) and CMM.", "figure_data": ""}], "formulas": [{"formula_id": "formula_0", "formula_text": "p(t, s) = P (S 1 \u2192 S 2 . . . Sn) = P (S 1 )\u2022. . .\u2022P (Sn|\u03c6(S 1 . . . Sn))(1)", "formula_coordinates": [4.0, 313.2, 319.98, 226.8, 17.54]}, {"formula_id": "formula_1", "formula_text": "c\u2208t(s) i F i (Q(c) == i) \u2022 L(c) (2)", "formula_coordinates": [5.0, 129.12, 98.82, 169.68, 19.83]}, {"formula_id": "formula_2", "formula_text": "k i = D |C i | j |C j | ,", "formula_coordinates": [5.0, 111.81, 618.91, 72.95, 23.98]}], "doi": ""}