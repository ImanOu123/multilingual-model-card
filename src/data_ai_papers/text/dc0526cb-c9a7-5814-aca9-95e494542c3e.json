{"title": "Portioning Using Ordinal Preferences: Fairness and Efficiency", "authors": "St\u00e9phane Airiau; Haris Aziz; Ioannis Caragiannis; Justin Kruger; J\u00e9r\u00f4me Lang; Dominik Peters; Unsw Sydney; Data61 Csiro", "pub_date": "", "abstract": "A public divisible resource is to be divided among projects. We study rules that decide on a distribution of the budget when voters have ordinal preference rankings over projects. Examples of such portioning problems are participatory budgeting, time shares, and parliament elections. We introduce a family of rules for portioning, inspired by positional scoring rules. Rules in this family are given by a scoring vector (such as plurality or Borda) associating a positive value with each rank in a vote, and an aggregation function such as leximin or the Nash product. Our family contains well-studied rules, but most are new. We discuss computational and normative properties of our rules. We focus on fairness, and introduce the SD-core, a group fairness notion. Our Nash rules are in the SD-core, and the leximin rules satisfy individual fairness properties. Both are Pareto-efficient.", "sections": [{"heading": "Introduction", "text": "The members of an organization need to divide its budget among several projects. They have different opinions about the relative value of different projects, and would like to vote over the budget. What kind of voting rule could they use? Some cities let citizens vote over the use of the city budget, giving rise to participatory budgeting. In deployed applications (such as in Paris or Brazil), the projects are indivisible, and can be either fully funded or not at all, such as refurbishing a school or adding a bike lane. We focus on divisible projects on which an arbitrary fraction of the budget could be spent, such as 'education' or 'transport' or 'parks'. The result of the vote can be visualized as a pie chart showing which percentage of the budget is spent on each type of expense. The 'budget' need not be monetary, and we refer to this general scheme as portioning. There are many applications: \u2022 A conference board deciding how much time to assign to talks, poster sessions, invited talks, and coffee breaks. \u2022 A parliamentary election deciding what percentage of parliament seats should go to each party. \u2022 Coauthors deciding how much space to devote to various topics in a textbook or article with fixed total length. \u2022 A company annually donates money to charity, and lets employees vote over which charities should receive a donation.\nWe ask voters to report their preferences over projects as rankings, the most common format considered in social choice. If a project is ranked more highly, the voter thinks it is more worthwhile and should receive a larger fraction of the budget. The space of sensible aggregation rules is large, so let us illustrate some important design considerations by an example.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "An Example", "text": "A family is planning a road trip by car. The family members have different musical tastes; they need to decide which type of music to play for how long. One simple way to split the time is to allocate each person the same share of time (20%) and let them decide what music to play, as a temporary dictator. During their time, each person plays their favorite music. To the social choice theorist, this rule sounds familiar: it is formally identical to Random Dictatorship, whose output is usually seen not as a division of a budget, but as a probability distribution. Indeed, any probabilistic social choice function can be repurposed to divide budgets; but these are often not attractive for portioning since many of them were designed as tie-breaking devices.\na 30% b 24% c 24% d 10% e 12%\nThe output of random dictatorship can be a good choice, especially if our family strongly prefers their top choice to any other music. But it is also plausible that mother and the children agree that b is good common ground. Random Dictatorship, using plurality scores, ignores this. Instead, we could impute Borda scores on our family: for example, the children give 4 'utility' points to a, 3 to b, 2 to c, 1 to d, and 0 to e. Proportional Borda then allocates time in proportion to the total Borda score of the genres. This leads to a significant time share for b. On the other hand, the family now also listens to d, which is dominated: everyone agrees that c is better than d! So Proportional Borda is inefficient.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "a 100%", "text": "To restore efficiency, it makes sense to maximize a notion of social welfare. Suppose the utility enjoyed by a family member is the weighted average of the Borda scores of the music played on the trip, where the weights come from the fraction of time spent on each genre. Utilitarian Borda then picks the distribution where the sum of utilities is greatest. In our example, we listen to a during 100% of the time. While this is Pareto-efficient, it is unfair to mother, who only gets to listen to her least-preferred style. In fact, many rules suffer from this phenomenon of completely overriding some voters' preferences: For example, the 'maximal lotteries' rule also only plays a since it is the Condorcet winner.\nb 40% c 60%\nTo avoid frustration during the trip, we may take a more egalitarian approach, and aim to give every family member a significant share. Borda-Egalitarian picks the distribution maximizing the utility of the worst-off passenger. In our example, we can give every passenger an average Borda-utility of 2.4. To ensure Pareto-efficiency, we can refine this to Borda-Leximin (which does not change the outcome on this example).\na 46% b 29% c 26%\nWe can also maximize Nash social welfare, the product of utilities. This is often seen as a compromise between maximizing utilitarian and egalitarian welfare notions. While egalitarian rules perform well when we wish to be fair to each individual, Nash rules tend to be fair to groups. In our example, the children form a large group, and Borda-Nash plays a almost half the time. If there were more children with the same preferences in the car, Borda-Nash would increase the time share of a. In contrast, Borda-Leximin avoids playing a to benefit the mother, and the output of egalitarian rules does not change with the number of children. Depending on the context, either of these behaviors might be more appropriate.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Our Contributions", "text": "We introduce a class of aggregation rules called positional social decision schemes. Rules in this class first convert each input ranking into scores for the alternatives, using a scheme such as plurality or Borda scores. Then, they select a distribution of the budget maximizing social welfare given those scores, where different notions of welfare can be used; classically, we consider utilitarian, egalitarian (leximin), and Nash welfare. Our class contains known rules such as random dictatorship, but most have not been studied.\nWe begin by noting basic properties of the rules in our class, giving closed forms and equivalent definitions in some cases. We also show that the rules in this class can be calculated or approximated in polynomial time. For rules based on Nash welfare, we show that their output can involve irrational percentages; we prove that those rules are guaranteed to be rational if the scoring vector used is plurality or veto, but that no other scoring vector guarantees rational output.\nWe then formalize intuitive notions of fairness in the budgeting context. The axioms we propose require that no individual is ignored by the procedure, in the sense of having none of the budget allocated to favored causes. We also give some group fairness notions. Our strongest axiom is the SD-core which, roughly, requires that a group of \u03b1% of the voters can control what happens with \u03b1% of the budget. We show that the rules in our class based on Nash welfare satisfy the SD-core, while the egalitarian rules satisfy the individual fairness notions.\nWe close by studying the performance of our rules on standard social choice properties, such as Pareto-efficiency, strategyproofness, and monotonicity. Bogomolnaia et al. [2005] introduced the portioning problem, motivated by time-sharing. They assume dichotomous preferences, and agents report a subset of the alternatives (an approval vote), rather than rankings. They study the compatibility of Pareto-efficiency and strategyproofness, with positive results (for example, spending the entire budget on the approval winner satisfies both requirements). However, after adding a fairness axiom, they get an impossibility result. A related impossibility is proved by Duddy [2015]. Aziz et al. [2019] introduce some new rules based on welfare maximization, and introduce new fairness axioms (including a core notion), and a weakened strategyproofness axiom. Brandl et al. [2019] study cases when the budget is owned by the voters. Fain et al. [2016] study portioning in a cardinal model which allows agents to give a full utility function over alternatives (which may also feature decreasing returns). They study the core and connect it to the Lindahl equilibrium from the study of public goods, and prove that a core solution always exists. For a broad class of utility functions, they show that a core solution can be found in polynomial time by solving a suitable convex program. They also use differential privacy to design a mechanism for this setting which satisfies approximate versions of efficiency, truthfulness, and the core.", "publication_ref": ["b3", "b2", "b5"], "figure_ref": [], "table_ref": []}, {"heading": "Related Work", "text": "With rankings as input, this setting has been studied in the formally isomorphic guise of probabilistic social choice [see  for a recent survey]. In this literature, the outcome distribution is interpreted as a random device, which is used to eventually implement a single outcome. This makes notions of fairness and proportionality less relevant, and it is seen as desirable for a rule to randomize as little as possible. For example, the maximal lotteries rule [Kreweras, 1965;Brandl et al., 2016], while attractive according to consistency axioms, spends the entire budget on the Condorcet winner if it exists. This is often undesirable in a budgeting context. On the other hand, results like Gibbard's [1977] random dictatorship theorem are important in the portioning context. Some papers on probabilistic social choice also discuss fairness concerns [see, e.g., Aziz et al., 2018b;Aziz and Stursberg, 2014].\nIn a related setting, projects are indivisible and come with a fixed cost; they can either be fully funded or not at all. This is known as combinatorial public projects [Papadimitriou et al., 2008] in a literature focussing on computational aspects and truthfulness. This setting is also what is often meant by \"participatory budgeting\" [Cabannes, 2004;Benade et al., 2017]. Several recent papers have studied fairness in this setting [Aziz et al., 2018a;Fain et al., 2018;, inspired by multi-winner elections, for which fairness and proportionality are well-studied [Aziz et al., 2017;Faliszewski et al., 2017].\nThe literature on cake-cutting and item allocation is mostly unrelated to our work: in those settings, goods are allocated to specific agents for their exclusive use. In our setting, resources are spent on projects which can be enjoyed by all agents. On a technical level, the idea of scoring followed by aggregation has been explored in fair division [Brams and King, 2005;Darmann and Schauer, 2015;Baumeister et al., 2016], and work on group fairness raises related issues [see, e.g., Manurangsi and Suksompong, 2019;Bade and Segal-Halevi, 2018].", "publication_ref": ["b7", "b3", "b7", "b2", "b0", "b7", "b5", "b3", "b1", "b6", "b0", "b6", "b5", "b3", "b7", "b3"], "figure_ref": [], "table_ref": []}, {"heading": "Positional Social Decision Schemes", "text": "Let X = {x 1 , . . . , x m } be a set of alternatives and N = {1, . . . , n} be a set of voters. Let L(X) be the set of linear orders over X. For \u2208 L(X), the rank of alternative x j is r( , x j ) = 1 + |{x i \u2208 X : x i x j }|. A profile P = ( 1 , . . . , n ) \u2208 L(X) n is a collection of linear orders, one for each voter. We write abc as shorthand for a b c. Let \u2206(X) = {p : X \u2192 [0, 1] :\nx\u2208X p x = 1} be the set of (probability) distributions over X. We use notation like 1 2 x 1 + 1 2 x 2 to specify a distribution, and write x j for the distribution with p xj = 1. We say that z :\nX \u2192 [0, 1] is a partial distribution if x\u2208X z x 1.\nA social decision scheme (SDS) is a function F assigning to each P \u2208 L(X) n a nonempty subset of \u2206(X), usually a singleton.\nA scoring vector for m alternatives is a vector s = (s 1 , . . . , s m ) of numbers with s 1 s 2 . . . s m and s 1 > s m . We usually assume s m = 0. A scoring vector s is strictly decreasing if s j > s j+1 for all j < m. The Borda vector is bor = (m \u2212 1, m \u2212 2, . . . , 0); the plurality vector is plu = (1, 0, . . . , 0); the veto vector is vet = (1, . . . , 1, 0).\nFor a fixed profile P , we write s[i, j] = s r( i ,xj ) for the s-score that voter i \u2208 N assigns to alternative x j \u2208 X. These scores can be lifted to distributions in a natural way; the s-\nscore of p \u2208 \u2206(X) for i is s[i, p] = m j=1 p j s[i, j]. Finally, define the utility vector s[p] = (s[1, p], . . . , s[n, p]).\nA welfare ordering is a weak order W ordering utility vectors\n(\u03b1 1 , . . . , \u03b1 n ) \u2208 R n 0 .\nThe main examples are utilitarianism which orders vectors by their sum, egalitarianism which uses the minimum, the Nash product which uses multiplication, and leximin which sorts the components of the utility vector and then orders sorted vectors lexicographically.\nBy combining a scoring vector and a welfare ordering, we can define a positional social decision scheme. Definition 1. For scoring vector s and a welfare ordering W , define the social decision scheme F s, W so that for all P ,\nF s, W (P ) = {p \u2208 \u2206(X) : s[p] W s[q] for all q \u2208 \u2206(X)}.\nFor the specific W mentioned, we usually call these rules s-utilitarianism, s-egalitarianism, s-leximin, and s-Nash.\nExample 1. Consider the profile P = (ab, ab, ba) over two alternatives, with s = (1, 0). Then s-utilitarianism selects a, s-egalitarianism selects 1 2 a + 1 2 b, and s-Nash selects 2 3 a + 1 3 b. For normative analysis, it is useful to extend voters' rankings of the alternatives to (partial) preferences over distributions. We assume linear preferences: there is an unknown utility function u i : X \u2192 R consistent with i such that i prefers those distributions p with higher average utility x\u2208X u i (x)p x . A classical way of ranking distributions despite not knowing u i uses stochastic dominance (SD).\nIf p and q are (possibly partial) distributions, we write\np SD i q \u21d0\u21d2 x k i xj p x k x k i xj q x k for all x j \u2208 X.\nThis definition is justified by the following standard equivalence: We have\np SD i q if and only if x\u2208X u i (x)p x\nx\u2208X u i (x)q x for all utility functions u i : X \u2192 R satisfying min x\u2208X u i (x) = 0 and u i (x k ) > u i (x j ) iff x k i x j . The condition that the utility of the worst alternative is 0 is necessary to allow SD-comparisons of partial distributions: we assume that voters are indifferent between not spending part of the budget or spending it on their worst alternative. This is crucial for the definition of the SD-core in Section 4.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Computation and Basic Properties", "text": "In this section, we look at elementary properties of the family of rules we have defined. We will note that several of the rules are familiar from the probabilistic context. We also study the computational complexity of finding an optimal distribution.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Utilitarianism", "text": "From a utilitarian perspective, it never pays to spend part of the budget on alternatives whose total s-score is not maximal: shifting that spending to an s-maximal alternative increases utilitarian welfare. Thus, up to ties, s-utilitarianism never mixes and spends all resources on the s-winner. Formally, sutilitarianism selects those distributions p for which p xj > 0 only if the score i\u2208N s[i, j] is maximum.\nSince the behavior of s-utilitarianism is familiar from work on scoring rules in voting, we will not study it in much detail.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Egalitarianism", "text": "Plurality-egalitarianism is easy to understand: it returns the uniform distribution over all alternatives that are ranked top by at least one voter. In the probabilistic context, this rule is known as egalitarian simultaneous reservation [Aziz and Stursberg, 2014]. For other scoring vectors, s-egalitarianism is less simple, and it need not return a uniform distribution (see the example of Section 1). However, one can easily evaluate s-egalitarianism using linear programming: maximize t * s.t. m j=1 s[i, j] \u2022 p j t * for i \u2208 N m j=1 p j = 1, and p j 0 for x j \u2208 X Now, s-egalitarianism is not very decisive, and may select Pareto-inferior outcomes. When P = (abcd, acbd, bdac), and s = (1, 1, 0, 0), it selects all distributions of the form\np \u2022 a + q \u2022 b + ( 1 2 \u2212 p) \u2022 c + ( 1 2 \u2212 q) \u2022 d where 0 p, q 1 and 1 2 p + q 1.\nNote that d can get a positive fraction even though every voter prefers b to d (so that d is Pareto-dominated). A standard way of making egalitarianism more decisive and more efficient is by using leximin instead. In the above example, s-leximin uniquely selects 1 2 a + 1 2 b. It is easy to see that s-leximin will never give a positive fraction to a Pareto-dominated alternative.\nIt is still possible to evaluate s-leximin in polynomial time, by solving O(n 2 ) linear programs successively. Our algorithm uses the convexity of \u2206(X), which allows it to greedily fix the identity of the agent who is worst-off in the current iteration. Theorem 1. For every s, one can compute a distribution selected by s-leximin in polynomial time.\nProof. The algorithm is specified as Algorithm 1 that requires running at most n(n + 1)/2 linear programs.\nRelabel the voters in N as i 1 , . . . , i n in the order that they were added to N by the algorithm. We argue by induction on k that every distribution p selected by s-leximin satisfies Algorithm 1 Computing an s-leximin distribution Set N \u2190 \u2205. For i \u2208 N , we will set ti once i is added to N . while N = N do Using linear programming, find the maximum value t * such that there exists a distribution (p1, . . . , pm) satisfying\nm j=1 s[i, j]pj t * for i \u2208 N \\ N m j=1 s[i, j]pj = ti for i \u2208 N for each i \u2208 N \\ N do\nUsing linear programming, find the maximum \u03b5 such that there exists a distribution (p1, . . . , pm) satisfying\nm j=1 s[i , j]pj t * + \u03b5 m j=1 s[i, j]pj t * for i \u2208 N \\ N m j=1 s[i, j]pj = ti for i \u2208 N\nIf \u03b5 = 0, add i to N and set t i \u2190 t * . return the solution (p1, . . . , pm) of the last LP solved m j=1 s[i k , j]p j = t i k . Suppose k 1, and we have shown this holds for i 1 , . . . , i k\u22121 . Let p be a distribution selected by s-leximin. In the iteration before i k is added to N , because p satisfies the inductive hypothesis, from the upper LP, we know that the least s-score obtained by a voter in N \\ N under p is t * . But which voter? The lower LP tests, for each i \u2208 N \\ N , whether i obtains s-score exactly t * in all leximin distributions. Such a voter must exist: suppose not, and for each i \u2208 N \\ N , let p (i ) be a leximin distribution where i obtains s-score strictly higher than t * . Write\np = i \u2208N \\N 1 |N \\N | p (i ) .\nThen p satisfies the inductive hypothesis (because each p (i ) does), but the least s-score obtained by a voter in N \\ N under p is strictly higher than t * , contradicting the choice of t * . Thus, there is a voter i * \u2208 N \\N who obtains s-score t * in all leximin distributions. This voter is named i k and t i k is set to t * , establishing the inductive step.", "publication_ref": ["b0"], "figure_ref": [], "table_ref": []}, {"heading": "Nash product", "text": "The defining optimization problem\nmaximize i\u2208N log m j=1 s[i, j] \u2022 p j s.t.\nm j=1 p j = 1, and p j 0 for x j \u2208 X of s-Nash is a convex program which can be efficiently solved using standard solvers. Formally, one can approximate optimum Nash welfare within an additive factor of \u03b5 in time polynomial in n, m, and 1/\u03b5. Thus, all the usual decision problems associated with computing s-Nash are easy. However, writing down the precise output in decimal expansion is impossible, as there are instances where s-Nash uniquely returns a distribution with irrational fractions. For instance, for P = (abc, acb, cab, cab) and s = (2, 1, 0), s-Nash uniquely returns 1+ \nL = i\u2208N log m j=1 s[i, j] \u2022 p j \u2212 \u03bb \u2022 (1 \u2212 m j=1 p j ).\nAt an optimal solution p, we have\n\u2202L \u2202pj = i\u2208N s[i,j] s[i,p] \u2212 \u03bb 0, with equality if p j > 0. This implies \u03bbp j = i\u2208N s[i,j] s[i,p] p j . Summing over all j, thus \u03bb = \u03bb(p 1 + \u2022 \u2022 \u2022 + p m ) = m j=1 i\u2208N s[i,j] s[i,p] p j = n, since s[i, p] = m j=1 s[i, j] \u2022 p j by definition. It follows that n i\u2208N s[i,j] s[i,p]\n, with equality if p j > 0.\n(1)\nFor example, using (1), we can characterize plurality-Nash [see also Moulin, 2003, Example 3.6]: Theorem 2. Plurality-Nash selects p with p j = pl(x j )/n for all j, where pl(x j ) is the number of voters placing x j top.\nProof. Let p be optimal for plurality-Nash. If some voter i puts x j top then p j > 0, or else s[i, p] = 0 and the Nash product equals 0. By (1), we get n = i\u2208N s[i,j] s[i,p] = pl(x j )/p j , and so p j = pl(x j )/n. It follows that p j = 0 whenever no voter places x j top.\nThus, we see that plurality-Nash is the same rule as random dictatorship, familiar from the probabilistic context.\nThe veto-Nash rule seems sensible when alternatives are nuisances, where each agent wants to minimize the amount spent on the worst option. In some sense, veto-Nash for nuisances is as relevant as plurality-Nash for goods, in the portioning context. Mathematically, veto-Nash is also well-behaved. While we do not provide a closed formula, the following result shows that an exact optimum for veto-Nash can be found in polynomial time (and that it is rational). It gives a collection of at most m different explicit rational distributions, and guarantees that the veto-Nash optimum is among them. Theorem 3. Let P be a profile, and let vt(x j ) be the number of voters placing x j bottom. Relabel alternatives so that vt(x 1 )\n\u2022 \u2022 \u2022 vt(x m ). If vt(x j ) = 0 for some x j , veto-Nash selects all distributions over such alternatives. Otherwise, there is k \u2208 [m] with (k \u2212 1)vt(x k ) < k j=1 vt(x j ), such that veto-Nash selects the distribution p with\np j = 1 \u2212 (k\u22121)vt(xj ) k l=1 vt(x l ) if j \u2208 [k]\n, and p j = 0 otherwise. Proof. If vt(x j ) = 0 for some x j , then the best-possible Nash product of 1 can be achieved, and is achieved precisely by distributions whose support consists of never-vetoed alternatives. Now suppose that vt(x j ) > 0 for all x j . Let p be a distribution selected by veto-Nash, and take k maximal such that p k > 0. Then we must also have p j > 0 for all j = 1, . . . , k \u2212 1. (If not, and p j = 0 for some j, consider the distribution q with q l = p l for all l, except that q j = q k = 1 2 p k . Then, since vt(x j ) vt(x k ), q has strictly higher Nash product than p, contradiction.) Thus, for i = 1, . . . , k, equation (1) applies and can be written as\nn = j\u2208[k]\\{i} vt(xj ) 1\u2212pj + m j=k+1 vt(x j ).\n(\n)2\nSumming the equations (2) for i = 1, . . . , k, we get\nnk = (k \u2212 1) j\u2208[k] vt(x j ) 1 \u2212 p j + k m j=k+1 vt(x j ).\nProceedings of the Twenty-Eighth International Joint Conference on Artificial Intelligence (IJCAI-19)\nUsing n = k j=1 vt(x j ) + m j=k+1 vt(x j ), rearrange this as\nj\u2208[k] vt(x j ) 1 \u2212 p j = k k \u2212 1 k j=1 vt(x j ).\nFrom the symmetry of the equations (2), the values vt(xi) 1\u2212pi must be equal for all i \u2208 [k]. Since we know their sum, we get\nvt(x i ) 1 \u2212 p i = 1 k \u2212 1 k j=1 vt(x j ) for all i \u2208 [k].\nRearranging, we arrive at the conclusion that\np i = 1 \u2212 k\u22121 k j=1 vt(xj ) vt(x i ) for all i \u2208 [k]\n. These values sum to 1, and are non-negative provided that (k\u2212 1)vt(x k ) < k j=1 vt(x j ). If this condition is not satisfied, the choice of k cannot lead to a veto-Nash optimum.\nThis gives an algorithm for computing veto-Nash exactly: if some alternatives are never vetoed, return any distribution over these. Otherwise iterate over all k \u2208 [m] satisfying the condition of the theorem and calculate the corresponding distribution, and return the one with highest Nash product. Example 2. If 2, 3, 3 and 5 voters rank x 1 , x 2 , x 3 and x 4 last, respectively, then k = 2 and 3 satisfy the condition of Thm. 3. Thus, either p = 3 5\nx 1 + 2 5 x 2 or p = 1 2 x 1 + 1 4 x 2 + 1 4\nx 3 is optimal. The former has higher Nash product, so p is optimal.\nTheorems 2 and 3 show that both plurality-Nash and veto-Nash are rational. Are there any other score vectors s such that s-Nash is guaranteed to be rational? The answer is no: for every s other than plurality and veto, we can construct a profile where s-Nash uniquely returns an irrational distribution. This result suggests that a convex programming solver is the best way of computing s-Nash for s other than plurality and veto. Theorem 4. Let m 3, and let s = (s 1 , . . . , s m ) \u2208 Q m be a score vector with s m = 0 and normalized so that s 1 = 1. Unless s = (1, 0, . . . , 0) or s = (1, . . . , 1, 0), there exists a profile P \u2208 L(X) n for some n \u2208 N such that s-Nash returns a unique distribution p with p \u2208 Q m . Proof. We construct four infinite families of examples, for different shapes of score vectors s. Due to space constraints, we only consider the case m = 3 here, and only sketch the algebra required. The other families require a more involved construction, but work using similar calculus.\nSuppose m = 3, and let s = (1, r s , 0), where 0 < r s < 1 and r s is in lowest terms. Let c be a large-enough integer. Consider the following profile: c voters with abc, one voter bac, one voter with bca. Note that b Pareto-dominates c, so that p c = 0. Let (x, 1 \u2212 x, 0) be the distribution selected by s-Nash. One can show that 0 < x < 1 if c is large enough. Now, the Nash product obtained by this distribution is\n(x + r s (1 \u2212 x)) c \u2022 ((1 \u2212 x) + r s x) \u2022 (1 \u2212 x)\n. By optimality, x must make the derivative d/dx vanish. After a calculation, cancelling non-zero factors, this implies that\n((c + 2)(r \u2212 s) 2 ) \u2022 x 2 + (\u2212(r \u2212 s)((c + 3)r \u2212 2(c + 1)s)) \u2022 x + (r 2 \u2212 2rs \u2212 crs + cs 2 ) = 0\nThis is a quadratic equation with integer coefficients. Solutions to the equation ax 2 + bx + c = 0 involve the term \u221a b 2 \u2212 4ac; thus, they are rational if and only if b 2 \u22124ac is a perfect square. In our case, the term under the square root simplifies to (c + 1) 2 r 2 + 4(rs + s 2 ).\nThe first summand is a large perfect square, and the second summand is a constant. Since the distance between consecutive perfect squares is large (in the sense that (z + 1) 2 \u2212 z 2 = 2z + 1 = \u0398(z)), the discriminant cannot be a perfect square for large enough c. Hence, x is irrational.\n4 Fairness, Proportionality, and the SD-core Usually, s-utilitarianism spends 100% on a single alternative. Some agents might rank this alternative in a very low position, or even in last place. In some contexts, this is unfair and might rule out s-utilitarianism. In this section, we formalize several notions of fairness, and show that s-egalitarianism satisfies individual fairness, and that s-Nash satisfies group fairness.\nA minimal fairness axiom is positive share [adapted from Bogomolnaia et al., 2005] which requires that if voter i ranks x in last position, then p x < 1. Hence, for every voter, a positive amount is spent on alternatives not ranked in last position. As suggested above, s-utilitarianism fails positive share for any s. However, provided that s m = 0, positive share is satisfied by s-egalitarianism, s-leximin, and s-Nash. To see this, note that the uniform distribution has positive egalitarian and Nash welfare, whereas a distribution violating positive share has zero egalitarian and Nash welfare.\nWe can strengthen positive share to individual fair share, requiring that if voter i ranks x in last position, then p x 1 \u2212 1 n . Thus, for each voter, at least 1 n is spent on alternatives not ranked last. Note that the distribution identified by random dictatorship satisfies this condition and has egalitarian welfare at least 1 n , normalizing s 1 = 1. Thus, the optimum s-egalitarian welfare is at least 1 n , and hence s-egalitarianism and s-leximin satisfy individual fair share (recalling that s m = 0). Below, we show that s-Nash also satisfies it.\nConsider X = {a, b}, with 9 voters ab and 1 voter ba. Then s-egalitarianism returns 1 2 a + 1 2 b. While this is individually fair, the group of 9 voters is underrepresented. If we desire fairness to groups, we need a stronger axiom. One option is this: if k out of n voters rank x last, then p x 1 \u2212 k n , so at least k n is spent on alternatives other than x. This condition is failed by s-egalitarianism and s-leximin, but s-Nash satisfies it. In our example, s-Nash picks 9 10 a + 1 10 b. All the notions above focus on avoiding voters' last-ranked alternative. Despite working in an ordinal setting, using the SD-extension, we can define a group fairness notion that uses more than just the last-ranked alternative. An important underlying intuition is that agents are \"entitled\" to 1/n of the budget, and this share should be spent in accordance to their preferences. Similarly, a group S \u2286 N of k agents could pool together and be entitled to k/n of the budget.\nThe intuitive notion of entitlement can be formalized using a core-style concept. A coalition S \u2286 N of voters is supposed to be able to 'control' a fraction of |S|/n of the entire budget. The notion of control is ambiguous since coalitions may overlap and each share of the budget is simultaneously controlled by several coalitions. However, the entitlement of S is certainly violated under p if S can come up with a way of using only its entitlement |S|/n which all members prefer to the way that p uses the entire budget. Definition 2. A coalition S \u2286 N SD-blocks a distribution p if there exists a partial distribution z with x\u2208X z x = |S|/n such that z SD i p for all i \u2208 S, and z SD j p for some j \u2208 S. A distribution p is in the SD-core if no coalition SD-blocks p.\nIf a distribution p lies in the SD-core, then it also satisfies our other properties: Suppose not, and there is a coalition S of voters that rank x last, where p x > 1 \u2212 |S|/n. Then S can SDblock p: Write \u03b5 = p x \u2212(1\u2212|S|/n) > 0 and define a deviation z with z y = p y + \u03b5/(m \u2212 1) for all y \u2208 A \\ {x}, and z x = 0. Then a\u2208A z a = \u03b5 + y\u2208A\\{x} p y = \u03b5 + (1 \u2212 p x ) = |S|/n, so that z has the required total weight. It is easy to check that z SD i p for all i \u2208 S. Thus, p is not in the SD-core. For an example, take the profile with voters abc, acb, bca. Which distributions p are in the SD-core? First, singleton coalitions {i} block p if p x > 2 3 for i's bottom alternative x, using z = 1 3 y where y is i's top alternative. The coalition of abc and acb blocks all p with p a +p b 2 3 and p a +p c 2 3 (one inequality strict), using z = 2 3 a. All other distributions are in the SD-core. Figure 1 shows the simplex of all distributions, with the SD-core shaded (non-convex in this example).\nFigure 1 shows the outputs of s-Nash for all s as a blue line. The blue line is entirely contained in the SD-core. In fact, s-Nash is always in the SD-core. We give a direct argument using equation (1). The result can also be obtained via the theory of Lindahl equilibrium [Fain et al., 2016;Foley, 1970]. Theorem 5. For any s with s m = 0, any distribution selected by s-Nash is in the SD-core.\nProof. Suppose p is selected by s-Nash. For a contradiction, assume that S \u2286 N is a blocking coalition of agents, deviating using (z 1 , . . . , z m ) \u2208 [0, 1] m with m j=1 z j = |S|/n, such that z SD i p for all i \u2208 S, and z SD j p for some j \u2208 S. Now, s defines utilities compatible with the voters' ordinal preferences, and thus s[i, z] s[i, p] for all i \u2208 S, and s[j, z] > s[j, p] for some j \u2208 S. Then\n|S| = n \u2022 m j=1 z j (1) i\u2208N m j=1 s[i, j]z j s[i, p] = i\u2208N s[i, z] s[i, p] > |S|.\nThe last inequality follows because the sum contains only nonnegative terms, |S| of which are at least 1, and one of which is strictly larger than 1. This is a contradiction.\nThus, the s-Nash rules are particularly fair to groups. The SD-core can also be seen as a proportionality requirement: the common resource should be divided so that the share of an alternative is proportional to its support. For example, this is of interest in politics, to divide parliament seats among parties.", "publication_ref": ["b3", "b5", "b6"], "figure_ref": ["fig_2", "fig_2"], "table_ref": []}, {"heading": "Axiomatic Properties", "text": "We now briefly study other axiomatic properties of our rules. A more careful treatment appears in the full version; here we ignore ties when defining strategyproofness and monotonicity. Pareto-efficiency. A distribution q SD-dominates p if q SD i p for all i \u2208 N , and q SD j p for some j \u2208 N . A distribution p is SD-efficient if no distribution dominates it. Note that SDcore implies SD-efficiency (with S = N ), and so s-Nash rules are SD-efficient when s m = 0. More generally, one can show that s-utilitarianism, s-leximin, and s-Nash are SD-efficient provided that s is strictly decreasing. Strategyproofness. A social decision scheme is (strongly) SD-strategyproof if, when a voter misreports their ranking, the SDS selects a distribution that the voter believes is weakly SD-worse than the distribution resulting from a truthful report. Plurality-Nash (i.e., random dictatorship) is strategyproof in this sense. A well-known result of Gibbard [1977] shows that this is the only SDS that is strategyproof and also anonymous and Pareto-efficient. Hence, all other SD-efficient rules we have considered are manipulable.\nMonotonicity. An SDS F is monotone if, when we change a profile P into P by moving up an alternative x in a voters' ranking (by swapping), then the share of x weakly increases, i.e., F (P ) x F (P ) x . This is clearly satisfied by s-utilitarianism, and also by plurality-Nash. However, other s-Nash rules (and also s-leximin) may fail it. If s = (2, 1, 0) and P = (abc, abc, abc, acb, bac, cba), then s-Nash selects an irrational distribution which rounds to 0.642a + 0.333b + 0.024c. If the bac voter moves c up one place (to get bca), then s-Nash selects 0.5a + 0.5b. Thus, c's share has strictly decreased. Monotonicity is a kind of fairness to alternatives (x gets more if it performs better), while our rules aim for fairness to voters.", "publication_ref": ["b7"], "figure_ref": [], "table_ref": []}, {"heading": "Conclusions", "text": "We have introduced a class of aggregation rules which can be used to make budget decisions. We have found that our rules are attractive on efficiency and fairness grounds. We have introduced concepts such as the SD-core, a group fairness and proportionality notion, satisfied by Nash-based rules. Egalitarian rules satisfy individual fairness, which may be particularly desirable in small electorates.", "publication_ref": [], "figure_ref": [], "table_ref": []}], "references": [{"ref_id": "b0", "title": "A generalization of probabilistic serial to randomized social choice", "journal": "AAAI Press", "year": "2014", "authors": "Aziz ; Stursberg ; H Aziz; P Stursberg;  Aziz"}, {"ref_id": "b1", "title": "Proportionally representative participatory budgeting: Axioms and algorithms", "journal": "IFAAMAS", "year": "2018", "authors": "Aziz "}, {"ref_id": "b2", "title": "Rank maximal equal contribution: A probabilistic social choice function", "journal": "ACM-EC", "year": "2018", "authors": "Aziz "}, {"ref_id": "b3", "title": "Efficient fair division: Help the worst off or avoid envy?", "journal": "Rationality and Society", "year": "2005", "authors": "; S Segal-Halevi; E Bade; ; Segal-Halevi;  Baumeister"}, {"ref_id": "b4", "title": "Collective choice lotteries: Dealing with randomization in economic design", "journal": "Springer-Verlag", "year": "2018", "authors": "; F Brandt;  Brandt"}, {"ref_id": "b5", "title": "Maximizing Nash product social welfare in allocating indivisible goods", "journal": "", "year": "2004", "authors": "Y Cabannes;  Conitzer"}, {"ref_id": "b6", "title": "Lindahl's solution and the core of an economy with public goods", "journal": "", "year": "1970", "authors": ""}, {"ref_id": "b7", "title": "Knapsack voting: Voting mechanisms for participatory budgeting", "journal": "IEEE", "year": "1960-07-27", "authors": "; A Gibbard;  Gibbard;  Goel"}], "figures": [{"figure_label": "", "figure_type": "figure", "figure_id": "fig_0", "figure_caption": "The genres under consideration are a, b, c, d, e. The three children all think a b c d e; mother thinks e b c d a; and father thinks c", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_1", "figure_caption": "To further understand s-Nash, let us analyze the first-order conditions of the convex program. Write down the Lagrangian", "figure_data": ""}, {"figure_label": "1", "figure_type": "figure", "figure_id": "fig_2", "figure_caption": "Figure 1 :1Figure 1: The SD-core of the profile (abc, acb, bca) within the simplex of all distributions. The shaded area shows the distributions that are in the SD-core. The blue line shows the output of s-Nash for all s = (1, q, 0) with q \u2208 [0, 1]. Plurality-Nash selects 2 3 a + 1 3 b, Borda-Nash selects 0.58a + 0.42b, and veto-Nash selects 1 3 a + 1 3 b + 1 3 c.", "figure_data": ""}], "formulas": [{"formula_id": "formula_0", "formula_text": "a 30% b 24% c 24% d 10% e 12%", "formula_coordinates": [1.0, 324.2, 507.26, 39.67, 38.38]}, {"formula_id": "formula_1", "formula_text": "b 40% c 60%", "formula_coordinates": [2.0, 73.83, 145.22, 17.67, 28.01]}, {"formula_id": "formula_2", "formula_text": "a 46% b 29% c 26%", "formula_coordinates": [2.0, 64.3, 233.58, 31.98, 30.42]}, {"formula_id": "formula_3", "formula_text": "X \u2192 [0, 1] is a partial distribution if x\u2208X z x 1.", "formula_coordinates": [3.0, 54.0, 171.6, 242.99, 20.61]}, {"formula_id": "formula_4", "formula_text": "score of p \u2208 \u2206(X) for i is s[i, p] = m j=1 p j s[i, j]. Finally, define the utility vector s[p] = (s[1, p], . . . , s[n, p]).", "formula_coordinates": [3.0, 54.0, 311.67, 244.24, 24.74]}, {"formula_id": "formula_5", "formula_text": "(\u03b1 1 , . . . , \u03b1 n ) \u2208 R n 0 .", "formula_coordinates": [3.0, 84.46, 348.08, 85.06, 12.51]}, {"formula_id": "formula_6", "formula_text": "F s, W (P ) = {p \u2208 \u2206(X) : s[p] W s[q] for all q \u2208 \u2206(X)}.", "formula_coordinates": [3.0, 54.0, 460.66, 245.0, 10.3]}, {"formula_id": "formula_7", "formula_text": "p SD i q \u21d0\u21d2 x k i xj p x k x k i xj q x k for all x j \u2208 X.", "formula_coordinates": [3.0, 54.0, 638.12, 244.58, 13.67]}, {"formula_id": "formula_8", "formula_text": "p SD i q if and only if x\u2208X u i (x)p x", "formula_coordinates": [3.0, 126.08, 669.87, 158.47, 12.5]}, {"formula_id": "formula_9", "formula_text": "p \u2022 a + q \u2022 b + ( 1 2 \u2212 p) \u2022 c + ( 1 2 \u2212 q) \u2022 d where 0 p, q 1 and 1 2 p + q 1.", "formula_coordinates": [3.0, 314.64, 483.47, 200.13, 26.32]}, {"formula_id": "formula_10", "formula_text": "m j=1 s[i, j]pj t * for i \u2208 N \\ N m j=1 s[i, j]pj = ti for i \u2208 N for each i \u2208 N \\ N do", "formula_coordinates": [4.0, 76.91, 115.46, 177.19, 39.41]}, {"formula_id": "formula_11", "formula_text": "m j=1 s[i , j]pj t * + \u03b5 m j=1 s[i, j]pj t * for i \u2208 N \\ N m j=1 s[i, j]pj = ti for i \u2208 N", "formula_coordinates": [4.0, 123.25, 179.1, 146.44, 36.79]}, {"formula_id": "formula_12", "formula_text": "p = i \u2208N \\N 1 |N \\N | p (i ) .", "formula_coordinates": [4.0, 54.0, 375.87, 115.39, 13.47]}, {"formula_id": "formula_13", "formula_text": "maximize i\u2208N log m j=1 s[i, j] \u2022 p j s.t.", "formula_coordinates": [4.0, 78.29, 504.62, 157.16, 30.4]}, {"formula_id": "formula_14", "formula_text": "L = i\u2208N log m j=1 s[i, j] \u2022 p j \u2212 \u03bb \u2022 (1 \u2212 m j=1 p j ).", "formula_coordinates": [4.0, 60.87, 690.73, 229.25, 14.11]}, {"formula_id": "formula_15", "formula_text": "\u2202L \u2202pj = i\u2208N s[i,j] s[i,p] \u2212 \u03bb 0, with equality if p j > 0. This implies \u03bbp j = i\u2208N s[i,j] s[i,p] p j . Summing over all j, thus \u03bb = \u03bb(p 1 + \u2022 \u2022 \u2022 + p m ) = m j=1 i\u2208N s[i,j] s[i,p] p j = n, since s[i, p] = m j=1 s[i, j] \u2022 p j by definition. It follows that n i\u2208N s[i,j] s[i,p]", "formula_coordinates": [4.0, 314.69, 71.88, 243.25, 93.96]}, {"formula_id": "formula_16", "formula_text": "p j = 1 \u2212 (k\u22121)vt(xj ) k l=1 vt(x l ) if j \u2208 [k]", "formula_coordinates": [4.0, 328.25, 492.49, 122.15, 17.36]}, {"formula_id": "formula_17", "formula_text": "n = j\u2208[k]\\{i} vt(xj ) 1\u2212pj + m j=k+1 vt(x j ).", "formula_coordinates": [4.0, 352.58, 640.5, 167.83, 14.6]}, {"formula_id": "formula_18", "formula_text": ")2", "formula_coordinates": [4.0, 550.26, 643.83, 7.74, 8.64]}, {"formula_id": "formula_19", "formula_text": "nk = (k \u2212 1) j\u2208[k] vt(x j ) 1 \u2212 p j + k m j=k+1 vt(x j ).", "formula_coordinates": [4.0, 346.26, 674.65, 180.47, 30.94]}, {"formula_id": "formula_20", "formula_text": "j\u2208[k] vt(x j ) 1 \u2212 p j = k k \u2212 1 k j=1 vt(x j ).", "formula_coordinates": [5.0, 108.3, 74.68, 134.38, 30.94]}, {"formula_id": "formula_21", "formula_text": "vt(x i ) 1 \u2212 p i = 1 k \u2212 1 k j=1 vt(x j ) for all i \u2208 [k].", "formula_coordinates": [5.0, 88.18, 144.5, 175.83, 30.32]}, {"formula_id": "formula_22", "formula_text": "p i = 1 \u2212 k\u22121 k j=1 vt(xj ) vt(x i ) for all i \u2208 [k]", "formula_coordinates": [5.0, 87.14, 194.49, 173.26, 16.23]}, {"formula_id": "formula_23", "formula_text": "x 1 + 2 5 x 2 or p = 1 2 x 1 + 1 4 x 2 + 1 4", "formula_coordinates": [5.0, 132.83, 337.7, 142.91, 13.47]}, {"formula_id": "formula_24", "formula_text": "(x + r s (1 \u2212 x)) c \u2022 ((1 \u2212 x) + r s x) \u2022 (1 \u2212 x)", "formula_coordinates": [5.0, 63.0, 635.17, 172.34, 12.48]}, {"formula_id": "formula_25", "formula_text": "((c + 2)(r \u2212 s) 2 ) \u2022 x 2 + (\u2212(r \u2212 s)((c + 3)r \u2212 2(c + 1)s)) \u2022 x + (r 2 \u2212 2rs \u2212 crs + cs 2 ) = 0", "formula_coordinates": [5.0, 93.04, 672.96, 164.91, 32.67]}, {"formula_id": "formula_26", "formula_text": "|S| = n \u2022 m j=1 z j (1) i\u2208N m j=1 s[i, j]z j s[i, p] = i\u2208N s[i, z] s[i, p] > |S|.", "formula_coordinates": [6.0, 316.61, 83.97, 239.77, 31.26]}], "doi": ""}