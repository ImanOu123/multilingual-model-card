{"title": "Holistically-Nested Edge Detection", "authors": "Saining Xie; Zhuowen Tu", "pub_date": "2015-10-04", "abstract": "We develop a new edge detection algorithm that addresses two important issues in this long-standing vision problem: (1) holistic image training and prediction; and (2) multi-scale and multi-level feature learning. Our proposed method, holistically-nested edge detection (HED), performs image-to-image prediction by means of a deep learning model that leverages fully convolutional neural networks and deeply-supervised nets. HED automatically learns rich hierarchical representations (guided by deep supervision on side responses) that are important in order to resolve the challenging ambiguity in edge and object boundary detection. We significantly advance the state-of-the-art on the BSD500 dataset (ODS F-score of .782) and the NYU Depth dataset (ODS F-score of .746), and do so with an improved speed (0.4s per image) that is orders of magnitude faster than some recent CNN-based edge detection algorithms.", "sections": [{"heading": "Introduction", "text": "In this paper, we address the problem of detecting edges and object boundaries in natural images. This problem is both fundamental and of great importance to a variety of computer vision areas ranging from traditional tasks such as visual saliency, segmentation, object detection/recognition, tracking and motion analysis, medical imaging, structurefrom-motion and 3D reconstruction, to modern applications like autonomous driving, mobile computing, and image-totext analysis. It has been long understood that precisely localizing edges in natural images involves visual perception of various \"levels\" [18,27]. A relatively comprehensive data collection and cognitive study [28] shows that while different subjects do have somewhat different preferences regarding where to place the edges and boundaries, there was nonetheless impressive consistency between subjects, e.g. reaching F-score 0.80 in the consistency study [28].\nThe history of computational edge detection is extremely rich; we now highlight a few representative works that have proven to be of great practical importance. Broadly speak- (a) shows an example test image in the BSD500 dataset [28]; (b) shows its corresponding edges as annotated by human subjects; (c) displays the HED results. In the second row: (d), (e), and (f), respectively, show side edge responses from layers 2, 3, and 4 of our convolutional neural networks. In the third row: (g), (h), and (i), respectively, show edge responses from the Canny detector [4] at the scales \u03c3 = 2.0, \u03c3 = 4.0, and \u03c3 = 8.0. HED shows a clear advantage in consistency over Canny. ing, one may categorize works into a few groups such as I: early pioneering methods like the Sobel detector [20], zerocrossing [27,37], and the widely adopted Canny detector [4]; methods driven by II: information theory on top of features arrived at through careful manual design, such as Statistical Edges [22], Pb [28], and gPb [1]; and III: learningbased methods that remain reliant on features of human design, such as BEL [5], Multi-scale [30], Sketch Tokens [24], and Structured Edges [6]. In addition, there has been a recent wave of development using Convolutional Neural Networks that emphasize the importance of automatic hierarchical feature learning, including N 4 -Fields [10], Deep-Contour [34], DeepEdge [2], and CSCNN [19]. Prior to this explosive development in deep learning, the Structured Edges method (typically abbreviated SE) [6] emerged as one of the most celebrated systems for edge detection, thanks to its state-of-the-art performance on the BSD500 dataset [28] (with, e.g., F-score of .746) and its practically significant speed of 2.5 frames per second. Recent CNNbased methods [10,34,2,19] have demonstrated promising F-score performance improvements over SE. However, there still remains large room for improvement in these CNN-based methods, in both F-score performance and in speed -at present, time to make a prediction ranges from several seconds [10] to a few hours [2] (even when using modern GPUs).\nHere, we develop an end-to-end edge detection system, holistically-nested edge detection (HED), that automatically learns the type of rich hierarchical features that are crucial if we are to approach the human ability to resolve ambiguity in natural image edge and object boundary detection. We use the term \"holistic\", because HED, despite not explicitly modeling structured output, aims to train and predict edges in an image-to-image fashion. With \"nested\", we emphasize the inherited and progressively refined edge maps produced as side outputs -we intend to show that the path along which each prediction is made is common to each of these edge maps, with successive edge maps being more concise. This integrated learning of hierarchical features is in distinction to previous multi-scale approaches [40,41,30] in which scale-space edge fields are neither automatically learned nor hierarchically connected. Figure 1 gives an illustration of an example image together with the human subject ground truth annotation, as well as results by the proposed HED edge detector (including the side responses of the individual layers), and results by the Canny edge detector [4] with different scale parameters. Not only are Canny edges at different scales not directly connected, they also exhibit spatial shift and inconsistency.\nThe proposed holistically-nested edge detector (HED) tackles two critical issues: (1) holistic image training and prediction, inspired by fully convolutional neural networks [26], for image-to-image classification (the system takes an image as input, and directly produces the edge map image as output); and (2) nested multi-scale feature learning, inspired by deeply-supervised nets [23], that performs deep layer supervision to \"guide\" early classification results. We find that the favorable characteristics of these underlying techniques manifest in HED being both accurate and computationally efficient.", "publication_ref": ["b17", "b26", "b27", "b27", "b27", "b3", "b19", "b26", "b36", "b3", "b21", "b27", "b0", "b4", "b29", "b23", "b5", "b9", "b33", "b1", "b18", "b5", "b27", "b9", "b33", "b1", "b18", "b9", "b1", "b39", "b40", "b29", "b3", "b25", "b22"], "figure_ref": [], "table_ref": []}, {"heading": "Holistically-Nested Edge Detection", "text": "In this section, we describe in detail the formulation of our proposed edge detection system. We start by discussing related neural-network-based approaches, particularly those that emphasize multi-scale and multi-level feature learning. The task of edge and object boundary detection is inherently challenging. After decades of research, there have emerged a number of properties that are key and that are likely to play a role in a successful system: (1) carefully designed and/or learned features [28,5], (2) multi-scale response fusion [40,32,30], (3) engagement of different levels of visual perception [18,27,39,17] such as mid-level Gestalt law information [7], (4) incorporating structural information (intrinsic correlation carried within the input data and output solution) [6] and context (both short-and long-range interactions) [38], (5) making holistic image predictions (referring to approaches that perform prediction by taking the image contents globally and directly) [25], (6) exploiting 3D geometry [15], and (7) addressing occlusion boundaries [16].\nStructured Edges (SE) [6] primarily focuses on three of these aspects: using a large number of manually designed features (property 1), fusing multi-scale responses (property 2), and incorporating structural information (property 4). A recent wave of work using CNN for patch-based edge prediction [10,34,2,19] contains an alternative common thread that focuses on three aspects: automatic feature learning (property 1), multi-scale response fusion (property 2), and possible engagement of different levels of visual perception (property 3). However, due to the lack of deep supervision (that we include in our method), the multiscale responses produced at the hidden layers in [2,19] are less semantically meaningful, since feedback must be back-propagated through the intermediate layers. More importantly, their patch-to-pixel or patch-to-patch strategy results in significantly downgraded training and prediction efficiency. By \"holistically-nested\", we intend to emphasize that we are producing an end-to-end edge detection system, a strategy inspired by fully convolutional neural networks [26], but with additional deep supervision on top of trimmed VGG nets [36] (shown in Figure 3). In the absence of deep supervision and side outputs, a fully convolutional network [26] (FCN) produces a less satisfactory result (e.g. F-score .745 on BSD500) than HED, since edge detection demands highly accurate edge pixel localization. One thing worth mentioning is that our image-to-image training and prediction strategy still has not explicitly engaged contextual information, since constraints on the neighboring pixel labels are not directly enforced in HED. In addition to the speed gain over patch-based CNN edge detection methods, the performance gain is largely due to three aspects: (1) FCN-like image-to-image training allows us to simultaneously train on a significantly larger amount of samples (see Table 4); (2) deep supervision in our model guides the learning of more transparent features (see Table 2); (3) interpolating the side outputs in the end-to-end learning encourages coherent contributions from each layer (see Table 3).", "publication_ref": ["b27", "b4", "b39", "b31", "b29", "b17", "b26", "b38", "b16", "b6", "b5", "b37", "b24", "b14", "b15", "b5", "b9", "b33", "b1", "b18", "b1", "b18", "b25", "b35", "b25", "b1"], "figure_ref": [], "table_ref": ["tab_4", "tab_2"]}, {"heading": "Existing multi-scale and multi-level NN", "text": "Due to the nature of hierarchical learning in the deep convolutional neural networks, the concept of multi-scale and multi-level learning might differ from situation to situation. For example, multi-scale learning can be \"inside\" the neural network, in the form of increasingly larger receptive fields and downsampled (strided) layers. In this \"inside\" case, the feature representations learned in each layer are naturally multi-scale. On the other hand, multi-scale learning can be \"outside\" of the neural network, for example by \"tweaking the scales\" of input images. While these two variants have some notable similarities, we have seen both of them applied to various tasks. We continue by next formalizing the possible configurations of multi-scale deep learning into four categories, namely, multi-stream learning, skip-net learning, a single model running on multiple inputs, and training of independent networks. An illustration is shown in Fig 2 . Having these possibilities in mind will help make clearer the ways in which our proposed holistically-nested network approach differs from previous efforts and will help to highlight the important benefits in terms of representation and efficiency.\nMulti-stream learning [3,29] A typical multi-stream learning architecture is illustrated in Fig 2 (a). Note that the multiple (parallel) network streams have different parameter numbers and receptive field sizes, corresponding to multiple scales. Input data are simultaneously fed into multiple streams, after which the concatenated feature responses produced by the various streams are fed into a global output layer to produce the final result.\nSkip-layer network learning: Examples of this form of network include [26,14,2,33,10]. The key concept in \"skip-layer\" network learning is shown in Fig 2(b). Instead of training multiple parallel streams, the topology for the skip-net architecture centers on a primary stream. Links are added to incorporate the feature responses from different levels of the primary network stream, and these responses are then combined in a shared output layer.\nA common point in the two settings above is that, in both of the architectures, there is only one output loss function with a single prediction produced. However, in edge detection, it is often favorable (and indeed prevalent) to obtain multiple predictions to combine the edge maps together.\nSingle model on multiple inputs: To get multi-scale predictions, one can also run a single network (or networks with tied weights) on multiple (scaled) input images, as illustrated in Fig 2(c). This strategy can happen at both the training stage (as data augmentation) and at the testing stage (as \"ensemble testing\"). One notable example is the tiedweight pyramid networks [8]. This approach is also common in non-deep-learning based methods [6]. Note that ensemble testing impairs the prediction efficiency of learning systems, especially with deeper models [2,10].\nTraining independent networks: As an extreme variant to Holistically-nested networks: We list these variants to help clarify the distinction between existing approaches and our proposed holistically-nested network approach, illustrated in Fig 2(e). There is often significant redundancy in existing approaches, in terms of both representation and computational complexity. Our proposed holisticallynested network is a relatively simple variant that is able to produce predictions from multiple scales. The architecture can be interpreted as a \"holistically-nested\" version of the \"independent networks\" approach in Fig 2(d), motivating our choice of name. Our architecture comprises a singlestream deep network with multiple side outputs. This architecture resembles several previous works, particularly the deeply-supervised net [23] approach in which the authors show that hidden layer supervision can improve both optimization and generalization for image classification tasks. The multiple side outputs also give us the flexibility to add an additional fusion layer if a unified output is desired.", "publication_ref": ["b2", "b28", "b25", "b13", "b1", "b32", "b9", "b7", "b5", "b1", "b9", "b22"], "figure_ref": ["fig_1"], "table_ref": []}, {"heading": "Formulation", "text": "Here we formulate our approach for edge prediction. Training Phase We denote our input training data set by\nS = {(X n , Y n ), n = 1, . . . , N }, where sample X n = {x (n) j , j = 1, . . . , |X n |} denotes the raw input image and Y n = {y (n) j , j = 1, . . . , |X n |}, y (n) j\n\u2208 {0, 1} denotes the corresponding ground truth binary edge map for image X n . We subsequently drop the subscript n for notational simplicity, since we consider each image holistically and independently. Our goal is to have a network that learns features from which it is possible to produce edge maps approaching the ground truth. For simplicity, we denote the collection of all standard network layer parameters as W. Suppose in the network we have M side-output layers. Each side-output layer is also associated with a classifier, in which the corresponding weights are denoted as w = (w (1) , . . . , w (M ) ). We consider the objective function\nL side (W, w) = M m=1 \u03b1 m (m) side (W, w (m) ),(1)\nwhere side denotes the image-level loss function for sideoutputs. In our image-to-image training, the loss function is computed over all pixels in a training image X = (x j , j = 1, . . . , |X|) and edge map Y = (y j , j = 1, . . . , |X|), y j \u2208 {0, 1}. For a typical natural image, the distribution of edge/non-edge pixels is heavily biased: 90% of the ground truth is non-edge. A cost-sensitive loss function is proposed in [19], with additional trade-off parameters introduced for biased sampling. We instead use a simpler strategy to automatically balance the loss between positive/negative classes. We introduce a class-balancing weight \u03b2 on a per-pixel term basis. Index j is over the image spatial dimensions of image X. Then we use this class-balancing weight as a simple way to offset this imbalance between edge and non-edge. Specifically, we define the following class-balanced cross-entropy loss function used in Equation ( 1) ) \u2208 [0, 1] is computed using sigmoid function \u03c3(.) on the activation value at pixel j. At each side output layer, we then obtain edge map predictions\u0176 To directly utilize side-output predictions, we add a \"weighted-fusion\" layer to the network and (simultaneously) learn the fusion weight during training. Our loss function at the fusion layer L fuse becomes\n(m) side (W, w (m) ) = \u2212\u03b2 j\u2208Y+ log Pr(y j = 1|X; W, w (m) ) \u2212 (1 \u2212 \u03b2)\nL fuse (W, w, h) = Dist(Y,\u0176 fuse ) (3\n)\nwhere\u0176 fuse \u2261 \u03c3( M m=1 h m\u00c2 (m)\nside ) where h = (h 1 , . . . , h M ) is the fusion weight. Dist(\u2022, \u2022) is the distance between the fused predictions and the ground truth label map, which we set to be cross-entropy loss. Putting everything together, we minimize the following objective function via standard (back-propagation) stochastic gradient descent: \n(W, w, h) = argmin(L side (W, w) + L fuse (W, w, h))(4)\n\u2112 \u2113 (1) \u2113 (3) \u2113 (2) \u2113(4) \u2113 (5)\nFigure 3. Illustration of our network architecture for edge detection, highlighting the error backpropagation paths. Side-output layers are inserted after convolutional layers. Deep supervision is imposed at each side-output layer, guiding the side-outputs towards edge predictions with the characteristics we desire. The outputs of HED are multi-scale and multi-level, with the side-output-plane size becoming smaller and the receptive field size becoming larger. One weighted-fusion layer is added to automatically learn how to combine outputs from multiple scales. The entire network is trained with multiple error propagation paths (dashed lines).\nSee section 4 for detailed hyper-parameter and experiment settings.\nTesting phase During testing, given image X, we obtain edge map predictions from both the side output layers and the weighted-fusion layer:\n(\u0176 fuse ,\u0176(1)\nside , . . . ,\u0176\nside ) = CNN(X, (W, w, h) ), (5) where CNN(\u2022) denotes the edge maps produced by our network. The final unified output can be obtained by further aggregating these generated edge maps. The details will be discussed in section 4.\nY HED = Average(\u0176 fuse ,\u0176(1)\nside , . . . ,\u0176\nside )", "publication_ref": ["b0", "b18", "b4"], "figure_ref": [], "table_ref": []}, {"heading": "Network Architecture", "text": "Next, we describe the network architecture of HED.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Trimmed network for edge detection", "text": "The choice of hierarchy for our framework deserves some thought. We need the architecture (1) to be deep, so as to efficiently generate perceptually multi-level features; and (2) to have multiple stages with different strides, so as to capture the inherent scales of edge maps. We must also keep in mind the potential difficulty in training such deep neural networks with multiple stages when starting from scratch. Recently, VGGNet [36] has been seen to achieve state-ofthe-art performance in the ImageNet challenge, with great depth (16 convolutional layers), great density (stride-1 convolutional kernels), and multiple stages (five 2-stride downsampling layers). Recent work [2] also demonstrates that fine-tuning deep neural networks pre-trained on the general image classification task is useful to the low-level edge detection task. We therefore adopt the VGGNet architecture but make the following modifications: (a) we connect our side output layer to the last convolutional layer in each stage, respectively conv1 2, conv2 2, conv3 3, conv4 3, conv5 3. The receptive field size of each of these convolutional layers is identical to the corresponding side-output layer; (b) we cut the last stage of VGGNet, including the 5th pooling layer and all the fully connected layers. The reason for \"trimming\" the VGGNet is two-fold. First, because we are expecting meaningful side outputs with different scales, a layer with stride 32 yields a too-small output plane with the consequence that the interpolated prediction map will be too fuzzy to utilize. Second, the fully connected layers (even when recast as convolutions) are computationally intensive, so that trimming layers from pool5 on can significantly reduce the memory/time cost during both training and testing. Our final HED network architecture has 5 stages, with strides 1, 2, 4, 8 and 16, respectively, and with different receptive field sizes, all nested in the VGGNet. See Table 1 for a summary of the configurations of the receptive fields and strides. ", "publication_ref": ["b35", "b1"], "figure_ref": [], "table_ref": ["tab_1"]}, {"heading": "Architecture alternatives", "text": "Below we discuss some possible alternatives in architecture design, and in particular, the role of deep supervision of HED for the edge detection task. FCN and skip-layer architecture The topology used in the FCN model differs from that in our HED model in several aspects. As we have discussed, while FCN reinterprets classification nets for per-pixel prediction, it has only one output loss function. Thus, in FCN, although the skip net structure is a DAG that combines coarse, high-layer information with fine low-layer information, it does not explicitly produce multi-scale output predictions. We explore how this architecture can be used for the edge detection task under the output layers to produce multi-scale dense predictions. Note that in the left column, the side outputs become progressively coarser and more \"global\", while critical object boundaries are preserved. In the right column, the predictions tends to lack any discernible order (e.g. in layers 1 and 2), and many boundaries are lost in later stages. same experimental setting as our HED model. We first try to directly apply the FCN-8s model by replacing the loss function with cross-entropy loss for edge detection. The results shown in first row of Table 2 are unsatisfactory, which is expected since this architecture is still not fine enough. We further explore whether the performance can be improved by adding even more links from low-level layers. We then create an FCN-2s network that adds additional links from the pool1 and pool2 layers. Still, directly applying the FCN skip-net topology falls behind our proposed HED architecture (see second row of Table 2). With heavy tweaking of FCN, there is a possibility that one might be able to achieve competitive performance on edge detection, but the multiscale side-outputs in HED are seen to be natural and intuitive for edge detection. The role of deep supervision Since we incorporate a weighted-fusion output layer that connects each side-output layer, there is a need to justify the adoption of the deep supervision terms (specifically, side (W, w (m) ): now the entire network is path-connected and the output-layer parameters can be updated by back-propagation through the weighted-fusion layer error propagation path (subject to Equation 3). Here we show that deep supervision is important to obtain desired edge maps. The key characteristic of our proposed network is that each network layer is supposed to play a role as a singleton network responsible for producing an edge map at a certain scale. Here are some qualitative results based on the two variants discussed above: (1) training with both weighted-fusion supervision and deep supervision, and (2) training with weighted-fusion supervision only. We observe that with deep supervision, the nested side-outputs are natural and intuitive, insofar as the suc-cessive edge map predictions are progressively coarse-tofine, local-to-global. On the other hand, training with only the weighted-fusion output loss gives edge predictions that lack such discernible order: many critical edges are absent at the higher layer side output; under exactly same experimental setup, the result on the benchmark dataset (row three of Table 2) differs only marginally in F-score but displays severely degenerated average precision; without direct control and guidance across multiple scales, this network is heavily biased towards learning large structure edges.", "publication_ref": [], "figure_ref": [], "table_ref": ["tab_2", "tab_2", "tab_2"]}, {"heading": "Experiments", "text": "In this section we discuss our detailed implementation and report the performance of our proposed algorithm.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Implementation", "text": "We implement our framework using the publicly available Caffe Library and build on top of the publicly available implementations of FCN [26] and DSN [23]. Thus, relatively little engineering hacking is required. In our HED system, the whole network is fine-tuned from an initialization with the pre-trained VGG-16 Net model. Model parameters In contrast to fine-tuning CNN to perform image classification or semantic segmentation, adapting CNN to perform low-level edge detection requires special care. Differences in data distribution, ground truth distribution, and loss function all contribute to difficulties in network convergence, even with the initialization of a pretrained model. We first use a validation set and follow the evaluation strategy used in [6] to tune the deep model hyper-parameters. The hyper-parameters (and the values we choose) include: mini-batch size (10), learning rate (1e-6), loss-weight \u03b1 m for each side-output layer (1), momentum (0.9), initialization of the nested filters (0), initialization of the fusion layer weights (1/5), weight decay (0.0002), number of training iterations (10,000; divide learning rate by 10 after 5,000). We focus on the convergence behavior of the network. We observe that whenever training converges, the deviations in F-score on the validation set tend to be very small. In order to investigate whether including additional nonlinearity helps, we also consider a setting in which we add an additional layer (with 50 filters and a ReLU) before each side-output layer; we find that this worsens performance. On another note, we observe that our nested multi-scale framework is insensitive to input image scales; during our training process, we take advantage of this by resizing all the images to 400 \u00d7 400 to reduce GPU memory usage and to take advantage of efficient batch processing. In the experiments that follow, we fix the values of all hyper-parameters discussed above to explore the benefits of possible variants of HED. Consensus sampling In our approach, we duplicate the ground truth at each side-output layer and resize the (down-sampled) side output to its original scale. Thus, there exists a mismatch in the high-level side-outputs: the edge predictions are coarse and global, while the ground truth still contains many weak edges that could even be considered as noise. This issue leads to problematic convergence behavior, even with the help of a pre-trained model. We observe that this mismatch leads to back-propagated gradients that explode at the high-level side-output layers. We therefore adjust how we make use of the ground truth labels in the BSDS dataset to combat this issue. Specifically, the ground truth labels are provided by multiple annotators and thus, implicitly, greater labeler consensus indicates stronger ground truth edges. We adopt a relatively brute-force solution: only assign a pixel a positive label if it is labeled as positive by at least three annotators; regard all other labeled pixels as negatives. This helps with the problem of gradient explosion in high level side-output layers. For low level layers, this consensus approach brings additional robustness to edge classification and prevents the network from being distracted by weak edges. Although not fully explored in our paper, a careful handling of consensus levels of ground truth edges might lead to further improvement. Data augmentation Data augmentation has proven to be a crucial technique in deep networks. We rotate the images to 16 different angles and crop the largest rectangle in the rotated image; we also flip the image at each angle, leading to an augmented training set that is a factor of 32 larger than the unaugmented set. During testing we operate on an input image at its original size. We also note that \"ensemble testing\" (making predictions on rotated/flipped images and averaging the predictions) yields no improvements in F-score, nor in average precision. Different pooling functions Previous work [2] suggests that different pooling functions can have a major impact on edge detection results. We conduct a controlled experiment in which all pooling layers are replaced by average pooling. We find that using average pooling decrease the performance to ODS=.741. In-network bilinear interpolation Side-output prediction upsampling is implemented with in-network deconvolutional layers, similar to those in [26]. We fix all the deconvolutional layers to perform linear interpolation. Although it was pointed out in [26] that one can learn arbitrary interpolation functions, we find that learned deconvolutions provide no noticeable improvements in our experiments. Running time Training takes about 7 hours on a single NVIDIA K40 GPU. For a 320 \u00d7 480 image, it takes HED 400 ms to produce the final edge map (including the interface overhead), which is significantly faster than existing CNN-based methods [34,2]. Some previous edge detectors also try to improve performance by the less desirable expedient of sacrificing efficiency (for example, by testing on input images from multiple scales and averaging the re-sults). See Table 4 for a detailed discussion.", "publication_ref": ["b25", "b22", "b5", "b1", "b25", "b25", "b33", "b1"], "figure_ref": [], "table_ref": ["tab_4"]}, {"heading": "BSDS500 dataset", "text": "We evaluate HED on the Berkeley Segmentation Dataset and Benchmark (BSDS 500) [1] which is composed of 200 training, 100 validation, and 200 testing images. Each image has manually annotated ground truth contours. Edge detection accuracy is evaluated using three standard measures: fixed contour threshold (ODS), per-image best threshold (OIS), and average precision (AP). We apply a standard non-maximal suppression technique to our edge maps to obtain thinned edges for evaluation. The results are shown in Figure 5 and Table 4.\nTable 3. Results of single and averaged side output in HED on the BSDS 500 dataset. The individual side output contributes to the fused/averaged result. Note that the learned weighted-fusion (Fusion-output) achieves best F-score, while directly averaging all of the five layers (Average 1-5) produces better average precision. Merging those two readily available outputs further boost the performance.", "publication_ref": ["b0"], "figure_ref": ["fig_6"], "table_ref": ["tab_4"]}, {"heading": "ODS", "text": "OIS There are several interesting observations from the results: for instance, combining predictions from multiple scales yields better performance; moreover, all the side-output layers contribute to the performance gain, either in F-score or averaged precision. To see this, in Table 3, the side-output layer 1 and layer 5 (the lowest and highest layers) achieve similar relatively low performance. One might expect these two side-output layers to not be useful in the averaged results. However this turns out not to be the case -for example, the Average 1-4 achieves ODS=.760 and incorporating the side-output layer 5, the averaged prediction achieves an ODS=.774. We find similar phenomenon when considering other ranges. As mentioned above, the predictions obtained using different combination strategies are complementary, and a late merging of the averaged predictions with learned fusion-layer predictions leads to the best result. Another observation is, when compared to previous \"non-deep\" methods, performance of all \"deep\" methods drops more in the high recall regime. This might indicate that deep learned features are capable of (and favor) learning the global object boundary -thus many weak edges are omitted. HED is better than other deep learning based methods in the high recall regime because deep supervision helps us to take the low level predictions into account.  [9] .610 .640 .560 10 BEL [5] .660 * --1/10 gPb-owt-ucm [1] .726 .757 .696 1/240 Sketch Tokens [24] .727 .746 .780 1 SCG [31] .739 .758 .773 1/280 SE-Var [6] .746 .767 .803 2.5 OEF [13] .749 .772 .817 -DeepNets [21] .738 .759 .758 1/5 \u2020 N4-Fields [10] .753 .769 .784 1/6 \u2020 DeepEdge [2] .753 .772 .807 1/10 3 \u2020 CSCNN [19] .756 .775 .798 -DeepContour [34] .756 . Late merging to boost average precision We find that the weighted-fusion layer output gives best performance in Fscore. However the average precision degrades compared to directly averaging all the side outputs. This might due to our focus on \"global\" object boundaries for the fusion-layer weight learning. Taking advantage of the readily available side outputs in HED, we merge the fusion layer output with the side outputs (at no extra cost) in order to compensate for the loss in average precision. This simple heuristic gives us the best performance across all measures that we report in Figure 5 and Table 4.\nMore training data Deep models have significantly advanced results in a variety of computer vision applications, at least in part due to the availability of large training data.\nIn edge detection, however, we are limited by the number of training images available in the existing benchmarks. Here we want to explore whether adding more training data will help further improve the results. To do this, we expand the training set by randomly sampling 100 images from the test set. We then evaluate the result on the remaining 100 test images. We report the averaged result over 5 such trials. We observe that by adding only 100 training images, performance improves from ODS=.782 to ODS=.797 (\u00b1.003), nearly touching the human benchmark. This shows a potentially promising direction to further enhance HED by training it with a larger dataset.", "publication_ref": ["b8", "b4", "b0", "b23", "b30", "b5", "b12", "b20", "b9", "b1", "b18", "b33"], "figure_ref": ["fig_6"], "table_ref": ["tab_4"]}, {"heading": "NYUDv2 Dataset", "text": "The NYU Depth (NYUD) dataset [35] has 1449 RGB-D images. This dataset was used for edge detection in [31] and [11]. Here we use the setting described in [6] and evaluate HED on data processed by [11]. The NYUD dataset is split into 381 training, 414 validation, and 654 testing images. All images are made to the same size and we train our network on full resolution images. As used in [12,6], during evaluation we increase the maximum tolerance allowed for correct matches of edge predictions to ground truth from .0075 to .011. Depth information encoding Following the success in [12] and [26], we leverage the depth information by utilizing HHA features in which the depth information is embed- .", "publication_ref": ["b34", "b30", "b10", "b5", "b10", "b11", "b5", "b11", "b25"], "figure_ref": [], "table_ref": []}, {"heading": ".761", "text": ".786 1 \u2020 ded into three channels: horizontal disparity, height above ground, and angle of the local surface normal with the inferred direction of gravity . We use the same HED architecture and hyper-parameter settings as were used for BSDS 500. We train two different models in parallel, one on RGB images and another on HHA feature images, and report the results below. We directly average the RGB and HHA predictions to produce the final result by leveraging RGB-D information. We also tried other approaches to incorporate the depth information, for example, by training on the raw depth channel, or by concatenating the depth channel with the RGB channels before the first convolutional layer. None of these attempts yields notable improvement compared to the approach using HHA. The effectiveness of the HHA features shows that, although deep neural networks are capable of automatic feature learning, for depth data, carefully hand-designed features are still necessary, especially when only limited training data is available.\nTable 5 and Figure 6 show the precision-recall evaluations of HED in comparison to other competing methods. Our network structures for training are kept the same as for BSDS. During testing we use the Average2-4 prediction instead of the Fusion-layer output as it yields the best performance. We do not perform late merging since combining two sources of edge map predictions (RGB and HHA) already gives good average precision. Note that the results achieved using the RGB modality only are already better than those of the previous approaches.", "publication_ref": [], "figure_ref": [], "table_ref": ["tab_7"]}, {"heading": "Conclusion", "text": "In this paper, we have developed a new convolutionalneural-network-based edge detection system that demonstrates state-of-the-art performance on natural images at a speed of practical relevance (e.g., 0.4 seconds using GPU and 12 seconds using CPU). Our algorithm builds on top of the ideas of fully convolutional neural networks and deeply-supervised nets. We also initialize our network structure and parameters by adopting a pre-trained trimmed VGGNet. Our method shows promising results in performing image-to-image learning by combining multi-scale and multi-level visual responses, even though explicit contextual and high-level information has not been enforced. Source code and pretrained models are available online at https://github.com/s9xie/hed. Acknowledgment This work is supported by NSF IIS-1216528 (IIS-1360566), NSF award IIS-0844566 (IIS-1360568), and a Northrop Grumman Contextual Robotics grant. We gratefully thank Patrick Gallagher for helping improve this manuscript. We also thank Piotr Dollar and Yin Li for insightful discussions. We are grateful for the generous donation of the GPUs by NVIDIA.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "A. More Results", "text": "After the ICCV submission, we retrained our model with the following : (1) In data augmentation, we further triples the dataset by scaling the training images to 50%, 100%, 150% of its original size. (2) In training phase, we use fullresolution images instead of resizing them to 400 \u00d7 400.\nUpdated results on BSDS500 benchmark dataset with this newly trained model are reported in Figure 7 and Table 6.\nIn the new experiment settings, while we found that the gap in F-score narrows between models with/without deep supervision, we have similar qualitative and quantitative observations as illustrated in Section 3.2. .788 .808 .840 ", "publication_ref": ["b1"], "figure_ref": ["fig_7"], "table_ref": ["tab_8"]}, {"heading": "Changelog v2", "text": "Fix typos and reorganize formulations. Add Table 2 to discuss the role of deep supervision. Add appendix A for updated results on BSDS500 in a new experiment setting. Add links to publicly available repository for training/testing code, augmented data and pre-trained model.", "publication_ref": [], "figure_ref": [], "table_ref": ["tab_2"]}], "references": [{"ref_id": "b0", "title": "Contour detection and hierarchical image segmentation", "journal": "PAMI", "year": "2007", "authors": "P Arbelaez; M Maire; C Fowlkes; J Malik"}, {"ref_id": "b1", "title": "Deepedge: A multiscale bifurcated deep network for top-down contour detection", "journal": "", "year": "2007", "authors": "G Bertasius; J Shi; L Torresani"}, {"ref_id": "b2", "title": "Multiscale convolutional neural networks for vision-based classification of cells", "journal": "", "year": "", "authors": "P Buyssens; A Elmoataz; O L\u00e9zoray"}, {"ref_id": "b3", "title": "A computational approach to edge detection", "journal": "PAMI", "year": "1986", "authors": "J Canny"}, {"ref_id": "b4", "title": "Supervised learning of edges and object boundaries", "journal": "", "year": "2006", "authors": "P Dollar; Z Tu; S Belongie"}, {"ref_id": "b5", "title": "Fast edge detection using structured forests", "journal": "PAMI", "year": "2008", "authors": "P Doll\u00e1r; C L Zitnick"}, {"ref_id": "b6", "title": "Ecological statistics of gestalt laws for the perceptual organization of contours", "journal": "Journal of Vision", "year": "2002", "authors": "J H Elder; R M Goldberg"}, {"ref_id": "b7", "title": "Learning hierarchical features for scene labeling", "journal": "PAMI", "year": "2013", "authors": "C Farabet; C Couprie; L Najman; Y Lecun"}, {"ref_id": "b8", "title": "Efficient graphbased image segmentation", "journal": "IJCV", "year": "2004", "authors": "P F Felzenszwalb; D P Huttenlocher"}, {"ref_id": "b9", "title": "N4-fields: Neural network nearest neighbor fields for image transforms", "journal": "", "year": "2007", "authors": "Y Ganin; V Lempitsky"}, {"ref_id": "b10", "title": "Perceptual organization and recognition of indoor scenes from rgb-d images", "journal": "", "year": "2013", "authors": "S Gupta; P Arbelaez; J Malik"}, {"ref_id": "b11", "title": "Learning rich features from rgb-d images for object detection and segmentation", "journal": "", "year": "2014", "authors": "S Gupta; R Girshick; P Arbel\u00e1ez; J Malik"}, {"ref_id": "b12", "title": "Oriented edge forests for boundary detection", "journal": "", "year": "2014", "authors": "S Hallman; C C Fowlkes"}, {"ref_id": "b13", "title": "Hypercolumns for object segmentation and fine-grained localization", "journal": "", "year": "2015", "authors": "B Hariharan; P Arbel\u00e1ez; R Girshick; J Malik"}, {"ref_id": "b14", "title": "Putting objects in perspective", "journal": "", "year": "2008", "authors": "D Hoiem; A A Efros; M Hebert"}, {"ref_id": "b15", "title": "Recovering occlusion boundaries from a single image", "journal": "", "year": "2007", "authors": "D Hoiem; A N Stein; A A Efros; M Hebert"}, {"ref_id": "b16", "title": "Boundary detection benchmarking: Beyond f-measures", "journal": "", "year": "2013", "authors": "X Hou; A Yuille; C Koch"}, {"ref_id": "b17", "title": "Receptive fields, binocular interaction and functional architecture in the cat's visual cortex", "journal": "The Journal of physiology", "year": "1962", "authors": "D H Hubel; T N Wiesel"}, {"ref_id": "b18", "title": "Pixel-wise deep learning for contour detection", "journal": "", "year": "2007", "authors": "J.-J Hwang; T.-L Liu"}, {"ref_id": "b19", "title": "On the accuracy of the sobel edge detector", "journal": "Image and Vision Computing", "year": "1983", "authors": "J Kittler"}, {"ref_id": "b20", "title": "Visual boundary prediction: A deep neural prediction network and quality dissection", "journal": "", "year": "2014", "authors": "J J Kivinen; C K Williams; N Heess; D Technologies"}, {"ref_id": "b21", "title": "Statistical edge detection: Learning and evaluating edge cues", "journal": "PAMI", "year": "2003", "authors": "S Konishi; A L Yuille; J M Coughlan; S C Zhu"}, {"ref_id": "b22", "title": "Deeplysupervised nets", "journal": "", "year": "2006", "authors": "C.-Y Lee; S Xie; P Gallagher; Z Zhang; Z Tu"}, {"ref_id": "b23", "title": "Sketch tokens: A learned mid-level representation for contour and object detection", "journal": "", "year": "2013", "authors": "J J Lim; C L Zitnick; P Doll\u00e1r"}, {"ref_id": "b24", "title": "Nonparametric scene parsing via label transfer", "journal": "PAMI", "year": "2011", "authors": "C Liu; J Yuen; A Torralba"}, {"ref_id": "b25", "title": "Fully convolutional networks for semantic segmentation", "journal": "", "year": "2008", "authors": "J Long; E Shelhamer; T Darrell"}, {"ref_id": "b26", "title": "Theory of edge detection", "journal": "", "year": "1167", "authors": "D Marr; E Hildreth"}, {"ref_id": "b27", "title": "Learning to detect natural image boundaries using local brightness, color, and texture cues", "journal": "PAMI", "year": "2004", "authors": "D R Martin; C C Fowlkes; J Malik"}, {"ref_id": "b28", "title": "Multiscale deep learning for gesture detection and localization", "journal": "", "year": "2014", "authors": "N Neverova; C Wolf; G W Taylor; F Nebout"}, {"ref_id": "b29", "title": "Multi-scale improves boundary detection in natural images", "journal": "", "year": "2002", "authors": "X Ren"}, {"ref_id": "b30", "title": "Discriminatively trained sparse code gradients for contour detection", "journal": "", "year": "2012", "authors": "X Ren; L Bo"}, {"ref_id": "b31", "title": "Statistics of natural images: Scaling in the woods", "journal": "Physical review letters", "year": "1994", "authors": "D L Ruderman; W Bialek"}, {"ref_id": "b32", "title": "Convolutional neural networks applied to house numbers digit classification", "journal": "", "year": "2012", "authors": "P Sermanet; S Chintala; Y Lecun"}, {"ref_id": "b33", "title": "Deepcontour: A deep convolutional feature learned by positivesharing loss for contour detection draft version", "journal": "", "year": "2007", "authors": "W Shen; X Wang; Y Wang; X Bai; Z Zhang"}, {"ref_id": "b34", "title": "Indoor segmentation and support inference from rgbd images", "journal": "", "year": "", "authors": "N Silberman; D Hoiem; P Kohli; R Fergus"}, {"ref_id": "b35", "title": "Very deep convolutional networks for large-scale image recognition", "journal": "", "year": "2004", "authors": "K Simonyan; A Zisserman"}, {"ref_id": "b36", "title": "On edge detection", "journal": "PAMI", "year": "1986", "authors": "V Torre; T A Poggio"}, {"ref_id": "b37", "title": "Auto-context and its application to high-level vision tasks", "journal": "", "year": "2008", "authors": "Z Tu"}, {"ref_id": "b38", "title": "Neural mechanisms of form and motion processing in the primate visual system", "journal": "Neuron", "year": "1994", "authors": "D C Van Essen; J L Gallant"}, {"ref_id": "b39", "title": "Scale-space filtering: A new approach to multiscale description", "journal": "ICASSP", "year": "1984", "authors": "A P Witkin"}, {"ref_id": "b40", "title": "Scaling theorems for zero crossings", "journal": "PAMI", "year": "1986", "authors": "A L Yuille; T A Poggio"}], "figures": [{"figure_label": "21", "figure_type": "figure", "figure_id": "fig_0", "figure_caption": "2 Figure 1 .21Figure 1. Illustration of the proposed HED algorithm. In the first row:", "figure_data": ""}, {"figure_label": "2", "figure_type": "figure", "figure_id": "fig_1", "figure_caption": "Figure 2 .2Figure 2. Illustration of different multi-scale deep learning architecture configurations: (a) multi-stream architecture; (b) skip-layer net architecture; (c) a single model running on multi-scale inputs; (d) separate training of different networks; (e) our proposed holistically-nested architectures, where multiple side outputs are added.", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_2", "figure_caption": "Fig 2(a), one might pursue Fig 2(d), in which multi-scale predictions are made by training multiple independent networks with different depths and different output loss layers. This might be practically challenging to implement as this duplication would multiply the amount of resources required for training.", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_3", "figure_caption": "j\u2208Y\u2212 log Pr(y j = 0|X; W, w (m) ) (2) where \u03b2 = |Y \u2212 |/|Y | and 1 \u2212 \u03b2 = |Y + |/|Y |. |Y \u2212 | and |Y + | denote the edge and non-edge ground truth label sets, respectively. Pr(y j = 1|X; W, w (m) ) = \u03c3(a (m) j", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_4", "figure_caption": "j , j = 1, . . . , |Y |} are activations of the side-output of layer m.", "figure_data": ""}, {"figure_label": "4", "figure_type": "figure", "figure_id": "fig_5", "figure_caption": "Figure 4 .4Figure 4. Two examples illustrating how deep supervision helps side-", "figure_data": ""}, {"figure_label": "5", "figure_type": "figure", "figure_id": "fig_6", "figure_caption": "Figure 5 .5Figure5. Results on the BSDS500 dataset. Our proposed HED framework achieves the best result (ODS=.782). Compared to several recent CNN-based edge detectors, our approach is also orders of magnitude faster. See Table4for a detailed discussion.", "figure_data": ""}, {"figure_label": "7", "figure_type": "figure", "figure_id": "fig_7", "figure_caption": "Figure 7 .7Figure 7. Updated results on the BSDS500 dataset. Our proposed HED framework achieves the best F-score (ODS=.790, OIS=.808, AP=.811), the late-merging variant achieves best average precision (ODS=.788, OIS=.808, AP=.840).", "figure_data": ""}, {"figure_label": "1", "figure_type": "table", "figure_id": "tab_1", "figure_caption": "The receptive field and stride size in VGGNet[36] used in HED.The bolded convolutional layers are linked to additional side-output layers.", "figure_data": "layer c1 2p1c2 2p2c3 3rf size56141640stride12244layerp3c4 3p4c5 3p5rf size4492100196212stride88161632"}, {"figure_label": "2", "figure_type": "table", "figure_id": "tab_2", "figure_caption": "Performance of alternative architectures on BSDS dataset. The \"fusion-output without deep supervision\" result is learned w.r.t Eqn. 3. The \"fusion-output with deep supervision\" result is learned w.r.t. to Eqn. 4.", "figure_data": "ODS OIS APFCN-8S.697 .715 .673FCN-2S.738 .756 .717Fusion-output (w/o deep supervision).771 .785 .738Fusion-output (with deep supervision) .782 .802 .787"}, {"figure_label": "", "figure_type": "table", "figure_id": "tab_3", "figure_caption": "To explicitly validate the side outputs, we summarize the results produced by the individual side-outputs at different scales in Table3, including different combinations of the multi-scale edge maps. We emphasize here that all the side-output predictions are obtained in one pass; this enables us to fully investigate different configurations of combining the outputs at no extra cost.", "figure_data": "APSide-output 1.595.620.582Side-output 2.697.715.673Side-output 3.738.756.717Side-output 4.740.759.672Side-output 5.606.611.429Fusion-output.782.802.787Average 1-4.760.784.800Average 1-5.774.797.822Average 2-4.766.788.798Average 2-5.777.800.814Merged result.782.804.833Side outputs"}, {"figure_label": "4", "figure_type": "table", "figure_id": "tab_4", "figure_caption": "Results on BSDS500. * BSDS300 results, \u2020GPU time", "figure_data": "ODS OISAPFPSHuman.80.80--Canny.600 .640 .580 15Felz-Hutt"}, {"figure_label": "", "figure_type": "table", "figure_id": "tab_6", "figure_caption": "Figure 6. Precision/recall curves on NYUD dataset. Holistically-nested edge detection (HED) trained with RGB and HHA features achieves the best result (ODS=.746). See Table5for additional information.", "figure_data": "10.90.80.70.6Precision0.50.40.30.2[F=.746] HED(ours)[F=.710] SE+NG+ [F=.695] SE0.1[F=.685] gPb+NG[F=.655] Silberman[F=.629] gPb\u2212owt\u2212ucm000.10.20.30.40.50.60.70.80.91Recall"}, {"figure_label": "5", "figure_type": "table", "figure_id": "tab_7", "figure_caption": "Results on the NYUD dataset[35] \u2020GPU time", "figure_data": "ODSOISAPFPSgPb-ucm.632.661.5621/360Silberman [35] .658.661-<1/360gPb+NG[11].687.716.6291/375SE[6].685.699.6795SE+NG+[12].710.723.7381/15HED-RGB.720.734.7342.5 \u2020HED-HHA.682.695.7022.5 \u2020HED-RGB-HHA"}, {"figure_label": "6", "figure_type": "table", "figure_id": "tab_8", "figure_caption": "Updated HED results on the BSDS500 dataset.", "figure_data": "ODS OIS APfusion-output (with deep supervision).790 .808 .811fusion-output (w/o deep supervision).785 .801 .730HED (late-merging)"}], "formulas": [{"formula_id": "formula_0", "formula_text": "S = {(X n , Y n ), n = 1, . . . , N }, where sample X n = {x (n) j , j = 1, . . . , |X n |} denotes the raw input image and Y n = {y (n) j , j = 1, . . . , |X n |}, y (n) j", "formula_coordinates": [3.0, 308.86, 603.04, 236.25, 40.36]}, {"formula_id": "formula_1", "formula_text": "L side (W, w) = M m=1 \u03b1 m (m) side (W, w (m) ),(1)", "formula_coordinates": [4.0, 86.05, 139.96, 200.32, 30.2]}, {"formula_id": "formula_2", "formula_text": "(m) side (W, w (m) ) = \u2212\u03b2 j\u2208Y+ log Pr(y j = 1|X; W, w (m) ) \u2212 (1 \u2212 \u03b2)", "formula_coordinates": [4.0, 57.67, 375.18, 225.28, 34.23]}, {"formula_id": "formula_3", "formula_text": "L fuse (W, w, h) = Dist(Y,\u0176 fuse ) (3", "formula_coordinates": [4.0, 101.86, 582.59, 180.64, 9.84]}, {"formula_id": "formula_4", "formula_text": ")", "formula_coordinates": [4.0, 282.49, 582.94, 3.87, 8.64]}, {"formula_id": "formula_5", "formula_text": "where\u0176 fuse \u2261 \u03c3( M m=1 h m\u00c2 (m)", "formula_coordinates": [4.0, 50.11, 599.4, 161.44, 14.28]}, {"formula_id": "formula_6", "formula_text": "(W, w, h) = argmin(L side (W, w) + L fuse (W, w, h))(4)", "formula_coordinates": [4.0, 55.53, 692.21, 230.83, 20.94]}, {"formula_id": "formula_7", "formula_text": "\u2112 \u2113 (1) \u2113 (3) \u2113 (2) \u2113(4) \u2113 (5)", "formula_coordinates": [4.0, 409.67, 83.97, 79.6, 101.71]}, {"formula_id": "formula_8", "formula_text": "(\u0176 fuse ,\u0176(1)", "formula_coordinates": [4.0, 317.04, 425.42, 46.89, 12.94]}, {"formula_id": "formula_10", "formula_text": "Y HED = Average(\u0176 fuse ,\u0176(1)", "formula_coordinates": [4.0, 341.73, 502.23, 115.96, 12.94]}], "doi": ""}