{"title": "Variance Reduction in Gradient Exploration for Online Learning to Rank", "authors": "Huazheng Wang; Sonwoo Kim; Eric Mccord-Snook; Qingyun Wu; Hongning Wang; Huazheng Wang", "pub_date": "2019-11-15", "abstract": "Online Learning to Rank (OL2R) algorithms learn from implicit user feedback on the fly. The key to such algorithms is an unbiased estimate of gradient, which is often (trivially) achieved by uniformly sampling from the entire parameter space. Unfortunately, this leads to high-variance in gradient estimation, resulting in high regret during model updates, especially when the dimension of the parameter space is large. In this work, we focus on Dueling Bandit Gradient Descent (DBGD) based OL2R algorithms, which constitute a major endeavor in this direction of research. In particular, we aim at reducing the variance of gradient estimation in DBGD-type OL2R algorithms. We project the selected updating direction (i.e., the winning direction) into a space spanned by the feature vectors from examined documents under the current query (termed the \"document space\" for short), after an interleaved test. Our key insight is that the result of an interleaved test is solely governed by a user's relevance evaluation over the examined documents. Hence, the true gradient introduced by this test is only reflected in the constructed document space, and components of the proposed gradient which are orthogonal to the document space can be safely removed, for variance reduction purpose. We prove that this projected gradient is still an unbiased estimation of the true gradient, and show that this lower-variance gradient estimation results in significant regret reduction. Our proposed method is compatible with all existing DBGD-type OL2R algorithms which rank documents using a linear model. Extensive experimental comparisons with several best-performing DBGD-type OL2R algorithms have confirmed the effectiveness of our proposed method in reducing the variance of gradient estimation and improving overall ranking performance.\u2022 Information systems \u2192 Learning to rank; \u2022 Theory of computation \u2192 Online learning algorithms;", "sections": [{"heading": "INTRODUCTION", "text": "Online Learning to Rank (OL2R) [6] is a family of online learning solutions, which exploit implicit feedback from users to directly optimize parameterized rankers on the fly. It has drawn increasing attention in research community in recent years due to its advantages over classical offline learning to rank algorithms [12]. First, it avoids the expensive and time consuming process of offline result relevance annotation. Second, as it directly learns from user feedback, it optimizes the ranking results to best reflect current user preferences [17]. Third, because the model is updated on the fly, there is no need to store user click history offline, which alleviates many privacy concerns [23].\nOne strain of OL2R algorithms, represented by Dueling Bandit Gradient Descent (DBGD) [26], optimize a linear scoring function by exploring the parameter space via interleaved test. Algorithms of this type first propose an exploratory direction as a tentative model update direction, and then update the current ranker if the proposed direction provides better ranking utility. In practice, result utility is usually inferred from user clicks on an interleaved list of ranking results from each ranker [25]. The key technical insight of DBGD-type algorithms is that the expectation of selected directions is an unbiased estimate of true gradient of the unknown loss function for ranking [5]. As a result, DBGD is essentially a stochastic online gradient descent algorithm. However, because the exploration directions are uniformly sampled from the entire parameter space, when the dimensionality of the space is high (which is usually the case in practice), the variance in gradient estimation becomes large. This directly slows down the learning convergence of the algorithm and inevitably increases sample complexity.\nRecently, several follow-up works have realized this deficiency of gradient exploration in DBGD, and propose various types of solutions to improve its learning efficiency. One type of studies explore multiple random directions in each iteration of model update. Unbiased estimate of gradient is maintained in this type of revisions of DBGD, as the directions are still uniformly sampled. Model estimation variance is expected to be reduced by testing more exploratory directions; but, in practice, as the users would only examine a finite number of documents under each query (e.g., due to position bias [9]), the sensitivity of interleaved test drops as a result of more exploratory rankers having to be tested at once. This unfortunately introduces additional variance in model estimation. Another type of research constrains the sampling space for gradient exploration [7,14,22]. However, this line of solutions cannot guarantee the estimated gradient remains unbiased, and thus face high risk of converging towards a sub-optimal solution.\nAlthough empirically effective, previous OL2R solutions neglect an important property of click-based result utility evaluation: users only perceive utility from the documents that they actually examine. As a result, the true gradient is only revealed by features playing an essential role in ranking those examined documents under this query. Here we define essential features in ranking a particular set of documents as those features with non-zero variance among the documents. Assume in an interleaved test, one ranking feature takes a constant value in all examined documents under this query, such that it has no effect in differentiating the quality of those documents. Then, the proposed exploratory direction's contribution to the ranker update on this particular dimension cannot be justified by this test result. Random gradient exploration hence introduces an arbitrary update on this dimension, which inevitably leads to high estimation variance over time. This example can be generalized to situations where multiple (even correlated) features have no effect in differentiating the utility of examined documents in the result of an interleaved test. Because in practice users usually only examine a handful of documents under each query [4,9], but each document consists of hundreds or even thousands of ranking features, the variance introduced by random exploration on those non-essential features could be considerably large.\nThe above analysis suggests that an interleaved test only reveals the projection of true gradient in the spanned space of examined documents under a test query (termed the \"document space\" in this paper). With this as our motivation, we decide to project the winning direction back into the document space so as to reduce the variance introduced by random gradient exploration. We construct the document space from inferred users' result examinations [4], which are not observable in the user response but can be statistically modeled. Because this projection is independent from how the proposal directions are created, this solution can be directly applied to any DBGD-type OL2R algorithm. We theoretically prove that the projected direction is still an unbiased estimate of the true gradient, i.e., model convergence is guaranteed, and also prove the reduced variance directly leads to considerable regret reduction in online model update. We compare the proposed method with several bestperforming DBGD-type OL2R algorithms on a collection of largescale learning to rank datasets and confirmed the effectiveness of our proposed solution.", "publication_ref": ["b5", "b11", "b16", "b22", "b25", "b24", "b4", "b8", "b6", "b13", "b21", "b3", "b8", "b3"], "figure_ref": [], "table_ref": []}, {"heading": "RELATED WORK", "text": "One key family of OL2R methods root in Dueling Bandit Gradient Descent (DBGD) [26], which uses online gradient descent to solve a bandit convex optimization problem [5]. In each iteration, DBGD uniformly samples a random direction from the entire parameter space to create an exploratory ranker, and uses an interleaved test [17] to compare the current ranker with the exploratory one. If the exploratory ranker is preferred, the proposed direction is used as the gradient to update the model. This procedure yields an unbiased estimate of true gradient [24]. However, the variance of DBGD's gradient estimation is high due to the nature of uniform exploration of the entire parameter space, which limits its learning efficiency.\nRecently, attempts have been made to improve the learning efficiency of DBGD-type algorithms. Schuth et al. [19] proposed a Multileave Gradient Descent (MGD) algorithm to explore multiple stochastic directions in each iteration with multi-interleaving comparison [20]. Zhao and King [27] developed a Dual-Point Dueling Bandit Gradient Descent algorithm to sample two stochastic vectors with opposite directions as the candidate gradients. The basic idea of this line of solutions is to test more exploratory directions at once so as to obtain the true gradient estimate sooner. However, their gradient exploration is still within the entire feature space. As users often only examine a small number of documents under each query, the sensitivity of interleaved test drops due to more exploratory rankers need to be tested. In a different direction of solutions, researchers proposed to constrain the sampling space for gradient exploration. Hofmann et al. chose to filter the stochastic directions by historical comparisons before an interleaved test [7]. Oosterhuis et. al [14] proposed to explore gradients in a subspace constructed by a set of pre-selected reference documents from an offline training corpus. Wang et al. [22] proposed to use historical interactions to avoid repeatedly exploring less promising directions, which also reduces gradient exploration to a subspace. However, the variance of gradient exploration is reduced at a cost of introducing bias into gradient approximation, so that such algorithms have a risk of converging to sub-optimal results.\nOur solution falls into this second category of variance reduction approaches for DBGD-type algorithms. Distinct from previous attempts to restrict gradient exploration before an interleaved test, we instead modify the selected direction after the test. As users' result examination is affected by the ranked results, which are in turn determined by the proposed exploratory directions, restricting the exploration space before the interleaved test potentially introduces bias in the subsequent interleaved test and model update. Our solution is based on the insight that only the projected true gradient in the document space can be revealed by an interleaved test. Hence, we decide to project the selected direction after each interleaved test, and thus guarantee an unbiased estimate of true gradient. Since the document space is expected to be smaller than the entire parameter space (as it is constructed only by the examined documents), the projected gradient enjoys low variance and leads to faster model convergence in online update.\nThere are also other parallel lines of OL2R algorithms that do not explore the gradient space the way DBGD-type algorithms do, but directly optimize the ranking model from click feedback. Kveton et al. [11] proposed Cascading Bandits to learn from users' click behaviour, where skipped documents are assumed to be less attractive than later clicked ones. This model is then extended to the dependent click model [10] to support multiple clicks in one query, and further studied for general stochastic click models [28]. However, these algorithms estimate a separate model for each query and do not share estimation across queries, which lead to slow convergence. Oosterhuis et al. [15] proposed a Pairwise Differentiable Gradient Descent (PDGD) algorithm that constructs gradients from pairwise result comparisons to update the model, and can be used to optimize neural network models. We should note that our solution is not compatible nor directly comparable with these non-DBGD algorithms, as there is no gradient exploration in these algorithms and our proposed gradient project does not apply.", "publication_ref": ["b25", "b4", "b16", "b23", "b18", "b19", "b26", "b6", "b13", "b21", "b10", "b9", "b27", "b14"], "figure_ref": [], "table_ref": []}, {"heading": "METHOD", "text": "In this section we describe our proposed document space gradient projection method for online learning to rank. We first describe the problem setup in Section 3.1. Then we present Document Space Projected Dueling Bandit Gradient Descent (DBGD-DSP) algorithm as an example of our proposed general solution in Section 3.2. Our gradient projection method is independent from how the exploratory gradient is proposed, and thus can be directly applied to any existing DBGD-type OL2R algorithm 1 to reduce its variance of gradient estimation. We rigorously prove the unbiasedness of our gradient estimation in Section 3.3 and analyze the regret of DBGD-DSP in Section 3.4. The same procedure and conclusions can be applied to any DBGD-type algorithm of interest.", "publication_ref": ["b0"], "figure_ref": [], "table_ref": []}, {"heading": "Problem Setup", "text": "The estimation of OL2R models can be formalized as a dueling bandit problem [26]. In iteration t, an OL2R algorithm receives a query and associated candidate documents, which are represented as a set of d-dimensional query-document pair feature vectors X t = {x 1 , x 2 , ..., x s }. The algorithm takes two actions: first, it proposes two rankers, whose parameters are denoted as w, w \u2032 ; second, it ranks the given documents with these two rankers accordingly. An oracle (i.e., user) compares (duels) the two rankers' results and provides feedback. In practice, an interleaving method [17] is applied to merge the ranking lists of the two rankers and display the resulting ranked list to the user. User preference is inferred from the click feedback. Thus, the ranker that contributes more clicked documents is preferred. We denote w \u227b w \u2032 for the event that w is preferred over w \u2032 . The comparison between two individual rankers is determined independently of other comparisons performed before with a probability P (w \u227b w \u2032 |X t ), such that P (w \u227b w \u2032 |X t ) = P t (w \u227b w \u2032 ) = f t (w, w \u2032 ). f t (w, w \u2032 ) can be viewed as the distinguishability of the two rankers w and w \u2032 by an interleave comparison under query X t .\nWe quantify the performance of an online learning algorithm using cumulative regret defined as follows:\nR(T ) = T t =1 f t (w * , w t ) + f t (w * , w \u2032 t ),(1)\nwhere w t and w \u2032 t are rankers compared at time t, and w * is the best ranker in ground-truth. As a result, the distinguishability measure f t (w * , w) indicates the loss of proposing a sub-optimal ranker w.\nWe denote f t (w t , w) as f t (w) for simplicity. The goal of an OL2R algorithm is to optimize its parameter towards w * according to loss f t (w). A desired OL2R algorithm should have a sublinear regret in a finitie time horizon T , so that the one-step regret is quickly decreasing to zero over time.\nIn this work, we make the following assumptions similar to [26]. We assume an unknown utility function v t (w) that quantifies the quality of a ranker w over query X t . The utility function v t is Algorithm 1 Document Space Projected Dueling Bandit Gradient Descent (DBGD-DSP) 1: Inputs: \u03b4, \u03b1 2: Initiate w 1 = sample_unit_vector() 3: for t = 1 to T do \nw \u2032 t = w t + \u03b4u t 7:\nGenerate ranked lists l(X t , w t ), l(X t , w \u2032 t )\n8:\nSet L t = Interleave {l(X t , w t ), l(X t , w \u2032 t )} , and present L t to user Based on C t , infer user examined top m t documents in L t .", "publication_ref": ["b25", "b16", "b25"], "figure_ref": [], "table_ref": []}, {"heading": "14:", "text": "Solve the orthogonal projection matrix A t for document space S t = span({x L t ,1 , x L t ,2 , ..., x L t ,m t }).", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "15:", "text": "Project u t onto S t by \u0434 t = A t u t 16:\nw t +1 = w t + \u03b1\u0434 t 17:\nend if 18: end for assumed to be differentiable, strongly concave and\nL v -Lipschitz, which means |v t (x) \u2212 v t (y)| \u2264 L v |x \u2212 y|.\nA link function \u03c3 describes the probabilistic comparison of utilities of two rankers as,\nP t w \u227b w \u2032 = f t (w, w \u2032 ) = \u03c3 v t (w) \u2212 v t (w \u2032 ) .\nThe link function should be rotation-symmetric, which means \u03c3 (x) = 1 \u2212 \u03c3 (\u2212x). We assume the link function is L \u03c3 -Lipschitz and second order L 2 -Lipschitz. The link function behaves like a cumulative probability distribution function. For example, a common choice of link function is the standard logistic function \u03c3 (x) = 1 1+exp(\u2212x ) , which satisfies all the assumptions.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Document Space Projected Dueling Bandit Gradient Descent", "text": "We describe our proposed Document Space Projected Dueling Bandit Gradient Descent (DBGD-DSP) in Algorithm 1. We should note it fits all DBGD-type OL2R algorithm settings. At the beginning of iteration t, user initiates a query X t . We denote w t as the parameter of the current ranker. DBGD-DSP first uniformly samples a vector u t from d dimensional unit sphere S d \u22121 (i.e., |u t | 2 = 1) as an exploratory direction, and proposes a candidate ranker w \u2032 t = w t +\u03b4u t , where \u03b4 is the step size of exploration. The algorithm then uses the two rankers (w t and w \u2032 t ) to generate ranking lists l(X t , w t ) and l(X t , w \u2032 t ) accordingly, and combines them with an interleaving method, such as Team Draft Interleaving [17] or Probabilistic Interleaving [8]. The user examines the result list and provides implicit click feedback to indicate their relevance evaluation of the results. The interleaving method uses this implicit feedback to infer which ranker is preferred by the user. If the exploratory ranker is preferred (i.e., wins the duel), previous DBGD-style algorithms update the current ranker by w t +1 = w t + \u03b1u t , where \u03b1 is the learning rate; otherwise the current ranker stays intact. This gradient exploration strategy yields an unbiased estimate of the true gradient [5], in terms of expectation. However, since the exploratory gradient u t is required to be uniformly sampled from the entire d dimensional unit sphere S d \u22121 , the model update suffers from high variance in its gradient estimation, especially when d is large, as in practice. Various improvements to this issue have been proposed in the past, but they still introduce other difficulties, such as variance and bias trade-off [7,14,22], and test sensitivity and efficiency [20,27].\nUnlike previous works that reduce the sampling space of gradient exploration before the interleaved test [7,14,22], we change the winning direction after the test. The key insight is that only the projected true gradient in the spanned space of examined documents under query X t (denoted as document space S t ) can be revealed by an interleaved test. For example, as shown in Figure 1, a DBGD-style algorithm is comparing the current ranker w t and w \u2032 t = w t + \u03b4u t with a uniformly sampled exploration direction u t . The user examines top m documents, e.g., {x 1 , ..x m }, of the interleaved ranking list (of course m is unknown to the algorithm) and w \u2032 t wins the duel. The estimated gradient u t can therefore be separated into two components, one component \u0434 t that belongs to the document space S t = span{x 1 , ..x m } and the other component u t \u2212 \u0434 t that is orthogonal to document space S t . The orthogonal component u t \u2212\u0434 t does not affect the ranking among the examined documents, i.e. (w t + \u03b4u t ) T x i = (w t + \u03b4\u0434 t ) T x i , and thus does not contribute to the loss function and true gradient estimation. Intuitively, u t \u2212 \u0434 t is not supported by the observed interleaved test, as anything sampled from the complement of S t cannot be verified by the examined documents. As a result, it is safe to exclude the direction u t \u2212\u0434 t from model update, which we later prove maintains the unbiasedness of the original DBGD-type gradient estimation, and reduces the variance. As illustrated in Figure 1, although u t will eventually lead to the same model estimation, as it is unbiased, this guarantee is only obtained in expectation. The variance could potentially be large: for example, the blue and purple updating traces slow down model convergence, when the number of observations is finite.\nAs shown in line 14 to 16 of Algorithm 1, we solve for the orthogonal projection matrix A t of document space S t , and project the selected direction u t onto the document space S t after each interleaved test. We leave the detailed design of constructing document space and solving projection matrix A t in Section 3.5. Before that, we first rigorously prove the projection maintains an unbiased estimate of true gradient in Section 3.3. Since the document space is constructed only by the examined documents, the rank of document space is expected to be smaller than the entire parameter space. This directly leads to lower variance and faster model convergence. We show that our document space projection reduces the variance of gradient estimation from d to Rank(A t ) in Section 3.4, and then analyze its benefit for regret reduction from a low-variance gradient estimation.", "publication_ref": ["b16", "b7", "b4", "b6", "b13", "b21", "b19", "b26", "b6", "b13", "b21"], "figure_ref": ["fig_1", "fig_1"], "table_ref": []}, {"heading": "Unbiasedness of Gradient Estimation", "text": "We now prove that our document space projected gradient is an unbiased estimate of true gradient in the sense of expectation [26]. We define Z t (w) as the event of w winning the duel with w t , Z t (w) = 1 w.p. 1 \u2212 P t (w t \u227b w) 0 w.p. P t (w t \u227b w)\nThen the gradient used for model update in DBGD-DSP (as described in Algorithm 1) can be described as,\nh t = \u2212Z t (w t + \u03b4u t )\u0434 t .(2)\nNote that by adding a negative sign we view our model update as online gradient descent w t +1 = w t \u2212 \u03b1\u0434 t . We now show in the following theorem that this is an unbiased gradient estimation of true gradient. By defining a smoothed version of f t asf t (w) = E u \u2208B [f t (w + \u03b4u)], we have: Theorem 3.1. The projected gradient \u0434 t in DBGD-DSP is an unbiased estimate of true gradient, i.e.,\nE[h t ] = \u03b4 d \u2207f t (w)(3)\nover random unit vector u t .\nProof. Based on the Lemma 1 of [26], we have\nE [h t ] = E [\u2212Z t (w t + \u03b4u t )A t u t ] = E u t \u2208S d \u22121 [f t (w + \u03b4 A t u t )u t ]\nDefine F t (w) = f t (A t w), we have\nE[h t ] = E u t \u2208S d \u22121 [f t (w t + \u03b4 A t u t )u t ] = E u t \u2208S d \u22121 [F t (A \u22121 t w t + \u03b4u t )u t ] = \u03b4 d \u2207E u t \u2208B d [F t (A \u22121 t w t + \u03b4u t )u t ] = \u03b4 d \u2207F t (A \u22121 t w t ) = \u03b4 d A t \u2207f t (w t ) = \u03b4 d \u2207f t (w t )\nwhere the third equality is based on Stokes' Theorem. The last equality holds because gradient \u2207f t (w t ) belongs to document space S t , and thus projecting it by A t maps back to itself. \u25a1\nThe guarantee of unbiased gradient estimation is a major advantage of our proposed document space gradient projection method, compared with previous attempts to reduce the gradient exploration space, such as Oosterhuis et. al [14] and Wang et al. [22]. Our method enjoys reduced variance of gradient estimate (which will be proved next), without the risk of converging towards a suboptimal solution. We should note that the above is independent from the mechanism of how the proposal directions are generated, as shown in the first four steps of proof above. As a result, if the input direction to our projection procedure is unbiased, the resulting update direction is also unbiased. This enables our solution's generalization to other types of DBGD algorithms.", "publication_ref": ["b25", "b25", "b13", "b21"], "figure_ref": [], "table_ref": []}, {"heading": "Regret Analysis of DBGD-DSP", "text": "We now analyze the regret of our proposed DBGD-DSP algorithm, starting with its variance of gradient update.\nLemma 3.2. The variance of gradient update in DBGD-DSP is bounded by\nE[|h t | 2 ] = E u t \u2208S d \u22121 | \u2212 Z t (w t + \u03b4u t )A t u t | 2 \u2264 Rank(A t ) d .\nProof.\nE[|h t | 2 ] = E u t | \u2212 Z t (w t + \u03b4u t )A t u t | 2 \u2264 E u t |A t u t | 2 = E u t (A t u t ) \u22a4 (A t u t ) = tr E u t A t u t u \u22a4 t A \u22a4 t //apply the trace trick = tr A t E u t u t u \u22a4 t A \u22a4 t = tr A t 1 d I A \u22a4 t = 1 d tr A t A \u22a4 t = 1 d tr (A t ) //a projection matrix is idempotent = Rank(A t ) d\nwhere tr(\u2022) denotes the matrix trace operation. The sixth equality holds because u t is uniformly sampled from a unit sphere, and its covariance matrix E u t u t u \u22a4 t is 1 d I . Since A t is an orthogonal projection matrix, the eighth equality holds for A t A \u22a4 t = A t . \u25a1\nRemark. The variance of gradient update in DBGD [26] is bounded by\nE u t | \u2212 Z t (w t + \u03b4u t )u t | 2 \u2264 1.\nComparing the variance of gradient update in DBGD-DSP with DBGD, our method reduces the variance from 1 to Rank(A t ) d\n. Since the dimension of projection matrix A t is d-by-d, we have Rank(A t ) \u2264 d, which guarantees the reduction of variance in DBGD-DSP comparing to that in DBGD. The rank of A t is also bounded by the number of examined documents m t , since document space S t is constructed by these m t examined documents. In practice, users would only examine a handful of documents [4,9], while the ranking feature dimension is expected to be much larger. We argue that m t \u226a d, such that our document space projection achieves considerable variance reduction.\nThe significance of this variance reduction can be intuitively understood from Figure 1: though different traces of model update would eventually lead to the same converged model, if one has a sufficiently large amount of interactions with users, the one with lower variance would always require less observations. A faster converging algorithm leads to user satisfaction earlier. Next, we verify this benefit by proving the reduction of regret introduced by the reduced variance in gradient estimation.\nTheorem 3.3. By setting m = max t m t , \u03b4 = \u221a 2Rm \u221a 13LT 1/4 , \u03b1 = Rm \u221a T \u03b4 ,\nthe expected regret of DBGD-DSP as defined in Eq (1) is upper bounded by,\nE[Re\u0434] \u2264 2\u03bb T T 3/4 \u221a 26RmL,(4)\nwhere\n\u03bb T = L \u03c3 \u221a 13LT 1/4 L \u03c3 \u221a 13LT 1/4 \u2212 L v L 2 \u221a 2Rm\nThe proof is obtained by extending Theorem 2 in [26]. We omit the details due to space limit, and emphasize that the key difference is introduced by replacing variance of gradient estimation from\nE u t | \u2212 Z t (w t + \u03b4u t )u t | 2 to E u t | \u2212 Z t (w t + \u03b4u t )A t u t | 2 . Since the variance of gradient estimation is reduced from 1 to Rank(A t ) d , the regret of DBGD can be reduced from O( \u221a dT 3/4 ) to O( \u221a mT 3/4 ),\nwhere m is the maximum number of documents included in a document space under a single query. Again, as the number of included ranking features is oftentimes much larger than the number of documents a user would examine under a single query, the reduction of regret is considerable. Moreover, as the reduction of variance from our project-based method is independent from the way about how the proposal directions are generated, our method can be generally applied to most existing DBGD-type OL2R algorithms to improve their learning convergence.", "publication_ref": ["b25", "b3", "b8", "b25"], "figure_ref": ["fig_1"], "table_ref": []}, {"heading": "Practical Treatments of Document Space Projection", "text": "Now we discuss several practical treatments of our proposed Document Space Projection method, including the construction of document space and orthogonal projection matrix.\nIn our theoretical analysis, we have assumed the knowledge of users' examined documents and corresponding projection matrix. However, in practice, a user's result examination is unobserved. A rich body of research has been developed to perform statistical inference of it, collectively known as click modeling [3,4]. Any of these existing click models can be plugged into our solution framework, i.e., line 13 of Algorithm 1. In this work, we simply follow [9] to infer user examination by the last clicked position: given the click position list C t , we use the last clicked position c l,t to approximate the last examined position M t by setting M t = c l,t + k, where k is a hyper-parameter. Based on sequential examination hypothesis of click modeling, every document before the last clicked position is examined, and we use k to approximate the number of positions following the last clicked position that were still examined. We leave more comprehensive study of click modeling in our solution as future work.\nThe above treatment provides a reasonable inference of examined documents. However, it requires a careful choice of k for each query (preferably). If k is set too large, the variance of gradient estimate will increase (as proved in Lemma 3.2). If k is too small, the document space may not include all examined documents, and it is at risk of introducing bias in gradient projection. To avoid bias in constructing the document space, we also consider adding historically examined documents to the current query's document space. Specifically, we add r recently examined documents to the current document space S t to compensate the potentially overlooked examined documents in the current query.\nIn line 14 of Algorithm 1, we solve the orthogonal projection matrix A t of document space S t . A t could be computed by several methods. Denote D t as a d-by-m t matrix where each column is the feature vector for an examined document. One can use QR decomposition or Singular Value Decomposition (SVD) to solve for its orthonormal basis V t , and the projection matrix can then be constructed by A t = V t V T t . In our experiments, we chose SVD for constructing the basis of document space, because of its widely available and efficient large-scale implementations. But the choice for the construction of this project matrix does not affect the convergence nor unbiasedness of our proposed solution.", "publication_ref": ["b2", "b3", "b8"], "figure_ref": [], "table_ref": []}, {"heading": "EXPERIMENTS", "text": "To demonstrate our proposed Document Space Projection method's empirical efficacy, we compare the performance of several bestperforming DBGD-type OL2R algorithms on five public learning to rank datasets, with and without our document space projection method applied.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Experiment Setup", "text": "\u2022 Datasets. We tested our algorithms and the baselines on five benchmark datasets: including MQ2007, MQ2008, NP2003 [13], MSLR-WEB10K [16], and the Yahoo! Learning to Rank Challenge dataset [2]. In each of the five datasets, each query-document pair is encoded as a vector of ranking features. These features include PageRank, TF.IDF, Okapi-BM25, URL length, language model score, and many more varied by dataset.\nThe MQ2007 and MQ2008 datasets are collected from the 2007 and 2008 Million Query track at TREC [21]. MQ2007 contains about 1700 queries, and MQ2008 contains about 800 queries, which represent a mix of informational and navigational search intents. They both have 46-dimensional feature vectors to represent querydocument pairs, and the document relevance are labeled in three grades: 0 (not relevant), 1 (relevant), and 2 (most relevant).\nThe NP2003 dataset also comes from the TREC Web track, consisting of queries crawled from the .gov domain. It is comprised of about 150 navigational-focused queries, with over 1000 document relevance assessments per query. It uses 64 ranking features, and the document relevance labels are binary (0 and 1 only).\nThe MSLR-WEB10K dataset was released by Microsoft in 2010, and consists of 10,000 queries with relevance assessments coming from a labeling set from the Microsoft Bing search engine. It has 136 ranking features, and the relevance judgments range from 0 (not relevant) to 4 (most relevant).  The Yahoo! Learning to Rank Challenge dataset was also released in 2010, as an effort on part of Yahoo! to promote the dataset as well as research into better learning to rank algorithms. The dataset contains about 36,000 queries, 883,000 assessed documents, and 700 ranking features. Again, the relevance judgments range from 0 (not relevant) to 4 (most relevant)\nThis diversity in the structure of the datasets that we chose to test on helps us to evaluate our algorithms more holistically. While small, the MQ2007 and MQ2008 sets have been around for a long time and have a good mix of query types. NP2003 gives us insight into how the algorithms perform on navigational search intents specifically, which are markedly different in nature from informational search intents. MSLR-WEB10K and the Yahoo! dataset are large-scale datasets used by actual commercial search engines, which give us a better understanding of how the algorithms perform in practice. Since each dataset was split into training, testing, and validation subsets, we used the training sets for online experiments to measure cumulative performance, and used the testing sets for evaluating offline performance.\n\u2022 Simulated User Interactions. Based on an online learning to rank framework proposed in [15], we use the standard setup to simulate user interactions. Within this framework, we used the Cascade Click Model to simulate user click behavior. This model assumes that a user interacts with a set of search results by linearly scanning the list from top and making a decision for each document as to whether or not to click. In the model, the probability of a click for a given document is conditioned on the relevance label of that document, as a user is expected to be more likely to click on relevant documents. After evaluating each document, the user must decide whether or not to continue perusing the list. This decision's probability distribution is again conditioned on the relevance of the examined document, as a user is more likely to stop looking through the results if he/she has already satisfied their information need. These aforementioned probabilities can be altered to simulate different types of users and interactions.\nAs illustrated in Table 1, we use three different click model probability configurations to represent three different types of users. First, we have the perfect user, who clicks on all relevant documents and does not stop browsing until they have visited all of the documents. This type of users contribute the least noise, as they make no mistakes and the feedback is entirely accurate. Second, we have the navigational user, who is very likely to click on the first highly relevant document that he/she sees and stops there. Third, we have the informational user, who, in his/her search for information, sometimes clicks on irrelevant documents, and as such contributes a significant amount of noise in click feedback.\n\u2022 Evaluation Metrics. As set forth in [18], cumulative (online) Normalized Discounted Cumulative Gain (NDCG) and offline NDCG are commonly used metrics for evaluating OL2R algorithms. Cumulative NDCG is calculated by summing NDCG scores from successive iterations with a discount factor \u03b3 set to 0.995. We assess our model's estimation convergence via cosine similarity between the current weight vector and a reference weight vector (considered to be the optimal vector) as estimated by an offline learning-to-rank algorithm trained with the complete true relevance judgment labels. Due to its superior empirical performance, we used LambdaRank [1] with no hidden layer in our experiments to estimate this reference weight vector. In each experiment, the number of iterations T was set to 10,000, and the current query X t was randomly sampled from the dataset in each iteration. We execute all the experiments 15 times with different random seeds, and report and compare the average performance in all experiments.\n\u2022 Evaluation Questions. To better understand the advantages of our proposed algorithms, we aim to answer the following evaluation questions through the course of our experiments.\nQ1: Can our proposed Document Space Projection method consistently improve the performance of best-performing DBGDtype OL2R algorithms? Q2: Do gradients rectified by our document space projection explore the gradient space more efficiently? Q3: How do different hyper-parameter settings alter the performance of our document space projection? \u2022 Baseline Algorithms. We choose the following three best-performing DBGD-type OL2R algorithms as our baselines for comparison:\n-DBGD [26]: A single direction uniformly sampled from the whole parameter space is explored. -MGD [19]: Multiple directions are explored in one iteration to reduce the gradient estimation variance. Multileaving is used to compare multiple rankers. The model updates towards the mean of all rankers that beat the current model. -NSGD [22]: Multiple directions are sampled from the null space of previously poorly performing gradients. Ties are broken by evaluating the tied candidate rankers on a recent set of difficult queries.\nWe apply our proposed Document Space Projection to the baseline algorithms, and compare them with DBGD-DSP, MGD-DSP and NSGD-DSP, respectively.", "publication_ref": ["b12", "b15", "b1", "b20", "b14", "b17", "b0", "b18", "b21"], "figure_ref": [], "table_ref": ["tab_1"]}, {"heading": "Performance of Document Space Projection", "text": "We begin our experimental analysis by answering our first evaluation question. We compared all algorithms over 3 click models and 5 datasets. We set the hyper-parameters of DBGD, MGD and NSGD according to their original papers. Following [19,26], we set the exploration step size \u03b4 to 1 and learning rate \u03b1 to 0.1. Both MGD and NSGD explore 9 proposal directions in one iteration. For our document space projection method, we consider k = 3 documents following the last clicked position as examined documents, and add r = 10 recently examined documents into document space S t . We use SVD to solve for orthonormal basis V t of the document space S t , and compute the projection matrix by A t = V t V \u22a4 t . We reported the offline NDCG@10 and online cumulative NDCG @10 after 10,000 iterations in Table 2 and Table 3. Due to space limit, we only reported the offline performance during the 10,000 iterations over 3 click models on Yahoo dataset, a large-scale realworld L2R dataset with 700 ranking features, in Figure 2. MGD improves the online performance over DBGD by exploring multiple rankers simultaneously, and NSGD further improves over MGD by exploring gradients in a constrained subspace, as shown in Table 2. We observe that our proposed document space projection method consistently improves the online performance of all baseline algorithms. Recall that in Section 3.4 our theoretical analysis suggested that document space projection reduces both the gradient estimation variance and the regret (online performance) with respect to the ratio between the rank of document space and feature dimension. Correspondingly, we observe that indeed we improved the OL2R models' ranking performance significantly over MSLR-WEB10K and Yahoo datasets, which are collected from realworld commerical search engines and have much higher feature dimensions (130 and 700 respectively). This result demonstrates the potential of document space projection to improve large-scale real-world DBGD-type OL2R applications with high-dimensional ranking features, as our algorithm attains satisfactory performance earlier than other baseline OL2R algorithms measured by online NDCG@10. We also notice that the standard deviation of those models' ranking performance is reduced when applying document space projection, which confirms our analysis of variance reduction in Lemma 3.2.\nFrom Figure 2 and Table 3 we notice that document space projection mostly improves offline performance over baseline algorithms. Figure 2 shows that document space projection significantly accelerates the convergence rate over the baseline algorithms, because of the reduced variance in gradient estimation. We also observe that applying document space projection under the perfect click model may lead to degraded performance, for example DBGD on MQ2007  and Yahoo dataset. This is because document space projection guarantees an unbiased gradient estimation under the assumption of known result examinations, as discussed in Section 3.3. However, since in practice a user's result examination is unobserved, we approximated the examined documents by including all documents before the last clicked position and k additional documents after the last clicked position. The perfect click model is an ideal case that users' stop probability is set to 0.0 (see Table 1) and every document is examined. Here, the document space needs to include all displayed documents to guarantee the unbiasedness, which requires a significantly larger k compared to the k used for navigational and informational click models. We argue that in practice since users only examine a handful of documents, we could well-approximate  the examined documents with a reasonable choice of k. More sophisticated click models can also be introduced. We will analyze the effect of k in Section 4.3. In addition, we also observe that under informational click model the performance of NSGD-DSP is slightly decreased compared with original NSGD over three datasets. Note that since NSGD does not guarantee its gradient exploration is unbiased, further projecting its gradient may also lead to a biased gradient update and thus a sub-optimal model.", "publication_ref": ["b18", "b25"], "figure_ref": ["fig_3", "fig_3", "fig_3"], "table_ref": ["tab_2", "tab_3", "tab_2", "tab_3", "tab_1"]}, {"heading": "Analysis of Document Space Projection", "text": "To answer the second evaluation question, we design two experiments to show the effectiveness of document space projected gradient. In the first experiment, we study the utility of document space projected gradient. We compare the ranking performance of linearly interpolating the unrectified direction u t and its document space projected version \u0434 t , i.e., \u03bb\u0434 t + (1 \u2212 \u03bb)u t , based on the MGD algorithm on MSLR-WEB10K dataset. Similar observations were obtained on other datasets, but due to space limit we have to omit those detailed results. We report the online and offline performance by varying \u03bb from 0 (which is equivalent to the original MGD algorithm) and 1 (which is MGD-DSP) in Figure 3 (a) and (b). We can clearly observe a trend of increasing online performance over all three click models when we increase \u03bb, i.e., trust more on the projected direction \u0434 t for model update. This confirms the effectiveness of the projected direction \u0434 t within document space comparing with the unrectified direction u t from the entire parameter space. The offline performance is generally robust to the setting of \u03bb for navigational and information click models. This is expected since both MGD and MGD-DSP are unbiased and will eventually converge to similar offline performance after sufficiently large number of iterations (we had 10,000 iterations in our experiments).\nIn the second experiment, we trained an offline LambdaRank model [1] using the complete annotated relevance labels in the largescale MSLR-WEB10K dataset. Then given this w * , we compared cosine similarity between the online estimated model parameters with and without DSP in each iteration using MGD as the baseline. We show the result of first 5,000 iterations. In Figure 3 (c) we can observe that MGD-DSP converges faster and better to w * than MGD. This suggests the rectified gradient is more effective than the original one. We also compared with an oracle algorithm that knows the ground-truth examined documents, denoted as DSP-GT, to validate the effectiveness of our approximated document space. We show the result on DBGD and MGD under the perfect click model in Figure 3(d). We notice that oracle algorithms performed similarly as our proposed algorithm with an approximated document space, which confirms the effectiveness of the approximation heuristics.\nTo answer the third evaluation question, we compare different hyper-parameters used for constructing the document space on MSLR-WEB10K dataset. We vary k from 0 to 7 and report the result in Figure4 (a). We notice that for navigational and informational click models, a relatively small k achieved the best performance, i.e., k = 3. This corresponds to the observation that users do not continue to examine many documents after their last click under these two click models. However, under the perfect click model, the models' performance increases with a larger k. This aligns with the conclusions from our discussion in Section 4.2 that under the perfect click model, we need to set a much larger k to accurately construct the document space and guarantee an unbiased gradient estimate.\nIn Figure 4(b), we vary r . As we discussed in Section 3.5, we are motivated to add recently examined documents to compensate for potentially overlooked examined documents in the current query. The effect of different choices of r is more noticeable under the perfect click model. This echoes our analysis above that under the perfect click model some examined documents may be overlooked when k is not large enough. Thus correctly setting up r could reduce the bias in document space construction and compensate the final performance. From the result figure, we notice that setting r = 20 provides the best result. Under navigational and informational click models, the algorithm is generally robust to the choice of r . This is because the approximations of examined documents are already accurate with a reasonable setting of k.", "publication_ref": ["b0"], "figure_ref": ["fig_4", "fig_4", "fig_4", "fig_0"], "table_ref": []}, {"heading": "CONCLUSION", "text": "In this paper, we propose and develop the Document Space Projection (DSP) method for reducing variance in gradient estimation and improving online learning to rank performance. The key insight of DSP is to recognize that the interleaved test only reveals the projection of true gradient on the spanned space of examined documents. Including anything beyond this space for model update only introduces noise. Thus our method projects the selected model update direction back to the document space to reduce its variance. We proved that DSP maintains an unbiased gradient estimate, and it can substantially improve the regret bound for DBGD-style algorithms via the reduced variance. Through our extensive experiments, we found that DSP is able to provide statistically significant improvements to several best performing DBGD-type OL2R models, both in terms of variance reduction and overall performance, especially when the number of ranking features is large.\nCurrently, we are using a heuristic method to construct the document space. However, we did observe that the performance of DSP varies under different click models for simulated user click feedback, i.e., different underlying examination behaviors. As for our future work, we plan to incorporate different click modeling solutions for more accurate document space construction. It would also be meaningful to study how to perform document space based exploratory direction generation, before the interleaved test. Exploratory direction pre-selection is expected to further accelerate the gradient exploration and improve user satisfaction during online learning, but we also need to ensure it is unbiased. We leave the exploration of our projection-based solution to other types of OL2R algorithms as another future work.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "ACKNOWLEDGMENTS", "text": "We thank the anonymous reviewers for their insightful comments. This work was supported in part by National Science Foundation Grant IIS-1553568 and IIS-1618948 and Bloomberg Data Science Ph.D. Fellowship.", "publication_ref": [], "figure_ref": [], "table_ref": []}], "references": [{"ref_id": "b0", "title": "From ranknet to lambdarank to lambdamart: An overview", "journal": "", "year": "2010", "authors": "J C Christopher;  Burges"}, {"ref_id": "b1", "title": "Yahoo! learning to rank challenge overview", "journal": "", "year": "2011", "authors": "Olivier Chapelle; Yi Chang"}, {"ref_id": "b2", "title": "A dynamic bayesian network click model for web search ranking", "journal": "ACM", "year": "2009", "authors": "Olivier Chapelle; Ya Zhang"}, {"ref_id": "b3", "title": "An experimental comparison of click position-bias models", "journal": "ACM", "year": "2008", "authors": "Nick Craswell; Onno Zoeter; Michael Taylor; Bill Ramsey"}, {"ref_id": "b4", "title": "Online convex optimization in the bandit setting: gradient descent without a gradient", "journal": "", "year": "2005", "authors": "Adam Tauman Abraham D Flaxman; H Brendan Kalai;  Mcmahan"}, {"ref_id": "b5", "title": "Online learning to rank for information retrieval: SIGIR 2016 Tutorial", "journal": "ACM", "year": "2016", "authors": "Artem Grotov;  Maarten De Rijke"}, {"ref_id": "b6", "title": "Reusing historical interaction data for faster online learning to rank for IR", "journal": "ACM", "year": "2013", "authors": "Katja Hofmann; Anne Schuth; Shimon Whiteson; Maarten De Rijke"}, {"ref_id": "b7", "title": "A probabilistic method for inferring preferences from clicks", "journal": "ACM", "year": "2011", "authors": "Katja Hofmann; Shimon Whiteson; Maarten De Rijke"}, {"ref_id": "b8", "title": "Accurately interpreting clickthrough data as implicit feedback", "journal": "Acm", "year": "2017", "authors": "Thorsten Joachims; Laura Granka; Bing Pan; Helene Hembrooke; Geri Gay"}, {"ref_id": "b9", "title": "DCM bandits: Learning to rank with multiple clicks", "journal": "", "year": "2016", "authors": "Sumeet Katariya; Branislav Kveton; Csaba Szepesvari; Zheng Wen"}, {"ref_id": "b10", "title": "Cascading bandits: Learning to rank in the cascade model", "journal": "", "year": "2015", "authors": "Csaba Branislav Kveton; Zheng Szepesvari; Azin Wen;  Ashkan"}, {"ref_id": "b11", "title": "Learning to rank for information retrieval", "journal": "Foundations and Trends\u00ae in Information Retrieval", "year": "2009", "authors": "Tie-Yan Liu"}, {"ref_id": "b12", "title": "Letor: Benchmark dataset for research on learning to rank for information retrieval", "journal": "", "year": "2007", "authors": "Tie-Yan Liu; Jun Xu; Tao Qin; Wenying Xiong; Hang Li"}, {"ref_id": "b13", "title": "Balancing Speed and Quality in Online Learning to Rank for Information Retrieval", "journal": "ACM", "year": "2017", "authors": "Harrie Oosterhuis;  Maarten De Rijke"}, {"ref_id": "b14", "title": "Differentiable Unbiased Online Learning to Rank", "journal": "", "year": "2018", "authors": "Harrie Oosterhuis;  Maarten De Rijke"}, {"ref_id": "b15", "title": "", "journal": "", "year": "2013", "authors": "Tao Qin; Tie-Yan Liu"}, {"ref_id": "b16", "title": "How does clickthrough data reflect retrieval quality", "journal": "ACM", "year": "2008", "authors": "Filip Radlinski; Madhu Kurup; Thorsten Joachims"}, {"ref_id": "b17", "title": "Lerot: An online learning to rank framework", "journal": "ACM", "year": "2013", "authors": "Anne Schuth; Katja Hofmann; Shimon Whiteson; Maarten De Rijke"}, {"ref_id": "b18", "title": "Multileave gradient descent for fast online learning to rank", "journal": "ACM", "year": "2016", "authors": "Anne Schuth; Harrie Oosterhuis; Shimon Whiteson; Maarten De Rijke"}, {"ref_id": "b19", "title": "Multileaved comparisons for fast online evaluation", "journal": "ACM", "year": "2014", "authors": "Anne Schuth; Floor Sietsma; Shimon Whiteson; Damien Lefortier; Maarten De Rijke"}, {"ref_id": "b20", "title": "TREC: Experiment and evaluation in information retrieval", "journal": "MIT press Cambridge", "year": "2005", "authors": "M Ellen; Donna K Voorhees;  Harman"}, {"ref_id": "b21", "title": "Efficient exploration of gradient space for online learning to rank", "journal": "ACM", "year": "2018", "authors": "Huazheng Wang; Ramsey Langley; Sonwoo Kim; Eric Mccord-Snook; Hongning Wang"}, {"ref_id": "b22", "title": "Learning to rank with selection bias in personal search", "journal": "ACM", "year": "2016", "authors": "Xuanhui Wang; Michael Bendersky; Donald Metzler; Marc Najork"}, {"ref_id": "b23", "title": "The k-armed dueling bandits problem", "journal": "J. Comput. System Sci", "year": "2012", "authors": "Yisong Yue; Josef Broder; Robert Kleinberg; Thorsten Joachims"}, {"ref_id": "b24", "title": "Learning more powerful test statistics for click-based retrieval evaluation", "journal": "ACM", "year": "2010", "authors": "Yisong Yue; Yue Gao; Oliver Chapelle; Ya Zhang; Thorsten Joachims"}, {"ref_id": "b25", "title": "Interactively optimizing information retrieval systems as a dueling bandits problem", "journal": "ACM", "year": "2009", "authors": "Yisong Yue; Thorsten Joachims"}, {"ref_id": "b26", "title": "Constructing reliable gradient exploration for online learning to rank", "journal": "ACM", "year": "2016", "authors": "Tong Zhao; Irwin King"}, {"ref_id": "b27", "title": "Online Learning to Rank in Stochastic Click Models", "journal": "", "year": "2017", "authors": "Masrour Zoghi; Tomas Tunys; Mohammad Ghavamzadeh; Branislav Kveton; Csaba Szepesvari; Zheng Wen"}], "figures": [{"figure_label": "4", "figure_type": "figure", "figure_id": "fig_0", "figure_caption": "4 :4Receive query X t = {x 1 , x 2 , ..., x s } 5:u t = sample_unit_vector() 6:", "figure_data": ""}, {"figure_label": "1", "figure_type": "figure", "figure_id": "fig_1", "figure_caption": "Figure 1 :1Figure 1: Illustration of model update for DBGD-DSP in a three dimensional space. Dashed lines represent the trajectory of DBGD following different update directions. u t is the selected direction by DBGD, which is in the 3-d space. Red bases present the document space S t on a 2-d plane. u t is projected onto S t to become \u0434 t for model update.", "figure_data": ""}, {"figure_label": "2", "figure_type": "figure", "figure_id": "fig_3", "figure_caption": "Figure 2 :2Figure 2: Offline NDCG@10 on Yahoo! dataset.", "figure_data": ""}, {"figure_label": "3", "figure_type": "figure", "figure_id": "fig_4", "figure_caption": "Figure 3 :3Figure 3: Analyzing Document Space Projection.", "figure_data": ""}, {"figure_label": "4", "figure_type": "figure", "figure_id": "fig_5", "figure_caption": "Figure 4 :4Figure 4: Hyper-parameter tuning for Document Space Projection.", "figure_data": ""}, {"figure_label": "", "figure_type": "table", "figure_id": "tab_0", "figure_caption": "Receive click positions C t on L t , and infer click credits {c t , c \u2032 t }", "figure_data": "10: 11:if c t \u2265 c \u2032 t then w t +1 = w t12:else13:"}, {"figure_label": "1", "figure_type": "table", "figure_id": "tab_1", "figure_caption": "Configurations of simulation click models.", "figure_data": ""}, {"figure_label": "2", "figure_type": "table", "figure_id": "tab_2", "figure_caption": "Online NDCG@10, standard deviation and relative improvement of document space projection of each algorithm after 10,000 queries.", "figure_data": "Click ModelAlgorithmMQ2007MQ2008MSLR-WEB10KNP2003YahooDBGD679.3 (21.6)847.1 (38.4)532.2 (15.3)1130.2 (43.3)1165.5 (22.6)DBGD-DSP 689.1 (19.5)(+1.44%)858.0 (39.2)(+1.29%)553.6 (13.1)(+4.02%)1198.8 (40.0) (+6.07%)1198.8 (33.5)(+2.86%)MGD689.1 (14.6)859.4 (38.1)558.3 (7.0)1192.9 (44.6)1201.9 (16.3)PerfectMGD-DSP757.3 (16.2)(+9.90%) 919.5 (42.2)(+6.99%) 626.4 (9.6)(+12.20%)1335.3 (39.1)(+11.94%)1309.4 (10.6) (+8.94%)NSGD684.4 (20.5)867.5 (40.3)589.5 (14.2)1274.9 (47.4)1162.3 (12.9)NSGD-DSP 732.5 (20.0)(+7.03%)904.3 (38.0)(+4.24%)635.6 (12.8)(+7.82%)1368.5 (41.1)(+7.34%)1270.1 (2.5)(+9.27%)DBGD646.1 (23.4)817.9 (45.5)517.5 (20.9)1062.3 (55.4)1133.3 (40.8)DBGD-DSP 664.9 (26.9)(+2.91%)830.3 (44.1)(+1.52%)543.1 (14.8)(+4.95%)1140.1 (52.5)(+7.32%)1199.4 (34.6)(+5.83%)MGD632.7 (15.5)827.5 (35.5)538.2 (7.2)1115.4 (44.6)1171.3 (20.4)NavigationalMGD-DSP694.5 (15.7)(+9.77%) 882.3 (40.0)(+6.62%) 586.9 (9.5)(+9.05%)1300.9 (39.6)(+16.63%) 1290.2 (15.3) (+10.15%)NSGD660.1 (24.5)849.1 (36.6)562.1 (18.8)1211.1 (66.5)1186.2 (16.8)NSGD-DSP 724.6 (24.5)(+9.77%)895.8 (34.2)(+5.50%)608.3 (12.1) (+8.22%) 1296.2 (24.3) (+7.03%)1283.4 (7.2)(+8.19%)DBGD583.4 (46.0)763.9 (55.1)472.4 (34.6)849.8 (144.5)1107.3 (46.6)DBGD-DSP 620.1 (40.8)(+6.29%)782.4 (51.8) (+2.42%) 522.1 (18.6) (+10.52%) 992.5 (81.1)(+16.79%)1158.5 (22.0)(+4.62%)MGD621.2 (18.2)817.5 (45.3)538.3 (10.8)1107.9 (46.2)1146.6 (37.5)InformationalMGD-DSP671.4 (18.9)(+8.08%) 865.9 (37.7)(+5.92%) 580.5 (10.4)(+7.84%)1274.5 (42.9)(+15.04%) 1268.1 (16.4)(+10.60%)NSGD629.7 (25.3)814.9 (37.1)532.9 (15.2)1123.5 (59.8)1110.5 (10.9)NSGD-DSP 703.6 (29.2)(+11.74%) 871.3 (48.3)(+6.92%)597.9 (14.1)(+12.20%) 1222.8 (43.8)(+9.03%)1204.7 (9.6)(+8.48%)"}, {"figure_label": "3", "figure_type": "table", "figure_id": "tab_3", "figure_caption": "Offline NDCG@10, standard deviation and relative improvement of document space projection of each algorithm after 10,000 queries.", "figure_data": "Click ModelAlgorithmMQ2007MQ2008MSLR-WEB10KNP2003YahooDBGD0.484 (0.023)0.683 (0.023)0.331 (0.009)0.737 (0.056)0.688 (0.011)DBGD-DSP 0.480 (0.020) (-0.83%)0.685 (0.024) (+0.29%) 0.333 (0.011) (+0.6%)0.738 (0.059) (+0.14%)0.681 (0.013) (-1.02%)MGD0.495 (0.022)0.691 (0.020)0.334 (0.003)0.746 (0.048)0.715 (0.002)PerfectMGD-DSP0.501 (0.021)(+1.21%) 0.695 (0.022)(+0.58%) 0.409 (0.006)(+22.46%) 0.748 (0.055)(+0.27%)0.725 (0.003)(+1.40%)NSGD0.488 (0.019)0.689 (0.024)0.397 (0.012)0.743 (0.050)0.691 (0.005)NSGD-DSP 0.491 (0.022)(+0.61%)0.691 (0.025)(+0.29%)0.398 (0.008) (+0.25%) 0.750 (0.042) (+0.94%) 0.717 (0.004)(+3.76%)DBGD0.463 (0.028)0.667 (0.021)0.320 (0.012)0.728 (0.054)0.663 (0.020)DBGD-DSP 0.465 (0.024)(+0.43%)0.668 (0.023)(+0.15%)0.327 (0.011)(+2.19%)0.734 (0.052)(+0.82%)0.656 (0.013)(-1.06%)MGD0.426 (0.019)0.664 (0.016)0.321 (0.003)0.740 (0.048)0.703 (0.010)NavigationalMGD-DSP0.467 (0.021)(+9.62%)0.684 (0.017)(+3.01%) 0.331 (0.005)(+3.12%)0.744 (0.053)(+0.54%)0.714 (0.006)(+1.56%)NSGD0.473 (0.022)0.676 (0.024)0.389 (0.013)0.732 (0.053)0.686 (0.008)NSGD-DSP 0.478 (0.020)(+1.06%) 0.683 (0.026)(+1.04%) 0.376 (0.014)(-3.34%)0.788 (0.006)(+7.65%) 0.711 (0.001)(+3.64%)DBGD0.410 (0.034)0.641 (0.031)0.294 (0.022)0.699 (0.063)0.623 (0.037)DBGD-DSP 0.427 (0.027)(+4.15%)0.632 (0.031)(-1.4%)0.309 (0.011)(+32.65%)0.692 (0.062)(-1.00%)0.63 (0.030)(1.12%)MGD0.406 (0.020)0.651 (0.020)0.317 (0.003)0.726 (0.050)0.668 (0.044)InformationalMGD-DSP0.444 (0.025)(+0.44%)0.669 (0.018)(+0.67%)0.325 (0.004)(+0.33%)0.738 (0.054)(+0.74%)0.701 (0.005)(+4.94%)NSGD0.469 (0.018)0.674 (0.023)0.360 (0.013)0.733 (0.056)0.663 (0.015)NSGD-DSP 0.466 (0.019)(-0.64%)0.668 (0.026)(-0.89%)0.340 (0.018)(-5.56%)0.789 (0.013)(+7.64%) 0.685 (0.004)(+3.32%)"}], "formulas": [{"formula_id": "formula_0", "formula_text": "R(T ) = T t =1 f t (w * , w t ) + f t (w * , w \u2032 t ),(1)", "formula_coordinates": [3.0, 109.82, 523.16, 184.22, 28.78]}, {"formula_id": "formula_1", "formula_text": "w \u2032 t = w t + \u03b4u t 7:", "formula_coordinates": [3.0, 323.83, 164.43, 74.79, 19.4]}, {"formula_id": "formula_2", "formula_text": "w t +1 = w t + \u03b1\u0434 t 17:", "formula_coordinates": [3.0, 320.58, 319.8, 99.64, 17.7]}, {"formula_id": "formula_3", "formula_text": "L v -Lipschitz, which means |v t (x) \u2212 v t (y)| \u2264 L v |x \u2212 y|.", "formula_coordinates": [3.0, 317.62, 374.88, 241.57, 20.74]}, {"formula_id": "formula_4", "formula_text": "P t w \u227b w \u2032 = f t (w, w \u2032 ) = \u03c3 v t (w) \u2212 v t (w \u2032 ) .", "formula_coordinates": [3.0, 352.31, 422.32, 171.26, 11.93]}, {"formula_id": "formula_5", "formula_text": "h t = \u2212Z t (w t + \u03b4u t )\u0434 t .(2)", "formula_coordinates": [4.0, 396.21, 357.8, 161.99, 9.78]}, {"formula_id": "formula_6", "formula_text": "E[h t ] = \u03b4 d \u2207f t (w)(3)", "formula_coordinates": [4.0, 406.14, 461.82, 152.06, 21.05]}, {"formula_id": "formula_7", "formula_text": "E [h t ] = E [\u2212Z t (w t + \u03b4u t )A t u t ] = E u t \u2208S d \u22121 [f t (w + \u03b4 A t u t )u t ]", "formula_coordinates": [4.0, 323.62, 522.72, 228.91, 11.89]}, {"formula_id": "formula_8", "formula_text": "E[h t ] = E u t \u2208S d \u22121 [f t (w t + \u03b4 A t u t )u t ] = E u t \u2208S d \u22121 [F t (A \u22121 t w t + \u03b4u t )u t ] = \u03b4 d \u2207E u t \u2208B d [F t (A \u22121 t w t + \u03b4u t )u t ] = \u03b4 d \u2207F t (A \u22121 t w t ) = \u03b4 d A t \u2207f t (w t ) = \u03b4 d \u2207f t (w t )", "formula_coordinates": [4.0, 364.52, 556.01, 147.11, 117.72]}, {"formula_id": "formula_9", "formula_text": "E[|h t | 2 ] = E u t \u2208S d \u22121 | \u2212 Z t (w t + \u03b4u t )A t u t | 2 \u2264 Rank(A t ) d .", "formula_coordinates": [5.0, 65.23, 296.4, 217.23, 21.05]}, {"formula_id": "formula_10", "formula_text": "E[|h t | 2 ] = E u t | \u2212 Z t (w t + \u03b4u t )A t u t | 2 \u2264 E u t |A t u t | 2 = E u t (A t u t ) \u22a4 (A t u t ) = tr E u t A t u t u \u22a4 t A \u22a4 t //apply the trace trick = tr A t E u t u t u \u22a4 t A \u22a4 t = tr A t 1 d I A \u22a4 t = 1 d tr A t A \u22a4 t = 1 d tr (A t ) //a projection matrix is idempotent = Rank(A t ) d", "formula_coordinates": [5.0, 72.1, 338.78, 203.64, 165.52]}, {"formula_id": "formula_11", "formula_text": "E u t | \u2212 Z t (w t + \u03b4u t )u t | 2 \u2264 1.", "formula_coordinates": [5.0, 65.08, 571.64, 115.03, 10.43]}, {"formula_id": "formula_12", "formula_text": "Theorem 3.3. By setting m = max t m t , \u03b4 = \u221a 2Rm \u221a 13LT 1/4 , \u03b1 = Rm \u221a T \u03b4 ,", "formula_coordinates": [5.0, 327.92, 180.05, 181.38, 38.81]}, {"formula_id": "formula_13", "formula_text": "E[Re\u0434] \u2264 2\u03bb T T 3/4 \u221a 26RmL,(4)", "formula_coordinates": [5.0, 388.23, 238.05, 169.97, 17.52]}, {"formula_id": "formula_14", "formula_text": "\u03bb T = L \u03c3 \u221a 13LT 1/4 L \u03c3 \u221a 13LT 1/4 \u2212 L v L 2 \u221a 2Rm", "formula_coordinates": [5.0, 377.97, 261.22, 118.61, 31.11]}, {"formula_id": "formula_15", "formula_text": "E u t | \u2212 Z t (w t + \u03b4u t )u t | 2 to E u t | \u2212 Z t (w t + \u03b4u t )A t u t | 2 . Since the variance of gradient estimation is reduced from 1 to Rank(A t ) d , the regret of DBGD can be reduced from O( \u221a dT 3/4 ) to O( \u221a mT 3/4 ),", "formula_coordinates": [5.0, 317.96, 329.5, 241.23, 36.24]}], "doi": "10.1145/3331184.3331264"}