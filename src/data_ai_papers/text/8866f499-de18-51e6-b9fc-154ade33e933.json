{"title": "Morphable 3D models from video", "authors": "Matthew Brand", "pub_date": "2001-12-37", "abstract": "Nonrigid 3D structure-from-motion and 2D optical flow can both be formulated as tensor factorization problems. The two problems can be made equivalent through a noisy affine transform, yielding a combined nonrigid structure-from-intensities problem that we solve via structured matrix decompositions. Often the preconditions for this factorization are violated by image noise and deficiencies of the data vis-a-vis the sample complexity of the problem. Both issues are remediated with careful use of rank constraints, norm constraints, and integration over uncertainty in the intensity values, yielding novel solutions for SVD under uncertainty, factorization under uncertainty, nonrigid factorization, and subspace optical flow. The resulting integrated algorithm can track and 3D-reconstruct nonrigid surfaces that have very little texture, for example the smooth parts of the face. Working with low-resolution low-texture \"found video,\" these methods produce good tracking and 3D reconstruction results where prior algorithms fail. This work may not be copied or reproduced in whole or in part for any commercial purpose. Permission to copy in whole or in part without payment of fee is granted for nonprofit educational and research purposes provided that all such whole or partial copies include the following: a notice that such copying is by permission of Mitsubishi Electric Information Technology Center America; an acknowledgment of the authors and individual contributions to the work; and all applicable portions of the copyright notice. Copying, reproduction, or republishing for any other purpose shall require a license with payment of fee to Mitsubishi Electric Information Technology Center America. All rights reserved.", "sections": [{"heading": "Introduction", "text": "The problem of acquiring 3D morphable models of nonrigid objects has attracted intense interest in computer vision since the advent of deformable and eigen-models in the 1980s. Current solutions address special cases of the problem that are well-constrained by additional information. For example, when depth estimates are available from multiple cameras or laser range-finders; when the poses or articulations are fixed or chosen from a maximally informative set; when the surface is decorated with special textures or markers to make inter-frame correspondences obvious; or when structured light is used to reveal its contours. These methods require various combinations of high-quality highresolution sources, calibrated cameras, special lighting, and careful posing. A second class of solutions relaxes image constraints but depends on having a precomputed class of possible models [1] or motions (as used in [3] for tracking).\nIn this paper we consider a relatively unconstrained case: Single-camera video in which the surface is freely moving and articulating. There are no shape or motion priors. We only require that the surface be at least sparsely textured, and that lighting changes, if any, be slow relative to the object's physical motion. The texture can be partially degenerate everywhere the image is sampled, as long as it is not all degenerate in the same direction. We consider lowquality sources that are difficult to constrain, for example, pre-existing footage or home movies of young children. In this paper we will work with faces and video but the methods Our result is a factorization algorithm for 3D nonrigid structure and motion from video that finds 2D correspondences in the course of enforcing 3D geometric invariants. Taking the Tomasi & Kanade [8] rigid-body factorization as a starting point, we reconsider the uncertainty formulation introduced by Irani & Anandan [6], the subspace formulation for optical flow introduced by Irani [5], and the nonrigid extension proposed by Bregler, Hertzmann, & Biermann [3]. Noting their common theme-geometric invariants expressed as rank constraints-we generalize and integrate the constraints from these three subproblems. Our solutions are substantially different from those of [6,5,3], reflecting our identification of new constraints, new solution methods, and corrections to errors in the prior literature.", "publication_ref": ["b0", "b2", "b7", "b5", "b4", "b2", "b5", "b4", "b2"], "figure_ref": [], "table_ref": []}, {"heading": "+ + +", "text": "", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Notation", "text": "We use matrix tensor operators and highly recommend [7] as an introduction and [4] for usage examples. a is a scalar, a is a vector, A is a matrix;\n[\u21d2 i A i ], [\u21d3 i A i ], [ \u21d3 i A i ]\nare horizontal, vertical, and diagonal concatenations, respectively. I is the identity matrix; 0 and 1 are the zero and one matrices. Matrix dimensions are indicated in subscripts (e.g., A r\u00d7c ) or determined by conformance. A denotes transpose; vector-transpose A (i) transposes matrix A with each vertical group of i elements treated as a unit; block-transpose A (i,j) does the same treating each block of i \u00d7 j elements as a unit. \u2297 denotes Kronecker (tensor) product; denotes Hadamard (element-wise) product; \u2295 denotes tiled addition, e.g., A 6\u00d72 \u2295 B 2\u00d72 = A 6\u00d72 + (1 3\u00d71 \u2297 B 2\u00d72 ). vec A vectorizes A by stacking its columns and vec i A r\u00d7c = (vec A) (i) folds (vec A) rc\u00d71 into a matrix having rc/i columns of i elements each. A/B and B\\A denote right and left division; A \u2020 denotes Moore-Penrose pseudo-inverse.", "publication_ref": ["b6", "b3"], "figure_ref": [], "table_ref": []}, {"heading": "Setting", "text": "We begin with a simple model of image formation, depicted in figure 1. Observed shape is a weighted sum of morph bases, rotated in 3D, projected onto the image plane, and translated in that plane. We write the projection in frame f as\nP f = (c f \u2297 R f )S \u2295 t f (1)\nThe rows of S contain the x, y, z ordinates of the K morph bases for N points:\nS 3K\u00d7N . = [s 1x , s 1y , s 1z , s 2x , s 2y , s 2z , ..., s K x , s K y , s K z ] .\nWithout loss of generality, we assume that the row sums are zero (written S1 3K\u00d71 = 0). By convention, the first morph basis gives a scalable mean shape and subsequent morphs deform it. These are combined according to the vector c K\u00d71 of morph weights, which fixes both expression and scale. The orthonormal matrix R D\u00d73 effects a 3D rotation and 2D projection (for D = 2), then t D\u00d71 translates the projection in the image plane. This is a weak perspective model, an approximation to full perspective projection that works well when the depth variation within the object is small relative to the object's distance from the camera-typically the case for consumer camera videography.\nFor\nF K frames we define M f . = c f \u2297 R f , C K\u00d7F . = [\u21d2 f c f ], and T DF \u00d71 . = [\u21d3 f t f ]\n, with projections\nP DF \u00d7N . = [\u21d3 f P f ] = MS \u2295 T, where (2) M DF \u00d73K . = [\u21d3 f M f ] = [ \u21d3 fR f ](C \u2297 I 3 ).(3)\nThis is depicted in figure 2. Much of this paper will be devoted to the special structure of the motion matrix M.\nOur first goal is to infer S, R, C, and T from the interframe correspondences in P. Often these correspondences are unavailable or very hard to compute; in \u00a76 we will leverage our analysis into an algorithm that estimates all variables including P directly from video.\nAssuming for now that that all points are observed in all frames, the translationsT can be estimated as the row-means of P and then removed from P so that all rows in P T are zero-mean. Then P T can factor into pseudo-motion matrixM and pseudo-shape/morph basis matrixS.M in turn can decompose into pseudo-rotations and pseudo-morph weights. There are infinitely many such factorizations and we must solve for one that yields proper rotations and maximal error reduction per morph. As with many multilinear phenomena in image formation, the key to a successful factorization will be the identification and exploitation of rank and norm constraints on substructures in these matrices.", "publication_ref": [], "figure_ref": ["fig_0", "fig_5"], "table_ref": []}, {"heading": "Rigid-body factorization", "text": "In the K = 1 case of rigid-body motion, the rank theorem of Tomasi & Kanade [8] asserts that a rank-3 thin singular value decomposition (SVD)MS Each block in M is a scaled rotation matrix; its rows have equal norm and are orthogonal. Moreover, its first row is orthogonal to any second row taken from blocks to the left and right. An SVD of P T produces a pseudo-motion matrix M = MJ and pseudo-shape matrixS = J \u22121 S, where J is an arbitrary unknown full-rank matrix. Successful factorization thus depends on finding a correction matrix J that will restore the appropriate structure toM andS.\ninformation; the matching right singular vectors form the pseudo-shape matrixS. Assuming that rigid shape statistically dominates the data in P, the remaining vectors contain information about violations of the rigid-motion assumption, e.g., nonrigidities and tracking noise.", "publication_ref": ["b7"], "figure_ref": [], "table_ref": []}, {"heading": "Corrective transform", "text": "The SVD determines both sides up to an invertible 3D affine transformation G 3\u00d73 such that MS = (MG \u22121 )(GS) = MS = P; one must solve for a G \u22121 that restores orthogonal structure toM in order to get proper rotations and shape. Let the row vectors m fx , m fy \u2208 M be the x and y components of frame f 's projection. Then the orthogonality of m fx =m fx /G and m fy =m fy /G gives the constraint \u2200m\nf \u2208Mm fx G \u22121 G \u2212 m fx \u2212m fy G \u22121 G \u2212 m fy = m fx G \u22121 G \u2212 m fy = 0.\nThis system of constraints is linear in the six unknowns of symmetric H = G \u22121 G \u2212 , which can be obtained via standard least-squares methods from a system of linear constraints (with the added constraint m 1x G \u22121 G \u2212 m 1x = c > 0 to fix the scale of G). Because H is symmetric, the constraints on it can be expressed very concisely: Define vech H to be the vector of the lowertriangular elements of H, and vecs H . G \u22121 is estimated from the eigen-decomposition\nV\u039bV EIG \u2190\u2212 H as G \u22121 \u2190 V \u221a \u039b.\nThis assumes that H is positive definite, which is not always the case, leading to nonpositive eigenvalues in \u039b and a complex-valued or rank-deficient G \u22121 . In this case we suggest approximating G from an SVD of H, then turning to the fixpoint\nG \u2190 G([\u21d3 fMf G]\\[\u21d3 f (M f G) \u2020 ]) 1/2 (7)\nThis solves for the transform that bringsM f G closest to (M f G) \u2020 , with equality for proper rotations.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "The nonrigid case", "text": "Bregler, Hertzmann & Biermann [3] recently proposed a direct extension of the above algorithm to the nonrigid case: For K morph bases one performs an SVD of P T and retains the top 3K singular vectors on each side to obtai\u00f1\nM DF \u00d73KS3K\u00d7N SVD 3K\n\u2190\u2212 P T. The shape matrixS of right singular vectors contains K morph bases. Each set of D rows in the motion matrixM of left singular vectors is rearranged as if it were an outer product of rotation coefficients and deformation weights, then factored as such via a second round of rank-1 SVDs:\n\u2200 f (vecR f )C f SVD 1 \u2190\u2212 vec 3DMf .\nThe rotations and shape/deformation matrix are then affine corrected as in \u00a73.2.\nThis assumes that the 1st SVD leaves the singular vectors consistently signed and ordered by morph and dimension (e.g.,\nS = [s 1y , \u2212s 1x , s 1z , s 2y , \u2212s 2x , s 2z , ..., s K y , \u2212s K x , s K z ]\nwhere s 2x is the x component of the second morph basis) whereas the SVD not only reorders but actually mixes these channels with an unknown affine transform J \u22121 3K\u00d73K -one that maximizes concentration of variance in the top singular values. The singular vectors are also randomly signed. Fortuitously, in most human faces the first four channels of greatest variation are head height, width, depth, and vertical jaw motion (s 1y , s 1x , s 1z , s 2y , ...), so that shape and perhaps the first morph will be plausible, but after that the ordering of the channels is unpredictable, leading to mutual contamination of the morph and rotation estimates.\nA simple example shows how the BHB factorization heuristic is vulnerable to less fortuitous datasets and SVDs: Imagine a child's toy with two beads that ride on horizontal rails. The toy has 3D shape and two independent modes of deformation. BHB factorization requires rank-9 data to determine shape and two modes of deformation, but the tracking data is only rank-5 (with a mix of channels approximated by the ordering s 1x , s 1y , s 2x , s 3x , s 1z ), which means that regardless of the amount of data, BHB factorization can only recover two morph bases (shape and a single deformation that combines the motions of both beads in way that may not be physically valid). The misordered singular vectors also lead to incorrect rotation estimates, which contaminate morph bases with torsions and, in the presence of noise, can create additional spurious morph bases (e.g., column 2, row 3 of figure 3). One can cyclically re-solve for each ofR, C,\u015c given the other two (solutions are given in [2]), but we found that this often converges to a mediocre local optimum.", "publication_ref": ["b2", "b1"], "figure_ref": ["fig_3"], "table_ref": []}, {"heading": "The corrective transform problem", "text": "The crux of the problem is finding an optimal correction J \u22121 3K\u00d73K that transforms the result of the SVD into a properly structured motion matrix (M \u2190MJ \u22121 ). Recall from figure 2  One bead is misplaced in depth; there is no independent motion of the beads (except that the upper bead is allowed a spurious motion in depth); and all deformations have torsions that compensate for incorrect rotation estimates. COLUMN 3: A correct shape/deformations basis recovered from the same data by the method given below. ( Adding or subtracting the deformations gives isolated motion of either bead.) norm and are orthogonal. Moreover, they are orthogonal to m fj,y and m fj,x taken from any block to the left or right (j = k), because these blocks are all generated from the same rotation. The exact set of necessary and sufficient norm/orthogonality constraints thatM must satisfy are summarized by the quadratic equality\n\u2200M f \u2208M , (vec 3M f ) (vec 3M f ) = 1 D I D \u2297 ((vec 3DM f ) (vec 3DM f )). (8\n)\nSinceM =MJ \u22121 , solution of eqn. (8) in the least-squares sense is equivalent to minimizing a system of polynomials that are quartic in the elements of J \u22121 . In the rigid-body case, eqn. ( 8) is strictly quartic in J \u22121 and can be approached as a squared-squared-error problem via nested least-squares procedures. This is the strategy of \u00a73.2. In the nonrigid case this strategy does not apply because eqn. ( 8) is both quartic and quadratic in J \u22121 ; the first least-squares procedure in \u00a73.2-division-obliterates information about the quadratic terms that is needed by the second-eigen-decomposition. Direct solution is a very difficult problem so research has centered on finding numerically well-behaved heuristics. For example, the BHB factorization sets J \u2190 I K \u2297 G, a block-diagonal correction that assumes that the SVD correctly organizes all of the information about a morph basis in the appropriate column-triple inM.\nNumerical experiments with projections of 3D data whose principal components are known indicate that J is dense, particularly above the diagonal, meaning that the SVD mixes variation due to minor deformations into the shape and principal deformations. In fact, it is quite difficult to construct a dataset for which J has anything vaguely close to blockdiagonal structure-even with vast amounts of noiseless synthetic data. Our experiments suggest that the scale of the deformations must drop off quadratically in order for the initial SVD to properly group their x, y, z components. Even then, it is unlikely that the components are consistently ordered within all groups.\nIn appendix \u00a7B we give one of a family of solutions that generalize the corrective transform ( \u00a73.2) to nonrigid motion. However, all such solutions are plagued by rank-deficiency problems because the number of unknowns grows quadratically while the rank of the constraints grows linearly: J \u22121 has 9K 2 unique elements while there are 4K nonredundant constraints 1 perM f \u2208M. Moreover, in casual video, the motions in most frames are highly redundant and contribute few new constraints. This sample-complexity problem is a property of image formation, consequently any correction algorithm based purely on the expected structure of the motion matrix will fail as the number of morph modes grows.", "publication_ref": [], "figure_ref": ["fig_5"], "table_ref": []}, {"heading": "Flexible factorization", "text": "Our strategy is to bring in constraints from the shape/morph matrix S: The deformations in\u015c should be as small as possible relative to the mean shape, so that the observed displacement of projected points away from the object-centric origin are explained mostly by the object's shape and residually by its deformations. Equivalently, whenever possible, point motions should be explained parsimoniously by rigid transforms (rotations and scale changes) rather than unparsimoniously by combinations of deformations. Otherwise all motion could be explained as deformations. Let S =SJ be the corrected shape/morph matrix and define Z .\n= I 3 \u2297 diag[0, 1 1\u00d7K\u22121 ]\n. We want to minimize the Frobenius norm of Z\u015c, the part of the shape/morph matrix that contains deformations.\nWe now have two constraints-structure of the motion matrix and parsimony of the deformations. The problem is that the motion matrix gives constraints on J \u22121 viaM = MJ \u22121 , while the shape/morph matrix gives constraints on J via\u015c =SJ. To work around this algebraic inconvenience, we rewrite our motion constraint asMJ =M, whereM is an initial estimate of the corrected motion matrix.\nTo make our initial estimateM, one may use \u00a7B (or the BHB heuristic) and construct a properly structured motion matrix from the result. Both methods have weaknesses and we have found a third procedure which appears to be more robust for 2D data (for 3D data, \u00a7B eqn.(24) appears to be robust): First we flip signs of the left singular vectors inM to minimize the squared-error vis-a-vis the norm/orthogonality constraints of eqn. (8). Sign flipping leads to better rotation estimates and it can be done efficiently by caching intermediate results. Short-distance column-swaps can be evaluated in the same manner. We then affine-correct each columntriple inM as in \u00a73.2 and 3D-rotate each column-triple to a common coordinate frame. We then stack all columntriples inM intoM (2F, 3) , compute a corrective transform G \u22121 as per \u00a73.2, and apply it to all column-triples ofM.\nFor each transform toM a compensatory inverse transform is applied toS. We then factor eachM f \u2208M into rotation and morph weights using an orthonormal decomposition 2 [2] that directly factors a matrix into a rotation and a vector. We then construct a properly structured motion matrixM, plugging the initial estimates of R and C into eqn. (3). Unlike the BHB procedure, each column-triple has a unique correction and we have orthogonalized the pseudo-motion matrix without information-lossy factorization into R f and c f . However, we have only estimated elements of J \u22121 in a band around the diagonal; the remaining far off-diagonal elements will be recovered in the next paragraph.\nCombining the constraints from the motion and shape matrices, we obtain the objective function This seeks the operator J that brings out the expected structure inM with the smallest possible deformations in S. This error is minimized by the solution to the system of equations MJ =M and ZJS = 0. J is obtained from the sparse division\u0134\n\u2190 vec 3K I 3K \u2297M S \u2297 Z vecM 0 3KN \u00d71(10)\nfrom which we calculate\u015c \u2190 JS andM \u2190M/J or simply keepR and re-estimate\u0108. Since eqn. (10) uses information in both sides of the SVD, it is well constrained. In practice, we find that the upper triangle and several subdiagonals of J are usually dense, indicating that information about any one deformation is indeed spread over several columns ofM. Eqn. (10) is a regularization that enables good factorizations from very small datasets. It could be used iteratively with refactorizations ofM, though we do not.", "publication_ref": ["b7", "b2", "b1", "b2"], "figure_ref": [], "table_ref": []}, {"heading": "Using image gradients", "text": "The above algorithm can be recast entirely in terms of image gradients, which are linearly related to motion in the setting of optical flow: Consider a small region R in image I 0 that shifts to a new location in image I 1 . Assuming it views a constantly illuminated Lambertian surface, its optical flow f D\u00d71 may be estimated (to firstorder) from spatial image gradient \u2207 p . = dI 0 (p)/dp a\u015d f \u2190 X\\y where the spatial variation within frame I 0 is X D\u00d7D . = R \u2207 p \u2207 p dp and the temporal variation between I 0 and I 1 is y D\u00d71 . = R (I 0 (p) \u2212 I 1 (p)) \u2022 \u2207 p dp. Good estimates of X are usually available but y is sensitive to noise in the image intensities. Assuming this noise is gaussian distributed, X has special significance as the inverse covariance matrix of the flow estimate f -its eigenvectors give the directions in which f is most and least certain.\nWe will represent N local flows to each of F images simultaneously in the stacked matrices F DN \u00d7F , Y DN \u00d7F and diagonally stacked X DN \u00d7DN . X describes spatial variation around landmarks in a reference frame; each column Y f \u2208 Y describes temporal variation between the reference frame I 0 and target frame I f . Without additional constraints, Y = XF. The covariance of the uncertainty in F is \u03a3 F . = X \u22121 ; conversely \u03a3 Y . = X\u03a3 F X = X. We will now show how all of the operations of the previous section can be applied to X and Y f . First we eigendecompose V\u039bV EIG \u2190\u2212 \u03a3 Y = X and use Q . = \u039b \u22121/2 V for certainty-warped operations on Y. Q warps a problem having an elliptical (mahalanobis) error metric to one having a spherical (Frobenius) norm, so that minimal mahalonobiserror solutions can be obtained from least-squares procedures such as matrix division and SVD 3 . We use this to estimate pure translations:\nT DF \u00d71 \u2190 vec[((QX(1 n\u00d71 \u2297 I D )) \u2020 (QY)) D\u00d7F ]\n(11) This is a certainty-warped calculation of the mean displacements. (The pseudoinverse is quickly computed using QR-decomposition and inversion of the resulting uppertriangular D \u00d7 D matrix.) We now remove translation and incorporate position into the temporal intensity variations, obtaining Y . = Y + X(P 0 P 0 T ) (12) where P 0 are the locations of reference texture patches in the reference frame and P 0 is their centroid. Y is now a function of rotations and deformations only, satisfying P . = (X\\Y ) (D) = MS.\n(13) Appendix \u00a7A details how to factor the zero-meaned correspondence estimatesP w.r.t. their uncertainty (covariance \u03a3 X\\Y = \u03a3 F = X \u22121 ) intoM,S; appendix \u00a7A.1 shows how to do the same factoring directly from intensity variations Y w.r.t. their uncertainty \u03a3 Y = X\u03a3 F X = X. The flexible factorization of \u00a74 applies directly to the results.", "publication_ref": ["b2"], "figure_ref": [], "table_ref": []}, {"heading": "Nonrigid 3D subspace flow", "text": "The fact that nonrigid motion is a low-rank multilinear process has an unusually useful implication: It is possible to simultaneously track a 3D nonrigid surface and acquire its 3D shape/morph basis simply by manipulating the rank of the flow calculations. The rigid-body equivalent of this assertion was first noted by Irani [5], whose rank-reduced flow algorithm was based on the premise that flow and associated temporal image gradients from a reference frame to adjoining frames are bilinear products of two matrices whose low rank can be deduced from the camera and scene type. Our forward model similarly implies that rank-reduction of P \u2295 P 0 P 0 T to rank 3K will force the motion data to be consistent with the subspace of plausible nonrigid 3D models. Moreover, since temporal intensity gradients are locally linearly in motion (Y = XF = X(P P 0 )), uncertaintyinformed rank-reduction of the temporal intensity variation matrix will similarly constrain the flow to lie in the same subspace. The key is to manipulate Y (eqn. ( 12)) so that the rank constraints implied by eqn. (13) are applicable. This is accomplished by the intensity-based factorization in \u00a7A.1; we also give a more efficient alternate procedure:\nWe begin by computing X from image patches within a reference frame I 0 and Y from comparisons of those patches to similarly located patches in all other frames. Because MS has rank 3K, eqn. (13) tells us that Y has maximum rank 3DK. We eigen-decompose (D) is the uncertainty-informed reduction of the interframe correspondences to rank-3DK (modulo translations). Rearranging the product to conform with MS licenses the final rank-reduction to rank 3K:\nV\u039bV EIG \u2190\u2212 \u03a3 Y = X and use Q . = \u039b \u22121/2 V in a certainty-warped thin SVD U\u03a3W SVD 3DK \u2190\u2212 QY . (14) Since Q Q = X \u22121 , the product Q U\u03a3W X \u22121 Y \u2261 (MS)\nU \u03a3 W SVD 3K \u2190\u2212 (Q U\u03a3W ) (D) .\n(15) Finally, we restore translations to obtain point locations:\nP N \u00d7DF = U \u03a3 W \u2295 T \u2295 P 0 .\n(16) New temporal image gradients Y new are sampled w.r.t. these correspondences, and the process repeats until convergence. This is simlar in spirit to Irani's [5] rank-reduced flow but differs in that (A) it handles nonrigid scenes and objects; (B) it properly certainty-warps the intensity variations w.r.t. their own uncertainty prior to SVD; and (C) the rank constraints are exact because they are inherited directly from the forward model. The results of eqn. (15) are useful beyond rank-reduction: We use pseudo-motionsM \u2190 U \u221a \u03a3 and pseudo-shapeS \u2190 \u221a \u03a3 W to \"grow\" the sequence by predicting correspondences in new frames via linear extrapolation of the rows at either end ofM.\nThe factorization constrains the search for correspondences; the search provides information for the factorization. As the process grows to cover the entire sequence, the space of possible nonrigid 3D models becomes increasingly constrained. For online tracking, we obtain extra efficiencies by using an incremental SVD that reduces computational complexity and automatically resolves temporary occlusions.", "publication_ref": ["b4", "b4"], "figure_ref": [], "table_ref": []}, {"heading": "Examples", "text": "We began with 61 contiguous frames of 29.97Hz interlaced 320 \u00d7 240 video captured from a rented VHS video tape 4 . The scene rapidly cuts back and forth between a restaurant patron and a waitress; we modeled the patron's face, which averages 80 pixels in height. We chose roughly 90 points on his face in a reference frame, and ran the 3D flow algorithm with 4 morph bases to find correspondences and 3D structure in the remaining frames. Note that this is quite unconstrained video-there are no markers on the face, some of the points have almost no local texture, there are lighting changes, the camera parameters are unknown, and there is motion in the background. Some points are also occluded by head turns. To see whether the algorithm could handle discontinuous video, we added four more sequences totalling 87 frames from adjoining camera cuts. The 3D flow algorithm found correct correspondences across the camera cuts and in all the remaining frames. In most frames the head faces forward with very small rotations out of the fronto-parallel plane; in the last sequence he looks down at a menu. Despite the rather spare rotational depth cues, the recovered model, shown in figure 7, has good 3D shape. We used the model to render \"3D video\" in which the video plane is deformed according to the recovered depths, then viewed from an angle. Figure 4 shows 3 original frames and synthetic \"side views.\"\nWe also took 490 frames from an old home video of a 3-year-old telling a story. Due the the child's smooth skin and blonde coloring, there is very little texture to support feature tracking and indeed, local feature trackers typically failed within 50 frames. The 3D flow algorithm of \u00a76 was initialized with 100 points on the face found by an interest operator in a single frame, and successfully found correspondences across the entire sequence, concluding with a corrective transform to give the 3D model used to generate the images in figure 6. Figure 5 shows the recovered motion parameters. The original Irani subspace flow algorithm [5] does not successfully track this sequence, even when modified to use the same rank constraints as our version. The image correspondences found by our algorithm were fed into the original BHB algorithm, which failed to separate jaw motions from head rotations (jaw openings have a slight negative correlation with the pitch of the head around the model centroid), producing a model with an inverted jaw (figure 6, right).", "publication_ref": ["b3", "b4"], "figure_ref": ["fig_7", "fig_6", "fig_6"], "table_ref": []}, {"heading": "Summary and prospects", "text": "We have presented a linear framework for recovering 3D shape, motion, and articulations of nonrigid 3D objects from video. Factoring morphable 3D models from 2D correspondences is a quartic optimization problem, for which we presented ( \u00a7B) one of a family of formally \"correct\" solutions based on cascaded matrix decompositions that generalize the classic rigid-body structure-from-motion factorization. All 4 Thanks to Rahul Bhotika for this sequence. algorithms based on the forward model's geometric invariants can be defeated by properties of the SVD that are at odds with the desired factorization, so we identified an additional \"parsimony\" constraint and used it to develop a correction to the SVD ( \u00a74). We then gave an improved and generalized method for factorization of correspondences or intensity variations with respect to uncertainty in the image sequence ( \u00a75&A). This led to a solution for morphable 3D models directly from intensities in which interframe correspondences are found in the course of computing the factorization ( \u00a76). Reseach now focuses on a refinement scheme for full perspective and more sophisticated models of texture flow.", "publication_ref": ["b3"], "figure_ref": [], "table_ref": []}, {"heading": "A. Factoring with uncertainty", "text": "Here we derive a method for factoring uncertain nonrigid tracking data. The rigid case was first treated by Irani & Anandan [6]. We correct some small errors and use a new solution method to generalize to nonrigid motion and varied uncertainty structures. To facilitate comparison with the original paper we use I&A's variable names and convert to their matrix organization:\nThe\nD-interleave matrix E [D]\nN \u00d7N is a permutation matrix with E i, (i\u22121)/D +N ((i\u22121) mod D)+1 = 1. Postmultiplication with E rearranges a matrix with columns representing interleaved (e.g., x 1 y 1 z 1 x 2 y 2 z 2 x 3 y 3 z 3 . . .) data to a grouped form (e.g., x 1 x 2 x 3 y 1 y 2 y 3 z 1 z 2 z 3 . . .); postmultiplication with E does the reverse. We use E to rearrange the block-diagonal inverse covariance matrix X to form a striped matrix X . = E XE for the calculations below (X = EX E recovers the block-diagonal form). We eigen-decompose \u2126\u039b\u2126 EIG \u2190\u2212 X and compute a righthanded certainty warp Q .\n= \u2126 \u221a \u039b, that maps the directionally weighted least-squares problem implied by X onto an equivalent ordinary least-squares problem.\nWe split the tracking data into new matrices U F \u00d7N , V F \u00d7N , and (optional) W F \u00d7N containing horizontal, vertical, and (optional) depth ordinates for N points in F frames. We desire a factorization into pseudo-shape ma-trixS 3K\u00d7N and pseudo-motion matrixM DF \u00d73K satisfying MS = [U,V,W] (F,N ) = [U ,V ,W ] , with any residual having minimal mahalanobis length w.r.t. the metric defined by X. We rearrange the tracking data into a horizontally stacked matrix [U, V, W] in which each row describes a frame; this places all variables whose uncertainty is correlated in the same row so that the certainty warp can be applied. The identity C rp\u00d7c = A rp\u00d7q B \u21d0\u21d2 C (r,c) = A (r,q) (I p \u2297 B) allows us to rewrite the target factorization as [U,V,W]Q =M (F,3K) (I D \u2297S)Q .\n(17) We begin with a thin singular value decomposi-\ntionH F \u00d73DK\u22063DK\u00d73DKG 3DK\u00d7DN SVD 3DK \u2190\u2212 [U,V,W]Q\nto suppress noise under a mahalanobis (elliptical) error metric specified by X . We must unwarp to remove the bias introduced by Q , using a smaller SVD:H\u2206G SVD 3DK \u2190\u2212 \u2206G /Q to obtain H \u2190HH\u2206 1/2 and G \u2190\u2206 1/2G . (Without unwarping, effects of Q will persist into the final result as shape distortions.) Now HG is the best (minimal mahalonobis-error w.r.t. X ) rank-3DK approximation of [U,V,W]. For gaussian uncertainty this maximum likelihood estimate also has maximum marginal likelihood, which means that we have effectively integrated out the uncertainty in the temporal intensity gradients sampled from the images.\nWe must make H and G consistent with the target factorization (eqn. (17)) by finding an invertible transform D 3DK\u00d73DK such thatM (F,3K) = HD \u22121 and DG = (I D \u2297S).\nUsing the above identity, we note that [U,V,W] (F,N ) (HG) (F,N ) =MS = (HD \u22121 ) (F,3K)S = (I D \u2297 H)(D \u22121 ) (3DK,3K)S , which implies that the desired transform D and shapeS can be recovered directly via the rank-3K decomposition\nD \u22121 (3DK,3K)\u015c SVD 3K \u2190\u2212 (I D \u2297H)\\(HG) (F,N ) (18) = (I D \u2297\u2206 \u22121/2H H )(HG) (F,N )\nIn contrast to [6], this correctly unwarps 5 the results of the first SVD, handles dense uncertainty covariances, and gives a fully constrained solution for D \u22121 .", "publication_ref": ["b5", "b5", "b4"], "figure_ref": [], "table_ref": []}, {"heading": "A.1. Factorization from intensity gradients", "text": "We can factor directly from intensity variations, which eqn. (12) relates to shape and rotation changes through matrix Y = X(MS) (D) . Equivalently, to use the notation of \n\u00a7A, Y E = [U, V, W]X .\nFor block-diagonal X this gives independent equations for each point.\nbe applied directly to Y simply by replacing the left hand side of eqn. (17) with Y EQ \u039b \u22121 .", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "B. Nonrigid corrective transform", "text": "Here we generalize the correction of \u00a73. Sincem f k,x =m fx (J \u22121 ) cols(3k\u22122:3k) , for each value of k and j this yields a separate linear system like \u00a73.2 eqns. (4-5) giving constraints on a matrix H k,j (with vecs and vech replaced with vec for k = j). Each H k,j is the outer product of two column-triples in (J \u22121 ), e.g., H k,j = (J \u22121 ) cols(3k\u22122:3k) (J \u22121 ) cols(3j\u22122:3j) and\n(21) \u2190\u2212 H be a truncated decomposition of H using its three largest eigenvalues and their associated eigenvectors. Then the desired correction is (J \u22121 ) = (V \u221a \u039b) (3K,3) . Although formally correct, this procedure is of limited use because without additional constraints on the structure of J, the constraints on all H k,j are highly redundant, with insufficient constraints to determine all elements in H. In practice H 1,1 contains enough constraints to support an estimate of the first three columns of J \u22121 , from which we can calculate the first column-tripleM and with it a good estimate of all rotationsR (provided that H 1,1 has exactly three strongly dominant eigenvalues). If working with 3D correspondences, such as motion capture or MRI tracking, the equalit\u1ef9 3) C) (3) (23) leads to a direct solution for all remaining unknowns:\nH . = [\u21d3 K k [\u21d2 K j H k,j ]] = (J \u22121 ) (3K,3) (J \u22121 ) (3K,3) (\nM = MJ = [ \u21d3 fR f ](C \u2297 I 3 )J = [ \u21d3 fR f ](J(\nJ (3)\u0108 SVD k \u2190\u2212 ([ \u21d3 fR f ] M ) (3) . (24\n)\nWith 2D data, one can projectM into the space orthogonal to J \u22121 cols(1:3) and solve for J \u22121 cols(4:6) that will produce a second column-triple ofM that is consistent with the rotations. In formulae: We projectM \u2190M(I \u2212 J \u22121 cols(1:3) (J \u22121 cols(1:3) ) \u2020 ) and solve the linear system \u2200 fM fx J R fx \u2212M fy J R fy = M fx J R fy =M fy J R fx = 0 for J using the identity ABC = (C \u2297 B) vec A to obtain J \u22121 cols(4:6) \u2190 (I \u2212 J \u22121 cols(1:3) (J \u22121 cols(1:3) ) \u2020 )J . We then recursively solve for the remaining column-triples. Again, the quality of the result depends on the eigenvalue structure of H 1,1 . We are now studying how this relates to the quantity and quality of data.   ", "publication_ref": ["b2", "b2"], "figure_ref": [], "table_ref": []}], "references": [{"ref_id": "b0", "title": "A morphable model for the synthesis of 3D faces", "journal": "", "year": "1999", "authors": "V Blanz; T Vetter"}, {"ref_id": "b1", "title": "Flexible flow for 3D nonrigid tracking and shape recovery", "journal": "", "year": "2001", "authors": "M Brand"}, {"ref_id": "b2", "title": "Recovering nonrigid 3D shape from image streams", "journal": "", "year": "2000", "authors": "C Bregler; A Hertzmann; H Biermann"}, {"ref_id": "b3", "title": "", "journal": "Matrix Computations", "year": "1996", "authors": "G Golub; A Van Loan"}, {"ref_id": "b4", "title": "Multi-frame optical flow estimation using subspace constraints", "journal": "", "year": "1999", "authors": "M Irani"}, {"ref_id": "b5", "title": "Factorization with uncertainty", "journal": "", "year": "2000", "authors": "M Irani; P Anandan"}, {"ref_id": "b6", "title": "Matrix differential calculus with applications in statistics and econometrics", "journal": "Wiley", "year": "1999", "authors": "J R Magnus; H Neudecker"}, {"ref_id": "b7", "title": "Shape and motion from image streams under orthography: A factorization method", "journal": "International Journal of Computer Vision", "year": "1992", "authors": "C Tomasi; T Kanade"}], "figures": [{"figure_label": "1", "figure_type": "figure", "figure_id": "fig_0", "figure_caption": "Figure 1 :1Figure 1: Image formation: Morph bases (S) are summed according to weights (c), rotated (R), and translated (t) togive the image projection (P). To infer S, c, R, t from P is it convenient to re-order these operations as in eqn. (1), depicted here with matrix images:", "figure_data": ""}, {"figure_label": "32", "figure_type": "figure", "figure_id": "fig_1", "figure_caption": "SVD 3 \u2190Figure 2 :32Figure 2: The forward model for multiple frames (eqn. (2)), showing the structure of the motion matrix M (eqn. (3)).Each block in M is a scaled rotation matrix; its rows have equal norm and are orthogonal. Moreover, its first row is orthogonal to any second row taken from blocks to the left and right. An SVD of P T produces a pseudo-motion matrix M = MJ and pseudo-shape matrixS = J \u22121 S, where J is an arbitrary unknown full-rank matrix. Successful factorization thus depends on finding a correction matrix J that will restore the appropriate structure toM andS.", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_2", "figure_caption": "= vech(H + H \u2212 H I). Then H is the least-squares solution to the overconstrained system of linear equations \u2200 f :m fx ,m fy \u2208M (vecs(m fxm fx \u2212m fym fy )) vech H = 0, (equal norm)(4) (vecs(m fxm fy )) vech H = 0, (orthogonal)(5) (vecs(m 1xm 1x )) vech H = c. (fixed scale) (6)", "figure_data": ""}, {"figure_label": "3", "figure_type": "figure", "figure_id": "fig_3", "figure_caption": "Figure 3 :3Figure 3: Reconstruction of a curved surface and two \"beads\" that move independently on horizontal tracks. Dots show average point locations; quivers show direction of motion for positive morph weights. COLUMN 1: The linear basis set used to generate test data: shape/scale; upper bead motion; lower bead motion. COLUMN 2: Shape and deformations recovered by BHB factorization [3] of 2D projections.One bead is misplaced in depth; there is no independent motion of the beads (except that the upper bead is allowed a spurious motion in depth); and all deformations have torsions that compensate for incorrect rotation estimates. COLUMN 3: A correct shape/deformations basis recovered from the same data by the method given below. ( Adding or subtracting the deformations gives isolated motion of either bead.) norm and are orthogonal. Moreover, they are orthogonal to m fj,y and m fj,x taken from any block to the left or right (j = k), because these blocks are all generated from the same rotation. The exact set of necessary and sufficient norm/orthogonality constraints thatM must satisfy are summarized by the quadratic equality \u2200M f \u2208M , (vec", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_4", "figure_caption": "min J tr((MJ \u2212M) (MJ \u2212M)) + tr(S J ZJS). (9)", "figure_data": ""}, {"figure_label": "2", "figure_type": "figure", "figure_id": "fig_5", "figure_caption": "22to estimate a correction matrix J . = M\\M. We break M into K columntriples, each being a stack of rotation matrices scaled by morph weights. Let m f k,x , m f k,y \u2208 M f \u2208 M be the rows in column-triple k giving the x and y projections in frame f . As in \u00a73.2, these vectors should have equal norm and be orthogonal. Morever, their projections onto vectors from other column-triples should also have equal norm (because all column-triples have the same rotations): \u2200 f,k,j [m f k,x m fj,x = m f k,y m fj,y ] and [m f k,x m fj,y = 0]. (20)", "figure_data": ""}, {"figure_label": "6", "figure_type": "figure", "figure_id": "fig_6", "figure_caption": "Figure 6 :6Figure6: Original frame and three synthetic frames rotating the face, closing the mouth, and pursing the lips. At right is the base shape obtained by feeding the correspondences into the BHB factorization, which inverts the jaw. The graph shows that the flexible factorization estimates morph bases that more effectively explain the data.", "figure_data": ""}, {"figure_label": "4", "figure_type": "figure", "figure_id": "fig_7", "figure_caption": "Figure 4 :4Figure 4: Cropped video frames and synthetic profile views showing 3D recovered for the front half of the head. The rendering is not anti-aliased, and inherits compression and interlacing artifacts visible in the original low-res frames.", "figure_data": ""}, {"figure_label": "57", "figure_type": "figure", "figure_id": "fig_8", "figure_caption": "Figure 5 :Figure 7 :57Figure 5: Morph, rotation, scale, and translation parameters recovered from the preschooler sequence. The high frequency fluctuations record mouth motions while talking.", "figure_data": ""}, {"figure_label": "", "figure_type": "table", "figure_id": "tab_0", "figure_caption": "Because the uncertainties in Y E and [U, V, W] have covariances X and X \u22121 respectively, their certainty-warped forms are equivalent and interchangeable. This means that the factorization of \u00a7A can \u2297S r\u00d7n )A dr\u00d7q = B dr\u00d7q \u21d0\u21d2 S \u2190 (vecr B (r) )/(vecn A(n)  ) to extract a certainty-weighted estimate of shape from DG = (I D \u2297S)Q :S \u2190 (vec", "figure_data": "5 Ifnotunwarping,onecanusetheidentity(I d"}], "formulas": [{"formula_id": "formula_0", "formula_text": "[\u21d2 i A i ], [\u21d3 i A i ], [ \u21d3 i A i ]", "formula_coordinates": [3.0, 417.23, 542.9, 102.69, 10.95]}, {"formula_id": "formula_1", "formula_text": "P f = (c f \u2297 R f )S \u2295 t f (1)", "formula_coordinates": [4.0, 130.04, 147.75, 168.76, 10.65]}, {"formula_id": "formula_2", "formula_text": "S 3K\u00d7N . = [s 1x , s 1y , s 1z , s 2x , s 2y , s 2z , ..., s K x , s K y , s K z ] .", "formula_coordinates": [4.0, 58.5, 168.29, 240.3, 27.57]}, {"formula_id": "formula_3", "formula_text": "F K frames we define M f . = c f \u2297 R f , C K\u00d7F . = [\u21d2 f c f ], and T DF \u00d71 . = [\u21d3 f t f ]", "formula_coordinates": [4.0, 58.5, 333.36, 240.3, 28.56]}, {"formula_id": "formula_4", "formula_text": "P DF \u00d7N . = [\u21d3 f P f ] = MS \u2295 T, where (2) M DF \u00d73K . = [\u21d3 f M f ] = [ \u21d3 fR f ](C \u2297 I 3 ).(3)", "formula_coordinates": [4.0, 76.08, 362.4, 222.72, 29.74]}, {"formula_id": "formula_5", "formula_text": "f \u2208Mm fx G \u22121 G \u2212 m fx \u2212m fy G \u22121 G \u2212 m fy = m fx G \u22121 G \u2212 m fy = 0.", "formula_coordinates": [4.0, 313.2, 416.13, 457.46, 28.72]}, {"formula_id": "formula_6", "formula_text": "V\u039bV EIG \u2190\u2212 H as G \u22121 \u2190 V \u221a \u039b.", "formula_coordinates": [4.0, 313.2, 611.43, 156.84, 17.74]}, {"formula_id": "formula_7", "formula_text": "G \u2190 G([\u21d3 fMf G]\\[\u21d3 f (M f G) \u2020 ]) 1/2 (7)", "formula_coordinates": [4.0, 352.11, 678.72, 201.39, 11.72]}, {"formula_id": "formula_8", "formula_text": "M DF \u00d73KS3K\u00d7N SVD 3K", "formula_coordinates": [5.0, 58.5, 139.12, 97.61, 13.09]}, {"formula_id": "formula_9", "formula_text": "\u2200 f (vecR f )C f SVD 1 \u2190\u2212 vec 3DMf .", "formula_coordinates": [5.0, 58.5, 200.22, 240.3, 25.68]}, {"formula_id": "formula_10", "formula_text": "S = [s 1y , \u2212s 1x , s 1z , s 2y , \u2212s 2x , s 2z , ..., s K y , \u2212s K x , s K z ]", "formula_coordinates": [5.0, 58.5, 263.32, 233.58, 10.18]}, {"formula_id": "formula_11", "formula_text": "\u2200M f \u2208M , (vec 3M f ) (vec 3M f ) = 1 D I D \u2297 ((vec 3DM f ) (vec 3DM f )). (8", "formula_coordinates": [5.0, 318.18, 531.03, 231.45, 30.73]}, {"formula_id": "formula_12", "formula_text": ")", "formula_coordinates": [5.0, 549.63, 547.04, 3.87, 8.97]}, {"formula_id": "formula_13", "formula_text": "= I 3 \u2297 diag[0, 1 1\u00d7K\u22121 ]", "formula_coordinates": [6.0, 68.27, 559.95, 96.5, 9.68]}, {"formula_id": "formula_14", "formula_text": "\u2190 vec 3K I 3K \u2297M S \u2297 Z vecM 0 3KN \u00d71(10)", "formula_coordinates": [6.0, 358.07, 490.75, 195.42, 22.65]}, {"formula_id": "formula_15", "formula_text": "T DF \u00d71 \u2190 vec[((QX(1 n\u00d71 \u2297 I D )) \u2020 (QY)) D\u00d7F ]", "formula_coordinates": [7.0, 69.91, 435.92, 200.88, 12.11]}, {"formula_id": "formula_16", "formula_text": "V\u039bV EIG \u2190\u2212 \u03a3 Y = X and use Q . = \u039b \u22121/2 V in a certainty-warped thin SVD U\u03a3W SVD 3DK \u2190\u2212 QY . (14) Since Q Q = X \u22121 , the product Q U\u03a3W X \u22121 Y \u2261 (MS)", "formula_coordinates": [7.0, 313.2, 348.77, 240.3, 66.65]}, {"formula_id": "formula_17", "formula_text": "U \u03a3 W SVD 3K \u2190\u2212 (Q U\u03a3W ) (D) .", "formula_coordinates": [7.0, 360.99, 453.87, 144.72, 12.34]}, {"formula_id": "formula_18", "formula_text": "P N \u00d7DF = U \u03a3 W \u2295 T \u2295 P 0 .", "formula_coordinates": [7.0, 363.93, 486.67, 138.85, 10.07]}, {"formula_id": "formula_19", "formula_text": "D-interleave matrix E [D]", "formula_coordinates": [8.0, 345.23, 529.0, 105.62, 12.1]}, {"formula_id": "formula_20", "formula_text": "tionH F \u00d73DK\u22063DK\u00d73DKG 3DK\u00d7DN SVD 3DK \u2190\u2212 [U,V,W]Q", "formula_coordinates": [9.0, 58.5, 230.97, 237.51, 13.95]}, {"formula_id": "formula_21", "formula_text": "D \u22121 (3DK,3K)\u015c SVD 3K \u2190\u2212 (I D \u2297H)\\(HG) (F,N ) (18) = (I D \u2297\u2206 \u22121/2H H )(HG) (F,N )", "formula_coordinates": [9.0, 65.77, 479.15, 233.03, 33.77]}, {"formula_id": "formula_22", "formula_text": "\u00a7A, Y E = [U, V, W]X .", "formula_coordinates": [9.0, 62.03, 611.04, 115.42, 9.33]}, {"formula_id": "formula_24", "formula_text": "H . = [\u21d3 K k [\u21d2 K j H k,j ]] = (J \u22121 ) (3K,3) (J \u22121 ) (3K,3) (", "formula_coordinates": [9.0, 331.01, 328.53, 210.04, 16.27]}, {"formula_id": "formula_25", "formula_text": "M = MJ = [ \u21d3 fR f ](C \u2297 I 3 )J = [ \u21d3 fR f ](J(", "formula_coordinates": [9.0, 321.61, 513.86, 193.34, 12.99]}, {"formula_id": "formula_26", "formula_text": "J (3)\u0108 SVD k \u2190\u2212 ([ \u21d3 fR f ] M ) (3) . (24", "formula_coordinates": [9.0, 374.55, 549.21, 174.8, 14.02]}, {"formula_id": "formula_27", "formula_text": ")", "formula_coordinates": [9.0, 549.35, 552.31, 4.15, 8.97]}], "doi": ""}