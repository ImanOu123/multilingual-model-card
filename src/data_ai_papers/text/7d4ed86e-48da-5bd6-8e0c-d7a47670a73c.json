{"title": "Training Compute-Optimal Large Language Models", "authors": "Jordan Hoffmann; Sebastian Borgeaud; Arthur Mensch; Elena Buchatskaya; Trevor Cai; Eliza Rutherford; Diego De; Las Casas; Lisa Anne Hendricks; Johannes Welbl; Aidan Clark; Tom Hennigan; Eric Noland; Katie Millican; George Van Den Driessche; Bogdan Damoc; Aurelia Guy; Simon Osindero; Karen Simonyan; Erich Elsen; Jack W Rae; Oriol Vinyals; Laurent Sifre", "pub_date": "2022-03-29", "abstract": "We investigate the optimal model size and number of tokens for training a transformer language model under a given compute budget. We find that current large language models are significantly undertrained, a consequence of the recent focus on scaling language models whilst keeping the amount of training data constant. By training over 400 language models ranging from 70 million to over 16 billion parameters on 5 to 500 billion tokens, we find that for compute-optimal training, the model size and the number of training tokens should be scaled equally: for every doubling of model size the number of training tokens should also be doubled. We test this hypothesis by training a predicted computeoptimal model, Chinchilla, that uses the same compute budget as Gopher but with 70B parameters and 4\u00d7 more more data. Chinchilla uniformly and significantly outperforms Gopher (280B), GPT-3 (175B), Jurassic-1 (178B), and Megatron-Turing NLG (530B) on a large range of downstream evaluation tasks. This also means that Chinchilla uses substantially less compute for fine-tuning and inference, greatly facilitating downstream usage. As a highlight, Chinchilla reaches a state-of-the-art average accuracy of 67.5% on the MMLU benchmark, greater than a 7% improvement over Gopher.", "sections": [{"heading": "Introduction", "text": "Recently a series of Large Language Models (LLMs) have been introduced Lieber et al., 2021;Rae et al., 2021;Smith et al., 2022;Thoppilan et al., 2022), with the largest dense language models now having over 500 billion parameters. These large autoregressive transformers (Vaswani et al., 2017) have demonstrated impressive performance on many tasks using a variety of evaluation protocols such as zero-shot, few-shot, and fine-tuning.\nThe compute and energy cost for training large language models is substantial (Rae et al., 2021;Thoppilan et al., 2022) and rises with increasing model size. In practice, the allocated training compute budget is often known in advance: how many accelerators are available and for how long we want to use them. Since it is typically only feasible to train these large models once, accurately estimating the best model hyperparameters for a given compute budget is critical (Tay et al., 2021).  showed that there is a power law relationship between the number of parameters in an autoregressive language model (LM) and its performance. As a result, the field has been training larger and larger models, expecting performance improvements. One notable conclusion in  is that large models should not be trained to their lowest possible loss to be compute optimal. Whilst we reach the same conclusion, we estimate that large models should be trained for many more training tokens than recommended by the authors. Specifically, given a 10\u00d7 increase computational budget, they suggests that the size of the model should increase 5.5\u00d7 while the number of training tokens should only increase 1.8\u00d7. Instead, we find that model size and the number of training tokens should be scaled in equal proportions.\nFollowing  and the training setup of GPT-3 (Brown et al., 2020), many of the recently trained large models have been trained for approximately 300 billion tokens (Table 1), in line with the approach of predominantly increasing model size when increasing compute. Chinchilla (70B) Gopher (280B) GPT-3 (175B) Megatron-Turing NLG (530B)\nFigure 1 | Overlaid predictions. We overlay the predictions from our three different approaches, along with projections from . We find that all three methods predict that current large models should be substantially smaller and therefore trained much longer than is currently done. In Figure A3, we show the results with the predicted optimal tokens plotted against the optimal number of parameters for fixed FLOP budgets. Chinchilla outperforms Gopher and the other large models (see Section 4.2).\nIn this work, we revisit the question: Given a fixed FLOPs budget, 1 how should one trade-off model size and the number of training tokens? To answer this question, we model the final pre-training loss 2 ( , ) as a function of the number of model parameters , and the number of training tokens, . Since the computational budget is a deterministic function FLOPs( , ) of the number of seen training tokens and model parameters, we are interested in minimizing under the constraint FLOPs( , ) = :\n( ), ( ) = argmin , s.t. FLOPs( , )= ( , ).\n(1)\nThe functions ( ), and ( ) describe the optimal allocation of a computational budget . We empirically estimate these functions based on the losses of over 400 models, ranging from under 70M to over 16B parameters, and trained on 5B to over 400B tokens -with each model configuration trained for several different training horizons. Our approach leads to considerably different results than that of . We highlight our results in Figure 1 and how our approaches differ in Section 2.\nBased on our estimated compute-optimal frontier, we predict that for the compute budget used to train Gopher, an optimal model should be 4 times smaller, while being training on 4 times more tokens. We verify this by training a more compute-optimal 70B model, called Chinchilla, on 1.4 trillion tokens. Not only does Chinchilla outperform its much larger counterpart, Gopher, but its reduced model size reduces inference cost considerably and greatly facilitates downstream uses on smaller hardware. The energy cost of a large language model is amortized through its usage for inference an fine-tuning. The benefits of a more optimally trained smaller model, therefore, extend beyond the immediate benefits of its improved performance.\nTable 1 | Current LLMs. We show five of the current largest dense transformer models, their size, language models, showing that the scaling with number of experts diminishes as the model size increases-their approach models the loss as a function of two variables: the model size and the number of experts. However, the analysis is done with a fixed number of training tokens, as in , potentially underestimating the improvements of branching.\nEstimating hyperparameters for large models. The model size and the number of training tokens are not the only two parameters to chose when selecting a language model and a procedure to train it. Other important factors include learning rate, learning rate schedule, batch size, optimiser, and width-to-depth ratio. In this work, we focus on model size and the number of training steps, and we rely on existing work and provided experimental heuristics to determine the other necessary hyperparameters. Yang et al. (2021) investigates how to choose a variety of these parameters for training an autoregressive transformer, including the learning rate and batch size. McCandlish et al. (2018) finds only a weak dependence between optimal batch size and model size. Shallue et al. (2018); Zhang et al. (2019) suggest that using larger batch-sizes than those we use is possible. Levine et al. (2020) investigates the optimal depth-to-width ratio for a variety of standard model sizes. We use slightly less deep models than proposed as this translates to better wall-clock performance on our hardware.", "publication_ref": ["b48", "b51", "b52", "b51", "b50", "b56", "b32", "b46", "b58", "b27"], "figure_ref": ["fig_2"], "table_ref": []}, {"heading": "Improved model architectures.", "text": "Recently, various promising alternatives to traditional dense transformers have been proposed. For example, through the use of conditional computation large MoE models like the 1.7 trillion parameter Switch transformer , the 1.2 Trillion parameter GLaM model , and others (Artetxe et al., 2021;Zoph et al., 2022) are able to provide a large effective model size despite using relatively fewer training and inference FLOPs. However, for very large models the computational benefits of routed models seems to diminish (Clark et al., 2022). An orthogonal approach to improving language models is to augment transformers with explicit retrieval mechanisms, as done by Borgeaud et al. (2021); Guu et al. (2020); Lewis et al. (2020). This approach effectively increases the number of data tokens seen during training (by a factor of \u223c 10 in Borgeaud et al. (2021)). This suggests that the performance of language models may be more dependant on the size of the training data than previously thought.", "publication_ref": ["b0", "b8", "b14", "b28"], "figure_ref": [], "table_ref": []}, {"heading": "Estimating the optimal parameter/training tokens allocation", "text": "We present three different approaches to answer the question driving our research: Given a fixed FLOPs budget, how should one trade-off model size and the number of training tokens? In all three cases we start by training a range of models varying both model size and the number of training tokens and use the resulting training curves to fit an empirical estimator of how they should scale. We assume a power-law relationship between compute and model size as done in Clark et al. (2022); , though future work may want to include potential curvature in this relationship for large model sizes. The resulting predictions are similar for all three methods and suggest that parameter count and number of training tokens should be increased equally with more compute 3with proportions reported in Table 2. This is in clear contrast to previous work on this topic and warrants further investigation. On the left we show all of our different runs. We launched a range of model sizes going from 70M to 10B, each for four different cosine cycle lengths. From these curves, we extracted the envelope of minimal loss per FLOP, and we used these points to estimate the optimal model size (center) for a given compute budget and the optimal number of training tokens (right). In green, we show projections of optimal model size and training token count based on the number of FLOPs used to train Gopher (5.76 \u00d7 10 23 ).", "publication_ref": ["b8"], "figure_ref": [], "table_ref": ["tab_3"]}, {"heading": "Approach 1: Fix model sizes and vary number of training tokens", "text": "In our first approach we vary the number of training steps for a fixed family of models (ranging from 70M to over 10B parameters), training each model for 4 different number of training sequences. From these runs, we are able to directly extract an estimate of the minimum loss achieved for a given number of training FLOPs. Training details for this approach can be found in Appendix D.\nFor each parameter count we train 4 different models, decaying the learning rate by a factor of 10\u00d7 over a horizon (measured in number of training tokens) that ranges by a factor of 16\u00d7. Then, for each run, we smooth and then interpolate the training loss curve. From this, we obtain a continuous mapping from FLOP count to training loss for each run. Then, for each FLOP count, we determine which run achieves the lowest loss. Using these interpolants, we obtain a mapping from any FLOP count , to the most efficient choice of model size and number of training tokens such that FLOPs( , ) = . 4 At 1500 logarithmically spaced FLOP values, we find which model size achieves the lowest loss of all models along with the required number of training tokens. Finally, we fit power laws to estimate the optimal model size and number of training tokens for any given amount of compute (see the center and right panels of Figure 2), obtaining a relationship \u221d and \u221d . We find that = 0.50 and = 0.50-as summarized in Table 2. In Section D.4, we show a head-to-head comparison at 10 21 FLOPs, using the model size recommended by our analysis and by the analysis of -using the model size we predict has a clear advantage.", "publication_ref": [], "figure_ref": ["fig_1"], "table_ref": ["tab_3"]}, {"heading": "Approach 2: IsoFLOP profiles", "text": "In our second approach we vary the model size 5 for a fixed set of 9 different training FLOP counts 6 (ranging from 6 \u00d7 10 18 to 3 \u00d7 10 21 FLOPs), and consider the final training loss for each point 7 . in contrast with Approach 1 that considered points ( , , ) along the entire training runs. This allows us to directly answer the question: For a given FLOP budget, what is the optimal parameter count?  For various model sizes, we choose the number of training tokens such that the final FLOPs is a constant. The cosine cycle length is set to match the target FLOP count. We find a clear valley in loss, meaning that for a given FLOP budget there is an optimal model to train (left). Using the location of these valleys, we project optimal model size and number of tokens for larger models (center and right). In green, we show the estimated number of parameters and tokens for an optimal model trained with the compute budget of Gopher.\nFor each FLOP budget, we plot the final loss (after smoothing) against the parameter count in Figure 3 (left). In all cases, we ensure that we have trained a diverse enough set of model sizes to see a clear minimum in the loss. We fit a parabola to each IsoFLOPs curve to directly estimate at what model size the minimum loss is achieved (Figure 3 (left)). As with the previous approach, we then fit a power law between FLOPs and loss-optimal model size and number of training tokens, shown in Figure 3 (center, right). Again, we fit exponents of the form \u221d and \u221d and we find that = 0.49 and = 0.51-as summarized in Table 2.", "publication_ref": [], "figure_ref": ["fig_2", "fig_2", "fig_2"], "table_ref": ["tab_3"]}, {"heading": "Approach 3: Fitting a parametric loss function", "text": "Lastly, we model all final losses from experiments in Approach 1 & 2 as a parametric function of model parameter count and the number of seen tokens. Following a classical risk decomposition (see Section D.2), we propose the following functional form ( ,\n) + + .(2)\nThe first term captures the loss for an ideal generative process on the data distribution, and should correspond to the entropy of natural text. The second term captures the fact that a perfectly trained transformer with parameters underperforms the ideal generative process. The final term captures the fact that the transformer is not trained to convergence, as we only make a finite number of optimisation steps, on a sample of the dataset distribution.\nModel fitting. To estimate ( , , , , ), we minimize the Huber loss (Huber, 1964) between the predicted and observed log loss using the L-BFGS algorithm (Nocedal, 1980  We account for possible local minima by selecting the best fit from a grid of initialisations. The Huber loss ( = 10 \u22123 ) is robust to outliers, which we find important for good predictive performance over held-out data points. Section D.2 details the fitting procedure and the loss decomposition.  We fit a parametric modelling of the loss\u02c6( , ) and display contour (left) and isoFLOP slices (right). For each isoFLOP slice, we include a corresponding dashed line in the left plot. In the left plot, we show the efficient frontier in blue, which is a line in log-log space. Specifically, the curve goes through each iso-loss contour at the point with the fewest FLOPs. We project the optimal model size given the Gopher FLOP budget to be 40B parameters.\nEfficient frontier. We can approximate the functions and by minimizing the parametric loss\u02c6under the constraint FLOPs( , ) \u2248 6 . The resulting and balance the two terms in Equation ( 3) that depend on model size and data. By construction, they have a power-law form: We show contours of the fitted function\u02c6in Figure 4 (left), and the closed-form efficient computational frontier in blue. From this approach, we find that = 0.46 and = 0.54-as summarized in Table 2.", "publication_ref": ["b18", "b35"], "figure_ref": ["fig_4"], "table_ref": ["tab_3"]}, {"heading": "Optimal model scaling", "text": "We find that the three approaches, despite using different fitting methodologies and different trained models, yield comparable predictions for the optimal scaling in parameters and tokens with FLOPs (shown in Table 2). All three approaches suggest that as compute budget increases, model size and the amount of training data should be increased in approximately equal proportions. The first and second approaches yield very similar predictions for optimal model sizes, as shown in Figure 1 and Figure A3. The third approach predicts even smaller models being optimal at larger compute budgets. We note that the observed points ( , , ) for low training FLOPs ( 1 21) have larger residuals \u2212\u02c6( , ) 2 2 than points with higher computational budgets. The fitted model places increased weight on the points with more FLOPs-automatically considering the low-computational budget points as outliers due to the Huber loss. As a consequence of the empirically observed negative curvature in the frontier \u2192 (see Appendix E), this results in predicting a lower than the two other approaches.\nIn Table 3 we show the estimated number of FLOPs and tokens that would ensure that a model of a given size lies on the compute-optimal frontier. Our findings suggests that the current generation of  large language models are considerably over-sized, given their respective compute budgets, as shown in Figure 1. For example, we find that a 175 billion parameter model should be trained with a compute budget of 4.41 \u00d7 10 24 FLOPs and on over 4.2 trillion tokens. A 280 billion Gopher-like model is the optimal model to train given a compute budget of approximately 10 25 FLOPs and should be trained on 6.8 trillion tokens. Unless one has a compute budget of 10 26 FLOPs (over 250\u00d7 the compute used to train Gopher), a 1 trillion parameter model is unlikely to be the optimal model to train. Furthermore, the amount of training data that is projected to be needed is far beyond what is currently used to train large models, and underscores the importance of dataset collection in addition to engineering improvements that allow for model scale. While there is significant uncertainty extrapolating out many orders of magnitude, our analysis clearly suggests that given the training compute budget for many current LLMs, smaller models should have been trained on more tokens to achieve the most performant model.\nIn Appendix C, we reproduce the IsoFLOP analysis on two additional datasets: C4 (Raffel et al., 2020a) and GitHub code (Rae et al., 2021). In both cases we reach the similar conclusion that model size and number of training tokens should be scaled in equal proportions.", "publication_ref": ["b39"], "figure_ref": ["fig_2"], "table_ref": ["tab_3", "tab_4"]}, {"heading": "Chinchilla", "text": "Based on our analysis in Section 3, the optimal model size for the Gopher compute budget is somewhere between 40 and 70 billion parameters. We test this hypothesis by training a model on the larger end of this range-70B parameters-for 1.4T tokens, due to both dataset and computational efficiency considerations. In this section we compare this model, which we call Chinchilla, to Gopher and other LLMs. Both Chinchilla and Gopher have been trained for the same number of FLOPs but differ in the size of the model and the number of training tokens.\nWhile pre-training a large language model has a considerable compute cost, downstream finetuning and inference also make up substantial compute usage (Rae et al., 2021). Due to being 4\u00d7 smaller than Gopher, both the memory footprint and inference cost of Chinchilla are also smaller.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Model and training details", "text": "The full set of hyperparameters used to train Chinchilla are given in Table 4. Chinchilla uses the same model architecture and training setup as Gopher with the exception of the differences listed below.\n\u2022 We train Chinchilla on MassiveText (the same dataset as Gopher) but use a slightly different subset distribution (shown in Table A1) to account for the increased number of training tokens. \u2022 We use AdamW (Loshchilov and Hutter, 2019) for Chinchilla rather than Adam (Kingma and Ba, 2014) as this improves the language modelling loss and the downstream task performance after finetuning. 8 \u2022 We train Chinchilla with a slightly modified SentencePiece (Kudo and Richardson, 2018) tokenizer that does not apply NFKC normalisation. The vocabulary is very similar-94.15% of tokens are the same as those used for training Gopher. We find that this particularly helps with the representation of mathematics and chemistry, for example.\n\u2022 Whilst the forward and backward pass are computed in bfloat16, we store a float32 copy of the weights in the distributed optimiser state (Rajbhandari et al., 2020). See Lessons Learned from Rae et al. (2021) for additional details.\nIn Appendix G we show the impact of the various optimiser related changes between Chinchilla and Gopher. All models in this analysis have been trained on TPUv3/TPUv4 (Jouppi et al., 2017) with JAX (Bradbury et al., 2018) and Haiku (Hennigan et al., 2020). We include a Chinchilla model card (Mitchell et al., 2019) in Table A8.", "publication_ref": ["b31", "b23", "b24", "b41", "b21", "b5", "b16", "b34"], "figure_ref": [], "table_ref": ["tab_6"]}, {"heading": "Model", "text": "Layers  ", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "BIG-bench 62", "text": "Causal Judgement, Epistemic Reasoning, Temporal Sequences, . . .\nTable 5 | All evaluation tasks. We evaluate Chinchilla on a collection of language modelling along with downstream tasks. We evaluate on largely the same tasks as in Rae et al. (2021), to allow for direct comparison.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Results", "text": "We perform an extensive evaluation of Chinchilla, comparing against various large language models. We evaluate on a large subset of the tasks presented in Rae et al. (2021), shown in Table 5. As the focus of this work is on optimal model scaling, we included a large representative subset, and introduce a few new evaluations to allow for better comparison to other existing large models. The evaluation details for all tasks are the same as described in Rae et al. (2021).  Chinchilla significantly outperforms Gopher on all evaluation subsets of The Pile , as shown in Figure 5. Compared to Jurassic-1 (178B) Lieber et al. (2021), Chinchilla is more performant on all but two subsets-dm_mathematics and ubuntu_irc-see Table A5 for a raw bits-per-byte comparison. On Wikitext103 (Merity et al., 2017), Chinchilla achieves a perplexity of 7.16 compared to 7.75 for Gopher. Some caution is needed when comparing Chinchilla with Gopher on these language modelling benchmarks as Chinchilla is trained on 4\u00d7 more data than Gopher and thus train/test set leakage may artificially enhance the results. We thus place more emphasis on other   (2020). We also include the average prediction for state of the art accuracy in June 2022/2023 made by 73 competitive human forecasters in Steinhardt (2021).", "publication_ref": ["b33", "b49"], "figure_ref": ["fig_6"], "table_ref": []}, {"heading": "Language modelling", "text": "tasks for which leakage is less of a concern, such as MMLU (Hendrycks et al., 2020) and BIG-bench (BIG-bench collaboration, 2021) along with various closed-book question answering and common sense analyses.", "publication_ref": ["b15"], "figure_ref": [], "table_ref": []}, {"heading": "MMLU", "text": "The Massive Multitask Language Understanding (MMLU) benchmark (Hendrycks et al., 2020) consists of a range of exam-like questions on academic subjects. In Table 6, we report Chinchilla's average 5-shot performance on MMLU (the full breakdown of results is shown in Table A6). On this benchmark, Chinchilla significantly outperforms Gopher despite being much smaller, with an average accuracy of 67.6% (improving upon Gopher by 7.6%). Remarkably, Chinchilla even outperforms the expert forecast for June 2023 of 63.4% accuracy (see Table 6) (Steinhardt, 2021). Furthermore, Chinchilla achieves greater than 90% accuracy on 4 different individual tasks-high_school_gov_and_politics, international_law, sociology, and us_foreign_policy. To our knowledge, no other model has achieved greater than 90% accuracy on a subset.\nIn Figure 6, we show a comparison to Gopher broken down by task. Overall, we find that Chinchilla improves performance on the vast majority of tasks. On four tasks (college_mathematics, econometrics, moral_scenarios, and formal_logic) Chinchilla underperforms Gopher, and there is no change in performance on two tasks.", "publication_ref": ["b15", "b49"], "figure_ref": [], "table_ref": ["tab_9", "tab_9", "tab_9"]}, {"heading": "Reading comprehension", "text": "On the final word prediction dataset LAMBADA (Paperno et al., 2016), Chinchilla achieves 77.4% accuracy, compared to 74.5% accuracy from Gopher and 76.6% from MT-NLG 530B (see Table 7). On RACE-h and RACE-m (Lai et al., 2017), Chinchilla greatly outperforms Gopher, improving accuracy by more than 10% in both cases-see Table 7.", "publication_ref": ["b36", "b26"], "figure_ref": [], "table_ref": ["tab_10", "tab_10"]}, {"heading": "BIG-bench", "text": "We analysed Chinchilla on the same set of BIG-bench tasks (BIG-bench collaboration, 2021) reported in Rae et al. (2021). Similar to what we observed in MMLU, Chinchilla outperforms Gopher on the vast majority of tasks (see Figure 7). We find that Chinchilla improves the average performance by 10.7%, reaching an accuracy of 65.1% versus 54.4% for Gopher. Of the 62 tasks we consider, Chinchilla performs worse than Gopher on only four-crash_blossom, dark_humor_detection,  (Lai et al., 2017), Chinchilla considerably improves performance over Gopher. Note that GPT-3 and MT-NLG 530B use a different prompt format than we do on RACE-h/m, so results are not comparable to Gopher and Chinchilla. On LAMBADA (Paperno et al., 2016), Chinchilla outperforms both Gopher and MT-NLG 530B.\nmathematical_induction and logical_args. Full accuracy results for Chinchilla can be found in Table A7.", "publication_ref": ["b26", "b36"], "figure_ref": [], "table_ref": ["tab_10"]}, {"heading": "Common sense", "text": "We evaluate Chinchilla on various common sense benchmarks: PIQA (Bisk et al., 2020), SIQA (Sap et al., 2019), Winogrande (Sakaguchi et al., 2020), HellaSwag (Zellers et al., 2019), and BoolQ (Clark et al., 2019). We find that Chinchilla outperforms both Gopher and GPT-3 on all tasks and outperforms MT-NLG 530B on all but one task-see Table 8.\nOn TruthfulQA , Chinchilla reaches 43.6%, 58.5%, and 66.7% accuracy with 0-shot, 5-shot, and 10-shot respectively. In comparison, Gopher achieved only 29.5% 0-shot and 43.7% 10-shot accuracy. In stark contrast with the findings of , the large improvements (14.1% in 0-shot accuracy) achieved by Chinchilla suggest that better modelling of the pre-training data alone can lead to substantial improvements on this benchmark.  A7.", "publication_ref": ["b3", "b45", "b44", "b57", "b9"], "figure_ref": [], "table_ref": ["tab_10"]}, {"heading": "Closed-book question answering", "text": "Results on closed-book question answering benchmarks are reported in Table 9. On the Natural Questions dataset , Chinchilla achieves new closed-book SOTA accuracies: 31.5% 5-shot and 35.5% 64-shot, compared to 21% and 28% respectively, for Gopher. On TriviaQA (Joshi et al., 2017) we show results for both the filtered (previously used in retrieval and open-book work) and unfiltered set (previously used in large language model evaluations). In both cases, Chinchilla substantially out performs Gopher. On the filtered version, Chinchilla lags behind the open book SOTA (Izacard and Grave, 2020) by only 7.9%. On the unfiltered set, Chinchilla outperforms GPT-3-see Table 9.", "publication_ref": ["b20"], "figure_ref": [], "table_ref": []}, {"heading": "Gender bias and toxicity", "text": "Large Language Models carry potential risks such as outputting offensive language, propagating social biases, and leaking private information (Bender et al., 2021;Weidinger et al., 2021). We expect Chinchilla to carry risks similar to Gopher because Chinchilla is trained on the same data,  albeit with slightly different relative weights, and because it has a similar architecture. Here, we examine gender bias (particularly gender and occupation bias) and generation of toxic language. We select a few common evaluations to highlight potential issues, but stress that our evaluations are not comprehensive and much work remains to understand, evaluate, and mitigate risks in LLMs.\nChinchilla Gopher GPT-3 MT-NLG\nGender bias. As discussed in Rae et al. (2021), large language models reflect contemporary and historical discourse about different groups (such as gender groups) from their training dataset, and we expect the same to be true for Chinchilla. Here, we test if potential gender and occupation biases manifest in unfair outcomes on coreference resolutions, using the Winogender dataset (Rudinger et al., 2018) in a zero-shot setting. Winogender tests whether a model can correctly determine if a pronoun refers to different occupation words. An unbiased model would correctly predict which word the pronoun refers to regardless of pronoun gender. We follow the same setup as in Rae et al.\n(2021) (described further in Section H.3).\nAs shown in Table 10, Chinchilla correctly resolves pronouns more frequently than Gopher across all groups. Interestingly, the performance increase is considerably smaller for male pronouns (increase of 3.2%) than for female or neutral pronouns (increases of 8.3% and 9.2% respectively). We also consider gotcha examples, in which the correct pronoun resolution contradicts gender stereotypes (determined by labor statistics). Again, we see that Chinchilla resolves pronouns more accurately than Gopher. When breaking up examples by male/female gender and gotcha/not gotcha, the largest improvement is on female gotcha examples (improvement of 10%). Thus, though Chinchilla uniformly overcomes gender stereotypes for more coreference examples than Gopher, the rate of improvement is higher for some pronouns than others, suggesting that the improvements conferred by using a more compute-optimal model can be uneven.", "publication_ref": ["b1", "b43"], "figure_ref": [], "table_ref": []}, {"heading": "Sample toxicity.", "text": "Language models are capable of generating toxic language-including insults, hate speech, profanities and threats (Gehman et al., 2020;Rae et al., 2021). While toxicity is an umbrella term, and its evaluation in LMs comes with challenges (Welbl et al., 2021;, automatic classifier scores can provide an indication for the levels of harmful text that a LM generates. Rae et al. (2021) found that improving language modelling loss by increasing the number of model parameters has only a negligible effect on toxic text generation (unprompted); here we analyze  2021), we generate 25,000 unprompted samples from Chinchilla, and compare their PerspectiveAPI toxicity score distribution to that of Gopher-generated samples. Several summary statistics indicate an absence of major differences: the mean (median) toxicity score for Gopher is 0.081 (0.064), compared to 0.087 (0.066) for Chinchilla, and the 95 th percentile scores are 0.230 for Gopher, compared to 0.238 for Chinchilla. That is, the large majority of generated samples are classified as non-toxic, and the difference between the models is negligible. In line with prior findings (Rae et al., 2021), this suggests that toxicity levels in unconditional text generation are largely independent of the model quality (measured in language modelling loss), i.e. that better models of the training dataset are not necessarily more toxic.", "publication_ref": ["b13", "b54"], "figure_ref": [], "table_ref": []}, {"heading": "Discussion & Conclusion", "text": "The trend so far in large language model training has been to increase the model size, often without increasing the number of training tokens. The largest dense transformer, MT-NLG 530B, is now over 3\u00d7 larger than GPT-3's 170 billion parameters from just two years ago. However, this model, as well as the majority of existing large models, have all been trained for a comparable number of tokens-around 300 billion. While the desire to train these mega-models has led to substantial engineering innovation, we hypothesize that the race to train larger and larger models is resulting in models that are substantially underperforming compared to what could be achieved with the same compute budget.\nWe propose three predictive approaches towards optimally setting model size and training duration, based on the outcome of over 400 training runs. All three approaches predict that Gopher is substantially over-sized and estimate that for the same compute budget a smaller model trained on more data will perform better. We directly test this hypothesis by training Chinchilla, a 70B parameter model, and show that it outperforms Gopher and even larger models on nearly every measured evaluation task.\nWhilst our method allows us to make predictions on how to scale large models when given additional compute, there are several limitations. Due to the cost of training large models, we only have two comparable training runs at large scale (Chinchilla and Gopher), and we do not have additional tests at intermediate scales. Furthermore, we assume that the efficient computational frontier can be described by a power-law relationship between the compute budget, model size, and number of training tokens. However, we observe some concavity in log at high compute budgets (see Appendix E). This suggests that we may still be overestimating the optimal size of large models. Finally, the training runs for our analysis have all been trained on less than an epoch of data; future work may consider the multiple epoch regime. Despite these limitations, the comparison of Chinchilla to Gopher validates our performance predictions, that have thus enabled training a better (and more lightweight) model at the same compute budget.\nThough there has been significant recent work allowing larger and larger models to be trained, our analysis suggests an increased focus on dataset scaling is needed. Speculatively, we expect that scaling to larger and larger datasets is only beneficial when the data is high-quality. This calls for responsibly collecting larger datasets with a high focus on dataset quality. Larger datasets will require extra care to ensure train-test set overlap is properly accounted for, both in the language modelling loss but also with downstream tasks. Finally, training for trillions of tokens introduces many ethical and privacy concerns. Large datasets scraped from the web will contain toxic language, biases, and private information. With even larger datasets being used, the quantity (if not the frequency) of such information increases, which makes dataset introspection all the more important. Chinchilla does suffer from bias and toxicity but interestingly it seems less affected than Gopher. Better understanding how performance of large language models and toxicity interact is an important future research question.\nWhile we have applied our methodology towards the training of auto-regressive language models, we expect that there is a similar trade-off between model size and the amount of data in other modalities. As training large models is very expensive, choosing the optimal model size and training steps beforehand is essential. The methods we propose are easy to reproduce in new settings.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Acknowledgements", "text": "We'd like to thank Jean-baptiste Alayrac, Kareem Ayoub, Chris Dyer, Nando de Freitas, Demis Hassabis, Geoffrey Irving, Koray Kavukcuoglu, Nate Kushman and Angeliki Lazaridou for useful comments on the manuscript. We'd like to thank Andy Brock, Irina Higgins, Michela Paganini, Francis Song, and other colleagues at DeepMind for helpful discussions. We are also very grateful to the JAX and XLA team for their support and assistance.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "A. Training dataset", "text": "In Table A1 we show the training dataset makeup used for Chinchilla and all scaling runs. Note that both the MassiveWeb and Wikipedia subsets are both used for more than one epoch. ", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "B. Optimal cosine cycle length", "text": "One key assumption is made on the cosine cycle length and the corresponding learning rate drop (we use a 10\u00d7 learning rate decay in line with Rae et al. (2021)). 9 We find that setting the cosine cycle length too much longer than the target number of training steps results in sub-optimally trained models, as shown in Figure A1. As a result, we assume that an optimally trained model will have the cosine cycle length correctly calibrated to the maximum number of steps, given the FLOP budget; we follow this rule in our main analysis.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "C. Consistency of scaling results across datasets", "text": "We show scaling results from an IsoFLOP (Approach 2) analysis after training on two different datasets: C4 (Raffel et al., 2020b) and GitHub code (we show results with data from Rae et al. (2021)), results are shown in Table A2. For both set of experiments using subsets of MassiveText, we use the same tokenizer as the MassiveText experiments.\nWe find that the scaling behaviour on these datasets is very similar to what we found on MassiveText, as shown in Figure A2 and Table A2. This suggests that our results are independent of the dataset as long as one does not train for more than one epoch.    ", "publication_ref": ["b40"], "figure_ref": ["fig_1"], "table_ref": ["tab_3"]}, {"heading": "D. Details on the scaling analyses D.1. Approach 1: Fixing model sizes and varying training sequences", "text": "We use a maximum learning rate of 2 \u00d7 10 \u22124 for the smallest models and 1.25 \u00d7 10 \u22124 for the largest models. In all cases, the learning rate drops by a factor of 10\u00d7 during training, using a cosine schedule. We make the assumption that the cosine cycle length should be approximately matched to the number of training steps. We find that when the cosine cycle overshoots the number of training steps by more than 25%, performance is noticeably degraded-see Figure A1. 10 We use Gaussian smoothing with a window length of 10 steps to smooth the training curve.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "D.2. Approach 3: Parametric fitting of the loss", "text": "In this section, we first show how Equation (2) can be derived. We repeat the equation below for clarity,\u02c6(\n,\n) + + ,(5)\nbased on a decomposition of the expected risk between a function approximation term and an optimisation suboptimality term. We then give details on the optimisation procedure for fitting the parameters.\nLoss decomposition. Formally, we consider the task of predicting the next token \u2208 Y based on the previous tokens in a sequence \u2208 Y , with varying from 0 to max -the maximum sequence length. We consider a distribution \u2208 D (X \u00d7 Y) of tokens in Y and their past in X. A predictor : X \u2192 D (Y) computes the probability of each token given the past sequence. The Bayes classifier, \u2605 , minimizes the cross-entropy of ( ) with the observed tokens , with expectation taken on the whole data distribution. We let be the expected risk\n( ) [log ( ) ],and\nset \u2605 argmin \u2208 F ( X,D ( Y)) ( ).(6)\nThe set of all transformers of size , that we denote H , forms a subset of all functions that map sequences to distributions of tokens X \u2192 D (Y). Fitting a transformer of size on the expected risk ( ) amounts to minimizing such risk on a restricted functional space argmin \u2208H ( ).\nWhen we observe a dataset ( , ) \u2208 [1, ] of size , we do not have access to , but instead to the empirical expectation\u02c6over the empirical distribution\u02c6. What happens when we are given datapoints that we can only see once, and when we constrain the size of the hypothesis space to be -dimensional ? We are making steps toward minimizing the empirical risk within a finite-dimensional functional space H :\u02c6(\n) \u02c6[ log ( ) ],setting\u02c6, argmin \u2208H\u02c6( ). (8)\nWe are never able to obtain\u02c6, as we typically perform a single epoch over the dataset of size . Instead, be obtain\u00af, , which is the result of applying a certain number of gradient steps based on the datapoints-the number of steps to perform depends on the gradient batch size, for which we use well-tested heuristics.\nUsing the Bayes-classifier \u2605 , the expected-risk minimizer and the \"single-epoch empirical-risk minimizer\"\u00af, , we can finally decompose the loss ( , ) into ( , ) (\u00af, ) = ( \u2605 ) + ( ) \u2212 ( \u2605 ) + (\u00af, ) \u2212 ( ) .\nThe loss comprises three terms: the Bayes risk, i.e. the minimal loss achievable for next-token prediction on the full distribution , a.k.a the \"entropy of natural text.\"; a functional approximation term that depends on the size of the hypothesis space; finally, a stochastic approximation term that captures the suboptimality of minimizing\u02c6instead of , and of making a single epoch on the provided dataset.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "D.3. Predicted compute optimal frontier for all three methods", "text": "For Approaches 2 and 3, we show the estimated model size and number of training tokens for a variety of compute budgets in Table A3. We plot the predicted number of tokens and parameters for a variety of FLOP budgets for the three methods in Figure A3.  3, we show the model size/token count projections from Approaches 2 and 3 for various compute budgets. . For 10 21 FLOPs, we perform a head-to-head comparison of a model predicted by Approach 1 and that predicted by . For both models, we use a batch size of 0.5M tokens and a maximum learning rate of 1.5 \u00d7 10 \u22124 that decays by 10\u00d7. From , we find that the optimal model size should be 4.68 billion parameters. From our approach 1, we estimate a 2.86 billion parameter model should be optimal. We train a 4.74 billion parameter and a 2.80 billion parameter transformer to test this hypothesis, using the same depth-to-width ratio to avoid as many confounding factors as possible. We find that our predicted model outperforms the model predicted by  as shown in Figure A4.  . We find that our prediction results in a more performant model at the end of training.", "publication_ref": [], "figure_ref": ["fig_2", "fig_4"], "table_ref": ["tab_4", "tab_4"]}, {"heading": "E. Curvature of the FLOP-loss frontier", "text": "We observe that as models increase there is a curvature in the FLOP-minimal loss frontier. This means that projections from very small models lead to different predictions than those from larger models.\nIn Figure A5 we show linear fits using the first, middle, and final third of frontier-points. In this work, we do not take this in to account and we leave this as interesting future work as it suggests that even smaller models may be optimal for large FLOP budgets.", "publication_ref": [], "figure_ref": ["fig_6"], "table_ref": []}, {"heading": "F. FLOPs computation", "text": "We include all training FLOPs, including those contributed to by the embedding matrices, in our analysis. Note that we also count embeddings matrices in the total parameter count. For large models the FLOP and parameter contribution of embedding matrices is small. We use a factor of 2 to describe the multiply accumulate cost. For the forward pass, we consider contributions from:\n\u2022 Embeddings -2 \u00d7 seq_len \u00d7 vocab_size \u00d7 d_model \u2022 Attention (Single Layer)\n-Key, query and value projections: 2 \u00d7 3 \u00d7 seq_len \u00d7 d_model \u00d7 (key_size \u00d7 num_heads) We fit to the first third (orange), the middle third (green), and the last third (blue) of all points along the loss frontier. We plot only a subset of the points.\n-Key @ Query logits: 2 \u00d7 seq_len \u00d7 seq_len \u00d7 (key_size \u00d7 num_heads) -Softmax: 3 \u00d7 num_heads \u00d7 seq_len \u00d7 seq_len -Softmax @ query reductions: 2 \u00d7 seq_len \u00d7 seq_len \u00d7 (key_size \u00d7 num_heads) -Final Linear: 2 \u00d7 seq_len \u00d7 (key_size \u00d7 num_heads) \u00d7 d_model\n\u2022 Dense Block (Single Layer)\n-2 \u00d7 seq_len \u00d7 (d_model \u00d7 ffw_size + d_model \u00d7 ffw_size)\n\u2022 Final Logits -2 \u00d7 seq_len \u00d7 d_model \u00d7 vocab_size\n\u2022 Total forward pass FLOPs: embeddings+num_layers\u00d7 (total_attention+dense_block) + logits As in  we assume that the backward pass has twice the FLOPs of the forward pass. We show a comparison between our calculation and that using the common approximation = 6  where is FLOPs, is the number of training tokens, and is the number of parameters in Table A4. We find the differences in FLOP calculation to be very small and they do not impact our analysis. ", "publication_ref": [], "figure_ref": [], "table_ref": ["tab_6"]}, {"heading": "G. Other differences between Chinchilla and Gopher", "text": "Beyond differences in model size and number of training tokens, there are some additional minor differences between Chinchilla and Gopher. Specifically, Gopher was trained with Adam (Kingma and Ba, 2014) whereas Chinchilla was trained with AdamW (Loshchilov and Hutter, 2019). Furthermore, as discussed in Lessons Learned in Rae et al. (2021), Chinchilla stored a higher-precision copy of the weights in the sharded optimiser state.\nWe show comparisons of models trained with Adam and AdamW in Figure A6 and Figure A7. We find that, independent of the learning rate schedule, AdamW trained models outperform models trained with Adam. In Figure A6 we show a comparison of an 680 million parameter model trained  with and without the higher precision copy of the weights and with Adam/AdamW for comparison.", "publication_ref": ["b23", "b31"], "figure_ref": [], "table_ref": []}, {"heading": "H. Results", "text": "", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "H.1. The Pile", "text": "In Table A5 we show the bits-per-byte (bpb) on The Pile  of Chinchilla, Gopher, and Jurassic-1. Chinchilla outperforms Gopher on all subsets. Jurassic-1 outperforms Chinchilla on 2 subsets-dm_mathematics and ubuntu_irc. ", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "H.2. MMLU", "text": "In Table A6 we show the performance of Chinchilla and Gopher on each subset of MMLU.", "publication_ref": [], "figure_ref": [], "table_ref": ["tab_9"]}, {"heading": "H.3. Winogender Setup", "text": "We follow the same setup as in Rae et al. (2021). To test coreference resolution in Chinchilla, we input a sentence which includes a pronoun reference (e.g., \"The librarian helped the child pick out a book because {pronoun} liked to encourage reading.\"), then measure the probability of the model completing the sentence \"'{Pronoun}' refers to the\" with different sentence roles (\"librarian\" and \"child\" in this example). Each example is annotated with the correct pronoun resolution (the pronoun corresponds to the librarian in this example). Each sentence is tested with a female, male, and gender-neutral pronoun. An unbiased model would correctly predict which word the pronoun refers to regardless of pronoun gender.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "H.4. BIG-bench", "text": "In Table A7 we show Chinchilla and Gopher performance on each subset of BIG-bench that we consider.", "publication_ref": [], "figure_ref": [], "table_ref": ["tab_10"]}, {"heading": "I. Model Card", "text": "We present the Chinchilla model card in Table A8, following the framework presented by Mitchell et al. (2019). ", "publication_ref": ["b34"], "figure_ref": [], "table_ref": []}, {"heading": "Intended Uses", "text": "Primary Intended Uses The primary use is research on language models, including: research on the scaling behaviour of language models along with those listed in Rae et al. (2021).", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Intersectional Results", "text": "We did not investigate intersectional biases.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Ethical Considerations", "text": "", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Data", "text": "The data is the same as described in Rae et al. (2021).", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Human Life", "text": "The model is not intended to inform decisions about matters central to human life or flourishing.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Mitigations", "text": "We considered filtering the dataset to remove toxic content but decided against it due to the observation that this can introduce new biases as studied by Welbl et al. (2021). More work is needed on mitigation approaches to toxic content and other types of risks associated with language models, such as those discussed in Weidinger et al. (2021).", "publication_ref": ["b54"], "figure_ref": [], "table_ref": []}, {"heading": "Risks and Harms", "text": "The data is collected from the internet, and thus undoubtedly there is toxic/biased content in our training dataset. Furthermore, it is likely that personal information is also in the dataset that has been used to train our models. We defer to the more detailed discussion in Weidinger et al. (2021).\nUse Cases Especially fraught use cases include the generation of factually incorrect information with the intent of distributing it or using the model to generate racist, sexist or otherwise toxic text with harmful intent. Many more use cases that could cause harm exist. Such applications to malicious use are discussed in detail in Weidinger et al. (2021).\nTable A8 | Chinchilla model card. We follow the framework presented in Mitchell et al. (2019).", "publication_ref": ["b34"], "figure_ref": [], "table_ref": []}, {"heading": "J. List of trained models", "text": "In ", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Appendix", "text": "Expected forms of the loss terms. In the decomposition (9), the second term depends entirely on the number of parameters that defines the size of the functional approximation space. On the set of two-layer neural networks, it is expected to be proportional to 1 1/2 (Siegel and Xu, 2020). Finally, given that it corresponds to early stopping in stochastic first order methods, the third term should scale as the convergence rate of these methods, which is lower-bounded by 1 1/2 (Robbins and Monro, 1951) (and may attain the bound). This convergence rate is expected to be dimension free (see e.g. Bubeck, 2015, for a review) and depends only on the loss smoothness; hence we assume that the second term only depends on in (2). Empirically, we find after fitting (2) that ( , ) = + 0.34 + 0.28 ,\nwith = 1.69, = 406.4, = 410.7. We note that the parameter/data coefficients are both lower than 1 2 ; this is expected for the data-efficiency coefficient (but far from the known lower-bound). Future models and training approaches should endeavor to increase these coefficients.\nFitting the decomposition to data. We effectively minimize the following problem min , , , ,\nwhere is the log-sum-exp operator. We then set , , = exp( ), exp( ), exp( ).\nWe use the LBFGS algorithm to find local minima of the objective above, started on a grid of initialisation given by: \u2208 {0., 0.5, . . . , 2.}, \u2208 {0., 0.5, . . . , 2.}, \u2208 {\u22121., \u2212.5, . . . , 1.}, \u2208 {0, 5, . . . , 25}, and \u2208 {0, 5, . . . , 25}. We find that the optimal initialisation is not on the boundary of our initialisation sweep.\nWe use = 10 \u22123 for the Huber loss. We find that using larger values of pushes the model to overfit the small compute regime and poorly predict held-out data from larger runs. We find that using a smaller than 10 \u22123 does not impact the resulting predictions.", "publication_ref": ["b47", "b42", "b7"], "figure_ref": [], "table_ref": []}, {"heading": "Primary Intended Users", "text": "DeepMind researchers. We will not make this model available publicly.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Out-of-Scope Uses", "text": "Uses of the language model for language generation in harmful or deceitful settings. More generally, the model should not be used for downstream applications without further safety and fairness mitigations.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Factors", "text": "Card Prompts -Relevant Factor Relevant factors include which language is used. Our model is trained on English data. Furthermore, in the analysis of models trained on the same corpus in Rae et al. (2021), we found it has unequal performance when modelling some dialects (e.g., African American English We principally focus on Chinchilla's performance compared to Gopher on text likelihood prediction.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Decision thresholds N/A Approaches to Uncertainty and Variability", "text": "Due to the costs of training large language models, we did not train Chinchilla multiple times. However, the breadth of our evaluation on a range of different task types gives a reasonable estimate of the overall performance of the model. Furthermore, the existence of another large model trained on the same dataset (Gopher) provides a clear point of comparison.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Evaluation Data", "text": "", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Datasets", "text": "\u2022 Language modelling on LAMBADA, Wikitext103 (Merity et al., 2017), C4 (Raffel et al., 2020a), PG-19 (Rae et al., 2020) and the Pile ). \u2022 Language understanding, real world knowledge, mathematical and logical reasoning on the Massive Multitask Language Understanding (MMLU) benchmark (Hendrycks et al., 2020) and on the \"Beyond the Imitation Game Benchmark\" (BIG-bench) (BIG-bench collaboration, 2021). \u2022 Question answering (closed book) on Natural Questions  and TriviaQA (Joshi et al., 2017). \u2022 Reading comprehension on RACE (Lai et al., 2017) \u2022 Common sense understanding on HellaSwag (Zellers et al., 2019), PIQA (Bisk et al., 2020), Winogrande (Sakaguchi et al., 2020), SIQA (Sap et al., 2019), BoolQ (Clark et al., 2019), and TruthfulQA .", "publication_ref": ["b39", "b38", "b15", "b20", "b26", "b57", "b3", "b44", "b45", "b9"], "figure_ref": [], "table_ref": []}, {"heading": "Motivation", "text": "We chose evaluations from Rae et al. (2021) to allow us to most directly compare to Gopher.\nPreprocessing Input text is tokenized using a SentencePiece tokenizer with a vocabulary of size 32,000. Unlike the tokenizer used for Gopher, the tokenizer used for Chinchilla does not perform NFKC normalization.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Training Data", "text": "The same dataset is used as in Rae et al. (2021). Differences in sampling are shown in Table A1.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Quantitative Analyses", "text": "Unitary Results Section 4.2 gives a detailed description of our analysis. Main take-aways include:\n\u2022 Our model is capable of outputting toxic language as measured by the PerspectiveAPI. This is particularly true when the model is prompted with toxic prompts. \u2022 Gender: Our model emulates stereotypes found in our dataset, with occupations such as \"dietician\" and \"receptionist\" being more associated with women and \"carpenter\" and \"sheriff \" being more associated with men. \u2022 Race/religion/country sentiment: Prompting our model to discuss some groups leads to sentences with lower or higher sentiment, likely reflecting text in our dataset.", "publication_ref": [], "figure_ref": [], "table_ref": []}], "references": [{"ref_id": "b0", "title": "Efficient Large Scale Language Modeling with Mixtures of Experts", "journal": "", "year": "2021", "authors": "M Artetxe; S Bhosale; N Goyal; T Mihaylov; M Ott; S Shleifer; X V Lin; J Du; S Iyer; R Pasunuru; G Anantharaman; X Li; S Chen; H Akin; M Baines; L Martin; X Zhou; P S Koura; B O'horo; J Wang; L Zettlemoyer; M Diab; Z Kozareva; V Stoyanov"}, {"ref_id": "b1", "title": "On the dangers of stochastic parrots: Can language models be too big?", "journal": "", "year": "2021", "authors": "E M Bender; T Gebru; A Mcmillan-Major; S Shmitchell"}, {"ref_id": "b2", "title": "Beyond the imitation game: Measuring and extrapolating the capabilities of language models", "journal": "", "year": "", "authors": ""}, {"ref_id": "b3", "title": "PIQA: Reasoning about physical commonsense in natural language", "journal": "", "year": "2020", "authors": "Y Bisk; R Zellers; J Gao; Y Choi"}, {"ref_id": "b4", "title": "", "journal": "", "year": "", "authors": "S Borgeaud; A Mensch; J Hoffmann; T Cai; E Rutherford; K Millican; G Van Den Driessche; J.-B Lespiau; B Damoc; A Clark; D De Las; A Casas; J Guy; R Menick; T Ring; S Hennigan; L Huang; C Maggiore; A Jones; A Cassirer; M Brock; G Paganini; O Irving; S Vinyals; K Osindero; J W Simonyan; E Rae; L Elsen;  Sifre"}, {"ref_id": "b5", "title": "JAX: composable transformations of Python+NumPy programs", "journal": "", "year": "2018", "authors": "J Bradbury; R Frostig; P Hawkins; M J Johnson; C Leary; D Maclaurin; G Necula; A Paszke; J Van-Derplas; S Wanderman-Milne; Q Zhang"}, {"ref_id": "b6", "title": "Language models are few-shot learners", "journal": "Curran Associates, Inc", "year": "2020", "authors": "T Brown; B Mann; N Ryder; M Subbiah; J D Kaplan; P Dhariwal; A Neelakantan; P Shyam; G Sastry; A Askell; S Agarwal; A Herbert-Voss; G Krueger; T Henighan; R Child; A Ramesh; D Ziegler; J Wu; C Winter; C Hesse; M Chen; E Sigler; M Litwin; S Gray; B Chess; J Clark; C Berner; S Mccandlish; A Radford; I Sutskever; D Amodei"}, {"ref_id": "b7", "title": "Convex Optimization: Algorithms and Complexity. Foundations and Trends in Machine Learning", "journal": "", "year": "2015", "authors": "S Bubeck"}, {"ref_id": "b8", "title": "Unified scaling laws for routed language models", "journal": "", "year": "2022", "authors": "A Clark; D Casas; A Guy; A Mensch; M Paganini; J Hoffmann; B Damoc; B Hechtman; T Cai; S Borgeaud; G Driessche; E Rutherford; T Hennigan; M Johnson; K Millican; A Cassirer; C Jones; E Buchatskaya; D Budden; L Sifre; S Osindero; O Vinyals; J Rae; E Elsen; K Kavukcuoglu; K Simonyan"}, {"ref_id": "b9", "title": "Boolq: Exploring the surprising difficulty of natural yes/no questions", "journal": "", "year": "2019", "authors": "C Clark; K Lee; M.-W Chang; T Kwiatkowski; M Collins; K Toutanova"}, {"ref_id": "b10", "title": "Glam: Efficient scaling of language models with mixture-of-experts", "journal": "", "year": "2021", "authors": "N Du; Y Huang; A M Dai; S Tong; D Lepikhin; Y Xu; M Krikun; Y Zhou; A W Yu; O Firat; B Zoph; L Fedus; M Bosma; Z Zhou; T Wang; Y E Wang; K Webster; M Pellat; K Robinson; K Meier-Hellstern; T Duke; L Dixon; K Zhang; Q V Le; Y Wu; Z Chen; C Cui"}, {"ref_id": "b11", "title": "Switch transformers: Scaling to trillion parameter models with simple and efficient sparsity", "journal": "", "year": "2021", "authors": "W Fedus; B Zoph; N Shazeer"}, {"ref_id": "b12", "title": "The Pile: An 800GB dataset of diverse text for language modeling", "journal": "", "year": "2020", "authors": "L Gao; S Biderman; S Black; L Golding; T Hoppe; C Foster; J Phang; H He; A Thite; N Nabeshima; S Presser; C Leahy"}, {"ref_id": "b13", "title": "RealToxicityPrompts: Evaluating neural toxic degeneration in language models", "journal": "Association for Computational Linguistics", "year": "2020-11", "authors": "S Gehman; S Gururangan; M Sap; Y Choi; N A Smith"}, {"ref_id": "b14", "title": "REALM: Retrieval-augmented language model pre-training", "journal": "", "year": "2020", "authors": "K Guu; K Lee; Z Tung; P Pasupat; M.-W Chang"}, {"ref_id": "b15", "title": "Measuring massive multitask language understanding", "journal": "", "year": "2020", "authors": "D Hendrycks; C Burns; S Basart; A Zou; M Mazeika; D Song; J Steinhardt"}, {"ref_id": "b16", "title": "Haiku: Sonnet for JAX", "journal": "", "year": "2020", "authors": "T Hennigan; T Cai; T Norman; I Babuschkin"}, {"ref_id": "b17", "title": "Scaling laws for transfer", "journal": "", "year": "2021", "authors": "D Hernandez; J Kaplan; T Henighan; S Mccandlish"}, {"ref_id": "b18", "title": "Robust Estimation of a Location Parameter", "journal": "The Annals of Mathematical Statistics", "year": "1964-03", "authors": "P J Huber"}, {"ref_id": "b19", "title": "Distilling knowledge from reader to retriever for question answering", "journal": "", "year": "2020", "authors": "G Izacard; E Grave"}, {"ref_id": "b20", "title": "TriviaQA: A Large Scale Distantly Supervised Challenge Dataset for Reading Comprehension", "journal": "", "year": "2017", "authors": "M Joshi; E Choi; D Weld; L Zettlemoyer"}, {"ref_id": "b21", "title": "In-datacenter performance analysis of a tensor processing unit", "journal": "Association for Computing Machinery", "year": "2017", "authors": "N P Jouppi; C Young; N Patil; D Patterson; G Agrawal; R Bajwa; S Bates; S Bhatia; N Boden; A Borchers; R Boyle; P Cantin; C Chao; C Clark; J Coriell; M Daley; M Dau; J Dean; B Gelb; T V Ghaemmaghami; R Gottipati; W Gulland; R Hagmann; C R Ho; D Hogberg; J Hu; R Hundt; D Hurt; J Ibarz; A Jaffey; A Jaworski; A Kaplan; H Khaitan; D Killebrew; A Koch; N Kumar; S Lacy; J Laudon; J Law; D Le; C Leary; Z Liu; K Lucke; A Lundin; G Mackean; A Maggiore; M Mahony; K Miller; R Nagarajan; R Narayanaswami; R Ni; K Nix; T Norrie; M Omernick; N Penukonda; A Phelps; J Ross; M Ross; A Salek; E Samadiani; C Severn; G Sizikov; M Snelham; J Souter; D Steinberg; A Swing; M Tan; G Thorson; B Tian; H Toma; E Tuttle; V Vasudevan; R Walter; W Wang; E Wilcox; D H Yoon"}, {"ref_id": "b22", "title": "Scaling laws for neural language models", "journal": "", "year": "2020", "authors": "J Kaplan; S Mccandlish; T Henighan; T B Brown; B Chess; R Child; S Gray; A Radford; J Wu; D Amodei"}, {"ref_id": "b23", "title": "Adam: A method for stochastic optimization", "journal": "", "year": "2014", "authors": "D P Kingma; J Ba"}, {"ref_id": "b24", "title": "SentencePiece: A simple and language independent subword tokenizer and detokenizer for neural text processing", "journal": "", "year": "2018", "authors": "T Kudo; J Richardson"}, {"ref_id": "b25", "title": "Natural questions: a benchmark for question answering research. Transactions of the Association of Computational Linguistics", "journal": "", "year": "2019", "authors": "T Kwiatkowski; J Palomaki; O Redfield; M Collins; A Parikh; C Alberti; D Epstein; I Polosukhin; M Kelcey; J Devlin; K Lee; K N Toutanova; L Jones; M.-W Chang; A Dai; J Uszkoreit; Q Le; S Petrov"}, {"ref_id": "b26", "title": "RACE: Large-scale ReAding comprehension dataset from examinations", "journal": "Association for Computational Linguistics", "year": "2017-09", "authors": "G Lai; Q Xie; H Liu; Y Yang; E Hovy"}, {"ref_id": "b27", "title": "The depth-to-width interplay in self-attention", "journal": "", "year": "2020", "authors": "Y Levine; N Wies; O Sharir; H Bata; A Shashua"}, {"ref_id": "b28", "title": "Retrieval-augmented generation for knowledge-intensive nlp tasks", "journal": "", "year": "2020", "authors": "P Lewis; E Perez; A Piktus; F Petroni; V Karpukhin; N Goyal; H K\u00fcttler; M Lewis; W Yih; T Rockt\u00e4schel; S Riedel; D Kiela"}, {"ref_id": "b29", "title": "Jurassic-1: Technical details and evaluation", "journal": "", "year": "", "authors": "O Lieber; O Sharir; B Lenz; Y Shoham"}, {"ref_id": "b30", "title": "Measuring how models mimic human falsehoods", "journal": "", "year": "2021", "authors": "S Lin; J Hilton; O Evans;  Truthfulqa"}, {"ref_id": "b31", "title": "Decoupled weight decay regularization", "journal": "", "year": "2019", "authors": "I Loshchilov; F Hutter"}, {"ref_id": "b32", "title": "An empirical model of large-batch training", "journal": "", "year": "2018", "authors": "S Mccandlish; J Kaplan; D Amodei; O D Team"}, {"ref_id": "b33", "title": "Pointer sentinel mixture models", "journal": "", "year": "2017", "authors": "S Merity; C Xiong; J Bradbury; R Socher"}, {"ref_id": "b34", "title": "Model cards for model reporting", "journal": "", "year": "2019", "authors": "M Mitchell; S Wu; A Zaldivar; P Barnes; L Vasserman; B Hutchinson; E Spitzer; I D Raji; T Gebru"}, {"ref_id": "b35", "title": "Updating Quasi-Newton Matrices with Limited Storage", "journal": "Mathematics of Computation", "year": "1980", "authors": "J "}, {"ref_id": "b36", "title": "The LAMBADA dataset: Word prediction requiring a broad discourse context", "journal": "", "year": "2016", "authors": "D Paperno; G Kruszewski; A Lazaridou; Q N Pham; R Bernardi; S Pezzelle; M Baroni; G Boleda; R Fern\u00e1ndez"}, {"ref_id": "b37", "title": "", "journal": "", "year": "", "authors": "J Rae; S Borgeaud; T Cai; K Millican; J Hoffmann; F Song; J Aslanides; S Henderson; R Ring; S Young; E Rutherford; T Hennigan; J Menick; A Cassirer; R Powell; G Van Den Driessche; L A Hendricks; M Rauh; P.-S Huang; A Glaese; J Welbl; S Dathathri; S Huang; J Uesato; J Mellor; I Higgins; A Creswell; N Mcaleese; A Wu; E Elsen; S Jayakumar; E Buchatskaya; D Budden; E Sutherland; K Simonyan; M Paganini; L Sifre; L Martens; X L Li; A Kuncoro; A Nematzadeh; E Gribovskaya; D Donato; A Lazaridou; A Mensch; J.-B Lespiau; M Tsimpoukelli; N Grigorev; D Fritz; T Sottiaux; M Pajarskas; T Pohlen; Z Gong; D Toyama; C De Masson; ; A Guy; J Bradbury; M Johnson; L Weidinger; I Gabriel; W Isaac; E Lockhart; S Osindero; L Rimell; C Dyer; O Vinyals; K Ayoub; J Stanway; L Bennett; D Hassabis; K Kavukcuoglu; G Irving"}, {"ref_id": "b38", "title": "Compressive transformers for long-range sequence modelling", "journal": "Advances in Neural Information Processing Systems", "year": "2020", "authors": "J W Rae; A Potapenko; S M Jayakumar; T P Lillicrap; K Choromanski; V Likhosherstov; D Dohan; X Song; A Gane; T Sarlos"}, {"ref_id": "b39", "title": "Exploring the limits of transfer learning with a unified text-to-text transformer", "journal": "Journal of Machine Learning Research", "year": "2020", "authors": "C Raffel; N Shazeer; A Roberts; K Lee; S Narang; M Matena; Y Zhou; W Li; P J Liu"}, {"ref_id": "b40", "title": "Exploring the limits of transfer learning with a unified text-to-text transformer", "journal": "Journal of Machine Learning Research", "year": "2020", "authors": "C Raffel; N Shazeer; A Roberts; K Lee; S Narang; M Matena; Y Zhou; W Li; P J Liu"}, {"ref_id": "b41", "title": "Zero: Memory optimizations toward training trillion parameter models", "journal": "IEEE", "year": "2020", "authors": "S Rajbhandari; J Rasley; O Ruwase; Y He"}, {"ref_id": "b42", "title": "A Stochastic Approximation Method", "journal": "The Annals of Mathematical Statistics", "year": "1951-09", "authors": "H Robbins; S Monro"}, {"ref_id": "b43", "title": "Gender bias in coreference resolution", "journal": "Association for Computational Linguistics", "year": "2018-06", "authors": "R Rudinger; J Naradowsky; B Leonard; B Van Durme"}, {"ref_id": "b44", "title": "Winogrande: An adversarial winograd schema challenge at scale", "journal": "", "year": "2020", "authors": "K Sakaguchi; R Le Bras; C Bhagavatula; Y Choi"}, {"ref_id": "b45", "title": "SocialIQA: Commonsense reasoning about social interactions", "journal": "", "year": "2019", "authors": "M Sap; H Rashkin; D Chen; R Lebras; Y Choi"}, {"ref_id": "b46", "title": "Measuring the effects of data parallelism on neural network training", "journal": "", "year": "2018", "authors": "C J Shallue; J Lee; J Antognini; J Sohl-Dickstein; R Frostig; G E Dahl"}, {"ref_id": "b47", "title": "Approximation rates for neural networks with general activation functions", "journal": "Neural Networks", "year": "2020-08", "authors": "J W Siegel; J Xu"}, {"ref_id": "b48", "title": "Using Deepspeed and Megatron to Train Megatronturing NLG 530b, A Large-Scale Generative Language Model", "journal": "", "year": "2022", "authors": "S Smith; M Patwary; B Norick; P Legresley; S Rajbhandari; J Casper; Z Liu; S Prabhumoye; G Zerveas; V Korthikanti; E Zhang; R Child; R Y Aminabadi; J Bernauer; X Song; M Shoeybi; Y He; M Houston; S Tiwary; B Catanzaro"}, {"ref_id": "b49", "title": "Updates and lessons from AI forecasting", "journal": "", "year": "2021", "authors": "J Steinhardt"}, {"ref_id": "b50", "title": "Scale efficiently: Insights from pre-training and fine-tuning transformers", "journal": "", "year": "2021", "authors": "Y Tay; M Dehghani; J Rao; W Fedus; S Abnar; H W Chung; S Narang; D Yogatama; A Vaswani; D Metzler"}, {"ref_id": "b51", "title": "Language models for dialog applications", "journal": "", "year": "2022", "authors": "R Thoppilan; D D Freitas; J Hall; N Shazeer; A Kulshreshtha; H.-T Cheng; A Jin; T Bos; L Baker; Y Du; Y Li; H Lee; H S Zheng; A Ghafouri; M Menegali; Y Huang; M Krikun; D Lepikhin; J Qin; D Chen; Y Xu; Z Chen; A Roberts; M Bosma; Y Zhou; C.-C Chang; I Krivokon; W Rusch; M Pickett; K Meier-Hellstern; M R Morris; T Doshi; R D Santos; T Duke; J Soraker; B Zevenbergen; V Prabhakaran; M Diaz; B Hutchinson; K Olson; A Molina; E Hoffman-John; J Lee; L Aroyo; R Rajakumar; A Butryna; M Lamm; V Kuzmina; J Fenton; A Cohen; R Bernstein; R Kurzweil; B Aguera-Arcas; C Cui; M Croak; E Chi; Q Le;  Lamda"}, {"ref_id": "b52", "title": "Attention is all you need", "journal": "", "year": "2017", "authors": "A Vaswani; N Shazeer; N Parmar; J Uszkoreit; L Jones; A N Gomez; \u0141 Kaiser; I Polosukhin"}, {"ref_id": "b53", "title": "", "journal": "", "year": "", "authors": "L Weidinger; J Mellor; M Rauh; C Griffin; J Uesato; P.-S Huang; M Cheng; M Glaese; B Balle; A Kasirzadeh; Z Kenton; S Brown; W Hawkins; T Stepleton; C Biles; A Birhane; J Haas; L Rimell; L A Hendricks; W Isaac; S Legassick; G Irving; I Gabriel"}, {"ref_id": "b54", "title": "Challenges in detoxifying language models", "journal": "Association for Computational Linguistics", "year": "2021-11", "authors": "J Welbl; A Glaese; J Uesato; S Dathathri; J Mellor; L A Hendricks; K Anderson; P Kohli; B Coppin; P.-S Huang"}, {"ref_id": "b55", "title": "Detoxifying language models risks marginalizing minority voices", "journal": "Association for Computational Linguistics", "year": "2021-06", "authors": "A Xu; E Pathak; E Wallace; S Gururangan; M Sap; D Klein"}, {"ref_id": "b56", "title": "Tuning large neural networks via zero-shot hyperparameter transfer", "journal": "", "year": "2021", "authors": "G Yang; E J Hu; I Babuschkin; S Sidor; X Liu; D Farhi; N Ryder; J Pachocki; W Chen; J Gao"}, {"ref_id": "b57", "title": "HellaSwag: Can a machine really finish your sentence?", "journal": "", "year": "2019", "authors": "R Zellers; A Holtzman; Y Bisk; A Farhadi; Y Choi"}, {"ref_id": "b58", "title": "Which algorithmic choices matter at which batch sizes? insights from a noisy quadratic model", "journal": "Curran Associates, Inc", "year": "2019", "authors": "G Zhang; L Li; Z Nado; J Martens; S Sachdeva; G Dahl; C Shallue; R B Grosse"}, {"ref_id": "b59", "title": "Designing effective sparse expert models, 2022. Parameters (million) d_model ffw_size kv_size n_heads n_layers", "journal": "", "year": "", "authors": "B Zoph; I Bello; S Kumar; N Du; Y Huang; J Dean; N Shazeer; W Fedus"}, {"ref_id": "b60", "title": "We list the hyperparameters and size of all models trained as part of this work. Many shown models have been trained with multiple learning rate schedules/number of training tokens", "journal": "", "year": "", "authors": "A9 Table"}], "figures": [{"figure_label": "2", "figure_type": "figure", "figure_id": "fig_1", "figure_caption": "Figure 2 |2Figure2| Training curve envelope. On the left we show all of our different runs. We launched a range of model sizes going from 70M to 10B, each for four different cosine cycle lengths. From these curves, we extracted the envelope of minimal loss per FLOP, and we used these points to estimate the optimal model size (center) for a given compute budget and the optimal number of training tokens (right). In green, we show projections of optimal model size and training token count based on the number of FLOPs used to train Gopher (5.76 \u00d7 10 23 ).", "figure_data": ""}, {"figure_label": "3", "figure_type": "figure", "figure_id": "fig_2", "figure_caption": "Figure 3 |3Figure3| IsoFLOP curves. For various model sizes, we choose the number of training tokens such that the final FLOPs is a constant. The cosine cycle length is set to match the target FLOP count. We find a clear valley in loss, meaning that for a given FLOP budget there is an optimal model to train (left). Using the location of these valleys, we project optimal model size and number of tokens for larger models (center and right). In green, we show the estimated number of parameters and tokens for an optimal model trained with the compute budget of Gopher.", "figure_data": ""}, {"figure_label": "4", "figure_type": "figure", "figure_id": "fig_4", "figure_caption": "Figure 4 |4Figure4| Parametric fit. We fit a parametric modelling of the loss\u02c6( , ) and display contour (left) and isoFLOP slices (right). For each isoFLOP slice, we include a corresponding dashed line in the left plot. In the left plot, we show the efficient frontier in blue, which is a line in log-log space. Specifically, the curve goes through each iso-loss contour at the point with the fewest FLOPs. We project the optimal model size given the Gopher FLOP budget to be 40B parameters.", "figure_data": ""}, {"figure_label": "5", "figure_type": "figure", "figure_id": "fig_6", "figure_caption": "Figure 5 |5Figure5| Pile Evaluation. For the different evaluation sets in The Pile, we show the bits-per-byte (bpb) improvement (decrease) of Chinchilla compared to Gopher. On all subsets, Chinchilla outperforms Gopher.", "figure_data": ""}, {"figure_label": "A1A2", "figure_type": "figure", "figure_id": "fig_8", "figure_caption": "Figure A1 |Figure A2 |A1A2Figure A1| Grid over cosine cycle length. We show 6 curves with the cosine cycle length set to 1, 1.1, 1.25, 1.5, 2, and 5\u00d7 longer than the target number of training steps. When the cosine cycle length is too long, and the learning rate does not drop appropriately, then performance is impaired. We find that overestimating the number of training steps beyond 25% leads to clear drops in performance. We show results where we have set the number of training steps to two different values (top and bottom).", "figure_data": ""}, {"figure_label": "A3", "figure_type": "figure", "figure_id": "fig_9", "figure_caption": "Figure A3 |A3Figure A3| Optimal number of tokens and parameters for a training FLOP budget. For a fixed FLOP budget, we show the optimal number of tokens and parameters as predicted by Approaches 1, 2, and 3. For an alternate representation, see Figure1.", "figure_data": ""}, {"figure_label": "A5", "figure_type": "figure", "figure_id": "fig_10", "figure_caption": "FLOPSFigure A5 |A5FigureA5| Training curve envelopes. We fit to the first third (orange), the middle third (green), and the last third (blue) of all points along the loss frontier. We plot only a subset of the points.", "figure_data": ""}, {"figure_label": "A6A7", "figure_type": "figure", "figure_id": "fig_11", "figure_caption": "Figure A6 |Figure A7 |A6A7FigureA6| Comparison of other differences. Using an 680 million parameter model, we show a comparison between the setup used to train Gopher and Chinchilla-the change in optimiser and using a higher precision copy of the weights in the optimiser state. The setup used for Chinchilla (orange) clearly outperforms the setup used to train Gopher (green).", "figure_data": ""}, {"figure_label": "2", "figure_type": "table", "figure_id": "tab_3", "figure_caption": "The listed values are the exponents, and , on the relationship \u221d and \u221d . Our analysis suggests a near equal scaling in parameters and data with increasing compute which is in clear contrast to previous work on the scaling of large models. The 10 th and 90 th percentiles are estimated via bootstrapping data (80% of the dataset is sampled 100 times) and are shown in parenthesis.", "figure_data": "ApproachCoeff. where\u221dCoeff. where\u221d1. Minimum over training curves0.50 (0.488, 0.502)0.50 (0.501, 0.512)2. IsoFLOP profiles0.49 (0.462, 0.534)0.51 (0.483, 0.529)3. Parametric modelling of the loss0.46 (0.454, 0.455)0.54 (0.542, 0.543)Kaplan et al. (2020)0.730.27"}, {"figure_label": "3", "figure_type": "table", "figure_id": "tab_4", "figure_caption": "", "figure_data": "3)ParametersFLOPs FLOPs (in Gopher unit)Tokens400 Million 1.92e+191/29, 9688.0 Billion1 Billion 1.21e+201/4, 76120.2 Billion10 Billion 1.23e+221/46 205.1 Billion.67 Billion 5.76e+23 175 Billion 3.85e+241 6.71.5 Trillion 3.7 Trillion280 Billion 9.90e+2417.25.9 Trillion520 Billion 3.43e+2559.511.0 Trillion1 Trillion 1.27e+26221.321.2 Trillion10 Trillion 1.30e+2822515.9 216.2 Trillion"}, {"figure_label": "4", "figure_type": "table", "figure_id": "tab_6", "figure_caption": "Chinchilla architecture details. We list the number of layers, the key/value size, the bottleneck activation size d model , the maximum learning rate, and the training batch size (# tokens). The feed-forward size is always set to 4 \u00d7 d model . Note that we double the batch size midway through training for both Chinchilla and Gopher. The Pile: PG-19, arXiv, FreeLaw, . . .", "figure_data": "# Tasks ExamplesLanguage Modelling WikiText-103, Reading Comprehension 20 3 RACE-m, RACE-h, LAMBADAQuestion Answering3Natural Questions, TriviaQA, TruthfulQACommon Sense5HellaSwag, Winogrande, PIQA, SIQA, BoolQMMLU57High School Chemistry, Astronomy, Clinical Knowledge, . . ."}, {"figure_label": "6", "figure_type": "table", "figure_id": "tab_9", "figure_caption": "We report the average 5-shot accuracy over 57 tasks with model and human accuracy comparisons taken from Hendrycks et al.", "figure_data": ""}, {"figure_label": "7", "figure_type": "table", "figure_id": "tab_10", "figure_caption": "", "figure_data": "30Relative Improvement over Gopher10 0 10 20college_mathematics econometrics moral_scenarios formal_logic medical_genetics machine_learning public_relations global_facts business_ethics electrical_engineering college_computer_science world_religions high_school_us_history high_school_psychology management high_school_computer_science marketing high_school_physics high_school_macroeconomics sociology high_school_government_and_politics high_school_european_history nutrition college_medicine astronomy logical_fallacies professional_psychology miscellaneous jurisprudence clinical_knowledge high_school_geography high_school_biology college_biology college_chemistry high_school_world_history us_foreign_policy virology philosophy moral_disputes human_aging computer_security security_studies international_law high_school_microeconomics high_school_statistics professional_accounting professional_medicine prehistory high_school_chemistry elementary_mathematics abstract_algebra anatomy professional_law human_sexuality college_physics high_school_mathematics conceptual_physicsChinchilla Gopher GPT-3 MT-NLG 530BLAMBADA Zero-Shot77.474.576.276.6RACE-m Few-Shot86.875.158.1-RACE-h Few-Shot82.371.646.847.9"}, {"figure_label": "89", "figure_type": "table", "figure_id": "tab_13", "figure_caption": "", "figure_data": "Method Chinchilla Gopher GPT-3 SOTA (open book)0-shot16.6%10.1% 14.6%Natural Questions (dev)5-shot31.5%24.5%-54.4%64-shot35.5%28.2% 29.9%0-shot67.0%52.8% 64.3 %TriviaQA (unfiltered, test)5-shot73.2%63.6%--64-shot72.3%61.3% 71.2%0-shot55.4%43.5%-TriviaQA (filtered, dev)5-shot64.1%57.0%-72.5%64-shot64.6%57.2%-"}, {"figure_label": "", "figure_type": "table", "figure_id": "tab_14", "figure_caption": "Chinchilla performs better on examples which contradict gender stereotypes (gotcha examples). However, difference in performance across groups suggests Chinchilla exhibits bias.whether the same holds true for a lower LM loss achieved via more compute-optimal training. Similar to the protocol ofRae et al. (", "figure_data": "Chinchilla GopherChinchilla GopherAll78.3%71.4%Male gotcha62.5%59.2%Male71.2%68.0%Male not gotcha80.0%76.7%Female 79.6%71.3%Female gotcha76.7%66.7%Neutral 84.2%75.0%Female not gotcha 82.5%75.8%"}, {"figure_label": "A2", "figure_type": "table", "figure_id": "tab_17", "figure_caption": "The listed values are the exponents, and , on the relationship \u221d and \u221d . Using IsoFLOP profiles, we estimate the scaling on two different datasets.", "figure_data": "ApproachCoef. where\u221dCoef. where\u221dC40.500.50GitHub0.530.47Kaplan et al. (2020)0.730.27Table A2 | Estimated parameter and data scaling with increased training compute on two al-ternate datasets.."}, {"figure_label": "A3", "figure_type": "table", "figure_id": "tab_18", "figure_caption": "", "figure_data": "Approach 2Approach 3ParametersFLOPsTokensFLOPsTokens400 Million 1.84e+197.7 Billion 2.21e+199.2 Billion1 Billion 1.20e+2020.0 Billion 1.62e+2027.1 Billion10 Billion 1.32e+22 219.5 Billion 2.46e+22410.1 Billion67 Billion 6.88e+231.7 Trillion 1.71e+244.1 Trillion175 Billion 4.54e+244.3 Trillion 1.26e+2412.0 Trillion280 Billion 1.18e+257.1 Trillion 3.52e+2520.1 Trillion520 Billion 4.19e+2513.4 Trillion 1.36e+2643.5 Trillion1 Trillion 1.59e+2626.5 Trillion 5.65e+2694.1 Trillion10 Trillion 1.75e+28 292.0 Trillion 8.55e+28 1425.5 Trillion"}, {"figure_label": "", "figure_type": "table", "figure_id": "tab_19", "figure_caption": "We train 2.80 and 4.74 billion parameter transformers predicted as optimal for 10 21 FLOPs by Approach 1 and by", "figure_data": "2.7 2.82.7 2.8Kaplan et al (2020) Approach 12.4 2.5 2.6 Training Loss2.4 2.5 2.6 Training Loss2.32.32.201 Sequences21e72.20.0 0.2 0.4 0.6 0.8 1.0 FLOPs \u00d710 21"}, {"figure_label": "A4", "figure_type": "table", "figure_id": "tab_20", "figure_caption": "Compared to the results presented inRae et al. (2021), we use a slightly more FLOP comparison. For a variety of different model sizes, we show the ratio of the FLOPs that we compute per sequence to that using the 6 approximation.", "figure_data": "Parameters num_layers d_model ffw_size num_heads k/q size FLOP Ratio (Ours/6 )73M10640256010641.03305M201024409616641.10552M2412805120101281.081.1B2617927168141281.041.6B2820488192161281.036.8B40358414336281280.99"}, {"figure_label": "A6", "figure_type": "table", "figure_id": "tab_23", "figure_caption": "Chinchilla MMLU results. For each subset of MMLU(Hendrycks et al., 2020), we show Chinchilla's accuracy compared to Gopher.", "figure_data": "TaskChinchilla Gopher TaskChinchilla Gopherabstract_algebra31.025.0anatomy70.456.3astronomy73.065.8business_ethics72.070.0clinical_knowledge75.167.2college_biology79.970.8college_chemistry51.045.0college_computer_science51.049.0college_mathematics32.037.0college_medicine66.560.1college_physics46.134.3computer_security76.065.0conceptual_physics67.249.4econometrics38.643.0electrical_engineering62.160.0elementary_mathematics41.533.6formal_logic33.335.7global_facts39.038.0high_school_biology80.371.3high_school_chemistry58.147.8high_school_computer_science 58.054.0high_school_european_history 78.872.1high_school_geography86.476.8high_school_gov_and_politics91.283.9high_school_macroeconomics70.565.1high_school_mathematics31.923.7high_school_microeconomics77.766.4high_school_physics36.433.8high_school_psychology86.681.8high_school_statistics58.850.0high_school_us_history83.378.9high_school_world_history85.275.1human_aging77.666.4human_sexuality86.367.2international_law90.977.7jurisprudence79.671.3logical_fallacies80.472.4machine_learning41.141.1management82.577.7marketing89.783.3medical_genetics69.069.0miscellaneous84.575.7moral_disputes77.566.8moral_scenarios36.540.2nutrition77.169.9philosophy79.468.8prehistory81.267.6professional_accounting52.144.3professional_law56.544.5professional_medicine75.464.0professional_psychology75.768.1public_relations73.671.8security_studies75.964.9sociology91.084.1us_foreign_policy92.081.0virology53.647.0world_religions87.784.2Model DetailsOrganization Developing the Model DeepMindModel DateMarch 2022Model TypeAutoregressive Transformer Language Model (Section 4.1 fordetails)Feedback on the Model{jordanhoffmann, sborgeaud,amensch,sifre}@deepmind.com"}, {"figure_label": "A9A7", "figure_type": "table", "figure_id": "tab_24", "figure_caption": "we list the model size and configuration of all models used in this study. Many models have been trained multiple times, for a different number of training steps. Chinchilla BIG-bench results. For each subset of BIG-bench (BIG-bench collaboration, 2021), we show Chinchilla and Gopher's accuracy.", "figure_data": "TaskChinchilla Gopher TaskChinchilla Gopherhyperbaton54.251.7movie_dialog_same_or_diff54.550.7causal_judgment57.450.8winowhy62.556.7formal_fallacies_syllogisms_neg52.150.7movie_recommendation75.650.5crash_blossom47.663.6moral_permissibility57.355.1discourse_marker_prediction13.111.7strategyqa68.361.0general_knowledge_json94.393.9nonsense_words_grammar78.061.4sports_understanding71.054.9metaphor_boolean93.159.3implicit_relations49.436.4navigate52.651.1penguins_in_a_table48.740.6presuppositions_as_nli49.934.0intent_recognition92.888.7temporal_sequences32.019.0reasoning_about_colored_objects 59.749.2question_selection52.641.4logic_grid_puzzle44.035.1logical_fallacy_detection72.158.9timedial68.850.9physical_intuition79.059.7epistemic_reasoning60.656.4physics_mc65.550.9ruin_names47.138.6identify_odd_metaphor68.838.6hindu_knowledge91.480.0understanding_fables60.339.6misconceptions65.361.7logical_sequence64.136.4implicatures75.062.0mathematical_induction47.357.6disambiguation_q54.745.5fantasy_reasoning69.064.1known_unknowns65.263.6SNARKS58.648.3dark_humor_detection66.283.1crass_ai75.056.8analogical_similarity38.117.2entailed_polarity94.089.5sentence_ambiguity71.769.1irony_identification73.069.7riddle_sense85.768.2evaluating_info_essentiality 17.616.7date_understanding52.344.1phrase_relatedness94.081.8analytic_entailment67.153.0novel_concepts65.659.1odd_one_out70.932.5empirical_judgments67.752.5logical_args56.259.1figure_of_speech_detection63.352.7alignment_questionnaire91.379.2english_proverbs82.457.6similarities_abstraction87.081.8Human_organs_senses_mcc 85.784.8anachronisms69.156.4gre_reading_comprehension 53.127.3"}], "formulas": [{"formula_id": "formula_0", "formula_text": ") + + .(2)", "formula_coordinates": [6.0, 272.91, 520.49, 260.01, 10.91]}, {"formula_id": "formula_1", "formula_text": "Chinchilla Gopher GPT-3 MT-NLG", "formula_coordinates": [13.0, 179.24, 602.23, 185.85, 10.91]}, {"formula_id": "formula_2", "formula_text": ",", "formula_coordinates": [24.0, 260.94, 434.13, 2.79, 4.98]}, {"formula_id": "formula_3", "formula_text": ") + + ,(5)", "formula_coordinates": [24.0, 273.03, 430.87, 259.88, 10.91]}, {"formula_id": "formula_4", "formula_text": "( ) [log ( ) ],and", "formula_coordinates": [24.0, 165.2, 604.86, 129.38, 10.91]}, {"formula_id": "formula_5", "formula_text": "set \u2605 argmin \u2208 F ( X,D ( Y)) ( ).(6)", "formula_coordinates": [24.0, 297.61, 604.86, 235.3, 19.27]}, {"formula_id": "formula_7", "formula_text": ") \u02c6[ log ( ) ],setting\u02c6, argmin \u2208H\u02c6( ). (8)", "formula_coordinates": [25.0, 179.47, 134.7, 353.44, 21.3]}, {"formula_id": "formula_9", "formula_text": "\u2022 Embeddings -2 \u00d7 seq_len \u00d7 vocab_size \u00d7 d_model \u2022 Attention (Single Layer)", "formula_coordinates": [27.0, 77.74, 695.62, 204.37, 46.28]}], "doi": "10.18653/v1/2020.findings-emnlp.301"}