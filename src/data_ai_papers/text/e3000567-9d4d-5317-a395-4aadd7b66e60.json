{"title": "Transferable Multi-Domain State Generator for Task-Oriented Dialogue Systems", "authors": "Chien-Sheng Wu; Andrea Madotto; Ehsan Hosseini-Asl; Caiming Xiong; Richard Socher; Pascale Fung", "pub_date": "", "abstract": "Over-dependence on domain ontology and lack of knowledge sharing across domains are two practical and yet less studied problems of dialogue state tracking. Existing approaches generally fall short in tracking unknown slot values during inference and often have difficulties in adapting to new domains. In this paper, we propose a TRAnsferable Dialogue statE generator (TRADE) that generates dialogue states from utterances using a copy mechanism, facilitating knowledge transfer when predicting (domain, slot, value) triplets not encountered during training. Our model is composed of an utterance encoder, a slot gate, and a state generator, which are shared across domains. Empirical results demonstrate that TRADE achieves state-of-the-art joint goal accuracy of 48.62% for the five domains of Mul-tiWOZ, a human-human dialogue dataset. In addition, we show its transferring ability by simulating zero-shot and few-shot dialogue state tracking for unseen domains. TRADE achieves 60.58% joint goal accuracy in one of the zero-shot domains, and is able to adapt to few-shot cases without forgetting already trained domains. * Work partially done while the first author was an intern at Salesforce Research. Usr: I am looking for a cheap restaurant in the centre of the city. Sys: There is a cheap chinese restaurant called Dojo Noodle Bar. Usr: Yes please , for 8 people at 18:30 on Thursday. \u2026 Usr: I am also looking for some entertainment close to the restaurant. Sys: Is there any type of attraction you would like me to search? Usr: Why do not you try an architectural attraction. Sys: All Saints Church looks good , would you like to head there? \u2026 Usr: I also need to book a taxi between the restaurant and the church. Sys: What time would you like the taxi from Dojo Noodle Bar? Usr: 20:30, please.", "sections": [{"heading": "Introduction", "text": "Dialogue state tracking (DST) is a core component in task-oriented dialogue systems, such as restaurant reservation or ticket booking. The goal of DST is to extract user goals/intentions expressed during conversation and to encode them as a compact set of dialogue states, i.e., a set of slots and their corresponding values. For example, as shown in Fig. 1, (slot, value) pairs such as (price, cheap) and (area, centre) are extracted from the conversation. Accurate DST performance is crucial for appropriate dialogue management, where user intention determines the next system action and/or the content to query from the databases.\nTraditionally, state tracking approaches are based on the assumption that ontology is defined in advance, where all slots and their values are known. Having a predefined ontology can simplify DST into a classification problem and improve performance (Henderson et al., 2014b;Zhong et al., 2018). However, there are two major drawbacks to this approach: 1) A full ontology is hard to obtain in advance (Xu and Hu, 2018). In the industry, databases are usually exposed through an external API only, which is owned and maintained by others. It is not feasible to gain access to enumerate all the possible values for each slot. 2) Even if a full ontology exists, the number of possible slot values could be large and variable. For example, a restaurant name or a train departure time can contain a large number of possible values. Therefore, many of the previous works that are based on neural classification models may not be applicable in real scenario.  recently introduced a multi-domain dialogue dataset (Multi-WOZ), which adds new challenges in DST due to its mixed-domain conversations. As shown in Fig. 1, a user can start a conversation by asking to reserve a restaurant, then requests information regarding an attraction nearby, and finally asks to book a taxi. In this case, the DST model has to determine the corresponding domain, slot and value at each turn of dialogue, which contains a large number of combinations in the ontology, i.e., 30 (domain, slot) pairs and over 4,500 possible slot values in total. Another challenge in the multidomain setting comes from the need to perform multi-turn mapping. Single-turn mapping refers to the scenario where the (domain, slot, value) triplet can be inferred from a single turn, while in multiturn mapping, it should be inferred from multiple turns which happen in different domains. For instance, the (area, centre) pair from the attraction domain in Fig. 1 can be predicted from the area information in the restaurant domain, which is mentioned in the preceding turns.\nTo tackle these challenges, we emphasize that DST models should share tracking knowledge across domains. There are many slots among different domains that share all or some of their values. For example, the area slot can exist in many domains, e.g., restaurant, attraction, and taxi. Moreover, the name slot in the restaurant domain can share the same value with the departure slot in the taxi domain. Additionally, to enable the DST model to track slots in unseen domains, transferring knowledge across multiple domains is imperative. We expect DST models can learn to track some slots in zero-shot domains by learning to track the same slots in other domains.\nIn this paper, we propose a transferable dialogue state generator (TRADE) for multi-domain taskoriented dialogue state tracking. The simplicity of our approach and the boost of the performance is the main advantage of TRADE. Contributions in this work are summarized as 1 :\n\u2022 To overcome the multi-turn mapping problem, TRADE leverages its context-enhanced slot gate and copy mechanism to properly track slot 1 The code is released at github.com/ jasonwu0731/trade-dst values mentioned anywhere in dialogue history.\n\u2022 By sharing its parameters across domains, and without requiring a predefined ontology, TRADE can share knowledge between domains to track unseen slot values, achieving state-ofthe-art performance on multi-domain DST.\n\u2022 TRADE enables zero-shot DST by leveraging the domains it has already seen during training. If a few training samples from unseen domains are available, TRADE can adapt to new few-shot domains without forgetting the previous domains.", "publication_ref": ["b14", "b49", "b46"], "figure_ref": ["fig_0", "fig_0", "fig_0"], "table_ref": []}, {"heading": "TRADE Model", "text": "The proposed model in Fig. 2 comprises three components: an utterance encoder, a slot gate, and a state generator. Instead of predicting the probability of every predefined ontology term, our model directly generates slot values. Similar to Johnson et al. (2017) for multilingual neural machine translation, we share all the model parameters, and the state generator starts with a different start-of-sentence token for each (domain, slot) pair. The utterance encoder encodes dialogue utterances into a sequence of fixed-length vectors. To determine whether any of the (domain, slot) pairs are mentioned, the context-enhanced slot gate is used with the state generator. The state generator decodes multiple output tokens for all (domain, slot) pairs independently to predict their corresponding values. The context-enhanced slot gate predicts whether each of the pairs is actually triggered by the dialogue via a three-way classifier.\nLet us define X = {(U 1 , R 1 ), . . . , (U T , R T )} as the set of user utterance and system response pairs in T turns of dialogue, and B = {B 1 , . . . , B T } as the dialogue states for each turn. Each B t is a tuple (domain:D n , slot:S m , value:Y value j ), where D = {D 1 , . . . , D N } are the N different domains, and S = {S 1 , . . . , S M } are the M different slots. Assume that there are J possible (domain, slot) pairs, and Y value j is the true word sequence for j-th (domain ,slot) pair.", "publication_ref": ["b16"], "figure_ref": [], "table_ref": []}, {"heading": "Utterance Encoder", "text": "Note that the utterance encoder can be any existing encoding model. We use bi-directional gated recurrent units (GRU) (Chung et al., 2014)   Figure 2: The architecture of the proposed TRADE model, which includes (a) an utterance encoder, (b) a state generator, and (c) a slot gate, all of which are shared among domains. The state generator will decode J times independently for all the possible (domain, slot) pairs. At the first decoding step, state generator will take the j-th (domain, slot) embeddings as input to generate its corresponding slot values and slot gate. The slot gate predicts whether the j-th (domain, slot) pair is triggered by the dialogue.\nencode the dialogue history. The input to the utterance encoder is denoted as history X t = [U t\u2212l , R t\u2212l , . . . , U t , R t ] \u2208 R |Xt|\u00d7d emb , which is the concatenation of all words in the dialogue history. l is the number of selected dialogue turns and d emb indicates the embedding size. The encoded dialogue history is represented as H t = [h enc 1 , . . . , h enc |Xt| ] \u2208 R |Xt|\u00d7d hdd , where d hdd is the hidden size. As mentioned in Section 1, due to the multi-turn mapping problem, the model should infer the states across a sequence of turns. Therefore, we use the recent dialogue history of length l as the utterance encoder input, rather than the current utterance only.", "publication_ref": ["b5"], "figure_ref": [], "table_ref": []}, {"heading": "State Generator", "text": "To generate slot values using text from the input source, a copy mechanism is required. There are three common ways to perform copying, i.e., index-based copy (Vinyals et al., 2015), hardgated copy (Gulcehre et al., 2016;Madotto et al., 2018;Wu et al., 2019) and soft-gated copy (See et al., 2017;McCann et al., 2018). The indexbased mechanism is not suitable for DST task because the exact word(s) of the true slot value are not always found in the utterance. The hard-gate copy mechanism usually needs additional supervi-sion on the gating function. As such, we employ soft-gated pointer-generator copying to combine a distribution over the vocabulary and a distribution over the dialogue history into a single output distribution.\nWe use a GRU as the decoder of the state generator to predict the value for each (domain, slot) pair, as shown in Fig. 2. The state generator decodes J pairs independently. We simply supply the summed embedding of the domain and slot as the first input to the decoder. At decoding step k for the j-th (domain, slot) pair, the generator GRU takes a word embedding w jk as its input and returns a hidden state h dec jk . The state generator first maps the hidden state h dec jk into the vocabulary space P vocab jk using the trainable embedding E \u2208 R |V |\u00d7d hdd , where |V | is the vocabulary size. At the same time, the h dec jk is used to compute the history attention P history jk over the encoded dialogue history H t :\nP vocab jk = Softmax(E \u2022 (h dec jk ) ) \u2208 R |V | , P history jk = Softmax(H t \u2022 (h dec jk ) ) \u2208 R |Xt| .\n(1)\nThe final output distribution P final jk is the weighted-sum of two distributions,\nP final jk = p gen jk \u00d7 P vocab jk + (1 \u2212 p gen jk ) \u00d7 P history jk \u2208 R |V | .(2)\nThe scalar p gen jk is trainable to combine the two distributions, which is computed by\np gen jk = Sigmoid(W 1 \u2022 [h dec jk ; w jk ; c jk ]) \u2208 R 1 , c jk = P history jk \u2022 H t \u2208 R d hdd (3)\nwhere W 1 is a trainable matrix and c jk is the context vector. Note that due to Eq (2), our model is able to generate words even if they are not predefined in the vocabulary.", "publication_ref": ["b39", "b11", "b23", "b45", "b34", "b24"], "figure_ref": [], "table_ref": []}, {"heading": "Slot Gate", "text": "Unlike single-domain DST problems, where only a few slots that need to be tracked, e.g., four slots in WOZ (Wen et al., 2017), and eight slots in DSTC2 (Henderson et al., 2014a), there are a large number of (domain, slot) pairs in multi-domain DST problems. Therefore, the ability to predict the domain and slot at current turn t becomes more challenging.\nOur context-enhanced slot gate G is a simple three-way classifier that maps a context vector taken from the encoder hidden states H t to a probability distribution over ptr, none, and dontcare classes. For each (domain, slot) pair, if the slot gate predicts none or dontcare, we ignore the values generated by the decoder and fill the pair as \"not-mentioned\" or \"does not care\". Otherwise, we take the generated words from our state generator as its value. With a linear layer parameterized by W g \u2208 R 3\u00d7d hdd , the slot gate for the j-th (domain, slot) pair is defined as\nG j = Softmax(W g \u2022 (c j0 ) ) \u2208 R 3 ,(4)\nwhere c j0 is the context vector computed in Eq (3) using the first decoder hidden state.", "publication_ref": ["b13"], "figure_ref": [], "table_ref": []}, {"heading": "Optimization", "text": "During training, we optimize for both the slot gate and the state generator. For the former, the crossentropy loss L g is computed between the predicted slot gate G j and the true one-hot label y gate j ,\nL g = J j=1 \u2212 log(G j \u2022 (y gate j ) ).(5)\nFor the latter, another cross-entropy loss L v between P final jk and the true words Y label j is used. We define L v as\nL v = J j=1 |Y j | k=1 \u2212 log(P final jk \u2022 (y value jk ) ). (6\n)\nL v is the sum of losses from all the (domain, slot) pairs and their decoding time steps. We optimize the weighted-sum of these two loss functions using hyper-parameters \u03b1 and \u03b2,\nL = \u03b1L g + \u03b2L v .(7)\n3 Unseen Domain DST\nIn this section, we focus on the ability of TRADE to generalize to an unseen domain by considering zero-shot transferring and few-shot domain expanding. In the zero-shot setting, we assume we have no training data in the new domain, while in the few-shot case, we assume just 1% of the original training data in the unseen domain is available (around 20 to 30 dialogues). One of the motivations to perform unseen domain DST is because collecting a large-scale task-oriented dataset for a new domain is expensive and time-consuming , and there are a large amount of domains in realistic scenarios.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Zero-shot DST", "text": "Ideally, based on the slots already learned, a DST model is able to directly track those slots that are present in a new domain. For example, if the model is able to track the departure slot in the train domain, then that ability may transfer to the taxi domain, which uses similar slots. Note that generative DST models take the dialogue context/history X, the domain D, and the slot S as input and then generate the corresponding values Y value . Let (X, D source , S source , Y value source ) be the set of samples seen during the training phase and (X, D target , S target , Y value target ) the samples which the model was not trained to track. A zero-shot DST model should be able to generate the correct values of Y value target given the context X, domain D target , and slot S target , without using any training samples. The same context X may appear in both source and target domains but the pairs (D target , S target ) are unseen. This setting is extremely challenging if no slot in S target appears in S source , since the model has never been trained to track such a slot.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Expanding DST for Few-shot Domain", "text": "In this section, we assume that only a small number of samples from the new domain (X, D target , S target , Y value target ) are available, and the purpose is to evaluate the ability of our DST model to transfer its learned knowledge to the new domain without forgetting previously learned domains. There are two advantages to performing few-shot domain expansion: 1) being able to quickly adapt to new domains and obtain decent performance with only a small amount of training data; 2) not requiring retraining with all the data from previously learned domains, since the data may no longer be available and retraining is often very time-consuming.\nFirstly, we consider a straightforward naive baseline, i.e., fine-tuning with no constraints. Then, we employ two specific continual learning techniques: elastic weight consolidation (EWC) (Kirkpatrick et al., 2017) and gradient episodic memory (GEM) (Lopez-Paz et al., 2017) to fine-tune our model. We define \u0398 S as the model's parameters trained in the source domain, and \u0398 indicates the current optimized parameters according to the target domain data.\nEWC uses the diagonal of the Fisher information matrix F as a regularizer for adapting to the target domain data. This matrix is approximated using samples from the source domain. The EWC loss is defined as\nL ewc (\u0398) = L(\u0398) + i \u03bb 2 F i (\u0398 i \u2212 \u0398 S,i ) 2 , (8\n)\nwhere \u03bb is a hyper-parameter. Different from EWC, GEM keeps a small number of samples K from the source domains, and, while the model learns the new target domain, a constraint is applied on the gradient to prevent the loss on the stored samples from increasing. The training process is defined as:\nMinimize \u0398 L(\u0398) Subject to L(\u0398, K) \u2264 L(\u0398 S , K),(9)\nwhere L(\u0398, K) is the loss value of the K stored samples. Lopez-Paz et al. (2017) show how to solve the optimization problem in Eq (9) with quadratic programming if the loss of the stored samples increases.  ", "publication_ref": ["b18", "b22", "b22"], "figure_ref": [], "table_ref": []}, {"heading": "Training Details", "text": "Multi-domain Joint Training The model is trained end-to-end using the Adam optimizer (Kingma and Ba, 2015) with a batch size of 32.\nThe learning rate annealing is in the range of [0.001, 0.0001] with a dropout ratio of 0.2. Both \u03b1 and \u03b2 in Eq (7) are set to one. All the embeddings are initialized by concatenating Glove embeddings (Pennington et al., 2014) and character embeddings (Hashimoto et al., 2016), where the dimension is 400 for each vocabulary word. A greedy search decoding strategy is used for our state generator since the generated slot values are usually short in length. In addition, to in-crease model generalization and simulate an outof-vocabulary setting, a word dropout is utilized with the utterance encoder by randomly masking a small amount of input tokens, similar to Bowman et al. (2016).", "publication_ref": ["b27", "b12"], "figure_ref": [], "table_ref": []}, {"heading": "Domain Expanding", "text": "For training, we follow the same procedure as in the joint training section, and we run a small grid search for all the methods using the validation set. For EWC, we set different values of \u03bb for all the domains, and the optimal value is selected using the validation set. Finally, in GEM, we set the memory sizes K to 1% of the source domains.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Results", "text": "Two evaluation metrics, joint goal accuracy and slot accuracy, are used to evaluate the performance on multi-domain DST. The joint goal accuracy compares the predicted dialogue states to the ground truth B t at each dialogue turn t, and the output is considered correct if and only if all the predicted values exactly match the ground truth values in B t . The slot accuracy, on the other hand, individually compares each (domain, slot, value) triplet to its ground truth label.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Multi-domain Training", "text": "We make a comparison with the following existing models: MDBT (Ramadan et al., 2018), GLAD (Zhong et al., 2018), GCE (Nouri and Hosseini-Asl, 2018), and SpanPtr (Xu and Hu, 2018), and we briefly describe these baselines models below:\n\u2022 MDBT 2 : Multiple bi-LSTMs are used to encode system and user utterances. The semantic similarity between utterances and every predefined ontology term is computed separately. Each ontology term is triggered if the predicted score is greater than a threshold.\n\u2022 GLAD 3 : This model uses self-attentive RNNs to learn a global tracker that shares parameters among slots and a local tracker that tracks each slot. The model takes previous system actions and the current user utterance as input, and computes semantic similarity with predefined ontology terms.  ", "publication_ref": ["b49", "b26", "b46"], "figure_ref": [], "table_ref": []}, {"heading": "2017", "text": "). It is a simplified and speed up version of GLAD without slot-specific RNNs.\n\u2022 SpanPtr: Most related to our work, this is the first model that applies pointer networks (Vinyals et al., 2015) to the single-domain DST problem, which generates both start and end pointers to perform index-based copying.\nTo have a fair comparison, we modify the original implementation of the MDBT and GLAD models by: 1) adding name, destination, and departure slots for evaluation if they were discarded or replaced by placeholders; and 2) removing the hand-crafted rules of tracking the booking slots such as stay and people slots if there are any; and 3) creating a full ontology for their model to cover all (domain, slot, value) pairs that were not in the original ontology generated by the data provider.\nAs shown in Table 2, TRADE achieves the highest performance, 48.62% on joint goal accuracy and 96.92% on slot accuracy, on MultiWOZ. For comparison with the performance on singledomain, the results on the restaurant domain of MultiWOZ are reported as well. The performance difference between SpanPtr and our model mainly comes from the limitation of index-based copying. For examples, if the true label for the price range slot is cheap, the relevant user utterance describing the restaurant may actually be, for example, economical, inexpensive, or cheaply. Note that the MDBT, GLAD, and GCE models each need a predefined domain ontology to perform binary classification for each ontology term, which hinders their DST tracking performance, as mentioned in Section 1.\nWe visualize the cosine similarity matrix for all possible slot embeddings in Fig. 3   slot embeddings are not close to each other, which is expected because the model only depends on these features as start-of-sentence embeddings to distinguish different slots. Note that some slots are relatively close because either the values they track may share similar semantic meanings or the slots are correlated. For example, destination and departure track names of cities, while people and stay track numbers. On the other hand, price range and star in hotel domain are correlated because high-star hotels are usually expensive.  shown in Table 4, the taxi domain achieves the highest zero-shot performance, 60.58% on joint goal accuracy, which is close to the result achieved by training on all the taxi domain data (76.13%).\nAlthough performances on the other zero-shot domains are not especially promising, they still achieve around 50 to 65% slot accuracy without using any in-domain samples. The reason why the zero-shot performance on the taxi domain is high is because all four slots share similar values with the corresponding slots in the train domain.", "publication_ref": ["b39"], "figure_ref": ["fig_2"], "table_ref": ["tab_4", "tab_8"]}, {"heading": "Domain Expanding", "text": "In this setting, the TRADE model is pre-trained on four domains and a heldout domain is reserved for domain expansion to perform fine-tuning. After fine-tuning on the new domain, we evaluate the performance of TRADE on 1) the four pre-trained domains and 2) the new domain. We experiment with different fine-tuning strategies. The base model row in Table 3 indicates the results evaluated on the four domains us-ing their in-domain training data, and the Training 1% New Domain row indicates the results achieved by training from scratch using 1% of the new domain data. In general, GEM outperforms naive and EWC fine-tuning in terms of overcoming catastrophic forgetting. We also find that pre-training followed by fine-tuning outperforms training from scratch on the single domain. Fine-tuning TRADE with GEM maintains higher performance on the original four domains. Take the hotel domain as an example, the performance on the four domains after fine-tuning with GEM only drops from 58.98% to 53.54% (-5.44%) on joint accuracy, whereas naive finetuning deteriorates the tracking ability, dropping joint goal accuracy to 36.08% (-22.9%).\nExpanding TRADE from four domains to a new domain achieves better performance than training from scratch on the new domain. This observation underscores the advantages of transfer learning with the proposed TRADE model. For example, our TRADE model achieves 59.83% joint accuracy after fine-tuning using only 1% of Train domain data, outperforming the training Train domain from scratch, which achieves 44.24% using the same amount of new-domain data.\nFinally, when considering hotel and attraction as new domain, fine-tuning with GEM outperforms the naive fine-tuning approach on the new domain. To elaborate, GEM obtains 34.73% joint accuracy on the attraction domain, but naive finetuning on that domain can only achieve 29.39%. This implies that in some cases learning to keep the tracking ability (learned parameters) of the learned domains helps to achieve better performance for the new domain.", "publication_ref": [], "figure_ref": [], "table_ref": ["tab_6"]}, {"heading": "Error Analysis", "text": "An error analysis of multi-domain training is shown in Fig. 4. Not surprisingly, name slots in the restaurant, attraction, and hotel domains have the highest error rates, 8.50%, 8.17%, and 7.86%, respectively. It is because this slot usually has a large number of possible values that is hard to recognize. On the other hand, number-related slots such as arrive by, people, and stay usually have the lowest error rates. We also find that the type slot of hotel domain has a high error rate, even if it is an easy task with only two possible values in the ontology. The reason is that labels of the (hotel, type) pair are sometimes missing in the dataset,   which makes our prediction incorrect even if it is supposed to be predicted.\nIn Fig. 5, the zero-shot analysis of two selected domains, hotel and restaurant, which contain more slots to be tracked, are shown. To better understand the behavior of knowledge transferring, here we only consider labels that are not empty, i.e., we ignore data that is labeled as \"none\" because predicting \"none\" is relatively easier for the model. In both hotel and restaurant domains, knowledge about people, area, price range, and day slots are successfully transferred from the other four domains. For unseen slots that only appear in one domain, it is very hard for our model to track correctly. For example, parking, stars and internet slots are only appeared in hotel domain, and the food slot is unique to the restaurant domain.", "publication_ref": [], "figure_ref": ["fig_3", "fig_4"], "table_ref": []}, {"heading": "Related Work", "text": "Dialogue State Tracking Traditional dialogue state tracking models combine semantics extracted by language understanding modules to estimate the current dialogue states (Williams and Young, 2007;Thomson and Young, 2010;Wang and Lemon, 2013;Williams, 2014), or to jointly learn speech understanding (Henderson et al., 2014b;Zilka and Jurcicek, 2015;. One drawback is that they rely on hand-crafted features and complex domain-specific lexicons (besides the ontology), and are difficult to extend and scale to new domains.  use distributional representation learning to leverage semantic information from word embeddings to and resolve lexical/morphological ambiguity. However, parameters are not shared across slots. On the other hand, Nouri and Hosseini-Asl (2018) utilizes global modules to share parameters between slots, and Zhong et al. (2018) uses slot-specific local modules to learn slot features, which has proved to successfully improve tracking of rare slot values. Lei et al. (2018) use a Seq2Seq model to generate belief spans and the delexicalized response at the same time.  propose StateNet that generates a dialogue history representation and compares the distances between this representation and value vectors in the candidate set. Xu and Hu (2018) use the index-based pointer network for different slots, and show the ability to point to unknown values. However, many of them require a predefined domain ontology, and the models were only evaluated on single-domain setting (DSTC2).\nFor multi-domain DST, Rastogi et al. (2017) propose a multi-domain approach using two-layer bi-GRU. Although it does not need an ad-hoc state update mechanism, it relies on delexicalization to extract the features.  propose a model to jointly track domain and the dialogue states using multiple bi-LSTM. They utilize semantic similarity between utterances and the ontology terms and allow the information to be shared across domains. For a more general overview, readers may refer to the neural dialogue review paper from Gao et al. (2018).\nZero/Few-Shot and Continual Learning Different components of dialogue systems have previously been used for zero-shot application, e.g., intention classifiers (Chen et al., 2016), slotfilling (Bapna et al., 2017), and dialogue policy (Ga\u0161i\u0107 and Young, 2014). For language generation, Johnson et al. (2017) propose single encoder-decoder models for zero-shot machine translation, and Zhao and Eskenazi (2018) propose cross-domain zero-shot dialogue generation using action matching. Moreover, few-shot learning in natural language applications has been applied in semantic parsing (Huang et al., 2018), machine translation (Gu et al., 2018), and text classification  with meta-learning approaches (Schmidhuber, 1987;Finn et al., 2017). These tasks usually have multiple tasks to perform fast adaptation, instead in our case the number of existing domains are limited. Lastly, several approaches have been proposed for continual learning in the machine learning community (Kirkpatrick et al., 2017;Lopez-Paz et al., 2017;Rusu et al., 2016;Fernando et al., 2017;, especially in image recognition tasks Rannen et al., 2017). The applications within NLP has been comparatively limited, e.g., Shu et al. (2016Shu et al. ( , 2017b for opinion mining, Shu et al. (2017a) for document classification, and Lee (2017) for hybrid code networks (Williams et al., 2017).", "publication_ref": ["b44", "b38", "b40", "b42", "b14", "b50", "b26", "b49", "b21", "b46", "b30", "b8", "b4", "b1", "b9", "b16", "b48", "b15", "b10", "b33", "b7", "b18", "b22", "b32", "b6", "b29", "b35", "b37", "b36", "b20", "b43"], "figure_ref": [], "table_ref": []}, {"heading": "Conclusion", "text": "We introduce a transferable dialogue state generator for multi-domain dialogue state tracking, which learns to track states without any predefined domain ontology. TRADE shares all of its parameters across multiple domains and achieves stateof-the-art joint goal accuracy and slot accuracy on the MultiWOZ dataset for five different domains. Moreover, domain sharing enables TRADE to perform zero-shot DST for unseen domains and to quickly adapt to few-shot domains without forgetting the learned ones. In future work, transferring knowledge from other resources can be applied to further improve zero-shot performance, and collecting a dataset with a large number of domains is able to facilitate the application and study of metalearning techniques within multi-domain DST.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Acknowledgments", "text": "This work is partially funded by MRP/055/18 of the Innovation Technology Commission, of the Hong Kong University of Science and Technology (HKUST).", "publication_ref": [], "figure_ref": [], "table_ref": []}], "references": [{"ref_id": "b0", "title": "Expert gate: Lifelong learning with a network of experts", "journal": "", "year": "2017", "authors": "Rahaf Aljundi; Punarjay Chakravarty; Tinne Tuytelaars"}, {"ref_id": "b1", "title": "Towards zero-shot frame semantic parsing for domain scaling", "journal": "", "year": "2017", "authors": "Ankur Bapna; Gokhan Tur; Dilek Hakkani-Tur; Larry Heck"}, {"ref_id": "b2", "title": "Generating sentences from a continuous space", "journal": "", "year": "2016", "authors": "R Samuel; Luke Bowman; Oriol Vilnis; Andrew Vinyals; Rafal Dai; Samy Jozefowicz;  Bengio"}, {"ref_id": "b3", "title": "Multiwoz-a largescale multi-domain wizard-of-oz dataset for taskoriented dialogue modelling", "journal": "", "year": "2018", "authors": "Pawe\u0142 Budzianowski; Tsung-Hsien Wen; Bo-Hsiang Tseng; I\u00f1igo Casanueva; Stefan Ultes; Milica Osman Ramadan;  Gasic"}, {"ref_id": "b4", "title": "Zero-shot learning of intent embeddings for expansion by convolutional deep structured semantic models", "journal": "IEEE", "year": "2016", "authors": "Yun-Nung Chen; Dilek Hakkani-T\u00fcr; Xiaodong He"}, {"ref_id": "b5", "title": "Empirical evaluation of gated recurrent neural networks on sequence modeling", "journal": "", "year": "2014", "authors": "Junyoung Chung; Caglar Gulcehre; Kyunghyun Cho; Yoshua Bengio"}, {"ref_id": "b6", "title": "Pathnet: Evolution channels gradient descent in super neural networks", "journal": "", "year": "2017", "authors": "Chrisantha Fernando; Dylan Banarse; Charles Blundell; Yori Zwols; David Ha; Andrei A Rusu; Alexander Pritzel; Daan Wierstra"}, {"ref_id": "b7", "title": "Model-agnostic meta-learning for fast adaptation of deep networks", "journal": "", "year": "2017", "authors": "Chelsea Finn; Pieter Abbeel; Sergey Levine"}, {"ref_id": "b8", "title": "Neural approaches to conversational ai", "journal": "ACM", "year": "2018", "authors": "Jianfeng Gao; Michel Galley; Lihong Li"}, {"ref_id": "b9", "title": "Gaussian processes for pomdp-based dialogue manager optimization", "journal": "IEEE/ACM Transactions on Audio, Speech, and Language Processing", "year": "2014", "authors": "Milica Ga\u0161i\u0107; Steve Young"}, {"ref_id": "b10", "title": "Meta-learning for lowresource neural machine translation", "journal": "Association for Computational Linguistics", "year": "2018", "authors": "Jiatao Gu; Yong Wang; Yun Chen; O K Victor; Kyunghyun Li;  Cho"}, {"ref_id": "b11", "title": "Pointing the unknown words", "journal": "", "year": "2016", "authors": "Caglar Gulcehre; Sungjin Ahn; Ramesh Nallapati; Bowen Zhou; Yoshua Bengio"}, {"ref_id": "b12", "title": "A joint many-task model: Growing a neural network for multiple nlp tasks", "journal": "", "year": "2016", "authors": "Kazuma Hashimoto; Caiming Xiong; Yoshimasa Tsuruoka; Richard Socher"}, {"ref_id": "b13", "title": "The second dialog state tracking challenge", "journal": "", "year": "2014", "authors": "Matthew Henderson; Blaise Thomson; Jason D Williams"}, {"ref_id": "b14", "title": "Word-based dialog state tracking with recurrent neural networks", "journal": "", "year": "2014", "authors": "Matthew Henderson; Blaise Thomson; Steve Young"}, {"ref_id": "b15", "title": "Natural language to structured query generation via metalearning", "journal": "Association for Computational Linguistics", "year": "2018", "authors": "Po-Sen Huang; Chenglong Wang; Rishabh Singh; Wen-Tau Yih; Xiaodong He"}, {"ref_id": "b16", "title": "Google's multilingual neural machine translation system: Enabling zero-shot translation", "journal": "Transactions of the Association for Computational Linguistics", "year": "2017", "authors": "Melvin Johnson; Mike Schuster; Quoc V Le; Maxim Krikun; Yonghui Wu; Zhifeng Chen; Nikhil Thorat; Fernanda Vi\u00e9gas; Martin Wattenberg; Greg Corrado; Macduff Hughes; Jeffrey Dean"}, {"ref_id": "b17", "title": "Adam: A method for stochastic optimization. International Conference on Learning Representations", "journal": "", "year": "2015", "authors": "P Diederik; Jimmy Kingma;  Ba"}, {"ref_id": "b18", "title": "Overcoming catastrophic forgetting in neural networks. Proceedings of the national academy of sciences", "journal": "", "year": "2017", "authors": "James Kirkpatrick; Razvan Pascanu; Neil Rabinowitz; Joel Veness; Guillaume Desjardins; Andrei A Rusu; Kieran Milan; John Quan; Tiago Ramalho; Agnieszka Grabska-Barwinska"}, {"ref_id": "b19", "title": "Overcoming catastrophic forgetting by incremental moment matching", "journal": "", "year": "2017", "authors": "Sang-Woo Lee; Jin-Hwa Kim; Jaehyun Jun; Jung-Woo Ha; Byoung-Tak Zhang"}, {"ref_id": "b20", "title": "Toward continual learning for conversational agents", "journal": "", "year": "2017", "authors": "Sungjin Lee"}, {"ref_id": "b21", "title": "Sequicity: Simplifying task-oriented dialogue systems with single sequence-to-sequence architectures", "journal": "", "year": "2018", "authors": "Wenqiang Lei; Xisen Jin; Min-Yen Kan; Zhaochun Ren; Xiangnan He; Dawei Yin"}, {"ref_id": "b22", "title": "Gradient episodic memory for continual learning", "journal": "", "year": "2017", "authors": "David Lopez-Paz"}, {"ref_id": "b23", "title": "Mem2seq: Effectively incorporating knowledge bases into end-to-end task-oriented dialog systems", "journal": "", "year": "2018", "authors": "Andrea Madotto; Chien-Sheng Wu; Pascale Fung"}, {"ref_id": "b24", "title": "The natural language decathlon: Multitask learning as question answering", "journal": "", "year": "2018", "authors": "Bryan Mccann; Nitish Shirish Keskar; Caiming Xiong; Richard Socher"}, {"ref_id": "b25", "title": "Neural belief tracker: Data-driven dialogue state tracking", "journal": "Vancouver", "year": "2017", "authors": "Nikola Mrk\u0161i\u0107; Diarmuid\u00f3 S\u00e9aghdha; Tsung-Hsien Wen; Blaise Thomson; Steve Young"}, {"ref_id": "b26", "title": "Toward scalable neural dialogue state tracking model", "journal": "", "year": "2018", "authors": "Elnaz Nouri; Ehsan Hosseini-Asl"}, {"ref_id": "b27", "title": "Glove: Global vectors for word representation", "journal": "", "year": "2014", "authors": "Jeffrey Pennington; Richard Socher; Christopher Manning"}, {"ref_id": "b28", "title": "Large-scale multi-domain belief tracking with knowledge sharing", "journal": "Short Papers", "year": "2018", "authors": "Pawe\u0142 Osman Ramadan; Milica Budzianowski;  Gasic"}, {"ref_id": "b29", "title": "Encoder based lifelong learning", "journal": "", "year": "2017", "authors": "Amal Rannen; Rahaf Aljundi; B Matthew; Tinne Blaschko;  Tuytelaars"}, {"ref_id": "b30", "title": "Scalable multi-domain dialogue state tracking", "journal": "IEEE", "year": "2017", "authors": "Abhinav Rastogi; Dilek Hakkani-T\u00fcr; Larry Heck"}, {"ref_id": "b31", "title": "Towards universal dialogue state tracking", "journal": "", "year": "2018", "authors": "Liliang Ren; Kaige Xie; Lu Chen; Kai Yu"}, {"ref_id": "b32", "title": "Progressive neural networks", "journal": "", "year": "2016", "authors": "A Andrei;  Rusu; C Neil; Guillaume Rabinowitz; Hubert Desjardins; James Soyer; Koray Kirkpatrick; Razvan Kavukcuoglu; Raia Pascanu;  Hadsell"}, {"ref_id": "b33", "title": "Evolutionary principles in self-referential learning. on learning now to learn: The meta-meta-meta", "journal": "", "year": "1987-05-14", "authors": "Jurgen Schmidhuber"}, {"ref_id": "b34", "title": "Get to the point: Summarization with pointergenerator networks", "journal": "", "year": "2017", "authors": "Abigail See; J Peter; Christopher D Liu;  Manning"}, {"ref_id": "b35", "title": "Lifelong-rl: Lifelong relaxation labeling for separating entities and aspects in opinion targets", "journal": "NIH Public Access", "year": "2016", "authors": "Lei Shu; Bing Liu; Hu Xu; Annice Kim"}, {"ref_id": "b36", "title": "Doc: Deep open classification of text documents", "journal": "Association for Computational Linguistics", "year": "2017", "authors": "Lei Shu; Hu Xu; Bing Liu"}, {"ref_id": "b37", "title": "Lifelong learning crf for supervised aspect extraction", "journal": "Short Papers", "year": "2017", "authors": "Lei Shu; Hu Xu; Bing Liu"}, {"ref_id": "b38", "title": "Bayesian update of dialogue state: A pomdp framework for spoken dialogue systems", "journal": "Computer Speech & Language", "year": "2010", "authors": "Blaise Thomson; Steve Young"}, {"ref_id": "b39", "title": "Pointer networks", "journal": "", "year": "2015", "authors": "Oriol Vinyals; Meire Fortunato; Navdeep Jaitly"}, {"ref_id": "b40", "title": "A simple and generic belief tracking mechanism for the dialog state tracking challenge: On the believability of observed information", "journal": "", "year": "2013", "authors": "Zhuoran Wang; Oliver Lemon"}, {"ref_id": "b41", "title": "A networkbased end-to-end trainable task-oriented dialogue system", "journal": "", "year": "2017", "authors": "David Tsung-Hsien Wen; Nikola Vandyke; Milica Mrk\u0161i\u0107; Lina M Gasic; Pei-Hao Rojas Barahona; Stefan Su; Steve Ultes;  Young"}, {"ref_id": "b42", "title": "Web-style ranking and slu combination for dialog state tracking", "journal": "", "year": "2014", "authors": "Jason D Williams"}, {"ref_id": "b43", "title": "Hybrid code networks: practical and efficient end-to-end dialog control with supervised and reinforcement learning", "journal": "Association for Computational Linguistics", "year": "2017", "authors": "D Jason; Kavosh Williams; Geoffrey Asadi;  Zweig"}, {"ref_id": "b44", "title": "Partially observable markov decision processes for spoken dialog systems", "journal": "Computer Speech & Language", "year": "2007", "authors": "D Jason; Steve Williams;  Young"}, {"ref_id": "b45", "title": "Global-to-local memory pointer networks for task-oriented dialogue", "journal": "", "year": "2019", "authors": "Chien-Sheng Wu; Richard Socher; Caiming Xiong"}, {"ref_id": "b46", "title": "An end-to-end approach for handling unknown slot values in dialogue state tracking", "journal": "Long Papers", "year": "2018", "authors": "Puyang Xu; Qi Hu"}, {"ref_id": "b47", "title": "Diverse few-shot text classification with multiple metrics", "journal": "", "year": "2018", "authors": "Mo Yu; Xiaoxiao Guo; Jinfeng Yi; Shiyu Chang; Saloni Potdar; Yu Cheng; Gerald Tesauro; Haoyu Wang; Bowen Zhou"}, {"ref_id": "b48", "title": "Zeroshot dialog generation with cross-domain latent actions", "journal": "", "year": "2018", "authors": "Tiancheng Zhao; Maxine Eskenazi"}, {"ref_id": "b49", "title": "Global-locally self-attentive encoder for dialogue state tracking", "journal": "Association for Computational Linguistics", "year": "2018", "authors": "Victor Zhong; Caiming Xiong; Richard Socher"}, {"ref_id": "b50", "title": "Incremental lstm-based dialog state tracker", "journal": "IEEE", "year": "2015", "authors": "Lukas Zilka; Filip Jurcicek"}], "figures": [{"figure_label": "1", "figure_type": "figure", "figure_id": "fig_0", "figure_caption": "Figure 1 :1Figure 1: An example of multi-domain dialogue state tracking in a conversation. The solid arrows on the left are the single-turn mapping, and the dot arrows on the right are multi-turn mapping. The state tracker needs to track slot values mentioned by the user for all the slots in all the domains.", "figure_data": ""}, {"figure_label": "3", "figure_type": "figure", "figure_id": "fig_2", "figure_caption": "Figure 3 :3Figure 3: Embeddings cosine similarity visualization. The rows and columns are all the possible slots in Mul-tiWOZ. Slots that share similar values or have correlated values learn similar embeddings. For example destination vs. departure (which share similar values) or price range vs. stars exhibit high correlation.", "figure_data": ""}, {"figure_label": "4", "figure_type": "figure", "figure_id": "fig_3", "figure_caption": "Figure 4 :4Figure 4: Slots error rate on test set of multi-domain training. The name slot in restaurant domain has the highest error rate, 8.50%, and the arrive by slot in taxi domain has the lowest error rate, 1.33%", "figure_data": ""}, {"figure_label": "5", "figure_type": "figure", "figure_id": "fig_4", "figure_caption": "Figure 5 :5Figure 5: Zero-shot DST error analysis on (a) hotel and (b) restaurant domains. The x-axis represents the number of each slot which has correct non-empty values. In hotel domain, the knowledge to track people, area, price range, and day slots are successfully transferred from other domains seen in training.", "figure_data": ""}, {"figure_label": "1", "figure_type": "table", "figure_id": "tab_2", "figure_caption": "The dataset information of MultiWOZ. In total, there are 30 (domain, slot) pairs from the selected five domains. The numbers in the last three rows indicate the number of dialogues for train, validation and test sets.", "figure_data": "4 Experiments4.1 Dataset"}, {"figure_label": "2", "figure_type": "table", "figure_id": "tab_4", "figure_caption": "The multi-domain DST evaluation on Mul-tiWOZ and its single restaurant domain. TRADE has the highest joint accuracy, which surpasses current state-of-the-art GCE model.", "figure_data": ""}, {"figure_label": "", "figure_type": "table", "figure_id": "tab_5", "figure_caption": ". Most of the", "figure_data": "Joint Slot Joint Slot JointSlotJointSlotJoint SlotEvaluation on 4 DomainsExcept Hotel Except TrainExcept Attraction Except Restaurant Except TaxiBase Model (BM) training on 4 domains58.98 96.75 55.26 96.76 55.0297.0354.6996.6449.87 96.77Fine-tuning BM on 1% new domainNaive 36.08 93.48 23.25 90.32 40.05 EWC 40.82 94.16 28.02 91.49 45.37 GEM 53.54 96.27 50.69 96.42 50.5195.54 84.94 96.6632.85 34.45 45.9191.69 92.53 95.5846.10 96.34 46.88 96.44 46.43 96.45Evaluation on New DomainHotelTrainAttractionRestaurantTaxiTraining 1% New Domain19.53 77.33 44.24 85.66 35.8868.6032.7282.3960.38 72.82Fine-tuning BM on 1% new domainNaive 19.13 75.22 59.83 90.63 29.39 EWC 19.35 76.25 58.10 90.33 32.28 GEM 19.73 77.92 54.31 89.55 34.7360.73 62.43 64.3742.42 40.93 39.2486.82 85.80 86.0563.81 79.81 63.61 79.65 63.16 79.27"}, {"figure_label": "3", "figure_type": "table", "figure_id": "tab_6", "figure_caption": "We run domain expansion experiments by excluding one domain and fine-tuning on that domain. The first row is the base model trained on the four domains. The second row is the results on the four domains after fine-tuning on 1% new domain data using three different strategies. One can find out that GEM outperforms Naive and EWC fine-tuning in terms of catastrophic forgetting on the four domains. Then, we evaluate the results on new domain for two cases: training from scratch and fine-tuning from the base model. Results show that fine-tuning from the base model usually achieves better results on the new domain compared to training from scratch.", "figure_data": "parkinginternetfoodnametypeareapricerangestarsstaypeopledaytimedestinationdeparturearrivebyleaveat"}, {"figure_label": "", "figure_type": "table", "figure_id": "tab_7", "figure_caption": "Train 77.71 95.30 22.37 49.31 Attraction 71.64 88.97 19.87 55.53 Restaurant 65.35 93.28 11.52 53.43 Taxi 76.13 89.53 60.58 73.92", "figure_data": "Trained SingleZero-ShotJointSlotJointSlotHotel 55.52 92.66 13.70 65.32"}, {"figure_label": "4", "figure_type": "table", "figure_id": "tab_8", "figure_caption": "Zero-shot experiments on an unseen domain. In taxi domain, our model achieves 60.58% joint goal accuracy without training on any samples from taxi domain. Trained Single column is the results achieved by training on 100% single-domain data as a reference.", "figure_data": ""}], "formulas": [{"formula_id": "formula_0", "formula_text": "P vocab jk = Softmax(E \u2022 (h dec jk ) ) \u2208 R |V | , P history jk = Softmax(H t \u2022 (h dec jk ) ) \u2208 R |Xt| .", "formula_coordinates": [3.0, 322.02, 704.38, 176.05, 28.93]}, {"formula_id": "formula_1", "formula_text": "P final jk = p gen jk \u00d7 P vocab jk + (1 \u2212 p gen jk ) \u00d7 P history jk \u2208 R |V | .(2)", "formula_coordinates": [4.0, 100.11, 87.93, 190.15, 35.72]}, {"formula_id": "formula_2", "formula_text": "p gen jk = Sigmoid(W 1 \u2022 [h dec jk ; w jk ; c jk ]) \u2208 R 1 , c jk = P history jk \u2022 H t \u2208 R d hdd (3)", "formula_coordinates": [4.0, 83.43, 174.26, 206.84, 29.95]}, {"formula_id": "formula_3", "formula_text": "G j = Softmax(W g \u2022 (c j0 ) ) \u2208 R 3 ,(4)", "formula_coordinates": [4.0, 104.22, 581.93, 186.05, 13.13]}, {"formula_id": "formula_4", "formula_text": "L g = J j=1 \u2212 log(G j \u2022 (y gate j ) ).(5)", "formula_coordinates": [4.0, 113.06, 733.64, 177.21, 33.71]}, {"formula_id": "formula_5", "formula_text": "L v = J j=1 |Y j | k=1 \u2212 log(P final jk \u2022 (y value jk ) ). (6", "formula_coordinates": [4.0, 326.11, 117.06, 195.19, 35.39]}, {"formula_id": "formula_6", "formula_text": ")", "formula_coordinates": [4.0, 521.3, 130.45, 4.24, 9.46]}, {"formula_id": "formula_7", "formula_text": "L = \u03b1L g + \u03b2L v .(7)", "formula_coordinates": [4.0, 378.08, 232.36, 147.47, 10.63]}, {"formula_id": "formula_8", "formula_text": "L ewc (\u0398) = L(\u0398) + i \u03bb 2 F i (\u0398 i \u2212 \u0398 S,i ) 2 , (8", "formula_coordinates": [5.0, 80.49, 497.6, 205.54, 29.46]}, {"formula_id": "formula_9", "formula_text": ")", "formula_coordinates": [5.0, 286.03, 505.33, 4.24, 9.46]}, {"formula_id": "formula_10", "formula_text": "Minimize \u0398 L(\u0398) Subject to L(\u0398, K) \u2264 L(\u0398 S , K),(9)", "formula_coordinates": [5.0, 106.68, 654.24, 183.59, 27.22]}], "doi": "10.18653/v1/K16-1002"}