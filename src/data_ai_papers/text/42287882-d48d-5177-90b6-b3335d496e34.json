{"title": "Reinforced Cross-Modal Matching and Self-Supervised Imitation Learning for Vision-Language Navigation", "authors": "Xin Wang; Qiuyuan Huang; Asli Celikyilmaz; Jianfeng Gao; Dinghan Shen; Yuan-Fang Wang; William Yang Wang; Lei Zhang", "pub_date": "", "abstract": "Vision-language navigation (VLN) is the task of navigating an embodied agent to carry out natural language instructions inside real 3D environments. In this paper, we study how to address three critical challenges for this task: the cross-modal grounding, the ill-posed feedback, and the generalization problems. First, we propose a novel Reinforced Cross-Modal Matching (RCM) approach that enforces cross-modal grounding both locally and globally via reinforcement learning (RL). Particularly, a matching critic is used to provide an intrinsic reward to encourage global matching between instructions and trajectories, and a reasoning navigator is employed to perform cross-modal grounding in the local visual scene. Evaluation on a VLN benchmark dataset shows that our RCM model significantly outperforms previous methods by 10% on SPL and achieves the new state-of-the-art performance. To improve the generalizability of the learned policy, we further introduce a Self-Supervised Imitation Learning (SIL) method to explore unseen environments by imitating its own past, good decisions. We demonstrate that SIL can approximate a better and more efficient policy, which tremendously minimizes the success rate performance gap between seen and unseen environments (from 30.7% to 11.7%).", "sections": [{"heading": "Introduction", "text": "Recently, vision-language grounded embodied agents have received increased attention [38,25,8] due to their popularity in many intriguing real-world applications, e.g., in-home robots and personal assistants. Meanwhile, such an agent pushes forward visual and language grounding by putting itself in an active learning scenario through firstperson vision. In particular, Vision-Language Navigation (VLN) [3] is the task of navigating an agent inside real environments by following natural language instructions. VLN requires a deep understanding of linguistic semantics, visual perception, and most importantly, the alignment of the two. The agent must reason about the vision-language dynamics in order to move towards the target that is inferred from the instructions. VLN presents some unique challenges. First, reasoning over visual images and natural language instructions can be difficult. As we demonstrate in Figure 1, to reach a destination, the agent needs to ground an instruction in the local visual scene, represented as a sequence of words, as well as match the instruction to the visual trajectory in the global temporal space. Secondly, except for strictly following expert demonstrations, the feedback is rather coarse, since the \"Success\" feedback is provided only when the agent reaches a target position, completely ignoring whether the agent has followed the instructions (e.g., Path A in Figure 1) arXiv:1811.10092v2 [cs.CV] 6 Apr 2019 or followed a random path to reach the destination (e.g., Path C in Figure 1). Even a \"good\" trajectory that matches an instruction can be considered unsuccessful if the agent stops marginally earlier than it should be (e.g., Path B in Figure 1). An ill-posed feedback can potentially deviate from the optimal policy learning. Thirdly, existing work suffers from the generalization problem, causing a huge performance gap between seen and unseen environments.\nIn this paper, we propose to combine the power of reinforcement learning (RL) and imitation learning (IL) to address the challenges above. First, we introduce a novel Reinforced Cross-Modal Matching (RCM) approach that enforces cross-modal grounding both locally and globally via RL. Specifically, we design a reasoning navigator that learns the cross-modal grounding in both the textual instruction and the local visual scene, so that the agent can infer which sub-instruction to focus on and where to look at. From the global perspective, we equip the agent with a matching critic that evaluates an executed path by the probability of reconstructing the original instruction from it, which we refer to as the cycle-reconstruction reward. Locally, the cycle-reconstruction reward provides a finegrained intrinsic reward signal to encourage the agent to better understand the language input and penalize the trajectories that do not match the instructions. For instance, using the proposed reward, Path B is considered better than Path C (see Figure 1).\nBeing trained with the intrinsic reward from the matching critic and the extrinsic reward from the environment, the reasoning navigator learns to ground the natural language instruction on both local spatial visual scene and global temporal visual trajectory. Our RCM model significantly outperforms the existing methods and achieves new state-ofthe-art performance on the Room-to-Room (R2R) dataset.\nOur experimental results indicate a large performance gap between seen and unseen environments. To narrow the gap, we propose an effective solution to explore unseen environments with self-supervision. This technique is valuable because it can facilitate lifelong learning and adaption to new environments. For example, domestic robots can explore a new home it arrives at and iteratively improve the navigation policy by learning from previous experience. Motivated by this fact, we introduce a Self-Supervised Imitation Learning (SIL) method in favor of exploration on unseen environments that do not have labeled data. The agent learns to imitate its own past, good experience. Specifically, in our framework, the navigator performs multiple roll-outs, of which good trajectories (determined by the matching critic) are stored in the replay buffer and later used for the navigator to imitate. In this way, the navigator can approximate its best behavior that leads to a better policy. To summarize, our contributions are mainly three-fold:\n\u2022 We propose a novel Reinforced Cross-Modal Match-ing (RCM) framework that utilizes both extrinsic and intrinsic rewards for reinforcement learning, of which we introduce a cycle-reconstruction reward as the intrinsic reward to enforce the global matching between the language instruction and the agent's trajectory.\n\u2022 Experiments show that RCM achieves the new stateof-the-art performance on the R2R dataset, and among the prior art, is ranked first 1 in the VLN Challenge in terms of SPL, the most reliable metric for the task.\n\u2022 We introduce a new evaluation setting for VLN, where exploring unseen environments prior to testing is allowed, and then propose a Self-Supervised Imitation Learning (SIL) method for exploration with selfsupervision, whose effectiveness and efficiency are validated on the R2R dataset.", "publication_ref": ["b37", "b24", "b7", "b2"], "figure_ref": ["fig_0", "fig_0", "fig_0", "fig_0", "fig_0"], "table_ref": []}, {"heading": "Related Work", "text": "Vision-and-Language Grounding Recently, researchers in both computer vision and natural language processing are striving to bridge vision and natural language towards a deeper understanding of the world [53,47,22,7,19,43,21], e.g., captioning an image or a video with natural language [11,12,46,48,54,55,49] or localizing desired objects within an image given a natural language description [37,20,56,57]. Moreover, visual question answering [4] and visual dialog [9] aim to generate one-turn or multi-turn response by grounding it on both visual and textual modalities. However, those tasks focus on passive visual perception in the sense that the visual inputs are usually fixed. In this work, we are particularly interested in solving the dynamic multi-modal grounding problem in both temporal and spatial spaces. Thus, we focus on the task of vision-language navigation (VLN) [3] which requires the agent to actively interact with the environment.\nEmbodied Navigation Agent Navigation in 3D environments [58,29,30,16] is an essential capability of a mobile intelligent system that functions in the physical world. In the past two years, a plethora of tasks and evaluation protocols [38,25,40,52,3] have been proposed as summarized in [1]. VLN [3] focuses on language-grounded navigation in the real 3D environment. In order to solve the VLN task, Anderson et al. [3] set up an attention-based sequenceto-sequence baseline model. Then Wang et al. [50] introduced a hybrid approach that combines model-free and model-based reinforcement learning (RL) to improve the model's generalizability. Lately, Fried et al. [13] proposed a speaker-follower model that adopts data augmentation, panoramic action space and modified beam search for VLN, establishing the current state-of-the-art performance on the Room-to-Room dataset. Extending prior work, we propose a Reinforced Cross-Modal Matching (RCM) approach to VLN. The RCM model is built upon [13] but differs in many significant aspects: (1) we combine a novel multireward RL with imitation learning for VLN while Speaker-Follower models [13] only uses supervised learning as in [3]. (2) Our reasoning navigator performs cross-modal grounding rather than the temporal attention mechanism on single-modality input. (3) Our matching critic is similar to Speaker in terms of the architecture design, but the former is used to provide the cycle-reconstruction intrinsic reward for both RL and SIL training while the latter is used to augment training data for supervised learning. Moreover, we introduce a self-supervised imitation learning method for exploration in order to explicitly address the generalization issue, which is a problem not well-studied in prior work. Concurrent to our work, [44,23,27,28] studies the VLN tasks from various aspects, and [31] introduces a variant of the VLN task to find objects by requesting language assistance when needed. Note that we are the first to propose to explore unseen environments for the VLN task.\nExploration Much work has been done on improving exploration [5,14,18,33,42] because the trade-off between exploration and exploitation is one of the fundamental challenges in RL. The agent needs to exploit what it has learned to maximize reward and explore new territories for better policy search. Curiosity or uncertainty has been used as a signal for exploration [39,41,26,34]. Most recently, Oh et al. [32] proposed to exploit past good experience for better exploration in RL and theoretically justified its effectiveness. Our Self-Supervised Imitation Learning (SIL) method shares the same spirit. But instead of testing on games, we adapt SIL and validate its effectiveness and efficiency on the more practical task of VLN.", "publication_ref": ["b52", "b46", "b21", "b6", "b18", "b42", "b20", "b10", "b11", "b45", "b47", "b53", "b54", "b48", "b36", "b19", "b55", "b56", "b3", "b8", "b2", "b57", "b28", "b29", "b15", "b37", "b24", "b39", "b51", "b2", "b0", "b2", "b2", "b49", "b12", "b12", "b12", "b2", "b43", "b22", "b26", "b27", "b30", "b4", "b13", "b17", "b32", "b41", "b38", "b40", "b25", "b33", "b31"], "figure_ref": [], "table_ref": []}, {"heading": "Reinforced Cross-Modal Matching", "text": "", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Overview", "text": "Here we consider an embodied agent that learns to navigate inside real indoor environments by following natural language instructions. The RCM framework mainly consists of two modules (see Figure 2): a reasoning navigator \u03c0 \u03b8 and a matching critic V \u03b2 . Given the initial state s 0 and the natural language instruction (a sequence of words) X = x 1 , x 2 , ..., x n , the reasoning navigator learns to perform a sequence of actions a 1 , a 2 , ..., a T \u2208 A, which generates a trajectory \u03c4 , in order to arrive at the target location s target indicated by the instruction X . The navigator interacts with the environment and perceives new visual states as it executes actions. To promote the generalizability and reinforce the policy learning, we introduce two reward functions: an extrinsic reward that is provided by the environ- ment and measures the success signal and the navigation error of each action, and an intrinsic reward that comes from our matching critic and measures the alignment between the language instruction X and the navigator's trajectory \u03c4 .\nEnvironment Instruction Navigator Matching Critic Action State Trajectory Extrinsic Reward Intrinsic Reward Labeled Target Location", "publication_ref": [], "figure_ref": ["fig_1"], "table_ref": []}, {"heading": "Model", "text": "Here we discuss the reasoning navigator and matching critic in details, both of which are end-to-end trainable.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Cross-Modal Reasoning Navigator", "text": "The navigator \u03c0 \u03b8 is a policy-based agent that maps the input instruction X onto a sequence of actions {a t } T t=1 . At each time step t, the navigator receives a state s t from the environment and needs to ground the textual instruction in the local visual scene. Thus, we design a cross-modal reasoning navigator that learns the trajectory history, the focus of the textual instruction, and the local visual attention in order, which forms a cross-modal reasoning path to encourage the local dynamics of both modalities at step t.\nFigure 3 shows the unrolled version of the navigator at time step t. Similar to [13], we equip the navigator with a panoramic view, which is split into image patches of m different viewpoints, so the panoramic features that are extracted from the visual state s t can be represented as {v t,j } m j=1 , where v t,j denotes the pre-trained CNN feature of the image patch at viewpoint j.", "publication_ref": ["b12"], "figure_ref": ["fig_2"], "table_ref": []}, {"heading": "History Context", "text": "Once the navigator runs one step, the visual scene would change accordingly. The history of the trajectory \u03c4 1:t till step t is encoded as a history context vector h t by an attention-based trajectory encoder LSTM [17]:\nh t = LST M ([v t , a t\u22121 ], h t\u22121 )(1)\nwhere a t\u22121 is the action taken at previous step, and v t = j \u03b1 t,j v t,j , the weighted sum of the panoramic features. \u03b1 t,j is the attention weight of the visual feature v t,j , representing its importance with respect to the previous history context h t\u22121 . Note that we adopt the dot-product attention [45] hereafter, which we denote as (taking the attention over visual features above for an example)\nv t = attention(h t\u22121 , {v t,j } m j=1 ) (2) = j sof tmax(h t\u22121 W h (v t,j W v ) T )v t,j(3)\nwhere W h and W v are learnable projection matrices.\nVisually Conditioned Textual Context Memorizing the past can enable the recognition of the current status and thus understanding which words or sub-instructions to focus on next. Hence, we further learn the textual context c text t conditioned on the history context h t . We let a language encoder LSTM to encode the language instruction X into a set of textual features {w i } n i=1 . Then at every time step, the textual context is computed as\nc text t = attention(h t , {w i } n i=1 )(4)\nNote that c text t weighs more on the words that are more relevant to the trajectory history and the current visual state.\nTextually Conditioned Visual Context Knowing where to look at requires a dynamic understanding of the language instruction; so we compute the visual context c visual t based on the textual context c text t :\nc visual t = attention(c text t , {v j } m j=1 )(5)\nAction Prediction In the end, our action predictor considers the history context h t , the textual context c text t , and the visual context c visual t , and decides which direction to go next based on them. It calculates the probability p k of each navigable direction using a bilinear dot product as follows:\np k = sof tmax([h t , c text t , c visual t ]W c (u k W u ) T ) (6)\nwhere u k is the action embedding that represents the kth navigable direction, which is obtained by concatenating an appearance feature vector (CNN feature vector extracted from the image patch around that view angle or ", "publication_ref": ["b16", "b44"], "figure_ref": [], "table_ref": []}, {"heading": "Cross-Modal Matching Critic", "text": "In addition to the extrinsic reward signal from the environment, we also derive an intrinsic reward R intr provided by the matching critic V \u03b2 to encourage the global matching between the language instruction X and the navigator \u03c0 \u03b8 's trajectory \u03c4 = {< s 1 , a 1 >, < s 2 , a 2 >, ..., < s T , a T >}:\nR intr = V \u03b2 (X , \u03c4 ) = V \u03b2 (X , \u03c0 \u03b8 (X ))(7)\nOne way to realize this goal is to measure the cyclereconstruction reward p(X = X |\u03c0 \u03b8 (X )), the probability of reconstructing the language instruction X given the trajectory \u03c4 = \u03c0 \u03b8 (X ) executed by the navigator. The higher the probability is, the better the produced trajectory is aligned with the instruction. Therefore as shown in Figure 4, we adopt an attentionbased sequence-to-sequence language model as our matching critic V \u03b2 , which encodes the trajectory \u03c4 with a trajectory encoder and produces the probability distributions of generating each word of the instruction X with a language decoder. Hence the intrinsic reward\nR intr = p \u03b2 (X |\u03c0 \u03b8 (X )) = p \u03b2 (X |\u03c4 )(8)\nwhich is normalized by the instruction length n. In our experiments, the matching critic is pre-trained with human demonstrations (the ground-truth instruction-trajectory pairs < X * , \u03c4 * >) via supervised learning.", "publication_ref": [], "figure_ref": ["fig_3"], "table_ref": []}, {"heading": "Learning", "text": "In order to quickly approximate a relatively good policy, we use the demonstration actions to conduct supervised learning with maximum likelihood estimation (MLE). The training loss L sl is defined as can ensure a relatively good policy on the seen environments. But it also limits the agent's generalizability to recover from erroneous actions in unseen environments, since it only clones the behaviors of expert demonstrations.\nTo learn a better and more generalizable policy, we then switch to reinforcement learning and introduce the extrinsic and intrinsic reward functions to refine the policy from different perspectives.\nExtrinsic Reward A common practice in RL is to directly optimize the evaluation metrics. Since the objective of the VLN task is to successfully reach the target location s target , we consider two metrics for the reward design. The first metric is the relative navigation distance similar to [50]. We denote the distance between s t and s target as D target (s t ). Then the immediate reward r(s t , a t ) after taking action a t at state s t (t < T ) becomes:\nr(s t , a t ) = D target (s t ) \u2212 D target (s t+1 ), t < T (10)\nThis indicates the reduced distance to the target location after taking action a t . Our second choice considers the \"Success\" as an additional criterion. If the agent reaches a point within a threshold measured by the distance d from the target (d is preset as 3m in the R2R dataset), then it is counted as \"Success\". Particularly, the immediate reward function at last step T is defined as\nr(s T , a T ) = 1(D target (s T ) \u2264 d) (11)\nwhere 1() is an indicator function. To incorporate the influence of the action a t on the future and account for the local greedy search, we use the discounted cumulative reward rather than the immediate reward to train the policy:\nR extr (s t , a t ) = r(s t , a t ) immediate reward + T t =t+1 \u03b3 t \u2212t r(s t , a t )\ndiscounted future reward (12) where \u03b3 is the discounted factor (0.95 in our experiments).\nIntrinsic Reward As discussed in Section 3.2.2, we pretrain a matching critic to calculate the cycle-reconstruction intrinsic reward R intr (see Equation 8), promoting the alignment between the language instruction X and the trajectory \u03c4 . It encourages the agent to respect the instruction and penalizes the paths that deviate from what the instruction indicates.\nWith both the extrinsic and intrinsic reward functions, the RL loss can be written as\nL rl = \u2212E at\u223c\u03c0 \u03b8 [A t ](13)\nwhere the advantage function A t = R extr + \u03b4R intr . \u03b4 is a hyperparameter weighing the intrinsic reward. Based on REINFORCE algorithm [51], the gradient of nondifferentiable, reward-based loss function can be derived as\nUnlabeled Instruction ! Navigator \" # Matching Critic $ % Imitation Learning Replay Buffer {& ' , & ( ,\u2026, & ) } argmax $ % (!, &) &\u0302=\n\u2207 \u03b8 L rl = \u2212A t \u2207 \u03b8 log \u03c0 \u03b8 (a t |s t )(14)", "publication_ref": ["b49", "b11", "b50"], "figure_ref": [], "table_ref": []}, {"heading": "Self-Supervised Imitation Learning", "text": "The last section introduces the effective RCM method for generic vision-language navigation task, whose standard setting is to train the agent on seen environments and test it on unseen environments without exploration. In this section we discuss a different setting where the agent is allowed to explore unseen environments without ground-truth demonstrations. This is of practical benefit because it facilitates lifelong learning and adaption to new environments.\nTo this end, we propose a Self-Supervised Imitation Learning (SIL) method to imitate the agent's own past good decisions. As shown in Figure 5, given a natural language instruction X without paired demonstrations and groundtruth target location, the navigator produces a set of possible trajectories and then stores the best trajectory\u03c4 that is determined by matching critic V \u03b2 into a replay buffer, in formula,\u03c4 = arg max\n\u03c4 V \u03b2 (X , \u03c4 )(15)\nThe matching critic evaluates the trajectories with the cyclereconstruction reward as introduced in Section 3.2.2. Then by exploiting the good trajectories in the replay buffer, the agent is indeed optimizing the following objective with selfsupervision. The target location is unknown and thus there is no supervision from the environment.\nL sil = \u2212R intr log \u03c0 \u03b8 (a t |s t )(16)\nNote that L sil can be viewed as the loss for policy gradient except that the off-policy Monte-Carlo return R intr is used instead of on-policy return. L sil can also be interpreted as the supervised learning loss with\u03c4 as the \"ground truths\":\nL sil = \u2212E[log(\u03c0 \u03b8 (\u00e2 t |s t ))] (17\n)\nwhere\u00e2 t is the action stored in the replay buffer using Equation 15. Paired with a matching critic, the SIL method can be combined with various learning methods to approximate a better policy by imitating the previous best of itself.", "publication_ref": [], "figure_ref": ["fig_4"], "table_ref": []}, {"heading": "Experiments and Analysis", "text": "", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Experimental Setup", "text": "R2R Dataset We evaluate our approaches on the Roomto-Room (R2R) dataset [3] for vision-language navigation in real 3D environments, which is built upon the Matter-port3D dataset [6]. The R2R dataset has 7,189 paths that capture most of the visual diversity and 21,567 humanannotated instructions with an average length of 29 words. The R2R dataset is split into training, seen validation, unseen validation, and test sets. The seen validation set shares the same environments with the training set. While both the unseen validation and test sets contain distinct environments that do not appear in the other sets.\nTesting Scenarios The standard testing scenario of the VLN task is to train the agent in seen environments and then test it in previously unseen environments in a zero-shot fashion. There is no prior exploration on the test set. This setting is preferred and able to clearly measure the generalizability of the navigation policy, so we evaluate our RCM approach under the standard testing scenario. Furthermore, exploration in unseen environments is certainly meaningful in practice, e.g., in-home robots are expected to explore and adapt to a new environment. So we introduce a lifelong learning scenario where the agent is encouraged to learn from trials and errors on the unseen environments. In this case, how to effectively explore the unseen validation or test set where there are no expert demonstrations becomes an important task to study.", "publication_ref": ["b2", "b5"], "figure_ref": [], "table_ref": []}, {"heading": "Evaluation Metrics", "text": "We report five evaluation metrics as used by the VLN Challenge: Path Length (PL), Navigation Error (NE), Oracle Success Rate (OSR), Success Rate (SR), and Success rate weighted by inverse Path Length (SPL). 2 Among those metrics, SPL is the recommended primary measure of navigation performance [1], as it considers both effectiveness and efficiency. The other metrics are also reported as auxiliary measures.\nImplementation Details Following prior work [3,50,13], ResNet-152 CNN features [15] are extracted for all images without fine-tuning. The pretrained GloVe word embeddings [35] are used for initialization and then fine-tuned during training. We train the matching critic with human demonstrations and then fix it during policy learning. Then 2 PL: the total length of the executed path. NE: the shortest-path distance between the agent's final position and the target. OSR: the success rate at the closest point to the goal that the agent has visited along the trajectory. SR: the percentage of predicted end-locations within 3m of the target locations. SPL: SPL trades-off Success Rate against Path Length, which is defined in [1]. we warm start the policy via SL with a learning rate 1e-4, and then switch to RL training with a learning rate 1e-5 (same for SIL). Adam optimizer [24] is used to optimize all the parameters. More details can be found in the appendix.", "publication_ref": ["b1", "b0", "b2", "b49", "b12", "b14", "b34", "b0", "b23"], "figure_ref": [], "table_ref": []}, {"heading": "Results on the Test Set", "text": "Comparison with SOTA We compare the performance of RCM to the previous state-of-the-art (SOTA) methods on the test set of the R2R dataset, which is held out as the VLN Challenge. The results are shown in Table 1, where we compare RCM to a set of baselines: (1) Random: randomly take a direction to move forward at each step until five steps. (2) seq2seq: the best-performing sequence-tosequence model as reported in the original dataset paper [3], which is trained with the student-forcing method. (3) RPA: a reinforced planning-ahead model that combines modelfree and model-based reinforcement learning for VLN [50].\n(4) Speaker-Follower: a compositional Speaker-Follower method that combines data augmentation, panoramic action space, and beam search for VLN [13].\nAs can be seen in Similarly, the agent also learns a more efficient policy that takes less number of steps (the average path length is reduced from 15.22m to 9.48m) but obtains a higher success rate. The key difference between SIL and beam search is that SIL optimizes the policy itself by play-and-imitate while beam search only makes a greedy selection of the rollouts of the existing policy. But we would like to point out that due to different learning scenarios, the results of RCM + SIL (unseen) cannot be directly compared with other methods following the standard settings of the VLN challenge.", "publication_ref": ["b2", "b49", "b12"], "figure_ref": [], "table_ref": []}, {"heading": "Ablation Study", "text": "Effect of Individual Components We conduct an ablation study to illustrate the effect of each component on both seen and unseen validation sets in Table 2. Comparing Row 1 and Row 2, we observe the efficiency of the learned policy by imitating the best of itself on the training set. Then we start with the RCM model in Row 2, and successively remove the intrinsic reward, extrinsic reward, and crossmodal reasoning to demonstrate their importance.\nRemoving the intrinsic reward (Row 3), we notice that the success rate (SR) on unseen environments drops 1.9 points while it is almost fixed on seen environments (0.2\u2191). It evaluates the alignment between instructions and trajectories, serving as a complementary supervision besides of the feedback from the environment, therefore it works better for the unseen environments that require more supervision due to lack of exploration. This also indirectly validates the importance of exploration on unseen environments.\nFurthermore, the results of Row 4 (the RCM model with only supervised learning) validate the superiority of reinforcement learning compared to purely supervised learning on the VLN task. Meanwhile, since eventually the results are evaluated based on the success rate (SR) and path length (PL), directly optimizing the extrinsic reward signals can guarantee the stability of the reinforcement learning and bring a big performance gain.\nWe then verify the strength of our cross-modal reasoning navigator by comparing it (Row 4) with an attention-based sequence-to-sequence model (Row 5) that utilizes the previous hidden state h t\u22121 to attend to both the visual and textual features at decoding time. Everything else is exactly the same except the cross-modal attention design. Evidently, our navigator improves upon the baseline by considering history context, visually-conditioned textual context, and textually-conditioned visual context for decision making.\nIn the end, we demonstrate the effectiveness of the proposed SIL method for exploration in Row 6. Considerable performance boosts have been obtained on both seen and unseen environments, as the agent learns how to better execute the instructions from its own previous experience. Above steps are all good, but it stops at a wrong place in the end.  Generalizability Another observation from the experiments (e.g., see Table 2) is that our RCM approach is much more generalizable to unseen environments compared with the baseline. The improvements on the seen and unseen validation sets are 0.3 and 7.1 points, respectively. So is the SIL method, which explicitly explores the unseen environments and tremendously reduces the success rate performance gap between seen and unseen environments from 30.7% (Row 5) to 11.7% (Row 6).\nQualitative Analysis For a more intuitive view of how our model works for the VLN task, we visualize two qualitative examples in Figure 6. Particularly, we choose two examples, both with high intrinsic rewards. In (a), the agent successfully reaches the target destination, with a comprehensive understanding of the natural language instruction. While in (b), the intrinsic reward is also high, which indicates most of the agent's actions are good, but it is also noticeable that the agent fails to recognize the laundry room at the end of the trajectory, which shows the importance of more precise visual grounding in the navigation task.", "publication_ref": [], "figure_ref": ["fig_7"], "table_ref": []}, {"heading": "Conclusion", "text": "In this paper we present two novel approaches, RCM and SIL, which combine the strength of reinforcement learning and self-supervised imitation learning for the visionlanguage navigation task. Experiments illustrate the effectiveness and efficiency of our methods under both the standard testing scenario and the lifelong learning scenario. Moreover, our methods show strong generalizability in unseen environments. The proposed learning frameworks are modular and model-agnostic, which allow the components to be improved separately. We also believe that the idea of learning more fine-grained intrinsic rewards, in addition to the coarse external signals, is commonly applicable to various embodied agent tasks, and the idea SIL can be generally adopted to explore other unseen environments.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Supplementary Material", "text": "", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "A. Training Details", "text": "Following prior work [3,50,13], ResNet-152 CNN features [15] are extracted for all images without fine-tuning. The pretrained GloVe word embeddings [35] are used for initialization and then fine-tuned during training. All the hyper-parameters are tuned on the validation sets. We adopt the panoramic action space [13] where the action is to choose a navigable direction from the possible candidates. We set the maximal length of the action path as 10. The maximum length of the instruction is set as 80 and longer instructions are truncated. We train the matching critic with a learning rate 1e-4 and then fix it during policy learning. Then we warm start the policy via supervised learning loss with a learning rate 1e-4, and then switch to RL training with a learning rate 1e-5. Self-supervised imitation learning can be performed to further improve the policy: during the first epoch of SIL, the loaded policy produces 10 trajectories, of which the one with the highest intrinsic reward is stored in the replay buffer; those saved trajectories are then utilized to fine-tune the policy for a fixed number of iterations (the learning rate is 1e-5). Early stopping is used for all the training and Adam optimizer [24] is used to optimize all the parameters. To avoid overfitting, we use an L2 weight decay of 0.0005 and a dropout ratio of 0.5. The discounted factor \u03b3 of our cumulative reward is 0.95. The weight \u03c3 of the intrinsic reward is set as 2.", "publication_ref": ["b2", "b49", "b12", "b14", "b34", "b12", "b23"], "figure_ref": [], "table_ref": []}, {"heading": "B. Network Architecture", "text": "Reasoning Navigator The language encoder consists of an LSTM with hidden size 512 and a word embedding layer of size 300. The inner dimensions of the three attention modules used to compute the history context, the textual context, and the visual context are 256, 512, and 256 respectively. The trajectory encoder is an LSTM with hidden size 512. The action embedding is a concatenation of the visual appearance feature vector of size 2048 and the orientation feature vector of size 128 (the 4-dimensional orientation feature [sin\u03c8; cos\u03c8; sin\u03c9; cos\u03c9] are tiled 32 times as used in [13]). The action predictor is composed of three weight matrices: the projection dimensions of W c and W u are both 256, and then an output layer W o together with a softmax layer are followed to obtain the probabilities over the possible navigable directions.", "publication_ref": ["b12"], "figure_ref": [], "table_ref": []}, {"heading": "Matching Critic", "text": "The matching critic consists of an attention-based trajectory encoder with the same architecture as the one in the navigator, its own word embedding layer of size 300, and an attention-based language decoder. The language decoder is composed of an attention module (whose projection dimension is 512) over the encoded fea-   tures, an LSTM of hidden size 512, and a multi-layer perceptron (Linear \u2192 Tanh \u2192 Linear \u2192 SoftMax) that converts the hidden state into probabilities of all the words in the vocabulary.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "C. Visualizing Intrinsic Reward", "text": "In Figure 7, we plot the histogram distributions of the intrinsic rewards (produced by our submitted model) on both seen and unseen validation sets. On the one hand, the intrinsic reward is aligned with the success rate to some extent, because the successful examples are receiving higher averaged intrinsic rewards than the failed ones. On the  other hand, the complementary intrinsic reward provides more fine-grained reward signals to reinforce multi-modal grounding and improve the navigation policy learning.", "publication_ref": [], "figure_ref": ["fig_9"], "table_ref": []}, {"heading": "D. Error Analysis", "text": "In this section, we further analyze the negative examples and showcase a few common errors in the vision-language navigation task. First, a common mistake comes from the misunderstanding of the natural language instruction. Figure 8 demonstrate such a qualitative example, where the agent successfully perceived the concepts \"hallway\", \"turn left\", and \"mirror\" etc., but misinterpreted the meaning of the whole instruction. It turned left earlier and mistakenly entered the bathroom instead of the bedroom at Step 3.\nSecondly, failing to ground objects in the visual scene can usually result in an error. As shown in Figure 9 (a), the agent did not recognize the \"mannequins\" in the end (Step 5) and stopped at a wrong place even though it exe-cuted the instruction pretty well. Similar in Figure 9 (b), the agent failed to detect the \"red ropes\" at the beginning (Step 1) and thus took a wrong direction which also has the \"red carpet\". Note that \"mannequins\" is an out-of-vocabulary word in the training data; besides, both \"mannequins\" and \"red ropes\" do not belong to the 1000 classes of the Ima-geNet [10], so the visual features extracted from a pretrain ImageNet model [15] are not able to represent them.\nIn Figure 10, we illustrate a long negative trajectory which our agent produced by following a relatively complicated instruction. In this case, the agent match \"the floor is in a circle pattern\" with the visual scene, which seems to be another limitation of the current visual recognition systems.\nThe above examples also suffer from the error accumulation issue as pointed out by Wang et al. [50], where one bad decision leads to a series of bad decisions during the navigation process. Therefore, an agent capable of being aware of and recovering from errors is desired for future study.", "publication_ref": ["b9", "b14", "b49"], "figure_ref": ["fig_12", "fig_12", "fig_0"], "table_ref": []}, {"heading": "E. Trails and Errors", "text": "Below are some trials and errors from our experimental experience, which are not the gold standard and used for reference only.\n\u2022 We tried to incorporate dense bottom-up features as used in [2], but it hurt the performance on unseen environments. We think it is possibly because the navigation instructions require sparse visual representations rather than dense features. Dense features can easily lead to the overfitting problem. Probably more finegrained detection results rather than dense visual features would help.\n\u2022 The performances are similar with or without positional encoding [45] on the instructions.\n\u2022 Pretrained ELMo embeddings [36] without fine-tuning hurts the performance. The summation of pretrained ELMo embeddings and task-specific embeddings has a similar effect of task-specific embeddings only.\n\u2022 It is not stable to only use the intrinsic reward to train the model. So we adopt the mixed reward for reinforcement learning, which works the best.\nInstruction: Turn around and exit the room to the right of the TV. Once out turn left and walk to the end of the hallway and then turn right. Walk down the hallway past the piano and then stop when you enter the next doorway and the floor is in a circle pattern.  ", "publication_ref": ["b1", "b44", "b35"], "figure_ref": [], "table_ref": []}, {"heading": "Acknowledgment", "text": "This work was partly performed when the first author was interning at Microsoft Research. The authors thank Peter Anderson and Pengchuan Zhang for their helpful discussions, and Ronghang Hu for his visualization code.", "publication_ref": [], "figure_ref": [], "table_ref": []}], "references": [{"ref_id": "b0", "title": "On evaluation of embodied navigation agents", "journal": "", "year": "2018", "authors": "P Anderson; A Chang; D S Chaplot; A Dosovitskiy; S Gupta; V Koltun; J Kosecka; J Malik; R Mottaghi; M Savva"}, {"ref_id": "b1", "title": "Bottom-up and top-down attention for image captioning and visual question answering", "journal": "", "year": "2018", "authors": "P Anderson; X He; C Buehler; D Teney; M Johnson; S Gould; L Zhang"}, {"ref_id": "b2", "title": "van den Hengel. Vision-and-language navigation: Interpreting visuallygrounded navigation instructions in real environments", "journal": "", "year": "2018", "authors": "P Anderson; Q Wu; D Teney; J Bruce; M Johnson; N S\u00fcnderhauf; I Reid; S Gould; A "}, {"ref_id": "b3", "title": "VQA: Visual Question Answering", "journal": "", "year": "2015", "authors": "S Antol; A Agrawal; J Lu; M Mitchell; D Batra; C L Zitnick; D Parikh"}, {"ref_id": "b4", "title": "Unifying count-based exploration and intrinsic motivation", "journal": "", "year": "2016", "authors": "M Bellemare; S Srinivasan; G Ostrovski; T Schaul; D Saxton; R Munos"}, {"ref_id": "b5", "title": "Matterport3d: Learning from rgb-d data in indoor environments", "journal": "", "year": "2017", "authors": "A Chang; A Dai; T Funkhouser; M Halber; M Nie\u00dfner; M Savva; S Song; A Zeng; Y Zhang"}, {"ref_id": "b6", "title": "Mind's eye: A recurrent visual representation for image caption generation", "journal": "", "year": "2015", "authors": "X Chen; C Lawrence Zitnick"}, {"ref_id": "b7", "title": "Embodied Question Answering", "journal": "", "year": "2018", "authors": "A Das; S Datta; G Gkioxari; S Lee; D Parikh; D Batra"}, {"ref_id": "b8", "title": "Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition (CVPR)", "journal": "", "year": "2017", "authors": "A Das; S Kottur; K Gupta; A Singh; D Yadav; J M Moura; D Parikh; D Batra"}, {"ref_id": "b9", "title": "ImageNet: A Large-Scale Hierarchical Image Database", "journal": "", "year": "2009", "authors": "J Deng; W Dong; R Socher; L.-J Li; K Li; L Fei-Fei"}, {"ref_id": "b10", "title": "Long-term recurrent convolutional networks for visual recognition and description", "journal": "", "year": "2015", "authors": "J Donahue; L A Hendricks; S Guadarrama; M Rohrbach; S Venugopalan; K Saenko; T Darrell"}, {"ref_id": "b11", "title": "From captions to visual concepts and back", "journal": "", "year": "2015", "authors": "H Fang; S Gupta; F Iandola; R K Srivastava; L Deng; P Doll\u00e1r; J Gao; X He; M Mitchell; J C Platt"}, {"ref_id": "b12", "title": "Speaker-follower models for vision-and-language navigation", "journal": "", "year": "2018", "authors": "D Fried; R Hu; V Cirik; A Rohrbach; J Andreas; L.-P Morency; T Berg-Kirkpatrick; K Saenko; D Klein; T Darrell"}, {"ref_id": "b13", "title": "Neural approaches to conversational ai", "journal": "", "year": "2018", "authors": "J Gao; M Galley; L Li"}, {"ref_id": "b14", "title": "Deep residual learning for image recognition", "journal": "", "year": "2016", "authors": "K He; X Zhang; S Ren; J Sun"}, {"ref_id": "b15", "title": "Learning models for following natural language directions in unknown environments", "journal": "", "year": "2015", "authors": "S Hemachandra; F Duvallet; T M Howard; N Roy; A Stentz; M R Walter"}, {"ref_id": "b16", "title": "Long short-term memory", "journal": "Neural computation", "year": "1997", "authors": "S Hochreiter; J Schmidhuber"}, {"ref_id": "b17", "title": "Vime: Variational information maximizing exploration", "journal": "", "year": "2016", "authors": "R Houthooft; X Chen; Y Duan; J Schulman; F De Turck; P Abbeel"}, {"ref_id": "b18", "title": "Segmentation from natural language expressions", "journal": "Springer", "year": "2016", "authors": "R Hu; M Rohrbach; T Darrell"}, {"ref_id": "b19", "title": "Natural language object retrieval", "journal": "", "year": "2016", "authors": "R Hu; H Xu; M Rohrbach; J Feng; K Saenko; T Darrell"}, {"ref_id": "b20", "title": "Turbo learning for captionbot and drawingbot", "journal": "", "year": "2018", "authors": "Q Huang; P Zhang; D Wu; L Zhang"}, {"ref_id": "b21", "title": "Deep visual-semantic alignments for generating image descriptions", "journal": "", "year": "2015", "authors": "A Karpathy; L Fei-Fei"}, {"ref_id": "b22", "title": "Tactical rewind: Self-correction via backtracking in vision-and-language navigation", "journal": "", "year": "2019", "authors": "L Ke; X Li; Y Bisk; A Holtzman; Z Gan; J Liu; J Gao; Y Choi; S Srinivasa"}, {"ref_id": "b23", "title": "Adam: A method for stochastic optimization", "journal": "", "year": "2014", "authors": "D P Kingma; J Ba"}, {"ref_id": "b24", "title": "Ai2-thor: An interactive 3d environment for visual ai", "journal": "", "year": "2017", "authors": "E Kolve; R Mottaghi; D Gordon; Y Zhu; A Gupta; A Farhadi"}, {"ref_id": "b25", "title": "Efficient exploration for dialogue policy learning with bbq networks & replay buffer spiking", "journal": "", "year": "2016", "authors": "Z C Lipton; J Gao; L Li; X Li; F Ahmed; L Deng"}, {"ref_id": "b26", "title": "Self-monitoring navigation agent via auxiliary progress estimation", "journal": "", "year": "2019", "authors": "C.-Y Ma; J Lu; Z Wu; G Alregib; Z Kira; R Socher; C Xiong"}, {"ref_id": "b27", "title": "The regretful agent: Heuristic-aided navigation through progress estimation", "journal": "", "year": "2019", "authors": "C.-Y Ma; Z Wu; G Alregib; C Xiong; Z Kira"}, {"ref_id": "b28", "title": "Learning to navigate in complex environments", "journal": "", "year": "2016", "authors": "P Mirowski; R Pascanu; F Viola; H Soyer; A J Ballard; A Banino; M Denil; R Goroshin; L Sifre; K Kavukcuoglu"}, {"ref_id": "b29", "title": "Visual representations for semantic target driven navigation", "journal": "", "year": "2018", "authors": "A Mousavian; A Toshev; M Fiser; J Kosecka; J Davidson"}, {"ref_id": "b30", "title": "Visionbased navigation with language-based assistance via imitation learning with indirect intervention", "journal": "", "year": "2018", "authors": "K Nguyen; D Dey; C Brockett; B Dolan"}, {"ref_id": "b31", "title": "Self-imitation learning", "journal": "", "year": "2018", "authors": "J Oh; Y Guo; S Singh; H Lee"}, {"ref_id": "b32", "title": "Count-based exploration with neural density models", "journal": "", "year": "2017", "authors": "G Ostrovski; M G Bellemare; A Oord; R Munos"}, {"ref_id": "b33", "title": "Curiositydriven exploration by self-supervised prediction", "journal": "", "year": "2017", "authors": "D Pathak; P Agrawal; A A Efros; T Darrell"}, {"ref_id": "b34", "title": "Glove: Global vectors for word representation", "journal": "", "year": "2014", "authors": "J Pennington; R Socher; C Manning"}, {"ref_id": "b35", "title": "Deep contextualized word representations", "journal": "", "year": "2018", "authors": "M E Peters; M Neumann; M Iyyer; M Gardner; C Clark; K Lee; L Zettlemoyer"}, {"ref_id": "b36", "title": "Flickr30k entities: Collecting region-to-phrase correspondences for richer imageto-sentence models", "journal": "", "year": "2015", "authors": "B A Plummer; L Wang; C M Cervantes; J C Caicedo; J Hockenmaier; S Lazebnik"}, {"ref_id": "b37", "title": "Multimodal indoor simulator for navigation in complex environments", "journal": "", "year": "2017", "authors": "M Savva; A X Chang; A Dosovitskiy; T Funkhouser; V Koltun;  Minos"}, {"ref_id": "b38", "title": "Adaptive confidence and adaptive curiosity", "journal": "Citeseer", "year": "1991", "authors": "J Schmidhuber"}, {"ref_id": "b39", "title": "Semantic scene completion from a single depth image", "journal": "", "year": "2017", "authors": "S Song; F Yu; A Zeng; A X Chang; M Savva; T Funkhouser"}, {"ref_id": "b40", "title": "An analysis of model-based interval estimation for markov decision processes", "journal": "Journal of Computer and System Sciences", "year": "2008", "authors": "A L Strehl; M L Littman"}, {"ref_id": "b41", "title": "# exploration: A study of count-based exploration for deep reinforcement learning", "journal": "", "year": "2017", "authors": "H Tang; R Houthooft; D Foote; A Stooke; O X Chen; Y Duan; J Schulman; F Deturck; P Abbeel"}, {"ref_id": "b42", "title": "Movieqa: Understanding stories in movies through question-answering", "journal": "", "year": "2016", "authors": "M Tapaswi; Y Zhu; R Stiefelhagen; A Torralba; R Urtasun; S Fidler"}, {"ref_id": "b43", "title": "Shifting the baseline: Single modality performance on visual navigation & qa", "journal": "", "year": "2018", "authors": "J Thomason; D Gordan; Y Bisk"}, {"ref_id": "b44", "title": "Attention is all you need", "journal": "", "year": "2017", "authors": "A Vaswani; N Shazeer; N Parmar; J Uszkoreit; L Jones; A N Gomez; \u0141 Kaiser; I Polosukhin"}, {"ref_id": "b45", "title": "Show and tell: A neural image caption generator", "journal": "IEEE", "year": "2015", "authors": "O Vinyals; A Toshev; S Bengio; D Erhan"}, {"ref_id": "b46", "title": "No metrics are perfect: Adversarial reward learning for visual storytelling", "journal": "", "year": "2018", "authors": "X Wang; W Chen; Y.-F Wang; W Y Wang"}, {"ref_id": "b47", "title": "Video captioning via hierarchical reinforcement learning", "journal": "", "year": "2018", "authors": "X Wang; W Chen; J Wu; Y.-F Wang; W Y Wang"}, {"ref_id": "b48", "title": "Watch, listen, and describe: Globally and locally aligned cross-modal attentions for video captioning", "journal": "", "year": "2018", "authors": "X Wang; Y.-F Wang; W Y Wang"}, {"ref_id": "b49", "title": "Look before you leap: Bridging model-free and model-based reinforcement learning for planned-ahead vision-and-language navigation", "journal": "", "year": "2018-09", "authors": "X Wang; W Xiong; H Wang; W Y Wang"}, {"ref_id": "b50", "title": "Simple statistical gradient-following algorithms for connectionist reinforcement learning", "journal": "Machine learning", "year": "1992", "authors": "R J Williams"}, {"ref_id": "b51", "title": "Gibson Env: real-world perception for embodied agents", "journal": "IEEE", "year": "2018", "authors": "F Xia; A R Zamir; Z.-Y He; A Sax; J Malik; S Savarese"}, {"ref_id": "b52", "title": "Show, attend and tell: Neural image caption generation with visual attention", "journal": "", "year": "2015", "authors": "K Xu; J Ba; R Kiros; K Cho; A Courville; R Salakhudinov; R Zemel; Y Bengio"}, {"ref_id": "b53", "title": "Stacked attention networks for image question answering", "journal": "", "year": "2016", "authors": "Z Yang; X He; J Gao; L Deng; A Smola"}, {"ref_id": "b54", "title": "Video paragraph captioning using hierarchical recurrent neural networks", "journal": "", "year": "2016", "authors": "H Yu; J Wang; Z Huang; Y Yang; W Xu"}, {"ref_id": "b55", "title": "Modeling context in referring expressions", "journal": "Springer", "year": "2016", "authors": "L Yu; P Poirson; S Yang; A C Berg; T L Berg"}, {"ref_id": "b56", "title": "Man: Moment alignment network for natural language moment retrieval via iterative graph adjustment", "journal": "", "year": "2018", "authors": "D Zhang; X Dai; X Wang; Y.-F Wang; L S Davis"}, {"ref_id": "b57", "title": "Target-driven visual navigation in indoor scenes using deep reinforcement learning", "journal": "IEEE", "year": "2017", "authors": "Y Zhu; R Mottaghi; E Kolve; J J Lim; A Gupta; L Fei-Fei; A Farhadi"}], "figures": [{"figure_label": "1", "figure_type": "figure", "figure_id": "fig_0", "figure_caption": "Figure 1 :1Figure 1: Demonstration of the VLN task. The instruction, the local visual scene, and the global trajectories in a top-down view is shown. The agent does not have access to the top-down view. Path A is the demonstration path following the instruction. Path B and C are two different paths executed by the agent.", "figure_data": ""}, {"figure_label": "2", "figure_type": "figure", "figure_id": "fig_1", "figure_caption": "Figure 2 :2Figure 2: Overview of our RCM framework.", "figure_data": ""}, {"figure_label": "3", "figure_type": "figure", "figure_id": "fig_2", "figure_caption": "Figure 3 :3Figure 3: Cross-modal reasoning navigator at step t.", "figure_data": ""}, {"figure_label": "4", "figure_type": "figure", "figure_id": "fig_3", "figure_caption": "Figure 4 :4Figure 4: Cross-modal matching critic that provides the cyclereconstruction intrinsic reward.", "figure_data": ""}, {"figure_label": "5", "figure_type": "figure", "figure_id": "fig_4", "figure_caption": "Figure 5 :5Figure 5: SIL for exploration on unlabeled data.", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_5", "figure_caption": "Instruction:Exit the door and turn left towards the staircase. Walk all the way up the stairs, and stop at the top of the stairs. Intrinsic Reward: 0.53 Result: Success (error = 0m) : Instruction: Turn right and go down the stairs. Turn left and go straight until you get to the laundry room. Wait there. Intrinsic Reward: 0.54 Result: Failure (error = 5.5m) (a) A successful case (b) A failure case", "figure_data": ""}, {"figure_label": "6", "figure_type": "figure", "figure_id": "fig_7", "figure_caption": "Figure 6 :6Figure 6: Qualitative examples from the unseen validation set.", "figure_data": ""}, {"figure_label": "7", "figure_type": "figure", "figure_id": "fig_9", "figure_caption": "Figure 7 :7Figure 7: Visualization of the intrinsic reward on seen and unseen validation sets.", "figure_data": ""}, {"figure_label": "8", "figure_type": "figure", "figure_id": "fig_10", "figure_caption": "Figure 8 :8Figure 8: Misunderstanding of the instruction.", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_11", "figure_caption": "Instruction:Go up the stairs to the right, turn left and go into the room on the left. Turn left and stop near the mannequins.Intrinsic Reward: 0.51 Result: Failure (error = 3.1m) Instruction: With the red ropes to your right, walk down the room on the red carpet past the display. Turn left when another red carpet meets the one you are on in a right angle. Stop on the carpet where these two directions of carpet meet.Intrinsic Reward: 0.17 Result: Failure (error = 19.6m)", "figure_data": ""}, {"figure_label": "9", "figure_type": "figure", "figure_id": "fig_12", "figure_caption": "Figure 9 :9Figure 9: Ground errors where objects were not recognized from the visual scene.", "figure_data": ""}, {"figure_label": "10", "figure_type": "figure", "figure_id": "fig_13", "figure_caption": "Figure 10 :10Figure 10: Failure of executing a relatively complicated instruction.", "figure_data": ""}, {"figure_label": "", "figure_type": "table", "figure_id": "tab_0", "figure_caption": "Test Set (VLN Challenge Leaderboard) Model PL \u2193 NE \u2193 OSR \u2191 SR \u2191 SPL \u2191", "figure_data": "Random9.899.7918.3 13.212seq2seq [3]8.137.8526.6 20.418RPA [50]9.157.5332.5 25.323Speaker-Follower [13] 14.826.6244.0 35.028+ beam search1257.38 4.8796.0 53.51OursRCM15.226.0150.8 43.135RCM + SIL (train)11.976.1249.5 43.038RCM + SIL (unseen) 39.484.2166.8 60.559Table 1: Comparison on the R2R test set [3]. Our RCM model sig-nificantly outperforms the SOTA methods, especially on SPL (theprimary metric for navigation tasks [1]). Moreover, using SIL toimitate itself on the training set can further improve its efficiency:the path length is shortened by 3.25m. Note that with beam search,the agent executes K trajectories at test time and chooses the mostconfident one as the ending point, which results in a super longpath and is heavily penalized by SPL."}, {"figure_label": "12", "figure_type": "table", "figure_id": "tab_1", "figure_caption": "RCM significantly outperforms the existing methods, improving the SPL score from 28% to 35%4 . The improvement is consistently observed on the other metrics, e.g., the success rate is increased by 8.1%. Moreover, using SIL to imitate the RCM agent's previous best behaviors on the training set can approximate a NE \u2193 OSR \u2191 SR \u2191 PL \u2193 NE \u2193 OSR \u2191 SR \u2191 Ablation study on seen and unseen validation sets. We report the performance of the speaker-follower model without beam search as the baseline. Row 1-5 shows the influence of each individual component by successively removing it from the final model. Row 6 illustrates the power of SIL on exploring unseen environments with self-supervision. Please see Section 5.3 for more detailed analysis. It is noticeable in Table1that SIL indeed leads to a better policy even without knowing the target locations. SIL improves RCM by 17.5% on SR and 21% on SPL.", "figure_data": "Seen ValidationUnseen Validation"}, {"figure_label": "", "figure_type": "table", "figure_id": "tab_2", "figure_caption": "Intrinsic Reward: 0.39 Result: Failure (error = 5.4m)", "figure_data": "step 1 panorama viewstep 2 panorama viewstep 3 panorama viewstep 4 panorama viewstep 5 panorama viewstep 6 panorama viewstep 7 panorama viewstep 8 panorama viewstep 9 panorama view"}], "formulas": [{"formula_id": "formula_0", "formula_text": "h t = LST M ([v t , a t\u22121 ], h t\u22121 )(1)", "formula_coordinates": [3.0, 365.57, 622.44, 179.55, 9.65]}, {"formula_id": "formula_1", "formula_text": "v t = attention(h t\u22121 , {v t,j } m j=1 ) (2) = j sof tmax(h t\u22121 W h (v t,j W v ) T )v t,j(3)", "formula_coordinates": [4.0, 80.66, 267.19, 205.71, 40.25]}, {"formula_id": "formula_2", "formula_text": "c text t = attention(h t , {w i } n i=1 )(4)", "formula_coordinates": [4.0, 103.95, 442.94, 182.41, 12.69]}, {"formula_id": "formula_3", "formula_text": "c visual t = attention(c text t , {v j } m j=1 )(5)", "formula_coordinates": [4.0, 95.24, 554.6, 191.12, 12.69]}, {"formula_id": "formula_4", "formula_text": "p k = sof tmax([h t , c text t , c visual t ]W c (u k W u ) T ) (6)", "formula_coordinates": [4.0, 66.23, 647.33, 220.13, 12.69]}, {"formula_id": "formula_5", "formula_text": "R intr = V \u03b2 (X , \u03c4 ) = V \u03b2 (X , \u03c0 \u03b8 (X ))(7)", "formula_coordinates": [4.0, 354.42, 354.38, 190.69, 9.65]}, {"formula_id": "formula_6", "formula_text": "R intr = p \u03b2 (X |\u03c0 \u03b8 (X )) = p \u03b2 (X |\u03c4 )(8)", "formula_coordinates": [4.0, 356.88, 524.97, 188.23, 9.65]}, {"formula_id": "formula_7", "formula_text": "r(s t , a t ) = D target (s t ) \u2212 D target (s t+1 ), t < T (10)", "formula_coordinates": [5.0, 59.7, 288.29, 226.67, 9.65]}, {"formula_id": "formula_8", "formula_text": "r(s T , a T ) = 1(D target (s T ) \u2264 d) (11)", "formula_coordinates": [5.0, 101.24, 397.1, 185.12, 12.01]}, {"formula_id": "formula_9", "formula_text": "R extr (s t , a t ) = r(s t , a t ) immediate reward + T t =t+1 \u03b3 t \u2212t r(s t , a t )", "formula_coordinates": [5.0, 61.2, 473.46, 214.08, 33.97]}, {"formula_id": "formula_10", "formula_text": "L rl = \u2212E at\u223c\u03c0 \u03b8 [A t ](13)", "formula_coordinates": [5.0, 127.74, 672.6, 158.62, 10.32]}, {"formula_id": "formula_11", "formula_text": "Unlabeled Instruction ! Navigator \" # Matching Critic $ % Imitation Learning Replay Buffer {& ' , & ( ,\u2026, & ) } argmax $ % (!, &) &\u0302=", "formula_coordinates": [5.0, 320.98, 72.83, 209.44, 82.28]}, {"formula_id": "formula_12", "formula_text": "\u2207 \u03b8 L rl = \u2212A t \u2207 \u03b8 log \u03c0 \u03b8 (a t |s t )(14)", "formula_coordinates": [5.0, 364.37, 240.13, 180.74, 9.65]}, {"formula_id": "formula_13", "formula_text": "\u03c4 V \u03b2 (X , \u03c4 )(15)", "formula_coordinates": [5.0, 422.43, 479.56, 122.68, 14.13]}, {"formula_id": "formula_14", "formula_text": "L sil = \u2212R intr log \u03c0 \u03b8 (a t |s t )(16)", "formula_coordinates": [5.0, 369.98, 576.68, 175.14, 9.65]}, {"formula_id": "formula_15", "formula_text": "L sil = \u2212E[log(\u03c0 \u03b8 (\u00e2 t |s t ))] (17", "formula_coordinates": [5.0, 373.04, 649.74, 167.92, 9.65]}, {"formula_id": "formula_16", "formula_text": ")", "formula_coordinates": [5.0, 540.96, 650.05, 4.15, 8.64]}], "doi": ""}