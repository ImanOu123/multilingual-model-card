{"title": "Keep Your Distance: Land Division With Separation", "authors": "Edith Elkind; Erel Segal-Halevi; Warut Suksompong", "pub_date": "2023-03-18", "abstract": "This paper is part of an ongoing endeavor to bring the theory of fair division closer to practice by handling requirements from real-life applications. We focus on two requirements originating from the division of land estates: (1) each agent should receive a plot of a usable geometric shape, and (2) plots of different agents must be physically separated. With these requirements, the classic fairness notion of proportionality is impractical, since it may be impossible to attain any multiplicative approximation of it. In contrast, the ordinal maximin share approximation, introduced by Budish in 2011, provides meaningful fairness guarantees. We prove upper and lower bounds on achievable maximin share guarantees when the usable shapes are squares, fat rectangles, or arbitrary axis-aligned rectangles, and explore the algorithmic and query complexity of finding fair partitions in this setting. Our work makes use of tools and concepts from computational geometry such as independent sets of rectangles and guillotine partitions.", "sections": [{"heading": "Introduction", "text": "The problem of fairly allocating a divisible resource has a long history, dating back to the seminal article of Polish mathematician Hugo Steinhaus [1948]. In its basic formulation, the resource, which is metaphorically viewed as a cake, comes in the form of an interval. The aim is to find a division satisfying some fairness criteria such as proportionality, which means that if there are n agents, the value that each of them receives should be at least 1/n of the entire cake. Not only does a proportional allocation always exist, but it can also be found efficiently [Dubins and Spanier, 1961].\nWhile the interval cake is simple and consequently useful as a starting point, it is often insufficient for modeling real-world applications, especially when combined with the common requirement that each agent should receive a connected piece of the cake. 1 In particular, when allocating real estate, geometric considerations play a crucial role: it is difficult to build a house or raise cattle on a thin or highly zigzagged piece of land even if its total area is large. Applying algorithms designed for the interval cake may result in an agent receiving, for example, a 5 \u00d7 500 meter land plot, which is hardly useful for any purpose. Such considerations have motivated researchers to study fairness in land division, which also serves to model the allocation of other twodimensional objects such as advertising spaces [Berliant et al., 1992, Ichiishi and Idzik, 1999, Berliant and Dunz, 2004, Dall'Aglio and Maccheroni, 2009, Iyer and Huhns, 2009, Devulapalli, 2014, Segal-Halevi et al., 2017. These studies have uncovered important differences between land division and interval division: for instance, when agents must be allocated square pieces, Segal-Halevi et al. [2017] show that we cannot guarantee the agents more than 1/(2n) of their entire value in the worst case, even when the agents have identical valuations over the land.\nA related issue, which frequently arises in practice, is that agents' pieces may have to be separated from one another: we may need to leave a space between adjacent pieces of land, e.g., to prevent dispute between owners, provide access to the plots, avoid cross-fertilization of different crops, or ensure safe social distancing among vendors in a market. The formal study of fair division with separation constraints was initiated by Elkind et al. [2022], who focus on the one-dimensional setting. The goal of our work is to extend this analysis to two dimensions, i.e., to analyze fair division of land under separation constraints. In doing so, we will make use of insights and tools from computational geometry such as fat rectangles and guillotine partitions.\nWe assume that each agent must obtain a contiguous piece of land, and the shares that any two agents receive must be separated by a distance of at least s, where s is a given parameter that is independent of the land value. In the presence of separation constraints, no multiplicative approximation of proportionality can be guaranteed, even in one dimension: when all of the agents' values are concentrated within distance s, only one agent can receive a positive utility. Elkind et al. [2022] therefore consider the wellknown criterion of maximin share fairness [Budish, 2011, Kurokawa et al., 2018-the value that each agent receives must be at least her 1-out-of-n maximin share, i.e., the best share that she can guarantee for herself by dividing the resource into n bundles and accepting the worst one. Elkind et al. [2022] show that this criterion can be satisfied for an interval cake, while an ordinal approximation of it can be attained for a onedimensional circular cake.", "publication_ref": ["b56", "b28", "b11", "b35", "b10", "b26", "b37", "b27", "b53", "b53", "b30", "b30", "b15", "b42", "b30"], "figure_ref": [], "table_ref": []}, {"heading": "Our contribution", "text": "In this work, we establish that maximin share fairness and relaxations thereof can also provide worst-case guarantees in land allocation with separation. Moreover, since full proportionality cannot always be attained in this setting even in the case of no separation (i.e., s = 0) due to constraints on the shape of the pieces, our results have interesting implications for that case as well.\nAfter discussing further related work in Section 2 and introducing the definitions and notation in Section 3, we prove a general impossibility result in Section 4. Specifically, we show that when s > 0, it is impossible to guarantee to each agent a positive fraction of her 1-out-of-n maximin share, regardless of the number of agents or the allowed shapes of the pieces. Therefore, in the rest of the paper, we focus on an ordinal notion of approximation. Specifically, we ask for the smallest value of k \u2265 n such that we can guarantee each agent her 1-out-of-k maximin share, meaning that we allow each agent to divide the land into k parts instead of n parts when computing the maximin share. 2 For our positive results, we make the practically common assumption that both the land to be divided and each agent's piece are axis-aligned rectangles. In Section 5, we show that if all rectangles (both in agents' maximin partitions and in the final allocation) are required to be r-fat, i.e., the ratio of the length of the longer side to the length of the shorter side is bounded by a constant r \u2265 1, then it suffices to set k = (2\u2308r\u2309 + 2)n \u2212 (3\u2308r\u2309 + 2). In particular, if all land pieces are required to be squares (i.e., r = 1), we obtain k = 4n \u2212 5. Without the fatness assumption, the problem becomes more difficult, and the technique we use for fat rectangles does not even yield any finite approximation. Nevertheless, we devise a more sophisticated method, based on recursion, that allows us to guarantee a finite approximation: we show that it suffices to set k = 17 \u2022 2 n\u22123 , and provide stronger bounds for small values of n. In particular, for n = 2 we can set k = 3, which is optimal.\nOur positive results in Section 5 are constructive, in the sense that, given each agent's 1-out-of-k maximin partition (i.e., a partition into k pieces where the value of each piece is at least the agent's 1-out-of-k maximin share), we can divide the land among the agents so that each agent receives her 1-out-of-k share, using a natural adaptation of the standard Robertson-Webb model from cake cutting [Robertson and Webb, 1998]. However, it is not clear how a 1-out-of-k maximin partition can be efficiently computed or even approximated. To circumvent this difficulty, in Section 6, we focus on a special class of land partitions known as guillotine partitions; intuitively, these are partitions that can be obtained by a sequence of edge-to-edge cuts. 3 We show that we can efficiently compute an approximately optimal guillotine partition, and that the loss caused by using guillotine partitions compared to arbitrary partitions can be bounded. Combining these results with our ordinal approximation algorithms from Section 5, we obtain approximation algorithms for computing a maximin allocation.", "publication_ref": ["b50"], "figure_ref": [], "table_ref": []}, {"heading": "Related Work", "text": "", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Geometric division", "text": "Division problems are abundant in computational geometry. A survey by Keil [2000] lists over 100 papers about different variants of such problems. A typical problem involves a given polygon C and a given family U of polygons (e.g., triangles, squares, rectangles, stars, or spirals). The polygon C is to be partitioned into a number of parts, each of which belongs to the family U . The partition should satisfy requirements such as minimizing the number of pieces or minimizing the total perimeter of the pieces. Sometimes it is also required that the pieces have the same area as well as the same perimeter [Nandakumar and Ramana Rao, 2012, Blagojevi\u0107 and Ziegler, 2014, Armaselu and Daescu, 2015, Frettl\u00f6h and Richter, 2022.\nHowever, the value of land is much more than its shape, area, or perimeter. For example, a land plot near the sea may have a much higher value than one with exactly the same shape and area in the middle of a desert. Geometric partition problems do not handle such considerations.", "publication_ref": ["b39", "b48", "b13", "b6", "b31"], "figure_ref": [], "table_ref": []}, {"heading": "Additional related work", "text": "In considering fair division with separation, we build on the work of Elkind et al. [2022], who investigate the one-dimensional variant of this problem. Fair land division with constraints on the shape of usable pieces has been previously studied [Segal-Halevi et al., 2017. We follow these works in considering fat rectangles and guillotine cuts; however, the fairness notions considered in these papers are (partial) proportionality and envy-freeness, whereas our work concerns maximin fairness. As we noted earlier, under separation constraints, it can happen that all agents but one receive zero utility in every allocation, which renders proportionality and envy-freeness infeasible.\nOur analysis is also somewhat similar in spirit to a number of recent works on dividing a cake represented by a general graph, which generalizes both the interval and the cycle (a.k.a. pie) setting. Several fairness notions have been studied in that setting: partial proportionality [Bei and Suksompong, 2021], envy-freeness [Igarashi and Zwicker, 2021], and maximin share fairness [Elkind et al., 2021]. In all of those works, the cake is still one-dimensional: it is a union of a finite number of intervals. As we show in this work, a two-dimensional cake is fundamentally different. Our work fits into the ongoing endeavor to bring the theory of fair division closer to practice by handling constraints from reallife applications- Suksompong [2021] surveys other types of constraints that have been investigated in the fair division literature.\nFinally, we remark that we impose the geometric and separation requirements not only on the final allocation but also in the definition of the maximin share benchmark. This is consistent with prior uses of the maximin share under constraints [Bouveret et al., 2017, Biswas and Barman, 2018, Lonc and Truszczynski, 2020, Elkind et al., 2021, Bei et al., 2022.", "publication_ref": ["b30", "b53", "b8", "b36", "b29", "b58", "b14", "b12", "b43", "b29", "b9"], "figure_ref": [], "table_ref": []}, {"heading": "Preliminaries", "text": "The land is given by a closed, bounded, and connected subset L of the two-dimensional Euclidean plane R 2 . The land L is to be divided among a set of agents N = [n], where [k] := {1, 2, . . . , k} for any positive integer k. There is a prespecified family U of usable pieces, for example, squares or 'fat' rectangles. We require that usable pieces are connected, and that if a piece belongs to U , then any piece that results from expanding or shrinking it by an arbitrary factor also belongs to U . Each agent has an integrable value-density function f i : L \u2192 R \u22650 . For each i \u2208 N , agent i's value for a piece of land Z is given by v i (Z) := Z f i (x, y)dxdy. An instance consists of the land, agents, density functions, and the separation parameter s \u2265 0.\nAn allocation of the land is given by a list A = (A 1 , . . . , A n ), where each A i is a single usable piece of land allocated to agent i. We require allocations to be s-separated, i.e., any two pieces A i and A j are separated by distance at least s, where distance is measured according to the \u2113 \u221e norm: 4\nd(A i , A j ) = inf (x,y)\u2208A i ,(x \u2032 ,y \u2032 )\u2208A j max{|x \u2212 x \u2032 |, |y \u2212 y \u2032 |}.\nPartitions and s-separated partitions are defined similarly, except that instead of a list A = (A 1 , . . . , A n ), we have a set P = {P 1 , . . . , P n }. 5 Denote by \u03a0 n (s) the set of all s-separated partitions into n pieces. We now define the main fairness notion of interest in this paper.\nDefinition 3.1. For any positive integer k, the 1-out-of-k maximin share of agent i is defined as\nMMS k,s i := sup P\u2208\u03a0 k (s) min j\u2208[k] v i (P j ).\nWe omit s if it is clear from the context, and write MMS k i instead of MMS k,s i . Further, we refer to MMS n i as i's maximin share.\nFor instance, suppose that the land is a unit square, the family of usable pieces consists of all rectangles, and an agent has value 1 for the entire square, spread uniformly over the square. Then, for any s \u2264 1, the agent's 1-out-of-2 maximin share is (1 \u2212 s)/2.\nAs with cake cutting [Elkind et al., 2022], the supremum in Definition 3.1 can be replaced by a maximum. 6 An s-separated partition for which this maximum is attained is called a (1-out-of-k) maximin partition of agent i. 4 Distances with respect to different norms are not far from one another. For instance, the Euclidean \u21132 distance differs from the \u2113\u221e distance by only a factor of \u221a 2: d\u221e(p, q) \u2264 d2(p, q) \u2264 \u221a 2 \u2022 d\u221e(p, q) for any points p and q. 5 With a slight abuse of language, we use the term 'partition' for a set of pairwise-disjoint pieces, even though some land remains unallocated due to the separation and geometric constraints. 6 This requires defining a metric on the usable pieces and showing that U is compact in that metric space-see Appendix C in the work of Segal-Halevi et al. [2017]. ", "publication_ref": ["b30", "b53"], "figure_ref": [], "table_ref": []}, {"heading": "A General Impossibility Result", "text": "We begin by showing that, in contrast to one-dimensional cake cutting with separation [Elkind et al., 2022], for land division there may be no allocation that guarantees to all agents their maximin share or even any multiplicative approximation of it. This negative result does not depend on the geometric shape of the land or the usable pieces. The proof of this result uses the following geometric lemma.\nLemma 4.1. For every integer n \u2265 2, there exist n sets S 1 , . . . , S n consisting of n points each, such that (a) the \u2113 \u221e distance between any two points in the same set is greater than 1;\n(b) if we pick one representative point from each set, then some two representatives are at \u2113 \u221e distance less than 1 apart. Proof. 7 We measure distance in \u2113 \u221e norm unless specified otherwise. Consider a regular 2n-gon with side length 1 (in \u2113 2 norm) 8 and vertices 1, 2, . . . , 2n in this order, and position it on the plane so that none of its edges is parallel to either the x-axis or the y-axis; in particular, for n = 2, position it so that one of its vertices is its rightmost point and the two vertices adjacent to it are aligned vertically.\nLet each of S 1 , . . . , S n\u22121 consist of all odd-numbered vertices, and let S n consist of all even-numbered vertices (see Figure 1).\nIf n = 2, then the \u2113 \u221e distance between two vertices from the same set is \u221a 2, while the \u2113 \u221e distance between a vertex in S 1 and a vertex in S 2 is 1/ \u221a 2. Now, suppose n \u2265 3, and consider any set of representatives. If two representatives coincide, the distance between them is 0. Else, the representatives of S 1 , . . . , S n\u22121 are all distinct, so no matter which representative we choose for S n , there will be two representatives that correspond to adjacent vertices of the 2n-gon. Since the edge connecting these two representatives is not axis-parallel, the \u2113 \u221e distance between them is less than 1.\nIt remains to argue that the distance between any two points from the same set is more than 1. Fix two such points a and b. Note that for n > 2 the angles of the regular 2n-gon are obtuse. Hence, if a and b have exactly one vertex of the 2n-gon between them, by the law of cosines the \u2113 2 distance between a and b is greater than \u221a 2; otherwise, the \u2113 2 distance is even higher. It follows that the \u2113 \u221e distance between a and b is greater than 1. Hence, the sets S 1 , . . . , S n satisfy the claimed properties.\nTheorem 4.2. For every family U of usable pieces, integer n \u2265 2, separation parameter s > 0, and real number r > 0, there exists a land division instance with n agents in which no s-separated allocation gives every agent i a value of at least r \u2022 MMS n,s i .\nProof. Let S 1 , . . . , S n be sets as in Lemma 4.1. Let \u03b4 := \u03b4(n) > 0 be such that the \u2113 \u221e distance between any two points in the same set is at least 1 + \u03b4. We construct value-density functions for the n agents as follows.\nPick a positive \u03b5 < s\u03b4 6+4\u03b4 , and scale the axes so that whenever we pick one representative from each set, one of the pairwise distances among them is less than s \u2212 4\u03b5, while the distance between any two points in the same set is at least (s \u2212 4\u03b5)(1 + \u03b4). Since 6\u03b5+4\u03b5\u03b4 < s\u03b4, we have \u03b4 > 6\u03b5 s\u22124\u03b5 , and therefore (s\u22124\u03b5)(1+\u03b4) > (s\u22124\u03b5)\u2022 (s\u22124\u03b5)+6\u03b5 s\u22124\u03b5 = s+2\u03b5. For each agent i, we create n small 'pools' (i.e., usable shape S \u2208 U such that any two points in the same pool are at most \u03b5 apart) around points in S i , so that the agent values each pool at 1. Since the distance between any two points in S i is at least s + 2\u03b5, the triangle inequality implies that the distance between any two pools is at least s, so the maximin share of each agent is 1.\nSuppose for contradiction that there exists an allocation in which all agents receive a positive fraction of their maximin share. This means that every agent i receives a piece that overlaps at least one pool around a point in S i . By construction of S 1 , . . . , S n , there are two agents i and j such that i is allocated a piece that overlaps a pool with center x \u2208 S i , j is allocated a piece that overlaps a pool with center y \u2208 S j , and the distance between x and y is less than s \u2212 4\u03b5. Since the diameter of each pool is at most \u03b5, the triangle inequality implies that the distance between i's piece and j's piece is at most \u03b5 + (s \u2212 4\u03b5) + \u03b5 < s, i.e., these pieces are not s-separated. This yields the desired contradiction.", "publication_ref": ["b30"], "figure_ref": ["fig_0"], "table_ref": []}, {"heading": "Ordinal Approximation", "text": "Since no multiplicative approximation of the maximin share can be guaranteed, we instead consider an ordinal notion of approximation. That is, we ask if each agent can be guaranteed her 1-out-of-k maximin share for some k > n.\nWhile the negative result of Section 4 does not depend on geometric shape constraints, our positive results concern pieces that have a 'nice' geometric shape. Specifically, in Section 5.1, we first consider the scenario where the set U of usable pieces consists of 'fat' axis-aligned rectangles, i.e., rectangles whose length-to-width ratio is bounded by a constant (for example, if this constant is 1, the set U consists of axis-aligned squares). We then consider in Section 5.2 the more general setting where U consists of all axisaligned rectangles. Placing such constraints on the shape of each piece is useful in land allocation settings, particularly in urban regions. Note that when we restrict the shape of the usable pieces to be a (fat) rectangle, in our definition of the maximin share we also only consider s-separated partitions in which each piece is a (fat) rectangle.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Squares and fat rectangles", "text": "Given a rectangle R, we denote the lengths of its long and short side by long(R) and short(R), respectively. For any real number r \u2265 1, a rectangle R is called r-fat if long(R)/short(R) \u2264 r [Agarwal et al., 1995, Katz, 1997, Segal-Halevi et al., 2017. In particular, a 1-fat rectangle is a square.\nIn order to obtain maximin share guarantees, the high-level idea is to find a sufficiently large k such that if we consider the agents' 1-out-of-k maximin partitions, then it is always possible to select a representative piece from each partition in such a way that these representatives are s-separated. This will ensure that, by allocating to each agent her representative, we obtain an allocation that is s-separated and in which agent i receives value at least MMS k,s i . The following theorem shows that k = (2\u2308r\u2309 + 2)n \u2212 (3\u2308r\u2309 + 2) suffices; for a square (r = 1), this yields k = 4n \u2212 5. Note that our result does not place any assumptions on the shape of the land.\nIn what follows, we say that two pieces of land overlap if their intersection has a positive area, and that they are disjoint if their intersection has an area of zero.\nDefinition 5.1. Given n sets of geometric objects, S 1 , . . . , S n , where the objects in each set are pairwise-disjoint, a rainbow independent set is a selection of a single representative object from each set, such that the n representatives are pairwise-disjoint.\nRainbow independent sets have been studied in abstract graphs [Aharoni et al., 2019, Lv and Lu, 2021, Kim et al., 2022, Ma et al., 2022; here, we are interested in independent sets in the intersection graph, that is, the graph in which the vertices are the rectangles and the edges connect pairs of overlapping rectangles. Independent sets in intersection graphs have been studied for various families of shapes, particularly for axisparallel rectangles [Agarwal et al., 1998, Chan, 2004, Chalermsook and Chuzhoy, 2009, Adamaszek and Wiese, 2013, Chuzhoy and Ene, 2016, Chalermsook and Walczak, 2021, G\u00e1lvez et al., 2022, Mitchell, 2022, but without the 'rainbow' constraint.\nNaturally, when the n sets are larger, it is more likely that a rainbow independent set exists. We are interested in the smallest k (in terms of n) such that a rainbow independent set exists for every collection of n sets of size k each. Definition 5.2. Let U be a family of geometric objects and n \u2265 2 an integer. The n-th rainbow-independent-set number of U is the smallest integer k such that, for every collection of n sets, each consisting of k pairwise-disjoint objects from the family U , a rainbow independent set exists.\nFor every real number r \u2265 1 and integer n \u2265 2, denote by RISN(r, n) the n-th rainbow-independent-set number when U is the family of r-fat rectangles.\nLemma 5.3. For every real number r \u2265 1, RISN(r, 2) = \u2308r\u2309 + 2.\nProof. 9 We first show that RISN(r, 2) \u2264 \u2308r\u2309 + 2. To this end, given \u2308r\u2309 + 2 red and \u2308r\u2309+2 blue r-fat rectangles, we have to show that at least one red and one blue rectangle do not overlap each other. Assume for contradiction that every red rectangle overlaps all blue rectangles (and vice versa). Consider any two red rectangles. If their projections on the x-axis overlap, then, since the rectangles are disjoint, their projections on the y-axis do not overlap. Hence, we can rotate the plane so that one of the red rectangles (say, Red 1 ) lies entirely to the left of another red rectangle (say, Red 2 ). Since all blue rectangles overlap both Red 1 and Red 2 , their projections on the x-axis must contain the projection of the space between the right side of Red 1 and the left side of Red 2 . Now, since the blue rectangles are pairwise disjoint, they must lie in order vertically. Similar considerations imply that the red rectangles must lie in order horizontally; see Figure 2.\nIn each family, there are two extreme rectangles (top and bottom blue rectangle; leftmost and rightmost red rectangle); we call the other \u2308r\u2309 rectangles in each family middle rectangles. Let Red min (resp., Blue min ) be a red (resp., blue) rectangle with a smallest shorter side among all middle red (resp., blue) rectangles. Since every red rectangle overlaps all blue rectangles, Red min overlaps the \u2308r\u2309 middle blue rectangles and the space above and below them. Hence, the longer side of Red min is strictly longer than the shorter sides of these \u2308r\u2309 middle blue rectangles combined. This means that long(Red min ) > \u2308r\u2309 \u2022 short(Blue min ).\nBy a similar argument, we have long(Blue min ) > \u2308r\u2309 \u2022 short(Red min ).\nMoreover, by the definition of fatness,\nr \u2022 short(Blue min ) \u2265 long(Blue min ); r \u2022 short(Red min ) \u2265 long(Red min ).\nCombining the four inequalities gives long(Red min ) > long(Red min ), a contradiction. Hence, a rainbow independent set exists, so RISN(r, 2) \u2264 \u2308r\u2309 + 2.\nTo show that RISN(r, 2) \u2265 \u2308r\u2309 + 2, we exhibit two sets of r-fat rectangles, each of which contains \u2308r\u2309 + 1 pairwise-disjoint rectangles, such that no two representatives are disjoint. Consider the following two sets of rectangles. The vertical set contains the rectangles\n[i, i + 1] \u00d7 [1 \u2212 \u03b5, \u2308r\u2309 + \u03b5] for i \u2208 {0, . . . , \u2308r\u2309}, for some \u03b5 > 0. Analogously, the horizontal set contains the rectangles [1 \u2212 \u03b5, \u2308r\u2309 + \u03b5] \u00d7 [i, i + 1] for i \u2208 {0, . . . , \u2308r\u2309}.\nFor all rectangles, the ratio between the two side lengths is \u2308r\u2309 + 2\u03b5 \u2212 1; when \u03b5 is sufficiently small, this ratio is less than r, so all rectangles are r-fat. It can be verified that each horizontal rectangle overlaps all vertical rectangles.\nLemma 5.4. For every real number r \u2265 1 and integer n \u2265 2,\nRISN(r, n) \u2264 (2\u2308r\u2309 + 2)n \u2212 (3\u2308r\u2309 + 2).\nProof. We first prove that RISN(r, n + 1) \u2264 RISN(r, n) + (2\u2308r\u2309 + 2) for every r \u2265 1 and n \u2265 2. To this end, we claim that in any collection C of axis-aligned r-fat rectangles, there exists a rectangle in C that overlaps at most 2\u2308r\u2309 + 2 pairwise-disjoint rectangles from C. To prove this claim, let Q min be a rectangle with a smallest shorter side among all rectangles in C, and denote the length of this side by w. Mark all four corners of Q min . Additionally, on each of its two longer sides, 10 mark \u2308r\u2309 \u2212 1 additional points so that the distance between any two consecutive marks (including the two marks at the corners) is at most w; this is possible because Q min is r-fat, so long(Q min ) \u2264 r \u2022 w. The total number of marks is 2\u2308r\u2309 + 2.\nAssume for contradiction that at least 2\u2308r\u2309+3 pairwise-disjoint rectangles in C overlap Q min ; call the set of these pairwise-disjoint rectangles D. Let a be the number of pairs (Q, m) such that the mark m \u2208 Q min is contained in the interior of the rectangle Q \u2208 D, and let b be the number of pairs (Q, m) such that the mark m \u2208 Q min is on the border of the rectangle Q \u2208 D. Any rectangle Q \u2208 C that overlaps Q min must either contain at least one mark of Q min in its interior, or have at least two marks of Q min on its border and overlap the area of Q min adjacent to these marks. Hence, we have a+ b/2 \u2265 2\u2308r\u2309+ 3. On the other hand, since the rectangles in D are pairwise disjoint, each mark of Q min can only be contained in one rectangle from D (in which case it cannot be on the border of any other rectangle from D) or on the border of one or two rectangles from D (in which case it cannot be contained in any rectangle from D). Since the number of marks is 2\u2308r\u2309 + 2, it holds that a + b/2 \u2264 2\u2308r\u2309 + 2. This yields a contradiction and establishes the claim. Now, suppose we are given n + 1 sets, each of which contains RISN(r, n) + (2\u2308r\u2309 + 2) pairwise-disjoint rectangles. By our claim, among all of these rectangles, there exists a rectangle R that overlaps at most 2\u2308r\u2309 + 2 pairwise-disjoint rectangles. Remove R, the set that contains R, and all rectangles from the remaining n sets that overlap R. Each of the remaining n sets still contains at least RISN(r, n) rectangles, so it is possible to choose pairwise-disjoint representatives from these sets. Moreover, these representatives do not overlap R, so we may choose R as the representative of its set. It follows that RISN(r, n + 1) \u2264 RISN(r, n) + (2\u2308r\u2309 + 2). Combining this inequality with Lemma 5.3 gives\nRISN(r, n) \u2264 (2\u2308r\u2309 + 2)(n \u2212 2) + (\u2308r\u2309 + 2) = (2\u2308r\u2309 + 2)n \u2212 (3\u2308r\u2309 + 2), as claimed.\nFor the special case of squares we get RISN(1, n) \u2264 4n \u2212 5. Constructions similar to those in the proof of Theorem 4.2 show that 11 RISN(r, n) \u2265 n + 1 for all r. Thus the bound 4n \u2212 5 for squares is optimal for n = 2, but may be suboptimal for n \u2265 3.\nOpen question 5.5. What is the exact value of RISN(r, n) for every r \u2265 1 and n \u2265 3?\nIn particular, what is the n-th rainbow independent set number of squares for n \u2265 3?\nWe can finally return to our original problem.\nTheorem 5.6. Let r \u2265 1 be a real number. For every land division instance with n \u2265 2 agents, separation parameter s, and U being the set of axis-aligned r-fat rectangles, there exists an s-separated allocation in which every agent i receives value at least MMS k,s i , where k := (2\u2308r\u2309 + 2)n \u2212 (3\u2308r\u2309 + 2).\nProof. Given the separation parameter s, for every rectangle Q with side lengths u and v, define Wrap(Q, s) to be the rectangle with side lengths u + s and v + s and the same center as Q (i.e., wrap Q with a 'rectangle ring' of width s/2). Observe that if Q is r-fat, then so is Wrap(Q, s). Moreover, two rectangles Q 1 and Q 2 are s-separated if and only if Wrap(Q 1 , s) and Wrap(Q 2 , s) do not overlap (see Figure 3). Now, given an n-agent instance, we ask each agent to produce a 1-out-of-k maximin partition: this is a set of k axis-aligned rectangles that are s-separated. Then, we replace each rectangle Q with Wrap(Q, s), so each agent now has a set of k pairwise-disjoint rectangles. Lemma 5.4 implies that k \u2265 RISN(r, n), so the collection of partitions admits a rainbow independent set. Denote the elements of this set by Wrap(Q 1 , s), Wrap(Q 2 , s), . . . , Wrap(Q n , s), where Wrap(Q i , s) belongs to agent i's partition. We allocate the rectangle Q i to agent i. The rectangles Q 1 , . . . , Q n are s-separated, and every agent i receives value at least MMS k,s i , as desired. Figure 4.: Four partitions of a rectangular land into three axis-aligned rectangles. Each of these partitions can be a 1-out-of-3 maximin partition of an agent. The white space between the green rectangles has thickness s.", "publication_ref": ["b3", "b38", "b53", "b5", "b44", "b41", "b45", "b4", "b21", "b19", "b2", "b23", "b20", "b32", "b47"], "figure_ref": ["fig_1", "fig_2"], "table_ref": []}, {"heading": "Arbitrary rectangles", "text": "Next, we allow the allocated pieces to be arbitrary axis-aligned rectangles, and assume that the land itself is also an axis-aligned rectangle. Without loss of generality, we suppose further that the land is a square (otherwise, for positive results, a rectangular land can be completed to a square by attaching to it a rectangle that all agents value at 0). We scale the axes so that the land is the unit square\n[0, 1] \u00d7 [0, 1].\nThe arbitrary rectangle case differs from the fat rectangle case in two respects. First, without the separation requirement, the arbitrary rectangle case is much easier : the land can be projected onto a one-dimensional interval, for which full proportionality, and hence MMS n i , can be achieved [Dubins and Spanier, 1961]. In contrast, with the separation requirement, the arbitrary rectangle case is much harder : the rainbow-independentset technique of Theorem 5.6 does not yield a meaningful bound for arbitrary rectangles. Indeed, Lemma 5.3 implies that the rainbow-independent-set number of rectangles is infinite even for n = 2 (that is, even for an arbitrarily large k, there exist two size-k sets of pairwise-disjoint rectangles such that no two representatives are disjoint).\nA priori, for n \u2265 2, it is not even clear that there is a finite NRect(n) such that an MMS NRect(n) allocation among n agents always exists. We shall prove that NRect(n) is indeed finite for any n \u2265 2, and derive improved upper bounds on NRect(n) for small values of n. Towards this goal, we develop some new tools.\nIn what follows, for each agent we fix a 1-out-of-k maximin partition; see Figure 4 for some examples of such partitions when k = 3. For all i \u2208 N , we assume without loss of generality that MMS k i = 1, and that i's value is 0 outside the k rectangles in her maximin partition (the latter value being positive can only make it easier to satisfy the agent). We may also assume that i's value for each rectangle in her partition is exactly 1. Hence each agent has a value of exactly k for the land and should get an axis-aligned rectangle worth at least 1.\nWe refer to the k rectangles in an agent's (fixed) maximin partition as MMS-rectangles; every rectangular piece of land that is worth at least 1 to the agent is called a value-1 + rectangle. Due to our normalization, every MMS-rectangle is a value-1 + rectangle, but the converse is not necessarily true.\nDefinition 5.7. Consider an agent with a fixed 1-out-of-k maximin partition, and inte-gers p, q \u2265 1. A vertical p:q-rectangle cut is a rectangular strip of height 1 and width s that has at least p whole MMS-rectangles on its left and at least q whole MMS-rectangles on its right. A vertical p-rectangle stack is a sequence of p value-1 + rectangles such that each consecutive pair is separated by a vertical distance of at least s.\nIn Figure 4(a), the left vertical cut is a vertical 1:2-rectangle cut and the right one is a vertical 2:1-rectangle cut. In Figure 4(c), there is a vertical 3-rectangle stack. In Figure 4(d), the vertical cut is a 2:1-rectangle cut, and there is a vertical 2-rectangle stack.\nThe following lemma shows the existence of either a rectangle cut or a rectangle stack with appropriate parameters.\nLemma 5.8. Fix an agent and a 1-out-of-k maximin partition of this agent. For any integers 1 \u2264 p, q \u2264 k with p + q \u2264 k + 1, the agent has a vertical p:q-rectangle cut or a vertical (k \u2212 p \u2212 q + 2)-rectangle stack.\nProof. Starting from the left end of the cake, move a vertical knife of width s to the right. Stop the knife at the first point where there are at least p whole MMS-rectangles to its left-the knife may need to move outside the cake in order for this to happen, as in Figure 4(c) for any p. Consider two cases.\nCase 1 : There are at least q whole MMS-rectangles to the right of the knife. Then, the knife indicates a vertical p:q-rectangle cut. This is the case when p = q = 1 in Figures 4(a), (b), and (d).\nCase 2 : There are at most q \u2212 1 whole MMS-rectangles to the right of the knife. Then, by moving the knife slightly to the left, we obtain a cut for which there are at most p \u2212 1 MMS-rectangles entirely to its left, and at most q \u2212 1 MMS-rectangles entirely to its right. Therefore, at least k \u2212 p \u2212 q + 2 MMS-rectangles must intersect the knife itself. Since the knife width is s, these rectangles must lie in order vertically, with a vertical distance of at least s between consecutive rectangles. Hence, they form a vertical (k \u2212 p \u2212 q + 2)-rectangle stack. This is the case when p = q = 1 in Figure 4(c).\nIn the remainder of this section, given y, y \u2032 \u2208 [0, 1] with y \u2264 y \u2032 , we denote by R(y, y \u2032 ) the rectangle [0, 1] \u00d7 [y, y \u2032 ]. We now prove a positive result for two agents matching the lower bound implied by Theorem 4.2.\nTheorem 5.9. For any land division instance with a rectangular land and n = 2 agents, there exists an s-separated allocation in which each agent i receives an axis-aligned rectangle of value at least MMS 3 i .\nProof. Call the agents Alice and Bob. Take a 1-out-of-3 maximin partition of each agent, and consider two cases. Case 1 : Both agents have a vertical 1:1-rectangle cut. Assume without loss of generality that Alice's cut lies further to the left. Give the rectangle to its left to Alice and the one to its right to Bob. Then each agent receives an MMS-rectangle.\nCase 2 : At least one agent, say Alice, has no vertical 1:1-rectangle cut. By Lemma 5.8, she has a vertical 3-rectangle stack, as in Figure 4(c). For the i-th rectangle in this stack (counting from the bottom), denote the y-coordinates of its top and bottom sides by t i and b i , respectively. Note that t 1 + s \u2264 b 2 and t 2 + s \u2264 b 3 . If Bob's value for R(0, t 2 ) is at least 1, then give R(0, t 2 ) to Bob and R(b 3 , 1) to Alice. Otherwise, Bob values R(0, t 2 ) less than 1, so his value for R(b 2 , 1) is more than 2; in this case, give R(b 2 , 1) to Bob and R(0, t 1 ) to Alice. In both cases Alice's value is 1 and the pieces are s-separated.\nFor n \u2265 3 agents, the analysis becomes more complicated. As in classic cake-cutting algorithms (e.g., [Dubins and Spanier, 1961]), we would like to proceed recursively: give one agent a rectangle worth at least 1, and divide the rest of the land among the remaining n \u2212 1 agents. In particular, for n = 3, after allocating a piece to one agent, we would need to show that, for each of the remaining two agents, the rest of the land is worth at least 3, so that we can apply Theorem 5.9. In fact, to apply Theorem 5.9, we need an even stronger condition: each agent should have three s-separated value-1 + rectangles. However, the recursion step might yield a remainder land made of many chunks of such rectangles, where each chunk is worth less than 1. We therefore need to adapt our definitions and lemmas accordingly.\nDefinition 5.10. For integers p, q \u2265 1, a vertical p:q-value cut of an agent is a rectangular strip of width s such that the agent values the land on its left at least p and the land on its right at least q.\nNote that for any p and q, every vertical p:q-rectangle cut is also a vertical p:q-value cut, but the converse is not necessarily true.\nFor the following lemma, it is important that the agent's value function is normalized as explained earlier, i.e., the value of each MMS-rectangle is 1 and the value outside the MMS-rectangles is 0. A land-subset is a subset of the land after some pieces have possibly been allocated to other agents.\nLemma 5.11. Consider an agent with a fixed 1-out-of-k maximin partition of the land, who takes part in a division of a rectangular land-subset. Let V \u2264 k be the agent's value for the land-subset. For any integers p, q \u2265 1 with p + q \u2264 V , the agent has either a vertical p:q-value cut or a vertical \u2308(\u230aV \u230b \u2212 p \u2212 q)/2\u2309-rectangle stack.\nProof. Consider a vertical knife of width s moving over the land-subset from left to right. Denote by v L and v R the value of the land-subset to the left and to the right of the knife, respectively. As the knife moves, v L increases continuously from 0 to V . Stop the knife at the first moment when v L = p. There are two cases:\nCase 1 : v R \u2265 q.\nThen, the knife indicates a vertical p:q-value cut.\nCase 2 : v R < q. By moving the knife slightly to the left, we obtain a cut with v L < p and v R < q. The value covered by the knife itself must then be more than V \u2212 p \u2212 q. By the normalization assumption, all value comes from MMS-rectangles, and the value of each MMS-rectangle is 1. Hence, the value covered by the knife is made of 'chunks' of value at most 1 each, with a distance of at least s between any two chunks. Since the knife width is s, these chunks must lie in order vertically, with a vertical distance of at least s between consecutive chunks. We now show that these chunks can be grouped into m s-separated rectangles of value at least 1 each, where m \u2265 \u2308(\u230aV \u230b \u2212 p \u2212 q)/2\u2309.\nStarting from the bottom, collect the chunks until the total value collected so far is at least 1, and form a rectangle containing the collected chunks. Keep collecting chunks and forming rectangles in this way, until the total value of the remaining chunks is less than 1. Let m be the number of rectangles created in this manner. Since the value of each chunk is at most 1, the value of each rectangle is less than 2, while the remaining value is less than 1. Therefore, the total value covered by the knife is less than 2m + 1. Hence, 2m + 1 > V \u2212 p \u2212 q. Since m is an integer, this implies 2m \u2265 \u230aV \u230b \u2212 p \u2212 q and therefore m \u2265 \u2308(\u230aV \u230b \u2212 p \u2212 q)/2\u2309.\nThe following lemma establishes a weaker bound than Theorem 5.9 does; however, it applies to an arbitrary land-subset, and hence (unlike Theorem 5.9) can be used as part of a recursive argument. Its proof is essentially identical to the proof of Theorem 5.9: the only difference is that we first look for a vertical 1:1-value cut, and if we fail to find one, we invoke Lemma 5.11 to establish the existence of a vertical 3-rectangle stack.\nLemma 5.12. Consider a rectangular land-subset and n = 2 agents who value it at least 7 each. There is an s-separated allocation in which each agent receives an axisaligned rectangle of value at least 1.\nProof. We consider two cases.\nCase 1 : Both agents have a vertical 1:1-value cut. Take the cut to the left, give the rectangle to its left to the cutter, and the rectangle to its right to the other agent.\nCase 2 : At least one agent, say Alice, has no vertical 1:1-value cut. By Lemma 5.11, she has a vertical 3-rectangle stack, so we can proceed as in Case 2 of Theorem 5.9.\nLet V req (n) be the smallest value of V such that if each of n agents values the landsubset at V or higher, then there is always an s-separated allocation of this land-subset in which each agent's value for her share is at least 1. Obviously V req (1) = 1, and by Lemma 5.12 we know that V req (2) \u2264 7. We can now provide a finite (exponential) MMS approximation for every n.\nTheorem 5.13. For any n \u2265 2, given any land division instance with a rectangular land and n agents, there exists an s-separated allocation in which each agent i receives an axis-aligned rectangle with value at least MMS k i , where k = \u230817 \u2022 2 n\u22123 \u2309. Proof. By our normalization, it suffices to prove that V req (n) \u2264 17 \u2022 2 n\u22123 for all n \u2265 2. We proceed by induction on n. The base case n \u2264 2 is handled by Lemma 5.12. We assume that the claim is true for n \u2212 1 and prove it for n. Let W := V req (n \u2212 1). We will argue that V req (n) \u2264 max{2W, W + 2n + 4}. From this, it follows that V req (3) \u2264 17, and\nV req (n) \u2264 17 \u2022 2 n\u22123 for all n \u2265 3, since 2n + 4 \u2264 17 \u2022 2 n\u22124 for all n \u2265 4.\nGiven a rectangular land-subset and n agents who value it at V each, where V \u2265 max{2W, W + 2n + 4}, consider two cases.\nCase 1 : All agents have a vertical 1:W -value cut. Implement the leftmost cut, give the rectangle to its left to the leftmost cutter (breaking ties arbitrarily), and divide the rectangle to its right among the remaining n \u2212 1 agents using the induction hypothesis.\nCase 2 : At least one agent, say Alice, has no vertical 1:W -value cut. Then by Lemma 5.11, she has a vertical d-rectangle stack, where\nd \u2265 \u230aV \u230b \u2212 W \u2212 1 2 \u2265 \u230aW + 2n + 4\u230b \u2212 W \u2212 1 2 = n + 2.\nDenote the y-coordinates of the bottom sides (resp., top sides) of the value-1 + rectangles in the stack, from bottom to top, by (b j ) j\u2208[d] (resp., (t j ) j\u2208 [d] ). Note that t j +s \u2264 b j+1 for all j \u2208 [d \u2212 1]. In the illustration below, d = 5 and s is at most the height of the white space between each pair of consecutive green rectangles.\nb 1 b 2 b 3 b 4 b 5 t 1 t 2 t 3 t 4 t 5\nFor all j \u2208 [d], let H(j) be the set of agents (including Alice) who value R(0, t j ) at least W . We have H(j) \u2286 H(j \u2032 ) whenever j \u2032 > j, and so the sequence (|H(j We consider three subcases based on the value of |H(z)| = |H(z + 1)|. For brevity we set R \u2212 := R(0, t z ) and R + := R(b z+1 , 1).\n)|) j\u2208[d] is non-decreasing. Since 0 \u2264 |H(j)| \u2264 n while d \u2265 n + 2,\n\u2022 |H(z)| = |H(z + 1)| = 0. In this case, give R \u2212 to Alice; she values it at least 1, since it contains her value-1 + rectangle R(b 1 , t 1 ). Divide R + among the other n \u2212 1 agents. All agents value R(0, t z+1 ) less than W , so they value R + at least V \u2212 W \u2265 2W \u2212 W = W .\n\u2022 |H(z)| = |H(z + 1)| \u2208 {1, . . . , n \u2212 1}. In this case, divide R \u2212 among the agents in H(z) and divide R + among the remaining agents; these latter agents value R(0, t z+1 ) less than W , so they value R + more than V \u2212 W \u2265 W , since V \u2265 2W .\n\u2022 |H(z)| = |H(z +1)| = n. Give R + to Alice; she values it at least 1, since it contains her value-1 + rectangle R(b d , t d ). Divide R \u2212 among the other n \u2212 1 agents, who value it at least W .\nIn all cases, each subdivision involves at most n \u2212 1 agents, and these agents value their land-subset at least W , so by the induction hypothesis each of them receives a value of at least 1.\nBy adjusting the argument in the proof of Theorem 5.13, we can obtain stronger bounds for n = 3 and n = 4; in particular, we can guarantee each agent i a piece of value at least MMS 14 i and MMS 24 i , respectively. The details can be found in Appendix A.\nThe approximation factor in Theorem 5.6 for fat rectangles, which is linear in n, is much better than the factor in Theorem 5.13 for arbitrary rectangles, which is exponential in n. This raises the question of whether the MMS with respect to fat rectangles can itself be used as an approximation for the MMS with respect to general rectangles. In Appendix B we show that the answer to this question is negative: for any finite r, the MMS with respect to r-fat rectangles does not provide any positive multiplicative approximation to the MMS with respect to general rectangles.", "publication_ref": ["b28", "b28"], "figure_ref": [], "table_ref": []}, {"heading": "Computing Maximin Allocations", "text": "", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "Computational model", "text": "The results in Section 5 are stated in terms of approximation guarantees. To convert them into algorithms, we need to formally define our computational model. To do so, we propose a natural modification of the classic (one-dimensional) cake-cutting model by Robertson and Webb [1998] for the two-dimensional setting.\nConsider an axis-aligned rectangle We can now revisit the proofs of Theorems 5.9 and 5.13 and check if they can be converted into algorithms that use Cut and Eval queries. One can see that these proofs are constructive and their basic steps can be expressed in terms of these queries: a p:q-value cut can be implemented by two Cut queries, and agents' values for rectangles of the form R(x, y) can be determined using Eval queries.\nL = [a 0 , a 1 ] \u00d7 [b 0 , b 1 ],\nHowever, these algorithms use the agents' 1-out-of-k maximin partitions as their starting points, and it is not clear if such partitions are efficiently computable. Indeed, even in the one-dimensional case, there is no algorithm that always computes a maximin partition of an agent using finitely many queries, and the best known solution is an \u03b5-additive approximation in time O(n log(1/\u03b5)) [Elkind et al., 2022, Thm. 3.2, Cor. 3.6]. For the two-dimensional case, even an \u03b5-additive approximation seems challenging.", "publication_ref": ["b50"], "figure_ref": [], "table_ref": []}, {"heading": "Guillotine partitions with separation", "text": "To circumvent this difficulty, we focus on maximin partitions with a special structure, namely, guillotine partitions, which have been studied extensively in computational geometry [Gonzalez et al., 1994, Christofides and Hadjiconstantinou, 1995, Ackerman et al., 2006, Messaoud et al., 2008, Horev et al., 2009, Asinowski et al., 2014, Russo et al., 2020. Formally, guillotine partitions are defined recursively, as follows. \nP i \u2286 L for each i \u2208 [t]\n, and a separation parameter s. We say that P forms an s-separated guillotine partition of L if one of the following three conditions holds:\n\u2022 t = 1 and P 1 \u2286 L;\n\u2022 there exists an a with a 0 < a < a 1 \u2212 s and a partition of P into two disjoint non-empty collections of rectangles P 1 and P 2 such that P Intuitively, an s-separated guillotine partition is obtained by a sequence of cuts, where each cut splits a rectangle into two s-separated rectangles. All partitions in Figure 4 are guillotine partitions, while Figure 5 provides an example of an s-separated partition that is not a guillotine partition.", "publication_ref": ["b33", "b22", "b1", "b46", "b34", "b7", "b51"], "figure_ref": ["fig_6"], "table_ref": []}, {"heading": "Maximin allocations with guillotine partitions", "text": "Let GuMMS k,s i denote the maximin share of agent i with respect to s-separated guillotine partitions into k parts (it is defined similarly to the MMS in Definition 3.1, except that the supremum is over all s-separated guillotine partitions P). We will show that, for every constant k, it is possible to approximate GuMMS k,s i up to an additive factor of \u03b5, in time O((log(1/\u03b5)) k ).\nWe define a guillotine tree to be a rooted binary tree in which each non-leaf node is labelled with either 'H' (for 'Horizontal') or 'V' (for 'Vertical'). Each guillotine tree with k leaf nodes represents a way in which a rectangular land-subset can be partitioned into k parts using guillotine cuts. 12 For example, the tree in Figure 6 represents partitions into k = 4 parts in which the rectangle is first cut horizontally, then the top part is cut horizontally and the bottom part is cut vertically. Our algorithm works by checking all guillotine trees with k leaves and finding one that yields an approximately optimal partition. We will need the following lemma as a subroutine. Given a value function and a tree T , denote by T -MMS k,s the maximin share with respect to s-separated partitions into k parts according to the tree T . Lemma 6.2. Let k be a constant. Given a rectangular land-subset L, a value function v such that v(L) = 1, a guillotine tree T with k leaves, and real numbers r \u2265 0 and \u03b5 > 0, it is possible to decide in time O((log(1/\u03b5)) k\u22121 ) which of the following two options holds:\n\u2022 T -MMS k,s \u2265 r; \u2022 T -MMS k,s < r + k\u03b5.\n(At least one option must hold; if both options hold, it suffices to return one of them.) If we return the first option, we can output an s-separated partition such that each part has value at least r as well.\nProof. We proceed by induction on k. The base case k = 1 holds trivially, as no cut needs to be made. Let k \u2265 2. Assume without loss of generality that the first cut according to T is vertical, and the left and right subtree has k 0 and k \u2212 k 0 leaves, respectively, for some k 0 \u2208 {1, . . . , k \u2212 1}. For each vertical cut C, denote by Left(C) the rectangle to the left of C and by Right(C) the rectangle to its right.\nWe place a cut C of width s such that v(Left(C)) = v(L)/2, and recurse on both sides using the inductive hypothesis. Denote by T 0 and T 1 the left and right subtree of T , respectively, and let \u03b2 0 := T 0 -MMS k 0 ,s (Left(C)) and\n\u03b2 1 := T 1 -MMS k\u2212k 0 ,s (Right(C)).\nCase 1 : \u03b2 0 \u2265 r and \u03b2 1 \u2265 r. Then we return that T -MMS k,s \u2265 r.\nCase 2 : \u03b2 0 < r + k 0 \u03b5 and \u03b2 1 < r + (k \u2212 k 0 )\u03b5. In this case, both values are less than r + k\u03b5. Moving the cut to the left will only make the MMS on the left smaller, and moving the cut to the right will only make the MMS on the right smaller. Therefore, there is no guillotine partition according to T with MMS at least r + k\u03b5, so we return that T -MMS k,s < r + k\u03b5.\nCase 3\n: Either \u03b2 0 < r + k 0 \u03b5 while \u03b2 1 \u2265 r, or \u03b2 0 \u2265 r while \u03b2 1 < r + (k \u2212 k 0 )\u03b5.\nIn the former case, we place a cut C \u2032 of width s such that v(Left(C \u2032 )) = 3 \u2022 v(L)/4 (that is, the average between v(L)/2 and v(L)), and repeat the same procedure. Analogously, in the latter case, we place a cut C \u2032 of width s such that v(Left(C \u2032 )) = v(L)/4 (that is, the average between v(L)/2 and 0), and repeat the same procedure.\nWe continue until either we return that T -MMS k,s \u2265 r or that T -MMS k,s < r + k\u03b5, or we have placed two cuts, C 1 and C 2 , such that\n(i) C 1 is to the left of C 2 , and v(Left(C 2 )) \u2212 v(Left(C 1 )) < \u03b5; (ii) T 0 -MMS k 0 ,s (Left(C 1 )) < r + k 0 \u03b5 (while T 1 -MMS k\u2212k 0 ,s (Right(C 1 )) \u2265 r); (iii) T 1 -MMS k\u2212k 0 ,s (Right(C 2 )) < r + (k \u2212 k 0 )\u03b5 (while T 0 -MMS k 0 ,s (Left(C 2 )) \u2265 r).\nNote that if we have not terminated, we will reach this situation after placing O(log(1/\u03b5)) cuts. By conditions (i) and (ii), T 0 -MMS k 0 ,s (Left(C 2 )) < (r+k 0 \u03b5)+\u03b5 \u2264 r+k\u03b5. Moreover, by condition (iii), T 1 -MMS k\u2212k 0 ,s (Right(C 2 )) < r + k\u03b5, too. Hence, we may return that T -MMS k,s < r + k\u03b5 in this situation.\nEach recursive call takes time O((log(1/\u03b5)) k\u22122 ) by the inductive hypothesis, and the number of recursive calls is O(log(1/\u03b5)), so the total running time is O((log(1/\u03b5)) k\u22121 ). In the case where we return T -MMS k,s \u2265 r, our procedure allows us to construct the associated partition as well.\nWe are now ready to prove our main theorem. Theorem 6.3. Let k be a constant. Given a rectangular land-subset L, a value function v normalized so that v(L) = 1, and a real number \u03b5 > 0, we can compute an s-separated guillotine partition of L into k rectangles such that the value of each part is at least\nGuMMS k,s \u2212 \u03b5 in time O((log(1/\u03b5)) k ).\nProof. Let B be the interval consisting of possible values of GuMMS k,s ; initially, B = [0, 1]. While the length of B = [x, y] is greater than \u03b5, we proceed as follows. Let z be the midpoint of B. Applying Lemma 6.2 over all (constant number of) guillotine trees T with k leaves and using \u03b5/(4k) instead of \u03b5 in the lemma statement, we can determine in time O((log(4k/\u03b5)) k\u22121 ) = O((log(1/\u03b5)) k\u22121 ) which of the following two options holds:\n(i) T -MMS k,s \u2265 z for some T ; (ii) T -MMS k,s < z + \u03b5/4 for all T .\nIf (i) holds, we can shrink B to [z, y], and by Lemma 6.2, we can also find an sseparated partition such that each part has value at least z. On the other hand, if (ii) holds, we can shrink B to [x, z + \u03b5/4]. We repeat this procedure as long as the length of B is greater than \u03b5. In each iteration, the length of B is reduced to at most 3/4 times the previous length, and we have an s-separated partition such that each part has value at least the smallest value in B. 13 After O(log(1/\u03b5)) iterations, the length of B becomes at most \u03b5, and we output the smallest value in B along with the associated partition. The guarantee follows from the definition of B, and the running time is\nO((log(1/\u03b5)) k\u22121 \u2022 log(1/\u03b5)) = O((log(1/\u03b5)) k ).\nRemark 6.4. Lemma 6.2 assumes that the usable shapes are arbitrary rectangles. However, it can also be adapted to the setting in which the usable shapes are squares (or, more generally, fat rectangles). The only place in the proof that needs to be modified is the induction base. For k = 1, given a rectangular land-subset L, instead of evaluating L and comparing its value to r, we compute (approximately) the highest value of a square contained in L, and compare it to r.\nTo compute the highest value of a square contained in L, partition L along its longer side into d := \u23082/\u03b5\u2309 strips of value at most \u03b5/2. Assume without loss of generality that the longer side is parallel to the y axis. Let y 1 , . . . , y d\u22121 be the y-coordinates of the cuts, and let x 0 be the leftmost coordinate of the rectangle. For each j \u2208 [d \u2212 1], evaluate the square with lower-left corner at (x 0 , y j ) and side length equal to the shorter side of L, provided that the square is contained in L. Moreover, evaluate the topmost and bottommost rectangles contained in L with side length equal to the shorter side of L.\nOf the (at most d + 1) resulting squares, let R * be a square with the highest value.\nIf v(R * ) \u2265 r, then we can return that T -MMS 1,s \u2265 r. Suppose that v(R * ) < r. By construction, for every square R \u2286 L, there is an evaluated square R \u2032 \u2286 L such that v(R \\ R \u2032 ) \u2264 \u03b5/2. Therefore, v(R) \u2212 v(R * ) \u2264 \u03b5/2, and so v(R) \u2264 r + \u03b5/2 < r + \u03b5. Hence, we can return that T -MMS k,s < r + \u03b5 = r + k\u03b5.\nThe induction step of Lemma 6.2 remains unchanged. Moreover, once we plug the adapted Lemma 6.2 into Theorem 6.3, its proof works as is. Therefore, both Lemma 6.2 and Theorem 6.3 hold whenever U is the family of squares, fat rectangles, or arbitrary rectangles, with an extra factor of O(1/\u03b5) in the running time due to the induction base.", "publication_ref": [], "figure_ref": ["fig_8"], "table_ref": []}, {"heading": "General partitions", "text": "How much value do we lose by considering guillotine partitions instead of general ones? Figure 5 illustrates that this loss is non-trivial. To obtain a bound on the approximation ratio, we relate it to the guillotine separation problem studied in computational geometry. Definition 6.5. Let S be a set of pairwise-disjoint geometric objects, and P be a partition of the plane. The S-value of P is the number of parts of P that contain at least one whole object from S.\nThe guillotine-separation number of S is the largest S-value of a (0-separated) guillotine partition.\nIn general, the guillotine-separation number of S might be smaller than |S|. For example, if S is the set of rectangles in Figure 5, then since every guillotine partition must cut through at least one rectangle, the guillotine-separation number is at most 3 (it is easy to see that it is exactly 3). Definition 6.6. Let U be a family of geometric objects and m \u2265 2 an integer. The m-th guillotine-separation number of U , denoted GuSN(U, m), is the smallest guillotineseparation number of a subset of m objects from U .\nThe first in-depth study of guillotine-separation numbers was done by Pach and Tardos [2000], who proved upper and lower bounds for GuSN(U, m) for various families U . Abed et al. [2015] \nand proved that\nGuSN(axis-parallel rectangles, m) \u2265 m 1 + log 2 m = m log 2 (2m)(2)\nand GuSN(axis-parallel rectangles, m) \u2265 m log 3 (m + 2)\n.\nThe exact guillotine-separation numbers for squares and rectangles are still open.\nWe now relate the guillotine-separation number to the maximin share.\nTheorem 6.7. Fix the family U of usable pieces (either axis-parallel squares or axisparallel rectangles). Let GuMMS k,s i denote the maximin share of agent i with respect to s-separated guillotine partitions into k parts. Let m be an integer for which GuSN(U, m) \u2265 k. It holds that GuMMS k,s i \u2265 MMS m,s i .\nProof. Let S be the set of rectangles in a 1-out-of-m s-separated maximin partition of agent i. Replace each rectangle Q \u2208 S with Wrap(Q, s) (see Theorem 5.6). Since the original rectangles are s-separated, the wrapped rectangles are pairwise-disjoint (see Figure 3). Since GuSN(U, m) \u2265 k, there exists a guillotine partition in which at least k parts contain a whole rectangle from S; denote these whole rectangles by Wrap(Q 1 , s), . . . , Wrap(Q k , s). The rectangles Q 1 , . . . , Q k are s-separated, and the value of each of them is at least MMS m,s i . Therefore, GuMMS k,s i \u2265 MMS m,s i , as claimed.\nUsing the aforementioned lower bounds (1) and ( 2) of Khan and Pittu [2020], we get: \nk \u2265 2, GuMMS k,s i \u2265 MMS \u2308h \u22121 (k)\u2309,s i .\nNote that 14 the inverse of the function h satisfies h \u22121 (k) \u2208 O(k log k).\nCombining Corollary 6.8 with Theorem 6.3, we obtain that, for any constant k, we can compute MMS 40k,s i (for squares) or MMS \u2308h \u22121 (k)\u2309,s i (for rectangles) up to an additive error of \u03b5 in time O((log(1/\u03b5)) k+1 ) (for squares) or O((log(1/\u03b5)) k ) (for rectangles). We can then apply Theorem 5.13 to obtain the following corollary. Corollary 6.9. Let n \u2265 2 be a constant, and let m := \u2308h \u22121 (17 \u2022 2 n\u22123 )\u2309, where h is defined as in Corollary 6.8. For any \u03b5 > 0, we can compute in time polynomial in log(1/\u03b5) an s-separated allocation among n agents, in which each agent i receives an axis-parallel rectangle with value at least MMS m,s i \u2212 \u03b5.\nProof. We first use Theorem 6.3 to compute for each agent i an s-separated guillotine partition into k parts such that i's value for each part is at least GuMMS k,s i \u2212 \u03b5 in time O((log(1/\u03b5)) k ), where k = 17 \u2022 2 n\u22123 . We normalize each agent's value for each of her MMS-rectangles to 1 and the value outside these rectangles to 0, and apply Theorem 5.13 on the resulting instance. 15 Theorem 5.13 guarantees that agent i receives value at least GuMMS k,s i \u2212 \u03b5. By Corollary 6.8(b), this value is at least MMS m,s i \u2212 \u03b5.\nSimilarly, using Theorem 5.6 and Corollary 6.8(a), we get:\nCorollary 6.10. Let n \u2265 2 be a constant, and let m := 40 \u2022 (4n \u2212 5). For any \u03b5 > 0, we can compute in time polynomial in log(1/\u03b5) an s-separated allocation among n agents, in which each agent i receives an axis-parallel square with value at least MMS m,s i \u2212 \u03b5.\nIn Appendix C, we present two alternative algorithms for approximating the maximin share. These algorithms are based on discretization: we partition the land into horizontal and vertical strips of value at most \u03b5, and find a maximin partition with respect to the rectangles with corners at the grid points. This technique works only when the usable shapes are the rectangles. For any integer k \u2265 2 and real number \u03b5 > 0, we show how to compute the following in time polynomial in k and 1/\u03b5:\n\u2022 A guillotine partition into k rectangles, each of which has a value of at least GuMMS k,s i \u2212 \u03b5 (Appendix C.1);\n\u2022 A general partition into k rectangles, each of which has a value of at least MMS 3k,s i \u2212 \u03b5 (Appendix C.2). This algorithm uses a recent algorithm for the problem of maximum independent set of rectangles [G\u00e1lvez et al., 2022].", "publication_ref": ["b49", "b0", "b40", "b32"], "figure_ref": ["fig_6", "fig_6", "fig_2"], "table_ref": []}, {"heading": "Conclusion and Future Work", "text": "In this paper, we continue the quest of bringing the theory of fair division closer to practice by investigating fair land allocation under separation constraints. We establish bounds on achievable maximin share guarantees for a variety of shapes and develop a number of new techniques in the process; some of our techniques may be independently interesting from a computational geometry perspective. While our maximin share bound for fat rectangles is polynomial in the number of agents n (Theorem 5.6), the one for arbitrary rectangles is exponential (Theorem 5.13). Improving the latter bound, perhaps to a polynomial bound, is a challenging question which will likely require novel geometric insights. For future work, it would also be interesting to test our algorithms on real land division data (see, e.g., the work of Shtechman et al. [2022]) as well as to explore the possibilities of efficient computation with non-guillotine or other types of cuts. Finally, one could try to extend our results to the more general setting where different agents may have unequal entitlements to the land. 16 We now proceed to four agents. Recall that, by the proof of Theorem 5.13, V req (3) \u2264 17.\nTheorem A.2. For any land division instance with a rectangular land and n = 4 agents, there exists an s-separated allocation in which each agent i receives an axisaligned rectangle with value at least MMS 24 i .\nProof. We consider two cases. Case 1 : All agents have a vertical 3:3-rectangle cut. Cut the cake at a median of the four cuts. Divide the rectangles to the left (resp., right) between the two leftmost (resp., rightmost) cutters using Theorem 5.9.\nCase 2 : At least one agent, say Alice, has no vertical 3:3-rectangle cut. Then by Lemma 5.8, she has a vertical d-rectangle stack, where d \u2265 20 > 16.\nFor 1 \u2264 j \u2264 d, define t j and b j in the same way as in Theorem A.1, and for z \u2208 {2, 3}, denote by H(j, z) the set of agents who value R(0, t j ) at least V req (z). Note that |H(j, z)| is non-decreasing in j and non-increasing in z.\nSimilarly to Theorem A.1, we look for equal consecutive values of H, i.e., values j such that H(j, z) = H(j + 1, z). In the following claims, our goal is to partition the land into two s-separated rectangles such that some \u2113 \u2208 [n \u2212 1] agents value one rectangle at least V req (\u2113) and the other n \u2212 \u2113 agents value the other rectangle at least V req (n \u2212 \u2113), so that the instance reduces into two smaller instances.\nClaim 1. If |H(j, z)| = |H(j + 1, z)| = z for some 1 \u2264 j \u2264 d \u2212 1 and z \u2208 {2, 3}, then we are done.\nProof. The condition implies that H(j, z) = H(j + 1, z). The z agents in H(j, z) value R(0, t j ) at least V req (z). The other n \u2212 z agents are not in H(j + 1, z), so they value R(0, t j+1 ) and therefore R(0, b j+1 ) less than V req (z); this implies that they value R(b j+1 , 1) more than 24 \u2212 V req (z). One can check that 24 \u2212 V req (z) \u2265 V req (n \u2212 z) for all 1 \u2264 z \u2264 n \u2212 1. We can therefore allocate R(0, t j ) to the first z agents and R(b j+1 , 1) to the remaining n \u2212 z agents.\nClaim 2. If |H(j, z)| = |H(j + 1, z)| = z \u2212 1 for some 1 \u2264 j \u2264 d \u2212 1 and z \u2208 {2, 3}, then we are done.\nProof. Similarly to Claim 1, the z \u2212 1 agents in H(j, z) value R(0, t j ) at least V req (z) \u2265 V req (z \u2212 1), and the other n \u2212 z + 1 agents value R(b j+1 , 1) more than 24 \u2212 V req (z). We have 24 \u2212 V req (2) \u2265 24 \u2212 7 = 17 \u2265 V req (3), so 24 \u2212 V req (z) \u2265 V req (n \u2212 z + 1) for all z \u2208 {2, 3}. We can allocate R(0, t j ) to the z \u2212 1 agents in H(j, z) and R(b j+1 , 1) to the remaining n \u2212 z + 1 agents. Claim 3. If |H(j, 2)| = |H(j + 1, 2)| = 0 for some 1 \u2264 j \u2264 d \u2212 1, then we are done.\nProof. All n agents value R(0, t j+1 ) and hence R(0, b j+1 ) less than V req (2), so they value R(b j+1 , 1) more than 24 \u2212 V req (2) \u2265 V req (3). We allocate R(0, t j ) to Alice, who values it at least 1, and R(b j+1 , 1) to the other three agents. Proof. The claim holds trivially for \u03b5 \u2265 1/2, so we assume \u03b5 < 1/2, which implies \u03b5 < r.\nRecall that we measure distance in \u2113 \u221e norm. If the statement is true for \u03b5 = \u03b5 \u2032 for some value \u03b5 \u2032 , it is also true for all \u03b5 > \u03b5 \u2032 . Hence, it suffices to prove the statement when \u03b5 is sufficiently small so that s + 2s\u03b5/r < 1.\nThe value is uniformly distributed in the two strips shown in Figure 7, whose value is 1 each. Specifically, the bottom strip is the rectangle [0, s] \u00d7 [0, s\u03b5/r] and the top strip is the rectangle\n[0, s] \u00d7 [s + s\u03b5/r, s + 2s\u03b5/r].\nSince the distance between the two strips is exactly s, we have MMS 2 [\u221e] = 1. On the other hand, MMS 2 [r] \u2264 2\u03b5. To see this, consider two s-separated r-fat rectangles, and assume that each of them has a positive value. Since each strip has width s and height s\u03b5/r < s, the two rectangles cannot overlap the same strip. Hence, one of the rectangles-call it R-must overlap only the bottom strip. If R has height greater than 2s\u03b5/r, then its distance to any point in the top strip is less than s, which is impossible as the other r-fat rectangle must overlap the top strip. So the height of R is at most 2s\u03b5/r. Since R is r-fat, its width is at most 2s\u03b5, which is a 2\u03b5 fraction of the width of the bottom strip. This means that the value of R is at most 2\u03b5, and therefore MMS 2 [r] \u2264 2\u03b5.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "C. Alternative Algorithms for MMS Approximation", "text": "", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "C.1. Guillotine partitions", "text": "The following theorem shows that we can compute a nearly optimal s-separated guillotine maximin partition efficiently. Our algorithm proceeds by discretizing the land and finding an optimal s-separated guillotine partition that is consistent with this discretization-such a partition can be computed by dynamic programming.\nTheorem C.1. Consider a rectangular land-subset L, an agent i with v i (L) = 1, a separation parameter s > 0, and a positive integer k. Let V := GuMMS k,s i . Then, given \u03b5 > 0, s, and k, we can compute an s-separated guillotine partition of L into k parts such that i's value for each part is at least V \u2212 \u03b5, in time polynomial in k and 1/\u03b5.\nProof. The algorithm proceeds in two steps.\nStep 1: Discretization. Assume that L = [a 0 , a 1 ] \u00d7 [b 0 , b 1 ]. Let \u03b4 = \u03b5/4, and let d = \u23081/\u03b4\u2309. Using Cut queries, we cut L into d vertical strips such that i's value for each strip is at most \u03b4; let x 0 = a 0 , x 1 , . . . , x d\u22121 , x d = a 1 be the respective cut points. Similarly, using Cut queries, we can cut L into d horizontal strips such that i's value for each strip is at most \u03b4; let y 0 = b 0 , y 1 , . . . , y d\u22121 , y d = b 1 be the respective cut points.\nLet G = {(x i , y j ) : 0 \u2264 i, j \u2264 d} be the set of grid-points, i.e., intersection points of the cuts. Define a grid-rectangle as a rectangle whose corners are in G, that is, a rectangle [x i , x i \u2032 ] \u00d7 [y j , y j \u2032 ] for some 0 \u2264 i < i \u2032 \u2264 d and 0 \u2264 j < j \u2032 \u2264 d. We now show that, by limiting our attention to grid-rectangles, we lose a value of at most \u03b5.\nClaim 5. For each s-separated guillotine partition with minimum value V , there exists an s-separated guillotine partition such that all parts are grid-rectangles, and the value of every part is at least V \u2212 \u03b5.\nProof of Claim 5. We first prove that, for every axis-parallel rectangle R \u2286 L, there exists a grid-rectangle I(R) \u2286 R such that v i (I(R)) \u2265 v i (R) \u2212 \u03b5. Consider a rectangle R = [x, x \u2032 ] \u00d7 [y, y \u2032 ]. Find the smallest value of i such that x i \u2265 x and the largest value of i \u2032 such that x i \u2032 \u2264 x \u2032 . Similarly, find the smallest value of j such that y j \u2265 y and the largest value of j \u2032 such that y j \u2032 \u2264 y \u2032 . Denote the grid-rectangle [x i , x i \u2032 ] \u00d7 [y j , y j \u2032 ] by I(R). By construction, v i (I(R)) \u2265 v i (R) \u2212 4\u03b4 = v i (R) \u2212 \u03b5, since we removed four 'borders' of value at most \u03b4 each. Now, construct a new partition in which each rectangle R in the original partition is replaced by its subset grid-rectangle I(R). Clearly, the new partition is still s-separated, still a guillotine partition, contains only grid-rectangles, and the value of every part in this partition is at least V \u2212 \u03b5.\nStep 2: Dynamic program. For each 4-tuple of indices i, i \u2032 , j, j \u2032 with 0 \u2264 i < i \u2032 \u2264 d, 0 \u2264 j < j \u2032 \u2264 d, and each t \u2208 [k], let B[i, i \u2032 , j, j \u2032 , t] be the maximum value z such that there exists an s-separated guillotine partition of [x i , x i \u2032 ] \u00d7 [y j , y j \u2032 ] into t grid-rectangles in which the value of each rectangle is at least z. We can compute the O(k/\u03b5 4 ) entries of B by dynamic programming as follows.\nFor each 0 \u2264 i < i \u2032 \u2264 d and 0 \u2264 j < j \u2032 \u2264 d, we set B[i, i \u2032 , j, j \u2032 , 1] to the value of the rectangle [x i , x i \u2032 ] \u00d7 [y j , y j \u2032 ]. To compute B[i, i \u2032 , j, j \u2032 , t] with t > 1, we consider the following options:\n(i) splitting [x i , x i \u2032 ] \u00d7 [y j , y j \u2032 ] horizontally, i.e., picking some integer t \u2032 with 0 < t \u2032 < t, as well as some integer \u2113 with j < \u2113 < j \u2032 , finding the smallest value \u2113 \u2032 with \u2113 < \u2113 \u2032 < j \u2032 such that y \u2113 \u2032 \u2212 y \u2113 \u2265 s, and computing min{B[i, i \u2032 , j, \u2113, t \u2032 ], B[i, i \u2032 , \u2113 \u2032 , j \u2032 , t \u2212 t \u2032 ]}; and\n(ii) splitting [x i , x i \u2032 ] \u00d7 [y j , y j \u2032 ] vertically, i.e., picking some integer t \u2032 with 0 < t \u2032 < t, as well as some integer r with i < r < i \u2032 , finding the smallest value r \u2032 with r < r \u2032 < i \u2032 such that x r \u2032 \u2212 x r \u2265 s, and computing min{B[i, r, j, j \u2032 , t \u2032 ], B[r \u2032 , i \u2032 , j, j \u2032 , t \u2212 t \u2032 ]}.\nThe value B[i, i \u2032 , j, j \u2032 , t] is obtained by considering all O(k/\u03b5) solutions of this form (iterating over all choices of t \u2032 and all possible values of \u2113 and r in (i) and (ii)) and finding the best one; we set B[i, i \u2032 , j, j \u2032 , t] = 0 if no such split is feasible. Now, suppose that B[0, d, 0, d, k] = z, and let P be the associated partition, which can be computed by standard dynamic programming techniques [Cormen et al., 2009, Chapter 15]. By construction, P is an s-separated guillotine partition, i's value for each rectangle in P is at least z, and this is the highest minimum-value attainable by an s-separated guillotine partition into grid-rectangles. By Claim 5, we have z \u2265 V \u2212 \u03b5.\nIt follows that, in the partition output by the dynamic program, agent i values each rectangle at least V \u2212 \u03b5.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "C.2. General partitions", "text": "Next, we present an alternative algorithm for finding an approximate maximin partition, that does not involve guillotine partitions. Instead, we use an approximation algorithm for the problem of maximum independent set of rectangles (MISR). An instance of MISR consists of a set A of axis-parallel rectangles. The goal is to find a largest subset of A in which all rectangles are pairwise-disjoint. This is an NP-hard problem, but it has various polynomial-time approximation algorithms. The most recent one is a 3-factor approximation algorithm by G\u00e1lvez et al. [2022].\nLemma C.2. Given a rectangular land-subset, a value function v, an integer k \u2265 2, and real numbers r \u2265 0 and \u03b5 > 0, it is possible to decide in time polynomial in k and 1/\u03b5 which of the following two options holds:\n\u2022 MMS k,s \u2265 r;\n\u2022 MMS 3k,s < r + \u03b5.\n(At least one option must hold; if both options hold, it suffices to return one of them.) If we return the first option, we can output an s-separated partition into k rectangles such that each part has value at least r as well.\nProof. We perform the discretization step as in the proof of Theorem C.1-this yields O(1/\u03b5 2 ) grid-points and therefore O(1/\u03b5 4 ) grid-rectangles. Let Z be the set of all gridrectangles with value at least r. Replace each rectangle R \u2208 Z with Wrap(R, s) defined in the proof of Theorem 5.6, and apply the algorithm of G\u00e1lvez et al. [2022] to Z.\nCase 1 : The algorithm finds a subset Z \u2032 \u2286 Z with at least k rectangles. By removing the wrapping from each rectangle in Z \u2032 , we get an s-separated partition with k rectangles of value at least r each. Hence, we can return that MMS k,s \u2265 r along with the partition.\nCase 2 : The algorithm finds a subset with fewer than k rectangles. Due to the approximation guarantee of the algorithm, any subset of pairwise-disjoint rectangles in Z contains fewer than 3k rectangles. This implies that there is no subset of 3k sseparated grid-rectangles with value at least r each. By Claim 5, there is no subset of 3k s-separated rectangles with value at least r + \u03b5 each. Hence, we can return that MMS 3k,s < r + \u03b5.\nTheorem C.3. Given a rectangular land-subset L, a value function v normalized so that v(L) = 1, an integer k \u2265 2, and a real number \u03b5 > 0, it is possible to compute in", "publication_ref": ["b32", "b32"], "figure_ref": [], "table_ref": []}, {"heading": "Acknowledgments", "text": "This work was partially supported by the European Research Council (ERC) under grant number 639945 (ACCORD), by the Israel Science Foundation under grant number 712/20, by the Singapore Ministry of Education under grant number MOE-T2EP20221-0001, and by an NUS Start-up Grant. We would like to thank Kshitij Gajjar for his insights and references regarding guillotine partitions, Alex Ravsky for his insights regarding rainbow independent sets, Qiaochu Yuan for mathematical help, and the anonymous reviewers of the 30th International Joint Conference on Artificial Intelligence (IJ-CAI 2021) and Computational Geometry: Theory and Applications for their valuable comments and suggestions.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "A. Improved Bounds for Three and Four Agents", "text": "In the case of three agents, Theorem 5.13 implies a guarantee of MMS 17 i . We improve this guarantee in the following theorem.\nTheorem A.1. For every land division instance with a rectangular land and n = 3 agents, there exists an s-separated allocation in which each agent i receives an axisaligned rectangle with value at least MMS 14 i .\nProof. Fix a 1-out-of-14 maximin partition for each agent. We consider two cases. Case 1 : All agents have a vertical 1:3-rectangle cut. Implement the leftmost such cut and give the rectangle to its left to the leftmost cutter, breaking ties arbitrarily. Each of the other two agents has at least three MMS-rectangles in the remaining land, so we can divide the land between them using Theorem 5.9.\nCase 2 : At least one agent, say Alice, has no vertical 1:3-rectangle cut. Then by Lemma 5.8, she has a vertical d-rectangle stack, where d \u2265 12.\nDenote the y-coordinates of the top sides (resp., bottom sides) of the rectangles in the stack, from bottom to top, by (t j ) j\u2208\nFor each j \u2208 [d], the rectangle R(0, t j ) contains the first j value-1 + rectangles in the stack counting from the bottom. Denote by H(j) the set of agents whose value for R(0, t j ) is at least V req (2).\nWe have H(j) \u2286 H(j \u2032 ) whenever j \u2032 > j, and so the sequence (|H(j\nCrucially, the agents not in H(z + 1) = H(z) value R(0, t z+1 ) less than V req (2), so they value R(b z+1 , 1) more than 14 \u2212 V req (2) \u2265 7.\nWe consider four subcases based on the value of |H(z)| = |H(z + 1)|. For readability we set R \u2212 := R(0, t z ) and R + := R(b z+1 , 1).\n\u2022 |H(z)| = |H(z + 1)| = 0. Then all agents value R + more than 7. Give R \u2212 to Alice (who values it at least 1), and divide R + between the other two agents using Lemma 5.12.\n\u2022 |H(z)| = |H(z + 1)| = 1. Then give R \u2212 to the agent in H(z) (who values it at least 7), and divide R + between the other two agents, who value it more than 7 each, using Lemma 5.12. (Note that this is where we need 14 in the theorem statement.)\nThen divide R \u2212 between the two agents in H(z) using Lemma 5.12, and give R + to the agent not in H(z), who values it more than 14 \u2212 7 > 1.\n\u2022 |H(z)| = |H(z +1)| = 3. Give R + to Alice (who values it at least 1), and divide R \u2212 between the other two agents (who value it at least V req (2) each) using Lemma 5.12.\nClaim 4. If |H(j, 3)| = |H(j + 1, 3)| = 4 for some 1 \u2264 j \u2264 d \u2212 1, then we are done.\nProof. All n agents value R(0, t j ) at least V req (3). We can allocate R(b j+1 , 1) to Alice, who values it at least 1, and R(0, t j ) to the remaining three agents.\nWe are now ready to complete the proof of Theorem A.2. Since |H(j, z)| has only n + 1 = 5 possible values and d \u2265 16, there must be a set H(j, 2) repeated at least four times in succession, i.e., there exists a j 2 such that H(j 2 , 2) = H(j 2 + 1, 2) = H(j 2 + 2, 2) = H(j 2 + 3, 2). We denote by m the size of this repeating set (if there is more than one such set, we pick one arbitrarily). We proceed in cases.\n\u2022 If m = 0, then by Claim 3 we are done.\n\u2022 If m = 1, then by Claim 2 we are done.\n\u2022 If m = 2, then by Claim 1 we are done.\n\u2022 If m = 3 or 4, then we proceed by the value of |H(j 2 + 1, 3)|:\n-If |H(j 2 + 1, 3)| \u2264 2, then H(j 2 + 1, 3) H(j 2 + 1, 2) = H(j 2 , 2). Give R(0, t j 2 ) to a pair of agents in H(j 2 , 2), ensuring that this pair includes all of the agents in H(j 2 + 1, 3). Give R(b j 2 +1 , 1) to the other two agents, who are not in H(j 2 + 1, 3) and therefore value R(b\n3, 3)|, which is non-decreasing, contains only the numbers 3 and 4. Hence, one of these numbers must appear at least twice in succession. If this repeating number is 3, then by Claim 1 we are done. Else, this number is 4, and by Claim 4 we are again done.", "publication_ref": [], "figure_ref": [], "table_ref": []}, {"heading": "B. Rectangle MMS vs. Fat-Rectangle MMS", "text": "For the following discussion, we focus on the value function of a single agent and assume that the land is the unit square\nMMS with respect to r-fat rectangles, where k \u2265 1 is an integer and r \u2265 1 a real number; in particular, MMS k [1] is the MMS with respect to squares. Denote by MMS k [\u221e] the agent's MMS with respect to arbitrary rectangles. Obviously,\nWhen s = 0, Segal-Halevi et al. [2017] proved that there always exists a collection of k non-overlapping squares such that the value of each square is at least 1/(2k) times the value of the land. Since MMS k [\u221e] is at most 1/k times the value of the land, we have that\nfor any r \u2265 1. However, the following proposition shows that a similar result does not hold when s > 0, even for the case k = 2. Proposition B.1. Assume that the land is the unit square [0, 1] \u00d7 [0, 1]. For any r \u2265 1, \u03b5 > 0, and s \u2208 (0, 1), there exists a value function such that MMS\ntime polynomial in k and 1/\u03b5 an s-separated partition into k rectangles with value at least MMS 3k,s \u2212 \u03b5 each.\nProof. We proceed by binary search. Specifically, we maintain an interval I = [r 1 , r 2 ] such that MMS k,s \u2265 r 1 and MMS 3k,s < r 2 + \u03b5/2. Initially, we set I := [0, 1]; since v(L) = 1, this choice indeed satisfies the two inequalities. Then, we iterate the following procedure:\n\u2022 Let r be the midpoint of I;\n\u2022 Apply the algorithm of Lemma C.2 (using \u03b5/2 instead of \u03b5);\n\u2022 If the algorithm returns that MMS k,s \u2265 r, then set the left endpoint of I to r, and keep the resulting partition into k rectangles;\n\u2022 Otherwise (i.e., the algorithm returns that MMS 3k,s < r + \u03b5/2), set the right endpoint of I to r.\nAfter O(log(1/\u03b5)) iterations, we have an interval of length at most \u03b5/2; denote it by [r, r + d], where d \u2264 \u03b5/2. By construction, MMS 3k,s < (r + d) + \u03b5/2 \u2264 r + \u03b5, and we have an s-separated partition into k rectangles of value at least r > MMS 3k,s \u2212 \u03b5.", "publication_ref": [], "figure_ref": [], "table_ref": []}], "references": [{"ref_id": "b0", "title": "On guillotine cutting sequences", "journal": "", "year": "2015", "authors": "Fidaa Abed; Parinya Chalermsook; Jos\u00e9 R Correa; Andreas Karrenbauer; Pablo P\u00e9rez-Lantero; Jos\u00e9 A Soto; Andreas Wiese"}, {"ref_id": "b1", "title": "The number of guillotine partitions in d dimensions", "journal": "Information Processing Letters", "year": "2006", "authors": "Eyal Ackerman; Gill Barequet; Ron Y Pinter; Dan Romik"}, {"ref_id": "b2", "title": "Approximation schemes for maximum weight independent set of rectangles", "journal": "", "year": "2013", "authors": "Anna Adamaszek; Andreas Wiese"}, {"ref_id": "b3", "title": "Computing depth orders for fat objects and related problems", "journal": "Computational Geometry", "year": "1995", "authors": "K Pankaj; Matthew J Agarwal; Micha Katz;  Sharir"}, {"ref_id": "b4", "title": "Label placement by maximum independent set in rectangles", "journal": "Computational Geometry", "year": "1998", "authors": "K Pankaj; Marc Agarwal; Subhash Van Kreveld;  Suri"}, {"ref_id": "b5", "title": "Rainbow independent sets in certain classes of graphs", "journal": "", "year": "2019", "authors": "Ron Aharoni; Joseph Briggs; Jinha Kim; Minki Kim"}, {"ref_id": "b6", "title": "Algorithms for fair partitioning of convex polygons", "journal": "Theoretical Computer Science", "year": "2015", "authors": "Bogdan Armaselu; Ovidiu Daescu"}, {"ref_id": "b7", "title": "Cut equivalence of d-dimensional guillotine partitions", "journal": "Discrete Mathematics", "year": "2014", "authors": "Andrei Asinowski; Gill Barequet; Toufik Mansour; Ron Y Pinter"}, {"ref_id": "b8", "title": "Dividing a graphical cake", "journal": "", "year": "2021", "authors": "Xiaohui Bei; Warut Suksompong"}, {"ref_id": "b9", "title": "The price of connectivity in fair division", "journal": "SIAM Journal on Discrete Mathematics", "year": "2022", "authors": "Xiaohui Bei; Ayumi Igarashi; Xinhang Lu; Warut Suksompong"}, {"ref_id": "b10", "title": "A foundation of location theory: Existence of equilibrium, the welfare theorems, and core", "journal": "Journal of Mathematical Economics", "year": "2004", "authors": "Marcus Berliant; Karl Dunz"}, {"ref_id": "b11", "title": "On the fair division of a heterogeneous commodity", "journal": "Journal of Mathematical Economics", "year": "1992", "authors": "Marcus Berliant; William Thomson; Karl Dunz"}, {"ref_id": "b12", "title": "Fair division under cardinality constraints", "journal": "", "year": "2018", "authors": "Arpita Biswas; Siddharth Barman"}, {"ref_id": "b13", "title": "Convex equipartitions via equivariant obstruction theory", "journal": "Israel Journal of Mathematics", "year": "2014", "authors": "V M Pavle;  Blagojevi\u0107; M G\u00fcnter;  Ziegler"}, {"ref_id": "b14", "title": "Ayumi Igarashi, and Dominik Peters. Fair division of a graph", "journal": "", "year": "2017", "authors": "Sylvain Bouveret; Katar\u00edna Cechl\u00e1rov\u00e1; Edith Elkind"}, {"ref_id": "b15", "title": "The combinatorial assignment problem: Approximate competitive equilibrium from equal incomes", "journal": "Journal of Political Economy", "year": "2011", "authors": "Eric Budish"}, {"ref_id": "b16", "title": "Weighted envy-freeness in indivisible item allocation", "journal": "ACM Transactions on Economics and Computation", "year": "2021", "authors": "Mithun Chakraborty; Ayumi Igarashi; Warut Suksompong; Yair Zick"}, {"ref_id": "b17", "title": "Picking sequences and monotonicity in weighted fair division", "journal": "Artificial Intelligence", "year": "2021", "authors": "Mithun Chakraborty; Ulrike Schmidt-Kraepelin; Warut Suksompong"}, {"ref_id": "b18", "title": "Weighted fairness notions for indivisible items revisited", "journal": "", "year": "2022", "authors": "Mithun Chakraborty; Erel Segal-Halevi; Warut Suksompong"}, {"ref_id": "b19", "title": "Maximum independent set of rectangles", "journal": "", "year": "2009", "authors": "Parinya Chalermsook; Julia Chuzhoy"}, {"ref_id": "b20", "title": "Coloring and maximum weight independent set of rectangles", "journal": "", "year": "2021", "authors": "Parinya Chalermsook; Bartosz Walczak"}, {"ref_id": "b21", "title": "A note on maximum independent sets in rectangle intersection graphs", "journal": "Information Processing Letters", "year": "2004", "authors": "Timothy M Chan"}, {"ref_id": "b22", "title": "An exact algorithm for orthogonal 2-D cutting problems using guillotine cuts", "journal": "European Journal of Operational Research", "year": "1995", "authors": "Nicos Christofides; Eleni Hadjiconstantinou"}, {"ref_id": "b23", "title": "On approximating maximum independent set of rectangles", "journal": "", "year": "2016", "authors": "Julia Chuzhoy; Alina Ene"}, {"ref_id": "b24", "title": "Introduction to Algorithms", "journal": "MIT Press", "year": "2009", "authors": "H Thomas; Charles E Cormen; Ronald L Leiserson; Clifford Rivest;  Stein"}, {"ref_id": "b25", "title": "The complexity of cake cutting with unequal shares", "journal": "ACM Transactions on Algorithms", "year": "2020", "authors": "Agnes Cseh; Tam\u00e1s Fleiner"}, {"ref_id": "b26", "title": "Disputed lands. Games and Economic Behavior", "journal": "", "year": "2009", "authors": "Marco Dall; ' Aglio; Fabio Maccheroni"}, {"ref_id": "b27", "title": "Geometric partitioning algorithms for fair division of geographic resources", "journal": "", "year": "2014", "authors": "Raghuveer Devulapalli"}, {"ref_id": "b28", "title": "How to cut a cake fairly", "journal": "American Mathematical Monthly", "year": "1961", "authors": "E Lester; Edwin H Dubins;  Spanier"}, {"ref_id": "b29", "title": "Graphical cake cutting via maximin share", "journal": "", "year": "2021", "authors": "Edith Elkind; Erel Segal-Halevi; Warut Suksompong"}, {"ref_id": "b30", "title": "Mind the gap: Cake cutting with separation", "journal": "Artificial Intelligence", "year": "2022", "authors": "Edith Elkind; Erel Segal-Halevi; Warut Suksompong"}, {"ref_id": "b31", "title": "Fair partitions of the plane into incongruent pentagons", "journal": "", "year": "2022", "authors": "Dirk Frettl\u00f6h; Christian Richter"}, {"ref_id": "b32", "title": "A 3-approximation algorithm for maximum independent set of rectangles", "journal": "", "year": "2022", "authors": "Waldo G\u00e1lvez; Arindam Khan; Mathieu Mari; Tobias M\u00f6mke; Madhusudhan Reddy Pittu; Andreas Wiese"}, {"ref_id": "b33", "title": "On optimal guillotine partitions approximating optimal d-box partitions", "journal": "Computational Geometry", "year": "1994", "authors": "F Teofilo; Mohammadreza Gonzalez; Man-Tak Razzazi; Si-Qing Shing;  Zheng"}, {"ref_id": "b34", "title": "Polychromatic 4-coloring of guillotine subdivisions", "journal": "Information Processing Letters", "year": "2009", "authors": "Elad Horev; Matthew J Katz; Roi Krakovski; Maarten L\u00f6ffler"}, {"ref_id": "b35", "title": "Equitable allocation of divisible goods", "journal": "Journal of Mathematical Economics", "year": "1999", "authors": "Tatsuro Ichiishi; Adam Idzik"}, {"ref_id": "b36", "title": "Fair division of graphs and of tangled cakes", "journal": "", "year": "2021", "authors": "Ayumi Igarashi; William S Zwicker"}, {"ref_id": "b37", "title": "A procedure for the allocation of two-dimensional resources in a multiagent system", "journal": "International Journal of Cooperative Information Systems", "year": "2009", "authors": "Karthik Iyer; Michael N Huhns"}, {"ref_id": "b38", "title": "3-D vertical ray shooting and 2-D point enclosure, range searching, and arc shooting amidst convex fat objects", "journal": "Computational Geometry", "year": "1997", "authors": "Matthew J Katz"}, {"ref_id": "b39", "title": "Polygon decomposition", "journal": "Elsevier", "year": "2000", "authors": "J Mark Keil"}, {"ref_id": "b40", "title": "On guillotine separability of squares and rectangles", "journal": "", "year": "2020", "authors": "Arindam Khan; Madhusudhan Reddy Pittu"}, {"ref_id": "b41", "title": "Rainbow independent sets on dense graph classes", "journal": "Discrete Applied Mathematics", "year": "2022", "authors": "Jinha Kim; Minki Kim; O-Joung Kwon"}, {"ref_id": "b42", "title": "Fair enough: Guaranteeing approximate maximin shares", "journal": "Journal of the ACM", "year": "2018", "authors": "David Kurokawa; Ariel D Procaccia; Junxing Wang"}, {"ref_id": "b43", "title": "Maximin share allocations on cycles", "journal": "Journal of Artificial Intelligence Research", "year": "2020", "authors": "Zbigniew Lonc; Miroslaw Truszczynski"}, {"ref_id": "b44", "title": "Rainbow independent sets in cycles", "journal": "", "year": "2021", "authors": "Zequn Lv; Mei Lu"}, {"ref_id": "b45", "title": "Rainbow independent sets in graphs with maximum degree two", "journal": "Discrete Applied Mathematics", "year": "2022", "authors": "Yue Ma; Xinmin Hou; Jun Gao; Boyuan Liu; Zhi Yin"}, {"ref_id": "b46", "title": "Characterization and modelling of guillotine constraints", "journal": "European Journal of Operational Research", "year": "2008", "authors": "Chengbin Said Ben Messaoud; Marie-Laure Chu;  Espinouse"}, {"ref_id": "b47", "title": "Approximating maximum independent set for rectangles in the plane", "journal": "", "year": "2022", "authors": "S B Joseph;  Mitchell"}, {"ref_id": "b48", "title": "Fair partitions of polygons: An elementary introduction", "journal": "Proceedings -Mathematical Sciences", "year": "2012", "authors": "R Nandakumar; N ; Ramana Rao"}, {"ref_id": "b49", "title": "Cutting glass", "journal": "", "year": "2000", "authors": "J\u00e1nos Pach; G\u00e1bor Tardos"}, {"ref_id": "b50", "title": "Cake-Cutting Algorithms: Be Fair if You Can", "journal": "Peters/CRC Press", "year": "1998", "authors": "Jack Robertson; William Webb"}, {"ref_id": "b51", "title": "Constrained twodimensional guillotine cutting problem: Upper-bound review and categorization", "journal": "", "year": "2020", "authors": "Mauro Russo; Maurizio Boccia; Antonio Sforza; Claudio Sterle"}, {"ref_id": "b52", "title": "Cake-cutting with different entitlements: How many cuts are needed", "journal": "Journal of Mathematical Analysis and Applications", "year": "2019", "authors": "Erel Segal-Halevi"}, {"ref_id": "b53", "title": "Fair and square: Cake-cutting in two dimensions", "journal": "Journal of Mathematical Economics", "year": "2017", "authors": "Erel Segal-Halevi; Shmuel Nitzan; Avinatan Hassidim; Yonatan Aumann"}, {"ref_id": "b54", "title": "Envy-free division of land", "journal": "Mathematics of Operations Research", "year": "2020", "authors": "Erel Segal-Halevi; Avinatan Hassidim; Yonatan Aumann"}, {"ref_id": "b55", "title": "Fair cake-cutting algorithms with real land-value data", "journal": "Autonomous Agents and Multi-Agent Systems", "year": "", "authors": "Itay Shtechman; Rica Gonen; Erel Segal-Halevi"}, {"ref_id": "b56", "title": "The problem of fair division", "journal": "Econometrica", "year": "1948", "authors": "Hugo Steinhaus"}, {"ref_id": "b57", "title": "How to cut a cake fairly", "journal": "American Mathematical Monthly", "year": "1980", "authors": "Walter Stromquist"}, {"ref_id": "b58", "title": "Constraints in fair division", "journal": "ACM SIGecom Exchanges", "year": "2021", "authors": "Warut Suksompong"}, {"ref_id": "b59", "title": "On maximum weighted Nash welfare for binary valuations", "journal": "Mathematical Social Sciences", "year": "2022", "authors": "Warut Suksompong; Nicholas Teh"}, {"ref_id": "b60", "title": "Floorplan representations: Complexity and connections", "journal": "ACM Transactions on Design Automation of Electronic Systems", "year": "2003", "authors": "Bo Yao; Hongyu Chen; Chung-Kuan Cheng; Ronald Graham"}], "figures": [{"figure_label": "1", "figure_type": "figure", "figure_id": "fig_0", "figure_caption": "Figure 1 .1Figure 1.: Construction in the proof of Lemma 4.1 for n = 2 (left) and n = 3 (right). Each of the first n \u2212 1 sets consists of the black vertices while the n-th set consists of the white vertices. All sides are of length 1.", "figure_data": ""}, {"figure_label": "2", "figure_type": "figure", "figure_id": "fig_1", "figure_caption": "Figure 2 .2Figure 2.: Illustration of the proof of Lemma 5.3 for r = 2. The blue rectangles lie in order vertically and the red rectangles lie in order horizontally.", "figure_data": ""}, {"figure_label": "3", "figure_type": "figure", "figure_id": "fig_2", "figure_caption": "Figure 3 .3Figure 3.: The dark rectangles are s-separated (in the \u2113 \u221e metric) if and only if the light rectangles wrapping them with a rectangle ring of width s/2 are disjoint.", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_4", "figure_caption": "by the pigeonhole principle there exists a z \u2208 {1, . . . , d\u22121} such that |H(z +1)| = |H(z)|, and hence also H(z +1) = H(z).", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_5", "figure_caption": "which may be part of a larger land-subset. We adapt the Cut and Eval queries of the Robertson-Webb model to allow for horizontal and vertical cuts as follows. The Cut i (|, L, \u03b4) query returns a value a such that agent i values the rectangle [a 0 , a] \u00d7 [b 0 , b 1 ] at \u03b4, and the Cut i (\u2212, L, \u03b4) query returns a value b such that agent i values the rectangle [a 0 , a 1 ] \u00d7 [b 0 , b] at \u03b4; we assume that this query returns 'None' if the agent values the entire rectangle less than \u03b4. Similarly, the Eval i (|, L, a) query with a 0 \u2264 a \u2264 a 1 returns the value that i assigns to the rectangle [a 0 , a] \u00d7 [b 0 , b 1 ], whereas the Eval i (\u2212, L, b) query with b 0 \u2264 b \u2264 b 1 returns the value that i assigns to the rectangle [a 0 , a 1 ] \u00d7 [b 0 , b].", "figure_data": ""}, {"figure_label": "5", "figure_type": "figure", "figure_id": "fig_6", "figure_caption": "Figure 5 .5Figure5.: Example of an s-separated partition that is not a guillotine partition. The small space between each pair of 'adjacent' rectangles has length s.", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_7", "figure_caption": "1 forms an s-separated guillotine partition of [a 0 , a] \u00d7 [b 0 , b 1 ] and P 2 forms an s-separated guillotine partition of [a + s, a 1 ] \u00d7 [b 0 , b 1 ]; \u2022 there exists a b with b 0 < b < b 1 \u2212s and a partition of P into two disjoint non-empty collections of rectangles P 1 and P 2 such that P 1 forms an s-separated guillotine partition of [a 0 , a 1 ] \u00d7 [b 0 , b] and P 2 forms an s-separated guillotine partition of [a 0 , a 1 ] \u00d7 [b + s, b 1 ].", "figure_data": ""}, {"figure_label": "6", "figure_type": "figure", "figure_id": "fig_8", "figure_caption": "Figure 6 .6Figure 6.: Example of a guillotine tree for a partition into k = 4 parts.", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_9", "figure_caption": "m) \u2265 GuSN(axis-parallel unit squares, m) \u2265 m 2 and GuSN(axis-parallel squares, m) \u2265 m 81 . Khan and Pittu [2020] improved the lower bound to GuSN(axis-parallel squares, m) \u2265 m 40 ,", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_10", "figure_caption": "Corollary 6.8. (a) When U is the family of axis-parallel squares, for every integerk \u2265 2, we have GuMMS k,s i \u2265 MMS 40k,s i . (b) Let h(m) := m/ log 2 (2m).When U is the family of axis-parallel rectangles, for every integer", "figure_data": ""}, {"figure_label": "", "figure_type": "figure", "figure_id": "fig_11", "figure_caption": "Figure 7.: Construction in the proof of Proposition B.1.", "figure_data": ""}], "formulas": [{"formula_id": "formula_0", "formula_text": "d(A i , A j ) = inf (x,y)\u2208A i ,(x \u2032 ,y \u2032 )\u2208A j max{|x \u2212 x \u2032 |, |y \u2212 y \u2032 |}.", "formula_coordinates": [5.0, 176.64, 296.16, 241.94, 21.01]}, {"formula_id": "formula_1", "formula_text": "MMS k,s i := sup P\u2208\u03a0 k (s) min j\u2208[k] v i (P j ).", "formula_coordinates": [5.0, 225.12, 416.81, 144.98, 23.47]}, {"formula_id": "formula_2", "formula_text": "r \u2022 short(Blue min ) \u2265 long(Blue min ); r \u2022 short(Red min ) \u2265 long(Red min ).", "formula_coordinates": [9.0, 215.4, 609.29, 164.42, 35.37]}, {"formula_id": "formula_3", "formula_text": "[i, i + 1] \u00d7 [1 \u2212 \u03b5, \u2308r\u2309 + \u03b5] for i \u2208 {0, . . . , \u2308r\u2309}, for some \u03b5 > 0. Analogously, the horizontal set contains the rectangles [1 \u2212 \u03b5, \u2308r\u2309 + \u03b5] \u00d7 [i, i + 1] for i \u2208 {0, . . . , \u2308r\u2309}.", "formula_coordinates": [10.0, 89.28, 127.49, 416.68, 32.49]}, {"formula_id": "formula_4", "formula_text": "RISN(r, n) \u2264 (2\u2308r\u2309 + 2)n \u2212 (3\u2308r\u2309 + 2).", "formula_coordinates": [10.0, 204.72, 228.65, 185.78, 18.93]}, {"formula_id": "formula_5", "formula_text": "RISN(r, n) \u2264 (2\u2308r\u2309 + 2)(n \u2212 2) + (\u2308r\u2309 + 2) = (2\u2308r\u2309 + 2)n \u2212 (3\u2308r\u2309 + 2), as claimed.", "formula_coordinates": [11.0, 89.28, 241.61, 376.94, 35.66]}, {"formula_id": "formula_6", "formula_text": "[0, 1] \u00d7 [0, 1].", "formula_coordinates": [12.0, 375.12, 323.57, 59.78, 18.93]}, {"formula_id": "formula_7", "formula_text": "Case 1 : v R \u2265 q.", "formula_coordinates": [14.0, 100.2, 578.81, 76.7, 18.93]}, {"formula_id": "formula_8", "formula_text": "V req (n) \u2264 17 \u2022 2 n\u22123 for all n \u2265 3, since 2n + 4 \u2264 17 \u2022 2 n\u22124 for all n \u2265 4.", "formula_coordinates": [15.0, 110.52, 600.41, 335.06, 20.12]}, {"formula_id": "formula_9", "formula_text": "d \u2265 \u230aV \u230b \u2212 W \u2212 1 2 \u2265 \u230aW + 2n + 4\u230b \u2212 W \u2212 1 2 = n + 2.", "formula_coordinates": [16.0, 157.68, 121.37, 279.86, 26.37]}, {"formula_id": "formula_10", "formula_text": "b 1 b 2 b 3 b 4 b 5 t 1 t 2 t 3 t 4 t 5", "formula_coordinates": [16.0, 222.75, 218.78, 149.23, 106.68]}, {"formula_id": "formula_11", "formula_text": ")|) j\u2208[d] is non-decreasing. Since 0 \u2264 |H(j)| \u2264 n while d \u2265 n + 2,", "formula_coordinates": [16.0, 89.28, 352.04, 416.62, 32.09]}, {"formula_id": "formula_12", "formula_text": "L = [a 0 , a 1 ] \u00d7 [b 0 , b 1 ],", "formula_coordinates": [17.0, 265.44, 301.97, 97.94, 18.93]}, {"formula_id": "formula_13", "formula_text": "P i \u2286 L for each i \u2208 [t]", "formula_coordinates": [18.0, 185.4, 229.73, 105.86, 18.93]}, {"formula_id": "formula_14", "formula_text": "\u2022 T -MMS k,s \u2265 r; \u2022 T -MMS k,s < r + k\u03b5.", "formula_coordinates": [19.0, 105.6, 354.29, 107.74, 35.18]}, {"formula_id": "formula_15", "formula_text": "\u03b2 1 := T 1 -MMS k\u2212k 0 ,s (Right(C)).", "formula_coordinates": [19.0, 342.12, 543.77, 150.86, 13.68]}, {"formula_id": "formula_16", "formula_text": ": Either \u03b2 0 < r + k 0 \u03b5 while \u03b2 1 \u2265 r, or \u03b2 0 \u2265 r while \u03b2 1 < r + (k \u2212 k 0 )\u03b5.", "formula_coordinates": [19.0, 133.92, 640.13, 338.18, 18.93]}, {"formula_id": "formula_17", "formula_text": "(i) C 1 is to the left of C 2 , and v(Left(C 2 )) \u2212 v(Left(C 1 )) < \u03b5; (ii) T 0 -MMS k 0 ,s (Left(C 1 )) < r + k 0 \u03b5 (while T 1 -MMS k\u2212k 0 ,s (Right(C 1 )) \u2265 r); (iii) T 1 -MMS k\u2212k 0 ,s (Right(C 2 )) < r + (k \u2212 k 0 )\u03b5 (while T 0 -MMS k 0 ,s (Left(C 2 )) \u2265 r).", "formula_coordinates": [20.0, 93.48, 149.93, 391.22, 64.05]}, {"formula_id": "formula_18", "formula_text": "GuMMS k,s \u2212 \u03b5 in time O((log(1/\u03b5)) k ).", "formula_coordinates": [20.0, 89.28, 396.53, 188.74, 20.48]}, {"formula_id": "formula_19", "formula_text": "(i) T -MMS k,s \u2265 z for some T ; (ii) T -MMS k,s < z + \u03b5/4 for all T .", "formula_coordinates": [20.0, 96.6, 495.77, 164.78, 35.18]}, {"formula_id": "formula_20", "formula_text": "O((log(1/\u03b5)) k\u22121 \u2022 log(1/\u03b5)) = O((log(1/\u03b5)) k ).", "formula_coordinates": [20.0, 89.28, 649.49, 213.38, 20.12]}, {"formula_id": "formula_22", "formula_text": "GuSN(axis-parallel rectangles, m) \u2265 m 1 + log 2 m = m log 2 (2m)(2)", "formula_coordinates": [22.0, 153.6, 277.16, 352.23, 27.69]}, {"formula_id": "formula_23", "formula_text": "k \u2265 2, GuMMS k,s i \u2265 MMS \u2308h \u22121 (k)\u2309,s i .", "formula_coordinates": [22.0, 154.2, 649.32, 175.3, 22.33]}, {"formula_id": "formula_24", "formula_text": "[0, s] \u00d7 [s + s\u03b5/r, s + 2s\u03b5/r].", "formula_coordinates": [32.0, 165.72, 337.97, 132.14, 18.93]}, {"formula_id": "formula_25", "formula_text": "\u2022 MMS k,s \u2265 r;", "formula_coordinates": [34.0, 105.6, 369.77, 73.78, 20.48]}], "doi": ""}